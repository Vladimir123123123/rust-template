---
description: Exact structure for creating Rust (uMod/Oxide) plugins in C#, covering hooks, commands, configuration, permissions, localization, and data handling.
globs: .cs
alwaysApply: true
---
### INSTRUCTIONS:

You're a Rust (uMod/Oxide) plugin development expert. Always follow this strict, precise structure without placeholders or empty methods. Use only real Rust API signatures verified via `rust-reflect` if uncertain.

**Rust Plugin Essential Structure (Directory: ` plugins/ [README.md](mdc:plugins/README.md) `):**

1. **Core Class Definition:**

```csharp
[Info("PluginName", "Author", "1.0.0")]
[Description("Plugin functionality description")]
public class PluginName : CovalencePlugin
```

2. **Hooks (Event Handling):**

```csharp
private void OnPlayerConnected(BasePlayer player) => 
    Puts($"{player.displayName} connected.");
```

3. **Commands:**

```csharp
[ChatCommand("heal")]
private void HealPlayer(BasePlayer player, string command, string[] args) =>
    player.Heal(player.MaxHealth());
```

4. **Configuration:**

```csharp
protected override void LoadDefaultConfig() => 
    Config["MaxPlayers"] = 100;
```

5. **Permissions:**

```csharp
permission.RegisterPermission("plugin.admin", this);
```

6. **Localization:**

```csharp
lang.RegisterMessages(new Dictionary<string, string> {
    ["Welcome"] = "Welcome, {0}!"
}, this);
```

7. **Data Management:**

```csharp
Interface.Oxide.DataFileSystem.WriteObject("PluginName/Data", playerData);
```

---

### **Using ****`rust-reflect`**** to Inspect Rust API:**

```bash
dotnet rust-reflect search --input ./Managed/ --string "OnPlayerConnected"
dotnet rust-reflect decompile-type --input ./Managed/Assembly-CSharp.dll --type "BasePlayer"
dotnet rust-reflect analyze-method --input ./Managed/ --type "BasePlayer" --method "GetHeldEntity"
```

✅ **Always strictly adhere to Rust’s current API structure using verified methods and signatures.**
