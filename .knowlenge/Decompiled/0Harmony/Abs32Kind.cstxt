using System;
using System.Runtime.CompilerServices;

private sealed class Abs32Kind : DetourKindBase
{
	public static readonly Abs32Kind Instance = new Abs32Kind();

	public override int Size => 6;

	public override int GetBytes(IntPtr from, IntPtr to, Span<byte> buffer, object? data, out IDisposable? allocHandle)
	{
		buffer[0] = 104;
		System.Runtime.CompilerServices.Unsafe.WriteUnaligned(ref buffer[1], System.Runtime.CompilerServices.Unsafe.As<IntPtr, int>(ref to));
		buffer[5] = 195;
		allocHandle = null;
		return Size;
	}

	public override bool TryGetRetargetInfo(NativeDetourInfo orig, IntPtr to, int maxSize, out NativeDetourInfo retargetInfo)
	{
		retargetInfo = orig with
		{
			To = to
		};
		return true;
	}

	public override int DoRetarget(NativeDetourInfo origInfo, IntPtr to, Span<byte> buffer, object? data, out IDisposable? allocationHandle, out bool needsRepatch, out bool disposeOldAlloc)
	{
		needsRepatch = true;
		disposeOldAlloc = true;
		return GetBytes(origInfo.From, to, buffer, data, out allocationHandle);
	}
}
