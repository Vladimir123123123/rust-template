using System;
using System.Collections.Concurrent;
using MonoMod.Core.Interop;

private sealed class AllocMemDelegateHolder
{
	public readonly Core70Runtime Runtime;

	public readonly INativeExceptionHelper? NativeExceptionHelper;

	public readonly GetExceptionSlot? GetNativeExceptionSlot;

	public readonly CoreCLR.InvokeAllocMemPtr InvokeAllocMemPtr;

	public readonly int ICorJitInfoAllocMemIdx;

	public readonly ConcurrentDictionary<IntPtr, (IntPtr M2N, IDisposable?)> AllocMemExceptionHelperCache = new ConcurrentDictionary<IntPtr, (IntPtr, IDisposable)>();

	public unsafe AllocMemDelegateHolder(Core70Runtime runtime, CoreCLR.InvokeAllocMemPtr iamp)
	{
		Runtime = runtime;
		NativeExceptionHelper = runtime.NativeExceptionHelper;
		GetNativeExceptionSlot = NativeExceptionHelper?.GetExceptionSlot;
		InvokeAllocMemPtr = iamp;
		ICorJitInfoAllocMemIdx = Runtime.VtableIndexICorJitInfoAllocMem;
		delegate*<IntPtr, IntPtr, CoreCLR.V70.AllocMemArgs*, void> invokeAllocMem = iamp.InvokeAllocMem;
		_ = IntPtr.Zero;
		_ = IntPtr.Zero;
		_ = 0u;
		/*Error near IL_0069: Handle with invalid row number.*/;
	}

	private IntPtr GetRealInvokePtr(IntPtr ptr)
	{
		if (NativeExceptionHelper == null)
		{
			return ptr;
		}
		IDisposable handle;
		return AllocMemExceptionHelperCache.GetOrAdd(ptr, (IntPtr p) => (M2N: Runtime.EHManagedToNative(p, out handle), handle)).M2N;
	}

	public unsafe void AllocMemHook(IntPtr thisPtr, CoreCLR.V70.AllocMemArgs* args)
	{
		ICorJitInfoWrapper* ptr = (ICorJitInfoWrapper*)(void*)thisPtr;
		IntPtr** wrapped = ptr->Wrapped;
		delegate*<IntPtr, IntPtr, CoreCLR.V70.AllocMemArgs*, void> invokeAllocMem = InvokeAllocMemPtr.InvokeAllocMem;
		GetRealInvokePtr((*wrapped)[ICorJitInfoAllocMemIdx]);
		_ = (IntPtr)wrapped;
		/*Error near IL_003a: Handle with invalid row number.*/;
	}
}
