using System;
using System.Collections.Generic;
using System.Linq;
using System.Reflection;
using HarmonyLib;

internal class AttributePatch
{
	private static readonly HarmonyPatchType[] allPatchTypes = new HarmonyPatchType[5]
	{
		HarmonyPatchType.Prefix,
		HarmonyPatchType.Postfix,
		HarmonyPatchType.Transpiler,
		HarmonyPatchType.Finalizer,
		HarmonyPatchType.ReversePatch
	};

	internal HarmonyMethod info;

	internal HarmonyPatchType? type;

	internal static AttributePatch Create(MethodInfo patch)
	{
		if ((object)patch == null)
		{
			throw new NullReferenceException("Patch method cannot be null");
		}
		object[] customAttributes = patch.GetCustomAttributes(inherit: true);
		string name = patch.Name;
		HarmonyPatchType? patchType = GetPatchType(name, customAttributes);
		if (!patchType.HasValue)
		{
			return null;
		}
		if (patchType != HarmonyPatchType.ReversePatch && !patch.IsStatic)
		{
			throw new ArgumentException("Patch method " + patch.FullDescription() + " must be static");
		}
		List<HarmonyMethod> attributes = (from harmonyInfo in customAttributes.Where((object attr) => attr.GetType().BaseType.FullName == PatchTools.harmonyAttributeFullName).Select(delegate(object attr)
			{
				FieldInfo fieldInfo = AccessTools.Field(attr.GetType(), "info");
				return fieldInfo.GetValue(attr);
			})
			select AccessTools.MakeDeepCopy<HarmonyMethod>(harmonyInfo)).ToList();
		HarmonyMethod harmonyMethod = HarmonyMethod.Merge(attributes);
		harmonyMethod.method = patch;
		return new AttributePatch
		{
			info = harmonyMethod,
			type = patchType
		};
	}

	private static HarmonyPatchType? GetPatchType(string methodName, object[] allAttributes)
	{
		HashSet<string> hashSet = new HashSet<string>(from attr in allAttributes
			select attr.GetType().FullName into name
			where name.StartsWith("Harmony")
			select name);
		HarmonyPatchType? result = null;
		HarmonyPatchType[] array = allPatchTypes;
		for (int i = 0; i < array.Length; i++)
		{
			HarmonyPatchType value = array[i];
			string text = value.ToString();
			if (text == methodName || hashSet.Contains("HarmonyLib.Harmony" + text))
			{
				result = value;
				break;
			}
		}
		return result;
	}
}
