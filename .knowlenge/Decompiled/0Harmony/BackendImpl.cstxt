using System;
using System.Collections.Generic;
using System.Reflection;

private abstract class BackendImpl
{
	protected abstract bool TryOpenLibraryCore(string? name, Assembly assembly, out IntPtr handle);

	public abstract bool TryCloseLibrary(IntPtr handle);

	public abstract bool TryGetExport(IntPtr handle, string name, out IntPtr ptr);

	protected abstract void CheckAndThrowError();

	public virtual bool TryOpenLibrary(string? name, Assembly assembly, out IntPtr handle)
	{
		if (name != null)
		{
			foreach (string item in GetLibrarySearchOrder(name))
			{
				if (TryOpenLibraryCore(item, assembly, out handle))
				{
					return true;
				}
			}
			handle = IntPtr.Zero;
			return false;
		}
		return TryOpenLibraryCore(null, assembly, out handle);
	}

	protected virtual IEnumerable<string> GetLibrarySearchOrder(string name)
	{
		yield return name;
	}

	public virtual IntPtr OpenLibrary(string? name, Assembly assembly)
	{
		if (!TryOpenLibrary(name, assembly, out var handle))
		{
			CheckAndThrowError();
		}
		return handle;
	}

	public virtual void CloseLibrary(IntPtr handle)
	{
		if (!TryCloseLibrary(handle))
		{
			CheckAndThrowError();
		}
	}

	public virtual IntPtr GetExport(IntPtr handle, string name)
	{
		if (!TryGetExport(handle, name, out var ptr))
		{
			CheckAndThrowError();
		}
		return ptr;
	}
}
