using System.Diagnostics;
using System.Threading;

private sealed class Bucket
{
	internal readonly int _bufferLength;

	private readonly T[]?[] _buffers;

	private readonly int _poolId;

	private SpinLock _lock;

	private int _index;

	internal int Id => GetHashCode();

	internal Bucket(int bufferLength, int numberOfBuffers, int poolId)
	{
		_lock = new SpinLock(Debugger.IsAttached);
		_buffers = new T[numberOfBuffers][];
		_bufferLength = bufferLength;
		_poolId = poolId;
	}

	internal T[]? Rent()
	{
		T[][] buffers = _buffers;
		T[] array = null;
		bool lockTaken = false;
		bool flag = false;
		try
		{
			_lock.Enter(ref lockTaken);
			if (_index < buffers.Length)
			{
				array = buffers[_index];
				buffers[_index++] = null;
				flag = array == null;
			}
		}
		finally
		{
			if (lockTaken)
			{
				_lock.Exit(useMemoryBarrier: false);
			}
		}
		if (flag)
		{
			array = new T[_bufferLength];
		}
		return array;
	}

	internal void Return(T[] array)
	{
		if (array.Length != _bufferLength)
		{
			throw new ArgumentException("Buffer not from this pool", "array");
		}
		bool lockTaken = false;
		try
		{
			_lock.Enter(ref lockTaken);
			if (_index != 0)
			{
				_buffers[--_index] = array;
			}
		}
		finally
		{
			if (lockTaken)
			{
				_lock.Exit(useMemoryBarrier: false);
			}
		}
	}
}
