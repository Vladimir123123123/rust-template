using System;
using System.Buffers;
using Iced.Intel;

private sealed class BufferCodeWriter : CodeWriter, IDisposable
{
	private readonly ArrayPool<byte> pool;

	private byte[]? buffer;

	private int pos;

	public ReadOnlyMemory<byte> Data => MemoryExtensions.AsMemory(buffer).Slice(0, pos);

	public BufferCodeWriter()
	{
		pool = ArrayPool<byte>.Shared;
	}

	public override void WriteByte(byte value)
	{
		if (buffer == null)
		{
			buffer = pool.Rent(8);
		}
		if (buffer.Length <= pos)
		{
			byte[] destinationArray = pool.Rent(buffer.Length * 2);
			Array.Copy(buffer, destinationArray, buffer.Length);
			pool.Return(buffer);
			buffer = destinationArray;
		}
		buffer[pos++] = value;
	}

	public void Reset()
	{
		pos = 0;
	}

	public void Dispose()
	{
		if (buffer != null)
		{
			byte[] array = buffer;
			buffer = null;
			pool.Return(array);
		}
	}
}
