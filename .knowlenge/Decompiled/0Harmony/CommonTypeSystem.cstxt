using System;

private sealed class CommonTypeSystem : TypeSystem
{
	private AssemblyNameReference core_library;

	public CommonTypeSystem(ModuleDefinition module)
		: base(module)
	{
	}

	internal override TypeReference LookupType(string @namespace, string name)
	{
		return CreateTypeReference(@namespace, name);
	}

	public AssemblyNameReference GetCoreLibraryReference()
	{
		if (core_library != null)
		{
			return core_library;
		}
		if (module.TryGetCoreLibraryReference(out core_library))
		{
			return core_library;
		}
		core_library = new AssemblyNameReference
		{
			Name = "mscorlib",
			Version = GetCorlibVersion(),
			PublicKeyToken = new byte[8] { 183, 122, 92, 86, 25, 52, 224, 137 }
		};
		module.AssemblyReferences.Add(core_library);
		return core_library;
	}

	private Version GetCorlibVersion()
	{
		switch (module.Runtime)
		{
		case TargetRuntime.Net_1_0:
		case TargetRuntime.Net_1_1:
			return new Version(1, 0, 0, 0);
		case TargetRuntime.Net_2_0:
			return new Version(2, 0, 0, 0);
		case TargetRuntime.Net_4_0:
			return new Version(4, 0, 0, 0);
		default:
			throw new NotSupportedException();
		}
	}

	private TypeReference CreateTypeReference(string @namespace, string name)
	{
		return new TypeReference(@namespace, name, module, GetCoreLibraryReference());
	}
}
