using System.Collections.Generic;
using System.Runtime.CompilerServices;

internal struct ComparerComparable<T, TComparer> : IComparable<T> where TComparer : IComparer<T>
{
	private readonly T _value;

	private readonly TComparer _comparer;

	public ComparerComparable(T value, TComparer comparer)
	{
		_value = value;
		_comparer = comparer;
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public int CompareTo(T? other)
	{
		return _comparer.Compare(_value, other);
	}
}
