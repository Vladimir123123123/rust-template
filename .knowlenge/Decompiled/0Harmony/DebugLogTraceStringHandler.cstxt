using System;
using System.Runtime.CompilerServices;
using MonoMod.Logs;

[InterpolatedStringHandler]
internal ref struct DebugLogTraceStringHandler
{
	internal DebugLogInterpolatedStringHandler handler;

	public DebugLogTraceStringHandler(int literalLen, int formattedCount, out bool isEnabled)
	{
		handler = new DebugLogInterpolatedStringHandler(literalLen, formattedCount, LogLevel.Trace, out isEnabled);
	}

	public override string ToString()
	{
		return handler.ToString();
	}

	public string ToStringAndClear()
	{
		return handler.ToStringAndClear();
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void AppendLiteral(string s)
	{
		handler.AppendLiteral(s);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void AppendFormatted(string? s)
	{
		handler.AppendFormatted(s);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void AppendFormatted(string? s, int alignment = 0, string? format = null)
	{
		handler.AppendFormatted(s, alignment, format);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void AppendFormatted(ReadOnlySpan<char> s)
	{
		handler.AppendFormatted(s);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void AppendFormatted(ReadOnlySpan<char> s, int alignment = 0, string? format = null)
	{
		handler.AppendFormatted(s, alignment, format);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void AppendFormatted<T>(T value)
	{
		handler.AppendFormatted(value);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void AppendFormatted<T>(T value, int alignment)
	{
		handler.AppendFormatted(value, alignment);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void AppendFormatted<T>(T value, string? format)
	{
		handler.AppendFormatted(value, format);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void AppendFormatted<T>(T value, int alignment, string? format)
	{
		handler.AppendFormatted(value, alignment, format);
	}
}
