using System.Runtime.ConstrainedExecution;
using System.Runtime.InteropServices;
using System.Threading;

private sealed class DependentHolder : CriticalFinalizerObject
{
	public GCHandle TargetHandle;

	private IntPtr dependent;

	public object? Dependent
	{
		get
		{
			return GCHandle.FromIntPtr(dependent).Target;
		}
		set
		{
			IntPtr value2 = GCHandle.ToIntPtr(GCHandle.Alloc(value, GCHandleType.Normal));
			IntPtr intPtr;
			do
			{
				intPtr = dependent;
			}
			while (Interlocked.CompareExchange(ref dependent, value2, intPtr) == intPtr);
			GCHandle.FromIntPtr(intPtr).Free();
		}
	}

	public DependentHolder(GCHandle targetHandle, object dependent)
	{
		TargetHandle = targetHandle;
		this.dependent = GCHandle.ToIntPtr(GCHandle.Alloc(dependent, GCHandleType.Normal));
	}

	~DependentHolder()
	{
		if (!AppDomain.CurrentDomain.IsFinalizingForUnload() && (!Environment.HasShutdownStarted && (TargetHandle.IsAllocated && TargetHandle.Target != null)))
		{
			GC.ReRegisterForFinalize(this);
		}
		else
		{
			GCHandle.FromIntPtr(dependent).Free();
		}
	}
}
