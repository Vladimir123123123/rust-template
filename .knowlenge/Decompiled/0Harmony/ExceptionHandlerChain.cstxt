using System;
using System.Reflection.Emit;
using Mono.Cecil.Cil;

private class ExceptionHandlerChain
{
	private readonly CecilILGenerator IL;

	private readonly Label _Start;

	public readonly Label SkipAll;

	private Label _SkipHandler;

	private LabelledExceptionHandler? _Prev;

	private LabelledExceptionHandler? _Handler;

	public ExceptionHandlerChain(CecilILGenerator il)
	{
		IL = il;
		_Start = il.DefineLabel();
		il.MarkLabel(_Start);
		SkipAll = il.DefineLabel();
	}

	public LabelledExceptionHandler BeginHandler(ExceptionHandlerType type)
	{
		LabelledExceptionHandler labelledExceptionHandler = (_Prev = _Handler);
		if (labelledExceptionHandler != null)
		{
			EndHandler(labelledExceptionHandler);
		}
		IL.Emit(System.Reflection.Emit.OpCodes.Leave, _SkipHandler = IL.DefineLabel());
		Label label = IL.DefineLabel();
		IL.MarkLabel(label);
		LabelledExceptionHandler labelledExceptionHandler2 = (_Handler = new LabelledExceptionHandler
		{
			TryStart = _Start,
			TryEnd = label,
			HandlerType = type,
			HandlerEnd = _SkipHandler
		});
		if (type == ExceptionHandlerType.Filter)
		{
			labelledExceptionHandler2.FilterStart = label;
		}
		else
		{
			labelledExceptionHandler2.HandlerStart = label;
		}
		return labelledExceptionHandler2;
	}

	public void EndHandler(LabelledExceptionHandler handler)
	{
		Label skipHandler = _SkipHandler;
		switch (handler.HandlerType)
		{
		case ExceptionHandlerType.Filter:
			IL.Emit(System.Reflection.Emit.OpCodes.Endfilter);
			break;
		case ExceptionHandlerType.Finally:
			IL.Emit(System.Reflection.Emit.OpCodes.Endfinally);
			break;
		default:
			IL.Emit(System.Reflection.Emit.OpCodes.Leave, skipHandler);
			break;
		}
		IL.MarkLabel(skipHandler);
		IL._ExceptionHandlersToMark.Add(handler);
	}

	public void End()
	{
		EndHandler(_Handler ?? throw new InvalidOperationException("Cannot end when there is no current handler!"));
		IL.MarkLabel(SkipAll);
	}
}
