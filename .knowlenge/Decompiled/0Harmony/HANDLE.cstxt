using System;

public readonly struct HANDLE : IComparable, IComparable<HANDLE>, IEquatable<HANDLE>, IFormattable
{
	public unsafe readonly void* Value;

	public unsafe static HANDLE INVALID_VALUE => new HANDLE((void*)(-1));

	public static HANDLE NULL => new HANDLE(null);

	public unsafe HANDLE(void* value)
	{
		Value = value;
	}

	public unsafe static bool operator ==(HANDLE left, HANDLE right)
	{
		return left.Value == right.Value;
	}

	public unsafe static bool operator !=(HANDLE left, HANDLE right)
	{
		return left.Value != right.Value;
	}

	public unsafe static bool operator <(HANDLE left, HANDLE right)
	{
		return left.Value < right.Value;
	}

	public unsafe static bool operator <=(HANDLE left, HANDLE right)
	{
		return left.Value <= right.Value;
	}

	public unsafe static bool operator >(HANDLE left, HANDLE right)
	{
		return left.Value > right.Value;
	}

	public unsafe static bool operator >=(HANDLE left, HANDLE right)
	{
		return left.Value >= right.Value;
	}

	public unsafe static explicit operator HANDLE(void* value)
	{
		return new HANDLE(value);
	}

	public unsafe static implicit operator void*(HANDLE value)
	{
		return value.Value;
	}

	public unsafe static explicit operator HANDLE(byte value)
	{
		return new HANDLE((void*)value);
	}

	public unsafe static explicit operator byte(HANDLE value)
	{
		return (byte)value.Value;
	}

	public unsafe static explicit operator HANDLE(short value)
	{
		return new HANDLE((void*)value);
	}

	public unsafe static explicit operator short(HANDLE value)
	{
		return (short)value.Value;
	}

	public unsafe static explicit operator HANDLE(int value)
	{
		return new HANDLE((void*)value);
	}

	public unsafe static explicit operator int(HANDLE value)
	{
		return (int)value.Value;
	}

	public unsafe static explicit operator HANDLE(long value)
	{
		return new HANDLE((void*)value);
	}

	public unsafe static explicit operator long(HANDLE value)
	{
		return (long)value.Value;
	}

	public unsafe static explicit operator HANDLE(nint value)
	{
		return new HANDLE((void*)value);
	}

	public unsafe static implicit operator nint(HANDLE value)
	{
		return (nint)value.Value;
	}

	public unsafe static explicit operator HANDLE(sbyte value)
	{
		return new HANDLE((void*)value);
	}

	public unsafe static explicit operator sbyte(HANDLE value)
	{
		return (sbyte)value.Value;
	}

	public unsafe static explicit operator HANDLE(ushort value)
	{
		return new HANDLE((void*)value);
	}

	public unsafe static explicit operator ushort(HANDLE value)
	{
		return (ushort)value.Value;
	}

	public unsafe static explicit operator HANDLE(uint value)
	{
		return new HANDLE((void*)value);
	}

	public unsafe static explicit operator uint(HANDLE value)
	{
		return (uint)value.Value;
	}

	public unsafe static explicit operator HANDLE(ulong value)
	{
		return new HANDLE((void*)value);
	}

	public unsafe static explicit operator ulong(HANDLE value)
	{
		return (ulong)value.Value;
	}

	public unsafe static explicit operator HANDLE(nuint value)
	{
		return new HANDLE((void*)value);
	}

	public unsafe static implicit operator nuint(HANDLE value)
	{
		return (nuint)value.Value;
	}

	public int CompareTo(object? obj)
	{
		if (obj is HANDLE other)
		{
			return CompareTo(other);
		}
		if (obj != null)
		{
			throw new ArgumentException("obj is not an instance of HANDLE.");
		}
		return 1;
	}

	public unsafe int CompareTo(HANDLE other)
	{
		if (sizeof(IntPtr) != 4)
		{
			return ((ulong)Value).CompareTo((ulong)other.Value);
		}
		return ((uint)Value).CompareTo((uint)other.Value);
	}

	public override bool Equals(object? obj)
	{
		if (obj is HANDLE other)
		{
			return Equals(other);
		}
		return false;
	}

	public unsafe bool Equals(HANDLE other)
	{
		UIntPtr value = (UIntPtr)Value;
		return value.Equals((nuint)other.Value);
	}

	public unsafe override int GetHashCode()
	{
		UIntPtr value = (UIntPtr)Value;
		return value.GetHashCode();
	}

	public unsafe override string ToString()
	{
		if (sizeof(UIntPtr) != 4)
		{
			return ((ulong)Value).ToString("X16", null);
		}
		return ((uint)Value).ToString("X8", null);
	}

	public unsafe string ToString(string? format, IFormatProvider? formatProvider)
	{
		if (sizeof(IntPtr) != 4)
		{
			return ((ulong)Value).ToString(format, formatProvider);
		}
		return ((uint)Value).ToString(format, formatProvider);
	}
}
