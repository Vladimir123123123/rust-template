using System;

public readonly struct HMODULE : IComparable, IComparable<HMODULE>, IEquatable<HMODULE>, IFormattable
{
	public unsafe readonly void* Value;

	public unsafe static HMODULE INVALID_VALUE => new HMODULE((void*)(-1));

	public static HMODULE NULL => new HMODULE(null);

	public unsafe HMODULE(void* value)
	{
		Value = value;
	}

	public unsafe static bool operator ==(HMODULE left, HMODULE right)
	{
		return left.Value == right.Value;
	}

	public unsafe static bool operator !=(HMODULE left, HMODULE right)
	{
		return left.Value != right.Value;
	}

	public unsafe static bool operator <(HMODULE left, HMODULE right)
	{
		return left.Value < right.Value;
	}

	public unsafe static bool operator <=(HMODULE left, HMODULE right)
	{
		return left.Value <= right.Value;
	}

	public unsafe static bool operator >(HMODULE left, HMODULE right)
	{
		return left.Value > right.Value;
	}

	public unsafe static bool operator >=(HMODULE left, HMODULE right)
	{
		return left.Value >= right.Value;
	}

	public unsafe static explicit operator HMODULE(void* value)
	{
		return new HMODULE(value);
	}

	public unsafe static implicit operator void*(HMODULE value)
	{
		return value.Value;
	}

	public static explicit operator HMODULE(HANDLE value)
	{
		return new HMODULE(value);
	}

	public unsafe static implicit operator HANDLE(HMODULE value)
	{
		return new HANDLE(value.Value);
	}

	public unsafe static explicit operator HMODULE(byte value)
	{
		return new HMODULE((void*)value);
	}

	public unsafe static explicit operator byte(HMODULE value)
	{
		return (byte)value.Value;
	}

	public unsafe static explicit operator HMODULE(short value)
	{
		return new HMODULE((void*)value);
	}

	public unsafe static explicit operator short(HMODULE value)
	{
		return (short)value.Value;
	}

	public unsafe static explicit operator HMODULE(int value)
	{
		return new HMODULE((void*)value);
	}

	public unsafe static explicit operator int(HMODULE value)
	{
		return (int)value.Value;
	}

	public unsafe static explicit operator HMODULE(long value)
	{
		return new HMODULE((void*)value);
	}

	public unsafe static explicit operator long(HMODULE value)
	{
		return (long)value.Value;
	}

	public unsafe static explicit operator HMODULE(nint value)
	{
		return new HMODULE((void*)value);
	}

	public unsafe static implicit operator nint(HMODULE value)
	{
		return (nint)value.Value;
	}

	public unsafe static explicit operator HMODULE(sbyte value)
	{
		return new HMODULE((void*)value);
	}

	public unsafe static explicit operator sbyte(HMODULE value)
	{
		return (sbyte)value.Value;
	}

	public unsafe static explicit operator HMODULE(ushort value)
	{
		return new HMODULE((void*)value);
	}

	public unsafe static explicit operator ushort(HMODULE value)
	{
		return (ushort)value.Value;
	}

	public unsafe static explicit operator HMODULE(uint value)
	{
		return new HMODULE((void*)value);
	}

	public unsafe static explicit operator uint(HMODULE value)
	{
		return (uint)value.Value;
	}

	public unsafe static explicit operator HMODULE(ulong value)
	{
		return new HMODULE((void*)value);
	}

	public unsafe static explicit operator ulong(HMODULE value)
	{
		return (ulong)value.Value;
	}

	public unsafe static explicit operator HMODULE(nuint value)
	{
		return new HMODULE((void*)value);
	}

	public unsafe static implicit operator nuint(HMODULE value)
	{
		return (nuint)value.Value;
	}

	public int CompareTo(object? obj)
	{
		if (obj is HMODULE other)
		{
			return CompareTo(other);
		}
		if (obj != null)
		{
			throw new ArgumentException("obj is not an instance of HMODULE.");
		}
		return 1;
	}

	public unsafe int CompareTo(HMODULE other)
	{
		if (sizeof(IntPtr) != 4)
		{
			return ((ulong)Value).CompareTo((ulong)other.Value);
		}
		return ((uint)Value).CompareTo((uint)other.Value);
	}

	public override bool Equals(object? obj)
	{
		if (obj is HMODULE other)
		{
			return Equals(other);
		}
		return false;
	}

	public unsafe bool Equals(HMODULE other)
	{
		UIntPtr value = (UIntPtr)Value;
		return value.Equals((nuint)other.Value);
	}

	public unsafe override int GetHashCode()
	{
		UIntPtr value = (UIntPtr)Value;
		return value.GetHashCode();
	}

	public unsafe override string ToString()
	{
		if (sizeof(UIntPtr) != 4)
		{
			return ((ulong)Value).ToString("X16", null);
		}
		return ((uint)Value).ToString("X8", null);
	}

	public unsafe string ToString(string? format, IFormatProvider? formatProvider)
	{
		if (sizeof(IntPtr) != 4)
		{
			return ((ulong)Value).ToString(format, formatProvider);
		}
		return ((uint)Value).ToString(format, formatProvider);
	}
}
