using System;
using MonoMod.Utils;

public struct InstantiatedMethodDesc
{
	[Flags]
	public enum Flags : ushort
	{
		KindMask = 7,
		GenericMethodDefinition = 0,
		UnsharedMethodInstantiation = 1,
		SharedMethodInstantiation = 2,
		WrapperStubWithInstantiations = 3,
		EnCAddedMethod = 7,
		Unrestored = 8,
		HasComPlusCallInfo = 0x10
	}

	public MethodDesc @base;

	public unsafe void* union_pDictLayout_pWrappedMethodDesc;

	public unsafe Dictionary* m_pPerInstInfo;

	public Flags m_wFlags2;

	public ushort m_wNumGenericArgs;

	public unsafe bool IMD_HasMethodInstantiation
	{
		get
		{
			if (!IMD_IsGenericMethodDefinition)
			{
				return m_pPerInstInfo != null;
			}
			return true;
		}
	}

	public bool IMD_IsGenericMethodDefinition => (m_wFlags2 & Flags.KindMask) == 0;

	public bool IMD_IsWrapperStubWithInstantiations => (m_wFlags2 & Flags.KindMask) == Flags.WrapperStubWithInstantiations;

	public bool IMD_HasComPlusCallInfo => m_wFlags2.Has(Flags.HasComPlusCallInfo);

	public unsafe MethodDesc* IMD_GetWrappedMethodDesc()
	{
		Helpers.Assert(IMD_IsWrapperStubWithInstantiations, null, "IMD_IsWrapperStubWithInstantiations");
		return (MethodDesc*)union_pDictLayout_pWrappedMethodDesc;
	}
}
