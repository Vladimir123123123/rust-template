private struct InstructionOffsetResolver
{
	private readonly Instruction[] items;

	private readonly Instruction removed_instruction;

	private readonly Instruction existing_instruction;

	private int cache_offset;

	private int cache_index;

	private Instruction cache_instruction;

	public int LastOffset => cache_offset;

	public InstructionOffsetResolver(Instruction[] instructions, Instruction removedInstruction, Instruction existingInstruction)
	{
		items = instructions;
		removed_instruction = removedInstruction;
		existing_instruction = existingInstruction;
		cache_offset = 0;
		cache_index = 0;
		cache_instruction = items[0];
	}

	public void Restart()
	{
		cache_offset = 0;
		cache_index = 0;
		cache_instruction = items[0];
	}

	public InstructionOffset Resolve(InstructionOffset inputOffset)
	{
		InstructionOffset result = ResolveInstructionOffset(inputOffset);
		if (!result.IsEndOfMethod && result.ResolvedInstruction == removed_instruction)
		{
			result = new InstructionOffset(existing_instruction);
		}
		return result;
	}

	private InstructionOffset ResolveInstructionOffset(InstructionOffset inputOffset)
	{
		if (inputOffset.IsResolved)
		{
			return inputOffset;
		}
		int offset = inputOffset.Offset;
		if (cache_offset == offset)
		{
			return new InstructionOffset(cache_instruction);
		}
		if (cache_offset > offset)
		{
			int num = 0;
			for (int i = 0; i < items.Length; i++)
			{
				if (items[i] == null)
				{
					return new InstructionOffset((i == 0) ? items[0] : items[i - 1]);
				}
				if (num == offset)
				{
					return new InstructionOffset(items[i]);
				}
				if (num > offset)
				{
					return new InstructionOffset((i == 0) ? items[0] : items[i - 1]);
				}
				num += items[i].GetSize();
			}
			return default(InstructionOffset);
		}
		int num2 = cache_offset;
		for (int j = cache_index; j < items.Length; j++)
		{
			cache_index = j;
			cache_offset = num2;
			Instruction instruction = items[j];
			if (instruction == null)
			{
				return new InstructionOffset((j == 0) ? items[0] : items[j - 1]);
			}
			cache_instruction = instruction;
			if (cache_offset == offset)
			{
				return new InstructionOffset(cache_instruction);
			}
			if (cache_offset > offset)
			{
				return new InstructionOffset((j == 0) ? items[0] : items[j - 1]);
			}
			num2 += instruction.GetSize();
		}
		return default(InstructionOffset);
	}
}
