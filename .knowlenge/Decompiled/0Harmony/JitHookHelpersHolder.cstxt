using System;
using System.Linq;
using System.Reflection;
using System.Reflection.Emit;
using Mono.Cecil;
using MonoMod.Utils;

protected sealed class JitHookHelpersHolder
{
	public delegate object MethodHandle_GetLoaderAllocatorD(IntPtr methodHandle);

	public delegate object CreateRuntimeMethodInfoStubD(IntPtr methodHandle, object loaderAllocator);

	public delegate RuntimeMethodHandle CreateRuntimeMethodHandleD(object runtimeMethodInfo);

	public delegate Type GetDeclaringTypeOfMethodHandleD(IntPtr methodHandle);

	public delegate Type GetTypeFromNativeHandleD(IntPtr handle);

	public readonly MethodHandle_GetLoaderAllocatorD MethodHandle_GetLoaderAllocator;

	public readonly CreateRuntimeMethodInfoStubD CreateRuntimeMethodInfoStub;

	public readonly CreateRuntimeMethodHandleD CreateRuntimeMethodHandle;

	public readonly GetDeclaringTypeOfMethodHandleD GetDeclaringTypeOfMethodHandle;

	public readonly GetTypeFromNativeHandleD GetTypeFromNativeHandle;

	public RuntimeMethodHandle CreateHandleForHandlePointer(IntPtr handle)
	{
		return CreateRuntimeMethodHandle(CreateRuntimeMethodInfoStub(handle, MethodHandle_GetLoaderAllocator(handle)));
	}

	public JitHookHelpersHolder(Core21Runtime runtime)
	{
		MethodInfo method = typeof(RuntimeMethodHandle).GetMethod("GetLoaderAllocator", BindingFlags.Static | BindingFlags.NonPublic);
		MethodInfo method2;
		using (DynamicMethodDefinition dynamicMethodDefinition = new DynamicMethodDefinition("MethodHandle_GetLoaderAllocator", typeof(object), new Type[1] { typeof(IntPtr) }))
		{
			ILGenerator iLGenerator = dynamicMethodDefinition.GetILGenerator();
			Type parameterType = method.GetParameters().First().ParameterType;
			iLGenerator.Emit(OpCodes.Ldarga_S, 0);
			iLGenerator.Emit(OpCodes.Ldobj, parameterType);
			iLGenerator.Emit(OpCodes.Call, method);
			iLGenerator.Emit(OpCodes.Ret);
			method2 = dynamicMethodDefinition.Generate();
		}
		MethodHandle_GetLoaderAllocator = method2.CreateDelegate<MethodHandle_GetLoaderAllocatorD>();
		MethodInfo orCreateGetTypeFromHandleUnsafe = GetOrCreateGetTypeFromHandleUnsafe(runtime);
		GetTypeFromNativeHandle = orCreateGetTypeFromHandleUnsafe.CreateDelegate<GetTypeFromNativeHandleD>();
		Type type = typeof(RuntimeMethodHandle).Assembly.GetType("System.RuntimeMethodHandleInternal");
		MethodInfo method3 = typeof(RuntimeMethodHandle).GetMethod("GetDeclaringType", BindingFlags.Static | BindingFlags.NonPublic, null, new Type[1] { type }, null);
		MethodInfo method4;
		using (DynamicMethodDefinition dynamicMethodDefinition2 = new DynamicMethodDefinition("GetDeclaringTypeOfMethodHandle", typeof(Type), new Type[1] { typeof(IntPtr) }))
		{
			ILGenerator iLGenerator2 = dynamicMethodDefinition2.GetILGenerator();
			iLGenerator2.Emit(OpCodes.Ldarga_S, 0);
			iLGenerator2.Emit(OpCodes.Ldobj, type);
			iLGenerator2.Emit(OpCodes.Call, method3);
			iLGenerator2.Emit(OpCodes.Ret);
			method4 = dynamicMethodDefinition2.Generate();
		}
		GetDeclaringTypeOfMethodHandle = method4.CreateDelegate<GetDeclaringTypeOfMethodHandleD>();
		Type[] array = new Type[2]
		{
			typeof(IntPtr),
			typeof(object)
		};
		Type type2 = typeof(RuntimeMethodHandle).Assembly.GetType("System.RuntimeMethodInfoStub");
		ConstructorInfo constructor = type2.GetConstructor(array);
		MethodInfo method5;
		using (DynamicMethodDefinition dynamicMethodDefinition3 = new DynamicMethodDefinition("new RuntimeMethodInfoStub", type2, array))
		{
			ILGenerator iLGenerator3 = dynamicMethodDefinition3.GetILGenerator();
			iLGenerator3.Emit(OpCodes.Ldarg_0);
			iLGenerator3.Emit(OpCodes.Ldarg_1);
			iLGenerator3.Emit(OpCodes.Newobj, constructor);
			iLGenerator3.Emit(OpCodes.Ret);
			method5 = dynamicMethodDefinition3.Generate();
		}
		CreateRuntimeMethodInfoStub = method5.CreateDelegate<CreateRuntimeMethodInfoStubD>();
		ConstructorInfo con = typeof(RuntimeMethodHandle).GetConstructors(BindingFlags.DeclaredOnly | BindingFlags.Instance | BindingFlags.Public | BindingFlags.NonPublic).First();
		MethodInfo method6;
		using (DynamicMethodDefinition dynamicMethodDefinition4 = new DynamicMethodDefinition("new RuntimeMethodHandle", typeof(RuntimeMethodHandle), new Type[1] { typeof(object) }))
		{
			ILGenerator iLGenerator4 = dynamicMethodDefinition4.GetILGenerator();
			iLGenerator4.Emit(OpCodes.Ldarg_0);
			iLGenerator4.Emit(OpCodes.Newobj, con);
			iLGenerator4.Emit(OpCodes.Ret);
			method6 = dynamicMethodDefinition4.Generate();
		}
		CreateRuntimeMethodHandle = method6.CreateDelegate<CreateRuntimeMethodHandleD>();
	}

	private static MethodInfo GetOrCreateGetTypeFromHandleUnsafe(Core21Runtime runtime)
	{
		MethodInfo method = typeof(Type).GetMethod("GetTypeFromHandleUnsafe", (BindingFlags)(-1));
		if ((object)method != null)
		{
			return method;
		}
		Assembly assembly;
		using (ModuleDefinition moduleDefinition = ModuleDefinition.CreateModule("MonoMod.Core.Platforms.Runtimes.Core30Runtime+Helpers", new ModuleParameters
		{
			Kind = ModuleKind.Dll
		}))
		{
			TypeDefinition typeDefinition = new TypeDefinition("System", "Type", Mono.Cecil.TypeAttributes.Public | Mono.Cecil.TypeAttributes.Abstract)
			{
				BaseType = moduleDefinition.TypeSystem.Object
			};
			moduleDefinition.Types.Add(typeDefinition);
			MethodDefinition methodDefinition = new MethodDefinition("GetTypeFromHandleUnsafe", Mono.Cecil.MethodAttributes.Public | Mono.Cecil.MethodAttributes.Static, moduleDefinition.ImportReference(typeof(Type)))
			{
				IsInternalCall = true
			};
			methodDefinition.Parameters.Add(new ParameterDefinition(moduleDefinition.ImportReference(typeof(IntPtr))));
			typeDefinition.Methods.Add(methodDefinition);
			assembly = ReflectionHelper.Load(moduleDefinition);
		}
		runtime.MakeAssemblySystemAssembly(assembly);
		return assembly.GetType("System.Type").GetMethod("GetTypeFromHandleUnsafe", (BindingFlags)(-1));
	}
}
