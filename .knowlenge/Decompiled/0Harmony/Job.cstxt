using System.Collections.Generic;
using System.Reflection;

internal class Job
{
	internal MethodBase original;

	internal T replacement;

	internal List<HarmonyMethod> prefixes = new List<HarmonyMethod>();

	internal List<HarmonyMethod> postfixes = new List<HarmonyMethod>();

	internal List<HarmonyMethod> transpilers = new List<HarmonyMethod>();

	internal List<HarmonyMethod> finalizers = new List<HarmonyMethod>();

	internal void AddPatch(AttributePatch patch)
	{
		HarmonyPatchType? type = patch.type;
		if (type.HasValue)
		{
			switch (type.GetValueOrDefault())
			{
			case HarmonyPatchType.Prefix:
				prefixes.Add(patch.info);
				break;
			case HarmonyPatchType.Postfix:
				postfixes.Add(patch.info);
				break;
			case HarmonyPatchType.Transpiler:
				transpilers.Add(patch.info);
				break;
			case HarmonyPatchType.Finalizer:
				finalizers.Add(patch.info);
				break;
			}
		}
	}
}
