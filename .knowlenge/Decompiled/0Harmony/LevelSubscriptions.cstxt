using System;
using MonoMod.Utils;

private sealed class LevelSubscriptions
{
	public LogLevelFilter ActiveLevels;

	public LogLevelFilter DetailLevels;

	public readonly OnLogMessage?[] SimpleRegs;

	public readonly OnLogMessageDetailed?[] DetailedRegs;

	private const LogLevelFilter ValidFilter = LogLevelFilter.Spam | LogLevelFilter.Trace | LogLevelFilter.Info | LogLevelFilter.Warning | LogLevelFilter.Error | LogLevelFilter.Assert;

	public static readonly LevelSubscriptions None = new LevelSubscriptions();

	private LevelSubscriptions(LogLevelFilter active, LogLevelFilter detail, OnLogMessage?[] simple, OnLogMessageDetailed?[] detailed)
	{
		ActiveLevels = active | detail;
		DetailLevels = detail;
		SimpleRegs = simple;
		DetailedRegs = detailed;
	}

	private LevelSubscriptions()
	{
		ActiveLevels = LogLevelFilter.None;
		DetailLevels = LogLevelFilter.None;
		SimpleRegs = new OnLogMessage[6];
		DetailedRegs = new OnLogMessageDetailed[SimpleRegs.Length];
	}

	private LevelSubscriptions Clone(bool changingDetail)
	{
		OnLogMessage[] array = SimpleRegs;
		OnLogMessageDetailed[] array2 = DetailedRegs;
		if (!changingDetail)
		{
			array = new OnLogMessage[SimpleRegs.Length];
			Array.Copy(SimpleRegs, array, array.Length);
		}
		else
		{
			array2 = new OnLogMessageDetailed[DetailedRegs.Length];
			Array.Copy(DetailedRegs, array2, array2.Length);
		}
		return new LevelSubscriptions(ActiveLevels, DetailLevels, array, array2);
	}

	private void FixFilters()
	{
		ActiveLevels &= LogLevelFilter.Spam | LogLevelFilter.Trace | LogLevelFilter.Info | LogLevelFilter.Warning | LogLevelFilter.Error | LogLevelFilter.Assert;
		DetailLevels &= LogLevelFilter.Spam | LogLevelFilter.Trace | LogLevelFilter.Info | LogLevelFilter.Warning | LogLevelFilter.Error | LogLevelFilter.Assert;
	}

	public LevelSubscriptions AddSimple(LogLevelFilter filter, OnLogMessage del)
	{
		LevelSubscriptions levelSubscriptions = Clone(changingDetail: false);
		levelSubscriptions.ActiveLevels |= filter;
		for (int i = 0; i < levelSubscriptions.SimpleRegs.Length; i++)
		{
			if (((uint)filter & (uint)(1 << i)) != 0)
			{
				Helpers.EventAdd(ref levelSubscriptions.SimpleRegs[i], del);
			}
		}
		levelSubscriptions.FixFilters();
		return levelSubscriptions;
	}

	public LevelSubscriptions RemoveSimple(LogLevelFilter filter, OnLogMessage del)
	{
		LevelSubscriptions levelSubscriptions = Clone(changingDetail: false);
		for (int i = 0; i < levelSubscriptions.SimpleRegs.Length; i++)
		{
			if (((uint)filter & (uint)(1 << i)) != 0 && Helpers.EventRemove(ref levelSubscriptions.SimpleRegs[i], del) == null)
			{
				levelSubscriptions.ActiveLevels &= (LogLevelFilter)(~(1 << i));
			}
		}
		levelSubscriptions.ActiveLevels |= levelSubscriptions.DetailLevels;
		levelSubscriptions.FixFilters();
		return levelSubscriptions;
	}

	public LevelSubscriptions AddDetailed(LogLevelFilter filter, OnLogMessageDetailed del)
	{
		LevelSubscriptions levelSubscriptions = Clone(changingDetail: true);
		levelSubscriptions.DetailLevels |= filter;
		for (int i = 0; i < levelSubscriptions.DetailedRegs.Length; i++)
		{
			if (((uint)filter & (uint)(1 << i)) != 0)
			{
				Helpers.EventAdd(ref levelSubscriptions.DetailedRegs[i], del);
			}
		}
		levelSubscriptions.ActiveLevels |= levelSubscriptions.DetailLevels;
		levelSubscriptions.FixFilters();
		return levelSubscriptions;
	}

	public LevelSubscriptions RemoveDetailed(LogLevelFilter filter, OnLogMessageDetailed del)
	{
		LevelSubscriptions levelSubscriptions = Clone(changingDetail: true);
		for (int i = 0; i < levelSubscriptions.DetailedRegs.Length; i++)
		{
			if (((uint)filter & (uint)(1 << i)) != 0 && Helpers.EventRemove(ref levelSubscriptions.DetailedRegs[i], del) == null)
			{
				levelSubscriptions.DetailLevels &= (LogLevelFilter)(~(1 << i));
			}
		}
		levelSubscriptions.ActiveLevels |= levelSubscriptions.DetailLevels;
		levelSubscriptions.FixFilters();
		return levelSubscriptions;
	}
}
