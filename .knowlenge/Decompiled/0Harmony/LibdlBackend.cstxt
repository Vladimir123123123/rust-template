using System;
using System.ComponentModel;
using System.Diagnostics.CodeAnalysis;
using System.Reflection;
using System.Runtime.InteropServices;
using MonoMod.Utils.Interop;

private abstract class LibdlBackend : BackendImpl
{
	[ThreadStatic]
	private static IntPtr lastDlErrorReturn;

	protected LibdlBackend()
	{
		Unix.DlError();
	}

	[DoesNotReturn]
	private static void ThrowError(IntPtr dlerr)
	{
		throw new Win32Exception(Marshal.PtrToStringAnsi(dlerr));
	}

	protected override void CheckAndThrowError()
	{
		IntPtr intPtr = lastDlErrorReturn;
		IntPtr intPtr2;
		if (intPtr == IntPtr.Zero)
		{
			intPtr2 = Unix.DlError();
		}
		else
		{
			intPtr2 = intPtr;
			lastDlErrorReturn = IntPtr.Zero;
		}
		if (intPtr2 != IntPtr.Zero)
		{
			ThrowError(intPtr2);
		}
	}

	protected override bool TryOpenLibraryCore(string? name, Assembly assembly, out IntPtr handle)
	{
		Unix.DlopenFlags flags = (Unix.DlopenFlags)258;
		return (handle = Unix.DlOpen(name, flags)) != IntPtr.Zero;
	}

	public override bool TryCloseLibrary(IntPtr handle)
	{
		return Unix.DlClose(handle);
	}

	public override bool TryGetExport(IntPtr handle, string name, out IntPtr ptr)
	{
		Unix.DlError();
		ptr = Unix.DlSym(handle, name);
		return (lastDlErrorReturn = Unix.DlError()) == IntPtr.Zero;
	}

	public override IntPtr GetExport(IntPtr handle, string name)
	{
		Unix.DlError();
		IntPtr result = Unix.DlSym(handle, name);
		IntPtr intPtr = Unix.DlError();
		if (intPtr != IntPtr.Zero)
		{
			ThrowError(intPtr);
		}
		return result;
	}
}
