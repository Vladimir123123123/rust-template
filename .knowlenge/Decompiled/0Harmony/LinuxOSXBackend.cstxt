using System;
using System.Collections.Generic;

private sealed class LinuxOSXBackend : LibdlBackend
{
	private readonly bool isLinux;

	public LinuxOSXBackend(bool isLinux)
	{
		this.isLinux = isLinux;
	}

	protected override IEnumerable<string> GetLibrarySearchOrder(string name)
	{
		bool hasSlash = System.StringExtensions.Contains(name, '/', StringComparison.Ordinal);
		string suffix = ".dylib";
		if (isLinux)
		{
			if (name.EndsWith(".so", StringComparison.Ordinal) || System.StringExtensions.Contains(name, ".so.", StringComparison.Ordinal))
			{
				yield return name;
				if (!hasSlash)
				{
					yield return "lib" + name;
				}
				yield return name + ".so";
				if (!hasSlash)
				{
					yield return "lib" + name + ".so";
				}
				yield break;
			}
			suffix = ".so";
		}
		yield return name + suffix;
		if (!hasSlash)
		{
			yield return "lib" + name + suffix;
		}
		yield return name;
		if (!hasSlash)
		{
			yield return "lib" + name;
		}
		bool flag = isLinux;
		if (flag)
		{
			bool flag2 = ((name == "c" || name == "libc") ? true : false);
			flag = flag2;
		}
		if (!flag)
		{
			yield break;
		}
		foreach (string item in GetLibrarySearchOrder("c.so.6"))
		{
			yield return item;
		}
		foreach (string item2 in GetLibrarySearchOrder("glibc"))
		{
			yield return item2;
		}
		foreach (string item3 in GetLibrarySearchOrder("glibc.so.6"))
		{
			yield return item3;
		}
	}
}
