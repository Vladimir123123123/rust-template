using System.Runtime.CompilerServices;
using System.Threading;

private sealed class LockedStack
{
	private readonly T[]?[] _arrays = new T[8][];

	private int _count;

	private int _millisecondsTimestamp;

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public bool TryPush(T[] array)
	{
		bool result = false;
		Monitor.Enter(this);
		T[][] arrays = _arrays;
		int count = _count;
		if ((uint)count < (uint)arrays.Length)
		{
			if (count == 0)
			{
				_millisecondsTimestamp = 0;
			}
			arrays[count] = array;
			_count = count + 1;
			result = true;
		}
		Monitor.Exit(this);
		return result;
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public T[]? TryPop()
	{
		T[] result = null;
		Monitor.Enter(this);
		T[][] arrays = _arrays;
		int num = _count - 1;
		if ((uint)num < (uint)arrays.Length)
		{
			result = arrays[num];
			arrays[num] = null;
			_count = num;
		}
		Monitor.Exit(this);
		return result;
	}

	public void Trim(int currentMilliseconds, int id, System.Buffers.Utilities.MemoryPressure pressure, int bucketSize)
	{
		if (_count == 0)
		{
			return;
		}
		int num = ((pressure == System.Buffers.Utilities.MemoryPressure.High) ? 10000 : 60000);
		lock (this)
		{
			if (_count == 0)
			{
				return;
			}
			if (_millisecondsTimestamp == 0)
			{
				_millisecondsTimestamp = currentMilliseconds;
			}
			else
			{
				if (currentMilliseconds - _millisecondsTimestamp <= num)
				{
					return;
				}
				int num2 = 1;
				switch (pressure)
				{
				case System.Buffers.Utilities.MemoryPressure.High:
					num2 = 8;
					if (bucketSize > 16384)
					{
						num2++;
					}
					if (System.Runtime.CompilerServices.Unsafe.SizeOf<T>() > 16)
					{
						num2++;
					}
					if (System.Runtime.CompilerServices.Unsafe.SizeOf<T>() > 32)
					{
						num2++;
					}
					break;
				case System.Buffers.Utilities.MemoryPressure.Medium:
					num2 = 2;
					break;
				}
				while (_count > 0 && num2-- > 0)
				{
					_ = _arrays[--_count];
					_arrays[_count] = null;
				}
				_millisecondsTimestamp = ((_count > 0) ? (_millisecondsTimestamp + num / 4) : 0);
			}
		}
	}
}
