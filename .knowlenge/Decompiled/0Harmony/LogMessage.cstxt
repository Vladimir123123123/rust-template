using System;
using System.Diagnostics;

private sealed class LogMessage
{
	public string Source { get; private set; }

	public DateTime Time { get; private set; }

	public LogLevel Level { get; private set; }

	public string FormattedMessage { get; private set; }

	public ReadOnlyMemory<MessageHole> FormatHoles { get; private set; }

	public LogMessage(string source, DateTime time, LogLevel level, string formatted, ReadOnlyMemory<MessageHole> holes)
	{
		Source = source;
		Time = time;
		Level = level;
		FormattedMessage = formatted;
		FormatHoles = holes;
	}

	public void Clear()
	{
		Source = "";
		Time = default(DateTime);
		Level = LogLevel.Spam;
		FormattedMessage = "";
		FormatHoles = default(ReadOnlyMemory<MessageHole>);
	}

	public void Init(string source, DateTime time, LogLevel level, string formatted, ReadOnlyMemory<MessageHole> holes)
	{
		Source = source;
		Time = time;
		Level = level;
		FormattedMessage = formatted;
		FormatHoles = holes;
	}

	public void ReportTo(OnLogMessage del)
	{
		try
		{
			del(Source, Time, Level, FormattedMessage);
		}
		catch (Exception ex)
		{
			Debugger.Log(int.MaxValue, "MonoMod.DebugLog", "Exception caught while reporting to message handler");
			Debugger.Log(int.MaxValue, "MonoMod.DebugLog", ex.ToString());
		}
	}

	public void ReportTo(OnLogMessageDetailed del)
	{
		try
		{
			del(Source, Time, Level, FormattedMessage, FormatHoles);
		}
		catch (Exception ex)
		{
			Debugger.Log(int.MaxValue, "MonoMod.DebugLog", "Exception caught while reporting to message handler");
			Debugger.Log(int.MaxValue, "MonoMod.DebugLog", ex.ToString());
		}
	}
}
