using System;
using System.Diagnostics.CodeAnalysis;
using MonoMod.Core.Interop;
using MonoMod.Core.Platforms.Memory;
using MonoMod.Utils;

private sealed class MacOsQueryingAllocator : QueryingMemoryPageAllocatorBase
{
	public override uint PageSize { get; }

	public MacOsQueryingAllocator()
	{
		PageSize = (uint)OSX.GetPageSize();
	}

	public unsafe override bool TryAllocatePage(nint size, bool executable, out IntPtr allocated)
	{
		Helpers.Assert(size == PageSize, null, "size == PageSize");
		OSX.vm_prot_t vm_prot_t = (executable ? OSX.vm_prot_t.Execute : OSX.vm_prot_t.None);
		vm_prot_t |= OSX.vm_prot_t.Default;
		ulong num = 0uL;
		OSX.kern_return_t kern_return_t = OSX.mach_vm_map(OSX.mach_task_self(), &num, (ulong)size, 0uL, OSX.vm_flags.Anywhere, 0, 0uL, true, vm_prot_t, vm_prot_t, OSX.vm_inherit_t.Copy);
		if (!kern_return_t)
		{
			bool isEnabled;
			<027f1d0e-6e0b-4adc-bc2b-a5d0603c6ea8>MMDbgLog.DebugLogErrorStringHandler message = new <027f1d0e-6e0b-4adc-bc2b-a5d0603c6ea8>MMDbgLog.DebugLogErrorStringHandler(41, 1, out isEnabled);
			if (isEnabled)
			{
				message.AppendLiteral("Error creating allocation anywhere! kr = ");
				message.AppendFormatted(kern_return_t.Value);
			}
			<027f1d0e-6e0b-4adc-bc2b-a5d0603c6ea8>MMDbgLog.Error(ref message);
			allocated = default(IntPtr);
			return false;
		}
		allocated = (IntPtr)(long)num;
		return true;
	}

	public unsafe override bool TryAllocatePage(IntPtr pageAddr, nint size, bool executable, out IntPtr allocated)
	{
		Helpers.Assert(size == PageSize, null, "size == PageSize");
		OSX.vm_prot_t vm_prot_t = (executable ? OSX.vm_prot_t.Execute : OSX.vm_prot_t.None);
		vm_prot_t |= OSX.vm_prot_t.Default;
		ulong num = (ulong)(long)pageAddr;
		OSX.kern_return_t kern_return_t = OSX.mach_vm_map(OSX.mach_task_self(), &num, (ulong)size, 0uL, OSX.vm_flags.Fixed, 0, 0uL, true, vm_prot_t, vm_prot_t, OSX.vm_inherit_t.Copy);
		if (!kern_return_t)
		{
			bool isEnabled;
			<027f1d0e-6e0b-4adc-bc2b-a5d0603c6ea8>MMDbgLog.DebugLogSpamStringHandler message = new <027f1d0e-6e0b-4adc-bc2b-a5d0603c6ea8>MMDbgLog.DebugLogSpamStringHandler(38, 2, out isEnabled);
			if (isEnabled)
			{
				message.AppendLiteral("Error creating allocation at 0x");
				message.AppendFormatted(num, "x16");
				message.AppendLiteral(": kr = ");
				message.AppendFormatted(kern_return_t.Value);
			}
			<027f1d0e-6e0b-4adc-bc2b-a5d0603c6ea8>MMDbgLog.Spam(ref message);
			allocated = default(IntPtr);
			return false;
		}
		allocated = (IntPtr)(long)num;
		return true;
	}

	public override bool TryFreePage(IntPtr pageAddr, [<027f1d0e-6e0b-4adc-bc2b-a5d0603c6ea8>NotNullWhen(false)] out string? errorMsg)
	{
		OSX.kern_return_t kern_return_t = OSX.mach_vm_deallocate(OSX.mach_task_self(), (ulong)(long)pageAddr, PageSize);
		if (!kern_return_t)
		{
			errorMsg = $"Could not deallocate page: kr = {kern_return_t.Value}";
			return false;
		}
		errorMsg = null;
		return true;
	}

	public override bool TryQueryPage(IntPtr pageAddr, out bool isFree, out IntPtr allocBase, out nint allocSize)
	{
		OSX.vm_prot_t prot;
		OSX.vm_prot_t maxProt;
		OSX.kern_return_t localRegionInfo = GetLocalRegionInfo(pageAddr, out allocBase, out allocSize, out prot, out maxProt);
		if ((bool)localRegionInfo)
		{
			if ((nint)allocBase > (nint)pageAddr)
			{
				allocSize = (nint)allocBase - (nint)pageAddr;
				allocBase = pageAddr;
				isFree = true;
				return true;
			}
			isFree = false;
			return true;
		}
		if (localRegionInfo == OSX.kern_return_t.InvalidAddress)
		{
			isFree = true;
			return true;
		}
		isFree = false;
		return false;
	}
}
