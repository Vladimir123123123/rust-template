using System;
using System.Reflection;

private sealed class ManagedDetourBox : DetourBoxBase
{
	private readonly MethodBase src;

	private readonly MethodBase target;

	public ManagedDetourBox(PlatformTriple triple, MethodBase src, MethodBase target)
		: base(triple)
	{
		this.src = src;
		this.target = target;
		Detour = null;
	}

	public void SubscribeCompileMethod()
	{
		AddRelatedDetour(src, this);
	}

	public void UnsubscribeCompileMethod()
	{
		RemoveRelatedDetour(src, this);
	}

	public void OnMethodCompiled(MethodBase method, IntPtr codeStart, IntPtr codeStartRw, ulong codeSize)
	{
		if (!base.IsApplied)
		{
			return;
		}
		method = Triple.GetIdentifiable(method);
		lock (Sync)
		{
			if (!base.IsApplied || base.IsApplying)
			{
				return;
			}
			bool isEnabled;
			<027f1d0e-6e0b-4adc-bc2b-a5d0603c6ea8>MMDbgLog.DebugLogTraceStringHandler message = new <027f1d0e-6e0b-4adc-bc2b-a5d0603c6ea8>MMDbgLog.DebugLogTraceStringHandler(43, 4, out isEnabled);
			if (isEnabled)
			{
				message.AppendLiteral("Updating detour from ");
				message.AppendFormatted(src);
				message.AppendLiteral(" to ");
				message.AppendFormatted(target);
				message.AppendLiteral(" (recompiled ");
				message.AppendFormatted(method);
				message.AppendLiteral(" to ");
				message.AppendFormatted(codeStart, "x16");
				message.AppendLiteral(")");
			}
			<027f1d0e-6e0b-4adc-bc2b-a5d0603c6ea8>MMDbgLog.Trace(ref message);
			try
			{
				base.IsApplying = true;
				SimpleNativeDetour detour = Detour;
				IntPtr to;
				IntPtr from;
				IntPtr fromRw;
				if (detour != null)
				{
					_ = detour.Source;
					to = detour.Destination;
					from = codeStart;
					fromRw = codeStartRw;
				}
				else
				{
					from = codeStart;
					fromRw = codeStartRw;
					to = Triple.Runtime.GetMethodHandle(target).GetFunctionPointer();
				}
				SimpleNativeDetour newDetour = Triple.CreateSimpleDetour(from, to, (int)codeSize, fromRw);
				DetourBase.ReplaceDetourInLock(this, newDetour, out SimpleNativeDetour _);
			}
			finally
			{
				base.IsApplying = false;
			}
		}
	}
}
