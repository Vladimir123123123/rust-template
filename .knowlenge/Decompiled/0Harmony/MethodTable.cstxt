using System;
using System.Runtime.CompilerServices;
using MonoMod.Core.Interop.Attributes;
using MonoMod.Utils;

public struct MethodTable
{
	[Flags]
	public enum WFlagsLow : uint
	{
		UNUSED_ComponentSize_1 = 1u,
		StaticsMask = 6u,
		StaticsMask_NonDynamic = 0u,
		StaticsMask_Dynamic = 2u,
		StaticsMask_Generics = 4u,
		StaticsMask_CrossModuleGenerics = 6u,
		StaticsMask_IfGenericsThenCrossModule = 2u,
		NotInPZM = 8u,
		GenericsMask = 0x30u,
		GenericsMask_NonGeneric = 0u,
		GenericsMask_GenericInst = 0x10u,
		GenericsMask_SharedInst = 0x20u,
		GenericsMask_TypicalInst = 0x30u,
		ContextStatic = 0x40u,
		HasRemotingVtsInfo = 0x80u,
		HasVariance = 0x100u,
		HasDefaultCtor = 0x200u,
		HasPreciseInitCctors = 0x400u,
		IsHFA_IsRegStructPassed = 0x800u,
		IsByRefLike = 0x1000u,
		UNUSED_ComponentSize_5 = 0x2000u,
		UNUSED_ComponentSize_6 = 0x4000u,
		UNUSED_ComponentSize_7 = 0x8000u,
		StringArrayValues = 0u
	}

	[Flags]
	public enum WFlagsHigh : uint
	{
		Category_Mask = 0xF0000u,
		Category_Class = 0u,
		Category_Unused_1 = 0x10000u,
		Category_MarshalByRef_Mask = 0xE0000u,
		Category_MarshalByRef = 0x20000u,
		Category_Contextful = 0x30000u,
		Category_ValueType = 0x40000u,
		Category_ValueType_Mask = 0xC0000u,
		Category_Nullable = 0x50000u,
		Category_PrimitiveValueType = 0x60000u,
		Category_TruePrimitive = 0x70000u,
		Category_Array = 0x80000u,
		Category_Array_Mask = 0xC0000u,
		Category_IfArrayThenSzArray = 0x20000u,
		Category_Interface = 0xC0000u,
		Category_Unused_2 = 0xD0000u,
		Category_TransparentProxy = 0xE0000u,
		Category_AsyncPin = 0xF0000u,
		Category_ElementTypeMask = 0xE0000u,
		HasFinalizer = 0x100000u,
		IfNotInterfaceThenMarshalable = 0x200000u,
		IfInterfaceThenHasGuidInfo = 0x200000u,
		ICastable = 0x400000u,
		HasIndirectParent = 0x800000u,
		ContainsPointers = 0x1000000u,
		HasTypeEquivalence = 0x2000000u,
		HasRCWPerTypeData = 0x4000000u,
		HasCriticalFinalizer = 0x8000000u,
		Collectible = 0x10000000u,
		ContainsGenericVariables = 0x20000000u,
		ComObject = 0x40000000u,
		HasComponentSize = 0x80000000u,
		NonTrivialInterfaceCast = 0x40480000u
	}

	[Flags]
	public enum Flags2 : ushort
	{
		MultipurposeSlotsMask = 0x1F,
		HasPerInstInfo = 1,
		HasInterfaceMap = 2,
		HasDispatchMapSlot = 4,
		HasNonVirtualSlots = 8,
		HasModuleOverride = 0x10,
		IsZapped = 0x20,
		IsPreRestored = 0x40,
		HasModuleDependencies = 0x80,
		NoSecurityProperties = 0x100,
		RequiresDispatchTokenFat = 0x200,
		HasCctor = 0x400,
		HasCCWTemplate = 0x800,
		RequiresAlign8 = 0x1000,
		HasBoxedRegularStatics = 0x2000,
		HasSingleNonVirtualSlot = 0x4000,
		DependsOnEquivalentOrForwardedStructs = 0x8000
	}

	public enum UnionLowBits
	{
		EEClass,
		Invalid,
		MethodTable,
		Indirection
	}

	private static class MultipurposeSlotHelpers
	{
		public unsafe static byte OffsetOfMp1()
		{
			MethodTable methodTable = default(MethodTable);
			return (byte)((byte*)(&methodTable.union_pPerInstInfo_ElementTypeHnd_pMultipurposeSlot1) - (byte*)(&methodTable));
		}

		public unsafe static byte OffsetOfMp2()
		{
			MethodTable methodTable = default(MethodTable);
			return (byte)((byte*)(&methodTable.union_p_InterfaceMap_pMultipurposeSlot2) - (byte*)(&methodTable));
		}

		public unsafe static byte RegularOffset(int index)
		{
			return (byte)(sizeof(MethodTable) + index * IntPtr.Size - 2 * IntPtr.Size);
		}
	}

	private uint m_dwFlags;

	public uint m_BaseSize;

	public Flags2 m_wFlags2;

	public ushort m_wToken;

	public ushort m_wNumVirtuals;

	public ushort m_wNumInterfaces;

	private unsafe void* m_pParentMethodTable;

	public unsafe Module* m_pLoaderModule;

	public unsafe MethodTableWriteableData* m_pWriteableData;

	public unsafe void* union_pEEClass_pCanonMT;

	public unsafe void* union_pPerInstInfo_ElementTypeHnd_pMultipurposeSlot1;

	public unsafe void* union_p_InterfaceMap_pMultipurposeSlot2;

	public const int VTABLE_SLOTS_PER_CHUNK = 8;

	public const int VTABLE_SLOTS_PER_CHUNK_LOG2 = 3;

	private static readonly byte[] c_NonVirtualSlotsOffsets = GetNonVirtualSlotsOffsets();

	public WFlagsHigh FlagsHigh => (WFlagsHigh)(m_dwFlags & 0xFFFF0000u);

	public WFlagsLow FlagsLow
	{
		get
		{
			if (!FlagsHigh.Has(WFlagsHigh.HasComponentSize))
			{
				return (WFlagsLow)(m_dwFlags & 0xFFFF);
			}
			return WFlagsLow.StaticsMask_NonDynamic;
		}
	}

	public int ComponentSize
	{
		get
		{
			if (!FlagsHigh.Has(WFlagsHigh.HasComponentSize))
			{
				return 0;
			}
			return (int)(m_dwFlags & 0xFFFF);
		}
	}

	public bool IsInterface => (m_dwFlags & 0xF0000) == 786432;

	public bool HasIndirectParent => FlagsHigh.Has(WFlagsHigh.HasIndirectParent);

	public unsafe MethodTable* ParentMethodTable
	{
		get
		{
			void* pParentMethodTable = m_pParentMethodTable;
			if (HasIndirectParent)
			{
				return (MethodTable*)((MethodTable*)pParentMethodTable)->m_pParentMethodTable;
			}
			return (MethodTable*)pParentMethodTable;
		}
	}

	public bool HasSingleNonVirtualSlot => m_wFlags2.Has(Flags2.HasSingleNonVirtualSlot);

	public unsafe MethodTable* GetCanonicalMethodTable()
	{
		nuint num = (nuint)union_pEEClass_pCanonMT;
		if ((num & 2) == 0)
		{
			return (MethodTable*)num;
		}
		if ((num & 1) != 0)
		{
			return *(MethodTable**)(num - 3);
		}
		return (MethodTable*)(num - 2);
	}

	public unsafe MethodDesc* GetParallelMethodDesc(MethodDesc* pDefMD)
	{
		return GetMethodDescForSlot(pDefMD->SlotNumber);
	}

	public unsafe MethodDesc* GetMethodDescForSlot(uint slotNumber)
	{
		if (IsInterface)
		{
			GetNumVirtuals();
		}
		throw new NotImplementedException();
	}

	public unsafe void* GetRestoredSlot(uint slotNumber)
	{
		MethodTable* ptr = (MethodTable*)System.Runtime.CompilerServices.Unsafe.AsPointer(ref this);
		void* slot;
		while (true)
		{
			ptr = ptr->GetCanonicalMethodTable();
			slot = ptr->GetSlot(slotNumber);
			if (slot != null)
			{
				break;
			}
			ptr = ptr->ParentMethodTable;
		}
		return slot;
	}

	public unsafe void* GetSlot(uint slotNumber)
	{
		return *(void**)GetSlotPtrRaw(slotNumber);
	}

	public unsafe nint GetSlotPtrRaw(uint slotNum)
	{
		if (slotNum < GetNumVirtuals())
		{
			uint indexOfVtableIndirection = GetIndexOfVtableIndirection(slotNum);
			void** ptr = (void**)GetVtableIndirections()[indexOfVtableIndirection];
			return (nint)(ptr + GetIndexAfterVtableIndirection(slotNum));
		}
		if (HasSingleNonVirtualSlot)
		{
			return GetNonVirtualSlotsPtr();
		}
		return (nint)(GetNonVirtualSlotsArray() + (slotNum - GetNumVirtuals()));
	}

	public ushort GetNumVirtuals()
	{
		return m_wNumVirtuals;
	}

	public static uint GetIndexOfVtableIndirection(uint slotNum)
	{
		return slotNum >> 3;
	}

	public unsafe void** GetVtableIndirections()
	{
		return (void**)((byte*)System.Runtime.CompilerServices.Unsafe.AsPointer(ref this) + sizeof(MethodTable));
	}

	public static uint GetIndexAfterVtableIndirection(uint slotNum)
	{
		return slotNum & 7;
	}

	[MultipurposeSlotOffsetTable(3, typeof(MultipurposeSlotHelpers))]
	private static byte[] GetNonVirtualSlotsOffsets()
	{
		return new byte[8]
		{
			MultipurposeSlotHelpers.OffsetOfMp1(),
			MultipurposeSlotHelpers.OffsetOfMp2(),
			MultipurposeSlotHelpers.OffsetOfMp1(),
			MultipurposeSlotHelpers.RegularOffset(2),
			MultipurposeSlotHelpers.OffsetOfMp2(),
			MultipurposeSlotHelpers.RegularOffset(2),
			MultipurposeSlotHelpers.RegularOffset(2),
			MultipurposeSlotHelpers.RegularOffset(3)
		};
	}

	public nint GetNonVirtualSlotsPtr()
	{
		return GetMultipurposeSlotPtr(Flags2.HasNonVirtualSlots, c_NonVirtualSlotsOffsets);
	}

	public unsafe nint GetMultipurposeSlotPtr(Flags2 flag, byte[] offsets)
	{
		nint num = offsets[(uint)(m_wFlags2 & (flag - 1))];
		if (num >= sizeof(MethodTable))
		{
			num += (nint)GetNumVTableIndirections() * (nint)sizeof(void**);
		}
		return (nint)((byte*)System.Runtime.CompilerServices.Unsafe.AsPointer(ref this) + num);
	}

	public unsafe void** GetNonVirtualSlotsArray()
	{
		return (void**)((RelativePointer*)GetNonVirtualSlotsPtr())->Value;
	}

	public uint GetNumVTableIndirections()
	{
		return GetNumVtableIndirections(GetNumVirtuals());
	}

	public static uint GetNumVtableIndirections(uint numVirtuals)
	{
		return numVirtuals + 7 >> 3;
	}
}
