using System;
using System.Collections.Generic;
using System.Reflection;
using MonoMod.ModInterop;
using MonoMod.Utils;

internal static class ModInteropManager
{
	private static HashSet<Type> Registered = new HashSet<Type>();

	private static Dictionary<string, List<MethodInfo>> Methods = new Dictionary<string, List<MethodInfo>>();

	private static List<FieldInfo> Fields = new List<FieldInfo>();

	public static void ModInterop(this Type type)
	{
		Helpers.ThrowIfArgumentNull(type, "type");
		if (Registered.Contains(type))
		{
			return;
		}
		Registered.Add(type);
		string name = type.Assembly.GetName().Name;
		object[] customAttributes = type.GetCustomAttributes(typeof(ModExportNameAttribute), inherit: false);
		for (int i = 0; i < customAttributes.Length; i++)
		{
			name = ((ModExportNameAttribute)customAttributes[i]).Name;
		}
		FieldInfo[] fields = type.GetFields(BindingFlags.Static | BindingFlags.Public);
		foreach (FieldInfo fieldInfo in fields)
		{
			if (typeof(Delegate).IsAssignableFrom(fieldInfo.FieldType))
			{
				Fields.Add(fieldInfo);
			}
		}
		MethodInfo[] methods = type.GetMethods(BindingFlags.Static | BindingFlags.Public);
		foreach (MethodInfo method in methods)
		{
			method.RegisterModExport();
			method.RegisterModExport(name);
		}
		foreach (FieldInfo field in Fields)
		{
			if (!Methods.TryGetValue(field.GetModImportName(), out List<MethodInfo> value))
			{
				field.SetValue(null, null);
				continue;
			}
			bool flag = false;
			foreach (MethodInfo item in value)
			{
				try
				{
					field.SetValue(null, Delegate.CreateDelegate(field.FieldType, null, item));
					flag = true;
				}
				catch
				{
					continue;
				}
				break;
			}
			if (!flag)
			{
				field.SetValue(null, null);
			}
		}
	}

	public static void RegisterModExport(this MethodInfo method, string? prefix = null)
	{
		Helpers.ThrowIfArgumentNull(method, "method");
		if (!method.IsPublic || !method.IsStatic)
		{
			throw new MemberAccessException("Utility must be public static");
		}
		string text = method.Name;
		if (!string.IsNullOrEmpty(prefix))
		{
			text = prefix + "." + text;
		}
		if (!Methods.TryGetValue(text, out List<MethodInfo> value))
		{
			value = (Methods[text] = new List<MethodInfo>());
		}
		if (!value.Contains(method))
		{
			value.Add(method);
		}
	}

	private static string GetModImportName(this FieldInfo field)
	{
		object[] customAttributes = field.GetCustomAttributes(typeof(ModImportNameAttribute), inherit: false);
		int num = 0;
		if (num < customAttributes.Length)
		{
			return ((ModImportNameAttribute)customAttributes[num]).Name;
		}
		if ((object)field.DeclaringType != null)
		{
			customAttributes = field.DeclaringType.GetCustomAttributes(typeof(ModImportNameAttribute), inherit: false);
			num = 0;
			if (num < customAttributes.Length)
			{
				return ((ModImportNameAttribute)customAttributes[num]).Name + "." + field.Name;
			}
		}
		return field.Name;
	}
}
