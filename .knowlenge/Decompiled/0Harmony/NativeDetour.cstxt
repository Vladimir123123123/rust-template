using System;

private sealed class NativeDetour : DetourBase, ICoreNativeDetour, ICoreDetourBase, IDisposable
{
	private sealed class NativeDetourBox : DetourBoxBase
	{
		public readonly IntPtr From;

		public readonly IntPtr To;

		public NativeDetourBox(PlatformTriple triple, IntPtr from, IntPtr to)
			: base(triple)
		{
			From = from;
			To = to;
		}
	}

	private IDisposable? origHandle;

	public IntPtr Source => DetourBox.From;

	public IntPtr Target => DetourBox.To;

	public bool HasOrigEntrypoint => OrigEntrypoint != IntPtr.Zero;

	public IntPtr OrigEntrypoint { get; private set; }

	private new NativeDetourBox DetourBox => GetDetourBox<NativeDetourBox>();

	public NativeDetour(PlatformTriple triple, IntPtr from, IntPtr to)
		: base(triple)
	{
		base.DetourBox = new NativeDetourBox(triple, from, to);
	}

	protected override SimpleNativeDetour CreateDetour()
	{
		bool isEnabled;
		<027f1d0e-6e0b-4adc-bc2b-a5d0603c6ea8>MMDbgLog.DebugLogTraceStringHandler message = new <027f1d0e-6e0b-4adc-bc2b-a5d0603c6ea8>MMDbgLog.DebugLogTraceStringHandler(32, 2, out isEnabled);
		if (isEnabled)
		{
			message.AppendLiteral("Applying native detour from ");
			message.AppendFormatted(Source, "x16");
			message.AppendLiteral(" to ");
			message.AppendFormatted(Target, "x16");
		}
		<027f1d0e-6e0b-4adc-bc2b-a5d0603c6ea8>MMDbgLog.Trace(ref message);
		Triple.CreateNativeDetour(Source, Target, -1, (IntPtr)0).Deconstruct(out SimpleNativeDetour Simple, out IntPtr AltEntry, out IDisposable AltHandle);
		SimpleNativeDetour result = Simple;
		IntPtr origEntrypoint = AltEntry;
		IDisposable disposable = AltHandle;
		IDisposable? disposable2 = origHandle;
		AltHandle = disposable;
		disposable = disposable2;
		origHandle = AltHandle;
		OrigEntrypoint = origEntrypoint;
		return result;
	}

	protected override void BeforeUndo()
	{
		bool isEnabled;
		<027f1d0e-6e0b-4adc-bc2b-a5d0603c6ea8>MMDbgLog.DebugLogTraceStringHandler message = new <027f1d0e-6e0b-4adc-bc2b-a5d0603c6ea8>MMDbgLog.DebugLogTraceStringHandler(31, 2, out isEnabled);
		if (isEnabled)
		{
			message.AppendLiteral("Undoing native detour from ");
			message.AppendFormatted(Source, "x16");
			message.AppendLiteral(" to ");
			message.AppendFormatted(Target, "x16");
		}
		<027f1d0e-6e0b-4adc-bc2b-a5d0603c6ea8>MMDbgLog.Trace(ref message);
	}

	protected override void AfterUndo()
	{
		OrigEntrypoint = IntPtr.Zero;
		origHandle?.Dispose();
		origHandle = null;
	}

	protected override void BeforeDispose()
	{
	}
}
