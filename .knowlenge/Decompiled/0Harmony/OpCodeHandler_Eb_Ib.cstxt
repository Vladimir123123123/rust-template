using Iced.Intel;
using Iced.Intel.DecoderInternal;

internal sealed class OpCodeHandler_Eb_Ib : OpCodeHandlerModRM
{
	private readonly Code code;

	private readonly HandlerFlags flags;

	public OpCodeHandler_Eb_Ib(Code code)
	{
		this.code = code;
	}

	public OpCodeHandler_Eb_Ib(Code code, HandlerFlags flags)
	{
		this.code = code;
		this.flags = flags;
	}

	public override void Decode(Decoder decoder, ref Instruction instruction)
	{
		instruction.InternalSetCodeNoCheck(code);
		if (decoder.state.mod < 3)
		{
			decoder.state.zs.flags |= (StateFlags)((uint)(flags & HandlerFlags.Lock) << 10);
			instruction.Op0Kind = OpKind.Memory;
			decoder.ReadOpMem(ref instruction);
		}
		else
		{
			uint num = decoder.state.rm + decoder.state.zs.extraBaseRegisterBase;
			if ((decoder.state.zs.flags & StateFlags.HasRex) != 0 && num >= 4)
			{
				num += 4;
			}
			instruction.Op0Register = (Register)(num + 1);
		}
		instruction.Op1Kind = OpKind.Immediate8;
		instruction.InternalImmediate8 = decoder.ReadByte();
	}
}
