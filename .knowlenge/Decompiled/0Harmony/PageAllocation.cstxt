using System;

protected sealed class PageAllocation : IAllocatedMemory, IDisposable
{
	private readonly Page owner;

	private readonly uint offset;

	private bool disposedValue;

	public bool IsExecutable => owner.IsExecutable;

	public IntPtr BaseAddress => (nint)owner.BaseAddr + (nint)offset;

	public int Size { get; }

	public unsafe Span<byte> Memory => new Span<byte>((void*)BaseAddress, Size);

	public PageAllocation(Page page, uint offset, int size)
	{
		owner = page;
		this.offset = offset;
		Size = size;
	}

	private void Dispose(bool disposing)
	{
		if (!disposedValue)
		{
			owner.FreeMem(offset, (uint)Size);
			disposedValue = true;
		}
	}

	~PageAllocation()
	{
		Dispose(disposing: false);
	}

	public void Dispose()
	{
		Dispose(disposing: true);
		GC.SuppressFinalize(this);
	}
}
