using System;
using System.ComponentModel;
using System.Diagnostics.CodeAnalysis;
using MonoMod.Core.Interop;
using MonoMod.Core.Platforms.Memory;

private sealed class PageAllocator : QueryingMemoryPageAllocatorBase
{
	public override uint PageSize { get; }

	public unsafe PageAllocator()
	{
		Windows.SYSTEM_INFO sYSTEM_INFO = default(Windows.SYSTEM_INFO);
		Windows.GetSystemInfo(&sYSTEM_INFO);
		PageSize = sYSTEM_INFO.dwPageSize;
	}

	public unsafe override bool TryAllocatePage(nint size, bool executable, out IntPtr allocated)
	{
		int flProtect = (executable ? 64 : 4);
		allocated = (IntPtr)Windows.VirtualAlloc(null, (nuint)size, 12288u, (uint)flProtect);
		return allocated != IntPtr.Zero;
	}

	public unsafe override bool TryAllocatePage(IntPtr pageAddr, nint size, bool executable, out IntPtr allocated)
	{
		int flProtect = (executable ? 64 : 4);
		allocated = (IntPtr)Windows.VirtualAlloc((void*)pageAddr, (nuint)size, 12288u, (uint)flProtect);
		return allocated != IntPtr.Zero;
	}

	public unsafe override bool TryFreePage(IntPtr pageAddr, [<027f1d0e-6e0b-4adc-bc2b-a5d0603c6ea8>NotNullWhen(false)] out string? errorMsg)
	{
		if (!Windows.VirtualFree((void*)pageAddr, 0u, 32768u))
		{
			errorMsg = new Win32Exception((int)Windows.GetLastError()).Message;
			return false;
		}
		errorMsg = null;
		return true;
	}

	public unsafe override bool TryQueryPage(IntPtr pageAddr, out bool isFree, out IntPtr allocBase, out nint allocSize)
	{
		Windows.MEMORY_BASIC_INFORMATION mEMORY_BASIC_INFORMATION = default(Windows.MEMORY_BASIC_INFORMATION);
		if (Windows.VirtualQuery((void*)pageAddr, &mEMORY_BASIC_INFORMATION, (nuint)sizeof(Windows.MEMORY_BASIC_INFORMATION)) != 0)
		{
			isFree = mEMORY_BASIC_INFORMATION.State == 65536;
			allocBase = (nint)(isFree ? mEMORY_BASIC_INFORMATION.BaseAddress : mEMORY_BASIC_INFORMATION.AllocationBase);
			allocSize = (nint)pageAddr + (nint)mEMORY_BASIC_INFORMATION.RegionSize - (nint)allocBase;
			return true;
		}
		isFree = false;
		allocBase = IntPtr.Zero;
		allocSize = 0;
		return false;
	}
}
