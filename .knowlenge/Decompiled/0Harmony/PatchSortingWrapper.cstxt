using System;
using System.Collections.Generic;

private class PatchSortingWrapper : IComparable
{
	internal readonly HashSet<PatchSortingWrapper> after;

	internal readonly HashSet<PatchSortingWrapper> before;

	internal readonly Patch innerPatch;

	internal PatchSortingWrapper(Patch patch)
	{
		innerPatch = patch;
		before = new HashSet<PatchSortingWrapper>();
		after = new HashSet<PatchSortingWrapper>();
	}

	public int CompareTo(object obj)
	{
		return PatchInfoSerialization.PriorityComparer((obj is PatchSortingWrapper patchSortingWrapper) ? patchSortingWrapper.innerPatch : null, innerPatch.index, innerPatch.priority);
	}

	public override bool Equals(object obj)
	{
		if (obj is PatchSortingWrapper patchSortingWrapper)
		{
			return innerPatch.PatchMethod == patchSortingWrapper.innerPatch.PatchMethod;
		}
		return false;
	}

	public override int GetHashCode()
	{
		return innerPatch.PatchMethod.GetHashCode();
	}

	internal void AddBeforeDependency(IEnumerable<PatchSortingWrapper> dependencies)
	{
		foreach (PatchSortingWrapper dependency in dependencies)
		{
			before.Add(dependency);
			dependency.after.Add(this);
		}
	}

	internal void AddAfterDependency(IEnumerable<PatchSortingWrapper> dependencies)
	{
		foreach (PatchSortingWrapper dependency in dependencies)
		{
			after.Add(dependency);
			dependency.before.Add(this);
		}
	}

	internal void RemoveAfterDependency(PatchSortingWrapper afterNode)
	{
		after.Remove(afterNode);
		afterNode.before.Remove(this);
	}

	internal void RemoveBeforeDependency(PatchSortingWrapper beforeNode)
	{
		before.Remove(beforeNode);
		beforeNode.after.Remove(this);
	}
}
