using System.Runtime.CompilerServices;

private sealed class PerCoreLockedStacks
{
	private static readonly int s_lockedStackCount = Math.Min(Environment.ProcessorCount, 64);

	private readonly LockedStack[] _perCoreStacks;

	public PerCoreLockedStacks()
	{
		LockedStack[] array = new LockedStack[s_lockedStackCount];
		for (int i = 0; i < array.Length; i++)
		{
			array[i] = new LockedStack();
		}
		_perCoreStacks = array;
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public bool TryPush(T[] array)
	{
		LockedStack[] perCoreStacks = _perCoreStacks;
		int num = (int)((uint)EnvironmentEx.CurrentManagedThreadId % (uint)s_lockedStackCount);
		for (int i = 0; i < perCoreStacks.Length; i++)
		{
			if (perCoreStacks[num].TryPush(array))
			{
				return true;
			}
			if (++num == perCoreStacks.Length)
			{
				num = 0;
			}
		}
		return false;
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public T[]? TryPop()
	{
		LockedStack[] perCoreStacks = _perCoreStacks;
		int num = (int)((uint)EnvironmentEx.CurrentManagedThreadId % (uint)s_lockedStackCount);
		for (int i = 0; i < perCoreStacks.Length; i++)
		{
			T[] result;
			if ((result = perCoreStacks[num].TryPop()) != null)
			{
				return result;
			}
			if (++num == perCoreStacks.Length)
			{
				num = 0;
			}
		}
		return null;
	}

	public void Trim(int currentMilliseconds, int id, System.Buffers.Utilities.MemoryPressure pressure, int bucketSize)
	{
		LockedStack[] perCoreStacks = _perCoreStacks;
		for (int i = 0; i < perCoreStacks.Length; i++)
		{
			perCoreStacks[i].Trim(currentMilliseconds, id, pressure, bucketSize);
		}
	}
}
