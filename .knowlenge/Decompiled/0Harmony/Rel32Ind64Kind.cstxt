using System;
using System.Runtime.CompilerServices;
using MonoMod.Utils;

private sealed class Rel32Ind64Kind : DetourKindBase
{
	public static readonly Rel32Ind64Kind Instance = new Rel32Ind64Kind();

	public override int Size => 6;

	public override int GetBytes(IntPtr from, IntPtr to, Span<byte> buffer, object? data, out IDisposable? allocHandle)
	{
		Helpers.ThrowIfArgumentNull(data, "data");
		IAllocatedMemory allocatedMemory = (IAllocatedMemory)data;
		buffer[0] = byte.MaxValue;
		buffer[1] = 37;
		System.Runtime.CompilerServices.Unsafe.WriteUnaligned(ref buffer[2], (int)((nint)allocatedMemory.BaseAddress - ((nint)from + 6)));
		System.Runtime.CompilerServices.Unsafe.WriteUnaligned(ref allocatedMemory.Memory[0], to);
		allocHandle = allocatedMemory;
		return Size;
	}

	public override bool TryGetRetargetInfo(NativeDetourInfo orig, IntPtr to, int maxSize, out NativeDetourInfo retargetInfo)
	{
		retargetInfo = orig with
		{
			To = to
		};
		return true;
	}

	public override int DoRetarget(NativeDetourInfo origInfo, IntPtr to, Span<byte> buffer, object? data, out IDisposable? allocationHandle, out bool needsRepatch, out bool disposeOldAlloc)
	{
		if (origInfo.InternalKind == this)
		{
			needsRepatch = false;
			disposeOldAlloc = false;
			Helpers.ThrowIfArgumentNull(data, "data");
			IAllocatedMemory allocatedMemory = (IAllocatedMemory)data;
			System.Runtime.CompilerServices.Unsafe.WriteUnaligned(ref allocatedMemory.Memory[0], to);
			allocationHandle = allocatedMemory;
			return 0;
		}
		needsRepatch = true;
		disposeOldAlloc = true;
		return GetBytes(origInfo.From, to, buffer, data, out allocationHandle);
	}
}
