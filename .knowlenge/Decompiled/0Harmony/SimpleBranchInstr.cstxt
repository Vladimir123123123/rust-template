using System;
using Iced.Intel;
using Iced.Intel.BlockEncoderInternal;

internal sealed class SimpleBranchInstr : Instr
{
	private enum InstrKind : byte
	{
		Unchanged,
		Short,
		Near,
		Long,
		Uninitialized
	}

	private Instruction instruction;

	private TargetInstr targetInstr;

	private BlockData pointerData;

	private InstrKind instrKind;

	private readonly byte shortInstructionSize;

	private readonly byte nearInstructionSize;

	private readonly byte longInstructionSize;

	private readonly byte nativeInstructionSize;

	private readonly Code nativeCode;

	public SimpleBranchInstr(BlockEncoder blockEncoder, Block block, in Instruction instruction)
		: base(block, instruction.IP)
	{
		this.instruction = instruction;
		instrKind = InstrKind.Uninitialized;
		Instruction instruction2;
		if (!blockEncoder.FixBranches)
		{
			instrKind = InstrKind.Unchanged;
			instruction2 = instruction;
			instruction2.NearBranch64 = 0uL;
			Size = blockEncoder.GetInstructionSize(in instruction2, 0uL);
			return;
		}
		instruction2 = instruction;
		instruction2.NearBranch64 = 0uL;
		shortInstructionSize = (byte)blockEncoder.GetInstructionSize(in instruction2, 0uL);
		nativeCode = ToNativeBranchCode(instruction.Code, blockEncoder.Bitness);
		if (nativeCode == instruction.Code)
		{
			nativeInstructionSize = shortInstructionSize;
		}
		else
		{
			instruction2 = instruction;
			instruction2.InternalSetCodeNoCheck(nativeCode);
			instruction2.NearBranch64 = 0uL;
			nativeInstructionSize = (byte)blockEncoder.GetInstructionSize(in instruction2, 0uL);
		}
		int num;
		switch (blockEncoder.Bitness)
		{
		case 16:
			num = nativeInstructionSize + 2 + 3;
			break;
		case 32:
		case 64:
			num = nativeInstructionSize + 2 + 5;
			break;
		default:
			throw new InvalidOperationException();
		}
		nearInstructionSize = (byte)num;
		if (blockEncoder.Bitness == 64)
		{
			longInstructionSize = (byte)((ulong)(nativeInstructionSize + 2) + 6uL);
			Size = Math.Max(Math.Max(shortInstructionSize, nearInstructionSize), longInstructionSize);
		}
		else
		{
			Size = Math.Max(shortInstructionSize, nearInstructionSize);
		}
	}

	private static Code ToNativeBranchCode(Code code, int bitness)
	{
		Code code2;
		Code code3;
		Code code4;
		switch (code)
		{
		case Code.Loopne_rel8_16_CX:
		case Code.Loopne_rel8_32_CX:
			code2 = Code.Loopne_rel8_16_CX;
			code3 = Code.Loopne_rel8_32_CX;
			code4 = Code.INVALID;
			break;
		case Code.Loopne_rel8_16_ECX:
		case Code.Loopne_rel8_32_ECX:
		case Code.Loopne_rel8_64_ECX:
			code2 = Code.Loopne_rel8_16_ECX;
			code3 = Code.Loopne_rel8_32_ECX;
			code4 = Code.Loopne_rel8_64_ECX;
			break;
		case Code.Loopne_rel8_16_RCX:
		case Code.Loopne_rel8_64_RCX:
			code2 = Code.Loopne_rel8_16_RCX;
			code3 = Code.INVALID;
			code4 = Code.Loopne_rel8_64_RCX;
			break;
		case Code.Loope_rel8_16_CX:
		case Code.Loope_rel8_32_CX:
			code2 = Code.Loope_rel8_16_CX;
			code3 = Code.Loope_rel8_32_CX;
			code4 = Code.INVALID;
			break;
		case Code.Loope_rel8_16_ECX:
		case Code.Loope_rel8_32_ECX:
		case Code.Loope_rel8_64_ECX:
			code2 = Code.Loope_rel8_16_ECX;
			code3 = Code.Loope_rel8_32_ECX;
			code4 = Code.Loope_rel8_64_ECX;
			break;
		case Code.Loope_rel8_16_RCX:
		case Code.Loope_rel8_64_RCX:
			code2 = Code.Loope_rel8_16_RCX;
			code3 = Code.INVALID;
			code4 = Code.Loope_rel8_64_RCX;
			break;
		case Code.Loop_rel8_16_CX:
		case Code.Loop_rel8_32_CX:
			code2 = Code.Loop_rel8_16_CX;
			code3 = Code.Loop_rel8_32_CX;
			code4 = Code.INVALID;
			break;
		case Code.Loop_rel8_16_ECX:
		case Code.Loop_rel8_32_ECX:
		case Code.Loop_rel8_64_ECX:
			code2 = Code.Loop_rel8_16_ECX;
			code3 = Code.Loop_rel8_32_ECX;
			code4 = Code.Loop_rel8_64_ECX;
			break;
		case Code.Loop_rel8_16_RCX:
		case Code.Loop_rel8_64_RCX:
			code2 = Code.Loop_rel8_16_RCX;
			code3 = Code.INVALID;
			code4 = Code.Loop_rel8_64_RCX;
			break;
		case Code.Jcxz_rel8_16:
		case Code.Jcxz_rel8_32:
			code2 = Code.Jcxz_rel8_16;
			code3 = Code.Jcxz_rel8_32;
			code4 = Code.INVALID;
			break;
		case Code.Jecxz_rel8_16:
		case Code.Jecxz_rel8_32:
		case Code.Jecxz_rel8_64:
			code2 = Code.Jecxz_rel8_16;
			code3 = Code.Jecxz_rel8_32;
			code4 = Code.Jecxz_rel8_64;
			break;
		case Code.Jrcxz_rel8_16:
		case Code.Jrcxz_rel8_64:
			code2 = Code.Jrcxz_rel8_16;
			code3 = Code.INVALID;
			code4 = Code.Jrcxz_rel8_64;
			break;
		default:
			throw new ArgumentOutOfRangeException("code");
		}
		return bitness switch
		{
			16 => code2, 
			32 => code3, 
			64 => code4, 
			_ => throw new ArgumentOutOfRangeException("bitness"), 
		};
	}

	public override void Initialize(BlockEncoder blockEncoder)
	{
		targetInstr = blockEncoder.GetTarget(instruction.NearBranchTarget);
	}

	public override bool Optimize(ulong gained)
	{
		return TryOptimize(gained);
	}

	private bool TryOptimize(ulong gained)
	{
		if (instrKind == InstrKind.Unchanged || instrKind == InstrKind.Short)
		{
			Done = true;
			return false;
		}
		ulong address = targetInstr.GetAddress();
		ulong num = IP + shortInstructionSize;
		long diff = (long)(address - num);
		diff = Instr.CorrectDiff(targetInstr.IsInBlock(Block), diff, gained);
		if (-128 <= diff && diff <= 127)
		{
			if (pointerData != null)
			{
				pointerData.IsValid = false;
			}
			instrKind = InstrKind.Short;
			Size = shortInstructionSize;
			Done = true;
			return true;
		}
		ulong address2 = targetInstr.GetAddress();
		num = IP + nearInstructionSize;
		diff = (long)(address2 - num);
		diff = Instr.CorrectDiff(targetInstr.IsInBlock(Block), diff, gained);
		if (int.MinValue <= diff && diff <= int.MaxValue)
		{
			if (pointerData != null)
			{
				pointerData.IsValid = false;
			}
			if (diff < -1920 || diff > 1905)
			{
				Done = true;
			}
			instrKind = InstrKind.Near;
			Size = nearInstructionSize;
			return true;
		}
		if (pointerData == null)
		{
			pointerData = Block.AllocPointerLocation();
		}
		instrKind = InstrKind.Long;
		return false;
	}

	public override string? TryEncode(Encoder encoder, out ConstantOffsets constantOffsets, out bool isOriginalInstruction)
	{
		uint encodedLength2;
		uint encodedLength;
		string errorMessage;
		switch (instrKind)
		{
		case InstrKind.Unchanged:
		case InstrKind.Short:
			isOriginalInstruction = true;
			this.instruction.NearBranch64 = targetInstr.GetAddress();
			if (!encoder.TryEncode(in this.instruction, IP, out encodedLength2, out errorMessage))
			{
				constantOffsets = default(ConstantOffsets);
				return Instr.CreateErrorMessage(errorMessage, in this.instruction);
			}
			constantOffsets = encoder.GetConstantOffsets();
			return null;
		case InstrKind.Near:
		{
			isOriginalInstruction = false;
			constantOffsets = default(ConstantOffsets);
			Instruction instruction = this.instruction;
			instruction.InternalSetCodeNoCheck(nativeCode);
			instruction.NearBranch64 = IP + nativeInstructionSize + 2;
			if (!encoder.TryEncode(in instruction, IP, out uint num, out errorMessage))
			{
				return Instr.CreateErrorMessage(errorMessage, in this.instruction);
			}
			instruction = default(Instruction);
			instruction.NearBranch64 = IP + nearInstructionSize;
			Code code;
			switch (encoder.Bitness)
			{
			case 16:
				instruction.InternalSetCodeNoCheck(Code.Jmp_rel8_16);
				code = Code.Jmp_rel16;
				instruction.Op0Kind = OpKind.NearBranch16;
				break;
			case 32:
				instruction.InternalSetCodeNoCheck(Code.Jmp_rel8_32);
				code = Code.Jmp_rel32_32;
				instruction.Op0Kind = OpKind.NearBranch32;
				break;
			case 64:
				instruction.InternalSetCodeNoCheck(Code.Jmp_rel8_64);
				code = Code.Jmp_rel32_64;
				instruction.Op0Kind = OpKind.NearBranch64;
				break;
			default:
				throw new InvalidOperationException();
			}
			if (!encoder.TryEncode(in instruction, IP + num, out encodedLength, out errorMessage))
			{
				return Instr.CreateErrorMessage(errorMessage, in this.instruction);
			}
			num += encodedLength;
			instruction.InternalSetCodeNoCheck(code);
			instruction.NearBranch64 = targetInstr.GetAddress();
			encoder.TryEncode(in instruction, IP + num, out encodedLength, out errorMessage);
			if (errorMessage != null)
			{
				return Instr.CreateErrorMessage(errorMessage, in this.instruction);
			}
			return null;
		}
		case InstrKind.Long:
		{
			isOriginalInstruction = false;
			constantOffsets = default(ConstantOffsets);
			pointerData.Data = targetInstr.GetAddress();
			Instruction instruction = this.instruction;
			instruction.InternalSetCodeNoCheck(nativeCode);
			instruction.NearBranch64 = IP + nativeInstructionSize + 2;
			if (!encoder.TryEncode(in instruction, IP, out encodedLength, out errorMessage))
			{
				return Instr.CreateErrorMessage(errorMessage, in this.instruction);
			}
			uint num = encodedLength;
			instruction = default(Instruction);
			instruction.NearBranch64 = IP + longInstructionSize;
			switch (encoder.Bitness)
			{
			case 16:
				instruction.InternalSetCodeNoCheck(Code.Jmp_rel8_16);
				instruction.Op0Kind = OpKind.NearBranch16;
				break;
			case 32:
				instruction.InternalSetCodeNoCheck(Code.Jmp_rel8_32);
				instruction.Op0Kind = OpKind.NearBranch32;
				break;
			case 64:
				instruction.InternalSetCodeNoCheck(Code.Jmp_rel8_64);
				instruction.Op0Kind = OpKind.NearBranch64;
				break;
			default:
				throw new InvalidOperationException();
			}
			if (!encoder.TryEncode(in instruction, IP + num, out encodedLength, out errorMessage))
			{
				return Instr.CreateErrorMessage(errorMessage, in this.instruction);
			}
			num += encodedLength;
			errorMessage = EncodeBranchToPointerData(encoder, isCall: false, IP + num, pointerData, out encodedLength2, Size - num);
			if (errorMessage != null)
			{
				return Instr.CreateErrorMessage(errorMessage, in this.instruction);
			}
			return null;
		}
		default:
			throw new InvalidOperationException();
		}
	}
}
