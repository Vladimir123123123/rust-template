using System;
using MonoMod.Logs;
using MonoMod.Utils;

public struct VmProtFmtProxy : IDebugFormattable
{
	private readonly vm_prot_t value;

	public VmProtFmtProxy(vm_prot_t value)
	{
		this.value = value;
	}

	public bool TryFormatInto(Span<char> span, out int wrote)
	{
		int num = 0;
		if (value.Has(vm_prot_t.NoChange))
		{
			if (span.Slice(num).Length < 1)
			{
				wrote = num;
				return false;
			}
			span[num++] = '~';
		}
		if (span.Slice(num).Length < 3)
		{
			wrote = 0;
			return false;
		}
		span[num++] = (value.Has(vm_prot_t.Read) ? 'r' : '-');
		span[num++] = (value.Has(vm_prot_t.Write) ? 'w' : '-');
		span[num++] = (value.Has(vm_prot_t.Execute) ? 'x' : '-');
		if (value.Has(vm_prot_t.StripRead))
		{
			if (span.Slice(num).Length < 1)
			{
				wrote = num;
				return false;
			}
			span[num++] = '!';
		}
		if (value.Has(vm_prot_t.Copy))
		{
			if (span.Slice(num).Length < 1)
			{
				wrote = num;
				return false;
			}
			span[num++] = 'c';
		}
		if (value.Has(vm_prot_t.IsMask))
		{
			if (span.Slice(num).Length < " (mask)".Length)
			{
				wrote = num;
				return false;
			}
			MemoryExtensions.AsSpan(" (mask)").CopyTo(span.Slice(num));
			num += " (mask)".Length;
		}
		wrote = num;
		return true;
	}
}
