using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Reflection;
using MonoMod.Utils.Interop;

private sealed class WindowsBackend : BackendImpl
{
	protected override void CheckAndThrowError()
	{
		uint lastError = Windows.GetLastError();
		if (lastError != 0)
		{
			throw new Win32Exception((int)lastError);
		}
	}

	protected unsafe override bool TryOpenLibraryCore(string? name, Assembly assembly, out IntPtr handle)
	{
		IntPtr intPtr;
		if (name == null)
		{
			intPtr = (handle = (nint)Windows.GetModuleHandleW(null));
		}
		else
		{
			fixed (char* lpLibFileName = name)
			{
				intPtr = (handle = (nint)Windows.LoadLibraryW((ushort*)lpLibFileName));
			}
		}
		return intPtr != IntPtr.Zero;
	}

	public unsafe override bool TryCloseLibrary(IntPtr handle)
	{
		return Windows.FreeLibrary(new Windows.HMODULE((void*)handle));
	}

	public unsafe override bool TryGetExport(IntPtr handle, string name, out IntPtr ptr)
	{
		byte[]? array = Unix.MarshalToUtf8(name);
		IntPtr intPtr;
		fixed (byte* lpProcName = array)
		{
			intPtr = (ptr = Windows.GetProcAddress(new Windows.HMODULE((void*)handle), (sbyte*)lpProcName));
		}
		Unix.FreeMarshalledArray(array);
		return intPtr != IntPtr.Zero;
	}

	protected override IEnumerable<string> GetLibrarySearchOrder(string name)
	{
		yield return name;
		if (!name.EndsWith(".dll", StringComparison.OrdinalIgnoreCase) && !name.EndsWith(".exe", StringComparison.OrdinalIgnoreCase))
		{
			yield return name + ".dll";
		}
	}
}
