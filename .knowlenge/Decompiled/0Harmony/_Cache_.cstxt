using System;
using System.Collections.Generic;
using System.Reflection;

private class _Cache_
{
	public readonly Dictionary<string, Func<object?, object?>> Getters = new Dictionary<string, Func<object, object>>();

	public readonly Dictionary<string, Action<object?, object?>> Setters = new Dictionary<string, Action<object, object>>();

	public readonly Dictionary<string, Func<object?, object?[]?, object?>> Methods = new Dictionary<string, Func<object, object[], object>>();

	public _Cache_(Type? targetType)
	{
		bool flag = true;
		while (targetType != null && targetType != targetType.BaseType)
		{
			FieldInfo[] fields = targetType.GetFields(BindingFlags.Instance | BindingFlags.Static | BindingFlags.Public | BindingFlags.NonPublic);
			foreach (FieldInfo fieldInfo in fields)
			{
				string name = fieldInfo.Name;
				if (Getters.ContainsKey(name) || Setters.ContainsKey(name))
				{
					continue;
				}
				try
				{
					FastReflectionHelper.FastInvoker fastInvoker = fieldInfo.GetFastInvoker();
					Getters[name] = (object? obj) => fastInvoker(obj);
					Setters[name] = delegate(object? obj, object? value)
					{
						fastInvoker(obj, value);
					};
				}
				catch
				{
					Getters[name] = fieldInfo.GetValue;
					Setters[name] = fieldInfo.SetValue;
				}
			}
			PropertyInfo[] properties = targetType.GetProperties(BindingFlags.Instance | BindingFlags.Static | BindingFlags.Public | BindingFlags.NonPublic);
			foreach (PropertyInfo propertyInfo in properties)
			{
				string name2 = propertyInfo.Name;
				MethodInfo get = propertyInfo.GetGetMethod(nonPublic: true);
				if (get != null && !Getters.ContainsKey(name2))
				{
					try
					{
						FastReflectionHelper.FastInvoker fastInvoker2 = get.GetFastInvoker();
						Getters[name2] = (object? obj) => fastInvoker2(obj);
					}
					catch
					{
						Getters[name2] = (object? obj) => get.Invoke(obj, _NoArgs);
					}
				}
				MethodInfo set = propertyInfo.GetSetMethod(nonPublic: true);
				if (!(set != null) || Setters.ContainsKey(name2))
				{
					continue;
				}
				try
				{
					FastReflectionHelper.FastInvoker fastInvoker3 = set.GetFastInvoker();
					Setters[name2] = delegate(object? obj, object? value)
					{
						fastInvoker3(obj, value);
					};
				}
				catch
				{
					Setters[name2] = delegate(object? obj, object? value)
					{
						set.Invoke(obj, new object[1] { value });
					};
				}
			}
			Dictionary<string, MethodInfo> dictionary = new Dictionary<string, MethodInfo>();
			MethodInfo[] methods = targetType.GetMethods(BindingFlags.Instance | BindingFlags.Static | BindingFlags.Public | BindingFlags.NonPublic);
			foreach (MethodInfo methodInfo in methods)
			{
				string name3 = methodInfo.Name;
				if (flag || !Methods.ContainsKey(name3))
				{
					if (dictionary.ContainsKey(name3))
					{
						dictionary[name3] = null;
					}
					else
					{
						dictionary[name3] = methodInfo;
					}
				}
			}
			foreach (KeyValuePair<string, MethodInfo> item in dictionary)
			{
				if (item.Value == null || item.Value.IsGenericMethod)
				{
					continue;
				}
				try
				{
					FastReflectionHelper.FastInvoker cb = item.Value.GetFastInvoker();
					Methods[item.Key] = (object? target, object?[]? args) => cb(target, args);
				}
				catch
				{
					Methods[item.Key] = item.Value.Invoke;
				}
			}
			flag = false;
			targetType = targetType.BaseType;
		}
	}
}
