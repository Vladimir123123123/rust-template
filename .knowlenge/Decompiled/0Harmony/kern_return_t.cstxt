using System;
using System.Diagnostics;

[DebuggerDisplay("{Value}")]
public struct kern_return_t : IEquatable<kern_return_t>
{
	private int value;

	public static kern_return_t Success = new kern_return_t(0);

	public static kern_return_t InvalidAddress = new kern_return_t(1);

	public static kern_return_t ProtectionFailure = new kern_return_t(2);

	public static kern_return_t NoSpace = new kern_return_t(3);

	public static kern_return_t InvalidArgument = new kern_return_t(4);

	public static kern_return_t Failure = new kern_return_t(5);

	public int Value => value;

	public kern_return_t(int value)
	{
		this.value = value;
	}

	public static implicit operator bool(kern_return_t v)
	{
		return v.value == 0;
	}

	public static bool operator ==(kern_return_t x, kern_return_t y)
	{
		return x.value == y.value;
	}

	public static bool operator !=(kern_return_t x, kern_return_t y)
	{
		return x.value != y.value;
	}

	public override bool Equals(object? obj)
	{
		if (obj is kern_return_t other)
		{
			return Equals(other);
		}
		return false;
	}

	public bool Equals(kern_return_t other)
	{
		return value == other.value;
	}

	public override int GetHashCode()
	{
		return HashCode.Combine(value);
	}
}
