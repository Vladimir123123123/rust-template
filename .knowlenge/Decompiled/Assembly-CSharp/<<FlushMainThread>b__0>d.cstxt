using System;
using System.Diagnostics;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using UnityEngine;

[StructLayout(LayoutKind.Auto)]
private struct <<FlushMainThread>b__0>d : IAsyncStateMachine
{
	public int <>1__state;

	public AsyncTaskMethodBuilder <>t__builder;

	public <>c__DisplayClass31_0 <>4__this;

	private TaskAwaiter <>u__1;

	private void MoveNext()
	{
		int num = <>1__state;
		<>c__DisplayClass31_0 <>c__DisplayClass31_ = <>4__this;
		try
		{
			try
			{
				TaskAwaiter awaiter;
				if (num != 0)
				{
					awaiter = <>c__DisplayClass31_.<>4__this.ProcessPerformanceData(<>c__DisplayClass31_.record, <>c__DisplayClass31_.frametimes, <>c__DisplayClass31_.ping).GetAwaiter();
					if (!awaiter.IsCompleted)
					{
						num = (<>1__state = 0);
						<>u__1 = awaiter;
						<>t__builder.AwaitUnsafeOnCompleted(ref awaiter, ref this);
						return;
					}
				}
				else
				{
					awaiter = <>u__1;
					<>u__1 = default(TaskAwaiter);
					num = (<>1__state = -1);
				}
				awaiter.GetResult();
			}
			catch (Exception exception)
			{
				UnityEngine.Debug.LogException(exception);
			}
		}
		catch (Exception exception2)
		{
			<>1__state = -2;
			<>t__builder.SetException(exception2);
			return;
		}
		<>1__state = -2;
		<>t__builder.SetResult();
	}

	void IAsyncStateMachine.MoveNext()
	{
		//ILSpy generated this explicit interface implementation from .override directive in MoveNext
		this.MoveNext();
	}

	[DebuggerHidden]
	private void SetStateMachine(IAsyncStateMachine stateMachine)
	{
		<>t__builder.SetStateMachine(stateMachine);
	}

	void IAsyncStateMachine.SetStateMachine(IAsyncStateMachine stateMachine)
	{
		//ILSpy generated this explicit interface implementation from .override directive in SetStateMachine
		this.SetStateMachine(stateMachine);
	}
}
