using System;
using UnityEngine;

[Serializable]
public struct AiStatistics
{
	public enum FamilyEnum
	{
		Bear,
		Wolf,
		Deer,
		Boar,
		Chicken,
		Horse,
		Zombie,
		Scientist,
		Murderer,
		Player
	}

	[Range(0f, 1f)]
	[Tooltip("Ai will be less likely to fight animals that are larger than them, and more likely to flee from them.")]
	public float Size;

	[Tooltip("How fast we can move")]
	public float Speed;

	[Tooltip("How fast can we accelerate")]
	public float Acceleration;

	[Tooltip("How fast can we turn around")]
	public float TurnSpeed;

	[Tooltip("Determines things like how near we'll allow other species to get")]
	[Range(0f, 1f)]
	public float Tolerance;

	[Tooltip("How far this NPC can see")]
	public float VisionRange;

	[Tooltip("Our vision cone for dot product - a value of -1 means we can see all around us, 0 = only infront ")]
	public float VisionCone;

	[Tooltip("NPCs use distance visibility to basically make closer enemies easier to detect than enemies further away")]
	public AnimationCurve DistanceVisibility;

	[Tooltip("How likely are we to be offensive without being threatened")]
	public float Hostility;

	[Tooltip("How likely are we to defend ourselves when attacked")]
	public float Defensiveness;

	[Tooltip("The range at which we will engage targets")]
	public float AggressionRange;

	[Tooltip("The range at which an aggrified npc will disengage it's current target")]
	public float DeaggroRange;

	[Tooltip("For how long will we chase a target until we give up")]
	public float DeaggroChaseTime;

	[Tooltip("When we deaggro, how long do we wait until we can aggro again.")]
	public float DeaggroCooldown;

	[Tooltip("The threshold of our health fraction where there's a chance that we want to flee")]
	public float HealthThresholdForFleeing;

	[Tooltip("The chance that we will flee when our health threshold is triggered")]
	public float HealthThresholdFleeChance;

	[Tooltip("When we flee, what is the minimum distance we should flee?")]
	public float MinFleeRange;

	[Tooltip("When we flee, what is the maximum distance we should flee?")]
	public float MaxFleeRange;

	[Tooltip("When we flee, what is the maximum time that can pass until we stop?")]
	public float MaxFleeTime;

	[Tooltip("At what range we are afraid of a target that is in our Is Afraid Of list.")]
	public float AfraidRange;

	[Tooltip("The family this npc belong to. Npcs in the same family will not attack each other.")]
	public FamilyEnum Family;

	[Tooltip("List of the types of Npc that we are afraid of.")]
	public FamilyEnum[] IsAfraidOf;

	[Tooltip("The minimum distance this npc will wander when idle.")]
	public float MinRoamRange;

	[Tooltip("The maximum distance this npc will wander when idle.")]
	public float MaxRoamRange;

	[Tooltip("The minimum amount of time between each time we seek a new roam destination (when idle)")]
	public float MinRoamDelay;

	[Tooltip("The maximum amount of time between each time we seek a new roam destination (when idle)")]
	public float MaxRoamDelay;

	[Tooltip("If an npc is mobile, they are allowed to move when idle.")]
	public bool IsMobile;

	[Tooltip("In the range between min and max roam delay, we evaluate the random value through this curve")]
	public AnimationCurve RoamDelayDistribution;

	[Tooltip("For how long do we remember that someone attacked us")]
	public float AttackedMemoryTime;

	[Tooltip("How long should we block movement to make the wakeup animation not look whack?")]
	public float WakeupBlockMoveTime;

	[Tooltip("The maximum water depth this npc willingly will walk into.")]
	public float MaxWaterDepth;

	[Tooltip("The water depth at which they will start swimming.")]
	public float WaterLevelNeck;

	public float WaterLevelNeckOffset;

	[Tooltip("The range we consider using close range weapons.")]
	public float CloseRange;

	[Tooltip("The range we consider using medium range weapons.")]
	public float MediumRange;

	[Tooltip("The range we consider using long range weapons.")]
	public float LongRange;

	[Tooltip("How long can we be out of range of our spawn point before we time out and make our way back home (when idle).")]
	public float OutOfRangeOfSpawnPointTimeout;

	[Tooltip("If this is set to true, then a target must hold special markers (like IsHostile) for the target to be considered for aggressive action.")]
	public bool OnlyAggroMarkedTargets;
}
