using System.Collections.Generic;
using CompanionServer;
using CompanionServer.Cameras;
using ConVar;
using Facepunch;
using Facepunch.Extend;
using Facepunch.Network;
using Facepunch.Rcon;
using Facepunch.Rust;
using Facepunch.Rust.Profiling;
using Rust.Ai;
using Rust.Ai.Gen2;
using UnityEngine;

public class ConsoleGen
{
	public static Command[] All;

	static ConsoleGen()
	{
		//IL_000c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0012: Expected O, but got Unknown
		//IL_0071: Unknown result type (might be due to invalid IL or missing references)
		//IL_0077: Expected O, but got Unknown
		//IL_00d6: Unknown result type (might be due to invalid IL or missing references)
		//IL_00dc: Expected O, but got Unknown
		//IL_013b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0141: Expected O, but got Unknown
		//IL_01a0: Unknown result type (might be due to invalid IL or missing references)
		//IL_01a6: Expected O, but got Unknown
		//IL_0205: Unknown result type (might be due to invalid IL or missing references)
		//IL_020b: Expected O, but got Unknown
		//IL_026a: Unknown result type (might be due to invalid IL or missing references)
		//IL_0270: Expected O, but got Unknown
		//IL_02cf: Unknown result type (might be due to invalid IL or missing references)
		//IL_02d5: Expected O, but got Unknown
		//IL_0334: Unknown result type (might be due to invalid IL or missing references)
		//IL_033a: Expected O, but got Unknown
		//IL_039a: Unknown result type (might be due to invalid IL or missing references)
		//IL_03a0: Expected O, but got Unknown
		//IL_040b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0411: Expected O, but got Unknown
		//IL_045b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0461: Expected O, but got Unknown
		//IL_04c1: Unknown result type (might be due to invalid IL or missing references)
		//IL_04c7: Expected O, but got Unknown
		//IL_0527: Unknown result type (might be due to invalid IL or missing references)
		//IL_052d: Expected O, but got Unknown
		//IL_058d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0593: Expected O, but got Unknown
		//IL_05dd: Unknown result type (might be due to invalid IL or missing references)
		//IL_05e3: Expected O, but got Unknown
		//IL_062d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0633: Expected O, but got Unknown
		//IL_0693: Unknown result type (might be due to invalid IL or missing references)
		//IL_0699: Expected O, but got Unknown
		//IL_06f9: Unknown result type (might be due to invalid IL or missing references)
		//IL_06ff: Expected O, but got Unknown
		//IL_075f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0765: Expected O, but got Unknown
		//IL_07c5: Unknown result type (might be due to invalid IL or missing references)
		//IL_07cb: Expected O, but got Unknown
		//IL_082b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0831: Expected O, but got Unknown
		//IL_0891: Unknown result type (might be due to invalid IL or missing references)
		//IL_0897: Expected O, but got Unknown
		//IL_08f7: Unknown result type (might be due to invalid IL or missing references)
		//IL_08fd: Expected O, but got Unknown
		//IL_095d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0963: Expected O, but got Unknown
		//IL_09ce: Unknown result type (might be due to invalid IL or missing references)
		//IL_09d4: Expected O, but got Unknown
		//IL_0a3f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0a45: Expected O, but got Unknown
		//IL_0aa5: Unknown result type (might be due to invalid IL or missing references)
		//IL_0aab: Expected O, but got Unknown
		//IL_0b0b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0b11: Expected O, but got Unknown
		//IL_0b7c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0b82: Expected O, but got Unknown
		//IL_0be2: Unknown result type (might be due to invalid IL or missing references)
		//IL_0be8: Expected O, but got Unknown
		//IL_0c48: Unknown result type (might be due to invalid IL or missing references)
		//IL_0c4e: Expected O, but got Unknown
		//IL_0cae: Unknown result type (might be due to invalid IL or missing references)
		//IL_0cb4: Expected O, but got Unknown
		//IL_0d14: Unknown result type (might be due to invalid IL or missing references)
		//IL_0d1a: Expected O, but got Unknown
		//IL_0d85: Unknown result type (might be due to invalid IL or missing references)
		//IL_0d8b: Expected O, but got Unknown
		//IL_0df6: Unknown result type (might be due to invalid IL or missing references)
		//IL_0dfc: Expected O, but got Unknown
		//IL_0e67: Unknown result type (might be due to invalid IL or missing references)
		//IL_0e6d: Expected O, but got Unknown
		//IL_0ed8: Unknown result type (might be due to invalid IL or missing references)
		//IL_0ede: Expected O, but got Unknown
		//IL_0f50: Unknown result type (might be due to invalid IL or missing references)
		//IL_0f56: Expected O, but got Unknown
		//IL_0fa0: Unknown result type (might be due to invalid IL or missing references)
		//IL_0fa6: Expected O, but got Unknown
		//IL_1018: Unknown result type (might be due to invalid IL or missing references)
		//IL_101e: Expected O, but got Unknown
		//IL_1089: Unknown result type (might be due to invalid IL or missing references)
		//IL_108f: Expected O, but got Unknown
		//IL_10fa: Unknown result type (might be due to invalid IL or missing references)
		//IL_1100: Expected O, but got Unknown
		//IL_116b: Unknown result type (might be due to invalid IL or missing references)
		//IL_1171: Expected O, but got Unknown
		//IL_11dc: Unknown result type (might be due to invalid IL or missing references)
		//IL_11e2: Expected O, but got Unknown
		//IL_1242: Unknown result type (might be due to invalid IL or missing references)
		//IL_1248: Expected O, but got Unknown
		//IL_12b3: Unknown result type (might be due to invalid IL or missing references)
		//IL_12b9: Expected O, but got Unknown
		//IL_1324: Unknown result type (might be due to invalid IL or missing references)
		//IL_132a: Expected O, but got Unknown
		//IL_1395: Unknown result type (might be due to invalid IL or missing references)
		//IL_139b: Expected O, but got Unknown
		//IL_1406: Unknown result type (might be due to invalid IL or missing references)
		//IL_140c: Expected O, but got Unknown
		//IL_1477: Unknown result type (might be due to invalid IL or missing references)
		//IL_147d: Expected O, but got Unknown
		//IL_14e8: Unknown result type (might be due to invalid IL or missing references)
		//IL_14ee: Expected O, but got Unknown
		//IL_1559: Unknown result type (might be due to invalid IL or missing references)
		//IL_155f: Expected O, but got Unknown
		//IL_15bf: Unknown result type (might be due to invalid IL or missing references)
		//IL_15c5: Expected O, but got Unknown
		//IL_1630: Unknown result type (might be due to invalid IL or missing references)
		//IL_1636: Expected O, but got Unknown
		//IL_16a8: Unknown result type (might be due to invalid IL or missing references)
		//IL_16ae: Expected O, but got Unknown
		//IL_1719: Unknown result type (might be due to invalid IL or missing references)
		//IL_171f: Expected O, but got Unknown
		//IL_1791: Unknown result type (might be due to invalid IL or missing references)
		//IL_1797: Expected O, but got Unknown
		//IL_1809: Unknown result type (might be due to invalid IL or missing references)
		//IL_180f: Expected O, but got Unknown
		//IL_187a: Unknown result type (might be due to invalid IL or missing references)
		//IL_1880: Expected O, but got Unknown
		//IL_18eb: Unknown result type (might be due to invalid IL or missing references)
		//IL_18f1: Expected O, but got Unknown
		//IL_1963: Unknown result type (might be due to invalid IL or missing references)
		//IL_1969: Expected O, but got Unknown
		//IL_19d0: Unknown result type (might be due to invalid IL or missing references)
		//IL_19d6: Expected O, but got Unknown
		//IL_1a20: Unknown result type (might be due to invalid IL or missing references)
		//IL_1a26: Expected O, but got Unknown
		//IL_1abf: Unknown result type (might be due to invalid IL or missing references)
		//IL_1ac5: Expected O, but got Unknown
		//IL_1b25: Unknown result type (might be due to invalid IL or missing references)
		//IL_1b2b: Expected O, but got Unknown
		//IL_1b8b: Unknown result type (might be due to invalid IL or missing references)
		//IL_1b91: Expected O, but got Unknown
		//IL_1bf1: Unknown result type (might be due to invalid IL or missing references)
		//IL_1bf7: Expected O, but got Unknown
		//IL_1c57: Unknown result type (might be due to invalid IL or missing references)
		//IL_1c5d: Expected O, but got Unknown
		//IL_1cbd: Unknown result type (might be due to invalid IL or missing references)
		//IL_1cc3: Expected O, but got Unknown
		//IL_1d23: Unknown result type (might be due to invalid IL or missing references)
		//IL_1d29: Expected O, but got Unknown
		//IL_1d89: Unknown result type (might be due to invalid IL or missing references)
		//IL_1d8f: Expected O, but got Unknown
		//IL_1def: Unknown result type (might be due to invalid IL or missing references)
		//IL_1df5: Expected O, but got Unknown
		//IL_1e55: Unknown result type (might be due to invalid IL or missing references)
		//IL_1e5b: Expected O, but got Unknown
		//IL_1ebb: Unknown result type (might be due to invalid IL or missing references)
		//IL_1ec1: Expected O, but got Unknown
		//IL_1f0b: Unknown result type (might be due to invalid IL or missing references)
		//IL_1f11: Expected O, but got Unknown
		//IL_1f71: Unknown result type (might be due to invalid IL or missing references)
		//IL_1f77: Expected O, but got Unknown
		//IL_1fd7: Unknown result type (might be due to invalid IL or missing references)
		//IL_1fdd: Expected O, but got Unknown
		//IL_2027: Unknown result type (might be due to invalid IL or missing references)
		//IL_202d: Expected O, but got Unknown
		//IL_2077: Unknown result type (might be due to invalid IL or missing references)
		//IL_207d: Expected O, but got Unknown
		//IL_20dd: Unknown result type (might be due to invalid IL or missing references)
		//IL_20e3: Expected O, but got Unknown
		//IL_2143: Unknown result type (might be due to invalid IL or missing references)
		//IL_2149: Expected O, but got Unknown
		//IL_21a9: Unknown result type (might be due to invalid IL or missing references)
		//IL_21af: Expected O, but got Unknown
		//IL_220f: Unknown result type (might be due to invalid IL or missing references)
		//IL_2215: Expected O, but got Unknown
		//IL_2275: Unknown result type (might be due to invalid IL or missing references)
		//IL_227b: Expected O, but got Unknown
		//IL_22db: Unknown result type (might be due to invalid IL or missing references)
		//IL_22e1: Expected O, but got Unknown
		//IL_2341: Unknown result type (might be due to invalid IL or missing references)
		//IL_2347: Expected O, but got Unknown
		//IL_23a7: Unknown result type (might be due to invalid IL or missing references)
		//IL_23ad: Expected O, but got Unknown
		//IL_240d: Unknown result type (might be due to invalid IL or missing references)
		//IL_2413: Expected O, but got Unknown
		//IL_245d: Unknown result type (might be due to invalid IL or missing references)
		//IL_2463: Expected O, but got Unknown
		//IL_24ad: Unknown result type (might be due to invalid IL or missing references)
		//IL_24b3: Expected O, but got Unknown
		//IL_2533: Unknown result type (might be due to invalid IL or missing references)
		//IL_2539: Expected O, but got Unknown
		//IL_2583: Unknown result type (might be due to invalid IL or missing references)
		//IL_2589: Expected O, but got Unknown
		//IL_25d3: Unknown result type (might be due to invalid IL or missing references)
		//IL_25d9: Expected O, but got Unknown
		//IL_2639: Unknown result type (might be due to invalid IL or missing references)
		//IL_263f: Expected O, but got Unknown
		//IL_26b1: Unknown result type (might be due to invalid IL or missing references)
		//IL_26b7: Expected O, but got Unknown
		//IL_270c: Unknown result type (might be due to invalid IL or missing references)
		//IL_2712: Expected O, but got Unknown
		//IL_277d: Unknown result type (might be due to invalid IL or missing references)
		//IL_2783: Expected O, but got Unknown
		//IL_27e3: Unknown result type (might be due to invalid IL or missing references)
		//IL_27e9: Expected O, but got Unknown
		//IL_2849: Unknown result type (might be due to invalid IL or missing references)
		//IL_284f: Expected O, but got Unknown
		//IL_2899: Unknown result type (might be due to invalid IL or missing references)
		//IL_289f: Expected O, but got Unknown
		//IL_28e9: Unknown result type (might be due to invalid IL or missing references)
		//IL_28ef: Expected O, but got Unknown
		//IL_2939: Unknown result type (might be due to invalid IL or missing references)
		//IL_293f: Expected O, but got Unknown
		//IL_299f: Unknown result type (might be due to invalid IL or missing references)
		//IL_29a5: Expected O, but got Unknown
		//IL_2a05: Unknown result type (might be due to invalid IL or missing references)
		//IL_2a0b: Expected O, but got Unknown
		//IL_2a6b: Unknown result type (might be due to invalid IL or missing references)
		//IL_2a71: Expected O, but got Unknown
		//IL_2ad1: Unknown result type (might be due to invalid IL or missing references)
		//IL_2ad7: Expected O, but got Unknown
		//IL_2b37: Unknown result type (might be due to invalid IL or missing references)
		//IL_2b3d: Expected O, but got Unknown
		//IL_2b9d: Unknown result type (might be due to invalid IL or missing references)
		//IL_2ba3: Expected O, but got Unknown
		//IL_2c03: Unknown result type (might be due to invalid IL or missing references)
		//IL_2c09: Expected O, but got Unknown
		//IL_2c69: Unknown result type (might be due to invalid IL or missing references)
		//IL_2c6f: Expected O, but got Unknown
		//IL_2ccf: Unknown result type (might be due to invalid IL or missing references)
		//IL_2cd5: Expected O, but got Unknown
		//IL_2d35: Unknown result type (might be due to invalid IL or missing references)
		//IL_2d3b: Expected O, but got Unknown
		//IL_2d9b: Unknown result type (might be due to invalid IL or missing references)
		//IL_2da1: Expected O, but got Unknown
		//IL_2e01: Unknown result type (might be due to invalid IL or missing references)
		//IL_2e07: Expected O, but got Unknown
		//IL_2e67: Unknown result type (might be due to invalid IL or missing references)
		//IL_2e6d: Expected O, but got Unknown
		//IL_2ecd: Unknown result type (might be due to invalid IL or missing references)
		//IL_2ed3: Expected O, but got Unknown
		//IL_2f33: Unknown result type (might be due to invalid IL or missing references)
		//IL_2f39: Expected O, but got Unknown
		//IL_2f99: Unknown result type (might be due to invalid IL or missing references)
		//IL_2f9f: Expected O, but got Unknown
		//IL_2ff4: Unknown result type (might be due to invalid IL or missing references)
		//IL_2ffa: Expected O, but got Unknown
		//IL_3044: Unknown result type (might be due to invalid IL or missing references)
		//IL_304a: Expected O, but got Unknown
		//IL_3094: Unknown result type (might be due to invalid IL or missing references)
		//IL_309a: Expected O, but got Unknown
		//IL_30e4: Unknown result type (might be due to invalid IL or missing references)
		//IL_30ea: Expected O, but got Unknown
		//IL_3134: Unknown result type (might be due to invalid IL or missing references)
		//IL_313a: Expected O, but got Unknown
		//IL_3184: Unknown result type (might be due to invalid IL or missing references)
		//IL_318a: Expected O, but got Unknown
		//IL_31d4: Unknown result type (might be due to invalid IL or missing references)
		//IL_31da: Expected O, but got Unknown
		//IL_3224: Unknown result type (might be due to invalid IL or missing references)
		//IL_322a: Expected O, but got Unknown
		//IL_3274: Unknown result type (might be due to invalid IL or missing references)
		//IL_327a: Expected O, but got Unknown
		//IL_3308: Unknown result type (might be due to invalid IL or missing references)
		//IL_330e: Expected O, but got Unknown
		//IL_3366: Unknown result type (might be due to invalid IL or missing references)
		//IL_336c: Expected O, but got Unknown
		//IL_33b9: Unknown result type (might be due to invalid IL or missing references)
		//IL_33bf: Expected O, but got Unknown
		//IL_340c: Unknown result type (might be due to invalid IL or missing references)
		//IL_3412: Expected O, but got Unknown
		//IL_345f: Unknown result type (might be due to invalid IL or missing references)
		//IL_3465: Expected O, but got Unknown
		//IL_34bd: Unknown result type (might be due to invalid IL or missing references)
		//IL_34c3: Expected O, but got Unknown
		//IL_351b: Unknown result type (might be due to invalid IL or missing references)
		//IL_3521: Expected O, but got Unknown
		//IL_3579: Unknown result type (might be due to invalid IL or missing references)
		//IL_357f: Expected O, but got Unknown
		//IL_35d7: Unknown result type (might be due to invalid IL or missing references)
		//IL_35dd: Expected O, but got Unknown
		//IL_3635: Unknown result type (might be due to invalid IL or missing references)
		//IL_363b: Expected O, but got Unknown
		//IL_3693: Unknown result type (might be due to invalid IL or missing references)
		//IL_3699: Expected O, but got Unknown
		//IL_36f1: Unknown result type (might be due to invalid IL or missing references)
		//IL_36f7: Expected O, but got Unknown
		//IL_374f: Unknown result type (might be due to invalid IL or missing references)
		//IL_3755: Expected O, but got Unknown
		//IL_37ad: Unknown result type (might be due to invalid IL or missing references)
		//IL_37b3: Expected O, but got Unknown
		//IL_3800: Unknown result type (might be due to invalid IL or missing references)
		//IL_3806: Expected O, but got Unknown
		//IL_3853: Unknown result type (might be due to invalid IL or missing references)
		//IL_3859: Expected O, but got Unknown
		//IL_38a6: Unknown result type (might be due to invalid IL or missing references)
		//IL_38ac: Expected O, but got Unknown
		//IL_38f9: Unknown result type (might be due to invalid IL or missing references)
		//IL_38ff: Expected O, but got Unknown
		//IL_394c: Unknown result type (might be due to invalid IL or missing references)
		//IL_3952: Expected O, but got Unknown
		//IL_399f: Unknown result type (might be due to invalid IL or missing references)
		//IL_39a5: Expected O, but got Unknown
		//IL_39f2: Unknown result type (might be due to invalid IL or missing references)
		//IL_39f8: Expected O, but got Unknown
		//IL_3a45: Unknown result type (might be due to invalid IL or missing references)
		//IL_3a4b: Expected O, but got Unknown
		//IL_3aa3: Unknown result type (might be due to invalid IL or missing references)
		//IL_3aa9: Expected O, but got Unknown
		//IL_3af6: Unknown result type (might be due to invalid IL or missing references)
		//IL_3afc: Expected O, but got Unknown
		//IL_3b49: Unknown result type (might be due to invalid IL or missing references)
		//IL_3b4f: Expected O, but got Unknown
		//IL_3b9c: Unknown result type (might be due to invalid IL or missing references)
		//IL_3ba2: Expected O, but got Unknown
		//IL_3bef: Unknown result type (might be due to invalid IL or missing references)
		//IL_3bf5: Expected O, but got Unknown
		//IL_3c42: Unknown result type (might be due to invalid IL or missing references)
		//IL_3c48: Expected O, but got Unknown
		//IL_3c95: Unknown result type (might be due to invalid IL or missing references)
		//IL_3c9b: Expected O, but got Unknown
		//IL_3ce8: Unknown result type (might be due to invalid IL or missing references)
		//IL_3cee: Expected O, but got Unknown
		//IL_3d46: Unknown result type (might be due to invalid IL or missing references)
		//IL_3d4c: Expected O, but got Unknown
		//IL_3d99: Unknown result type (might be due to invalid IL or missing references)
		//IL_3d9f: Expected O, but got Unknown
		//IL_3dec: Unknown result type (might be due to invalid IL or missing references)
		//IL_3df2: Expected O, but got Unknown
		//IL_3e4a: Unknown result type (might be due to invalid IL or missing references)
		//IL_3e50: Expected O, but got Unknown
		//IL_3e9d: Unknown result type (might be due to invalid IL or missing references)
		//IL_3ea3: Expected O, but got Unknown
		//IL_3efb: Unknown result type (might be due to invalid IL or missing references)
		//IL_3f01: Expected O, but got Unknown
		//IL_3f59: Unknown result type (might be due to invalid IL or missing references)
		//IL_3f5f: Expected O, but got Unknown
		//IL_3fac: Unknown result type (might be due to invalid IL or missing references)
		//IL_3fb2: Expected O, but got Unknown
		//IL_3fff: Unknown result type (might be due to invalid IL or missing references)
		//IL_4005: Expected O, but got Unknown
		//IL_4052: Unknown result type (might be due to invalid IL or missing references)
		//IL_4058: Expected O, but got Unknown
		//IL_40b0: Unknown result type (might be due to invalid IL or missing references)
		//IL_40b6: Expected O, but got Unknown
		//IL_410e: Unknown result type (might be due to invalid IL or missing references)
		//IL_4114: Expected O, but got Unknown
		//IL_416c: Unknown result type (might be due to invalid IL or missing references)
		//IL_4172: Expected O, but got Unknown
		//IL_41bf: Unknown result type (might be due to invalid IL or missing references)
		//IL_41c5: Expected O, but got Unknown
		//IL_421d: Unknown result type (might be due to invalid IL or missing references)
		//IL_4223: Expected O, but got Unknown
		//IL_427b: Unknown result type (might be due to invalid IL or missing references)
		//IL_4281: Expected O, but got Unknown
		//IL_42ce: Unknown result type (might be due to invalid IL or missing references)
		//IL_42d4: Expected O, but got Unknown
		//IL_432c: Unknown result type (might be due to invalid IL or missing references)
		//IL_4332: Expected O, but got Unknown
		//IL_438a: Unknown result type (might be due to invalid IL or missing references)
		//IL_4390: Expected O, but got Unknown
		//IL_43e8: Unknown result type (might be due to invalid IL or missing references)
		//IL_43ee: Expected O, but got Unknown
		//IL_4446: Unknown result type (might be due to invalid IL or missing references)
		//IL_444c: Expected O, but got Unknown
		//IL_44a4: Unknown result type (might be due to invalid IL or missing references)
		//IL_44aa: Expected O, but got Unknown
		//IL_44f7: Unknown result type (might be due to invalid IL or missing references)
		//IL_44fd: Expected O, but got Unknown
		//IL_454a: Unknown result type (might be due to invalid IL or missing references)
		//IL_4550: Expected O, but got Unknown
		//IL_459d: Unknown result type (might be due to invalid IL or missing references)
		//IL_45a3: Expected O, but got Unknown
		//IL_45fb: Unknown result type (might be due to invalid IL or missing references)
		//IL_4601: Expected O, but got Unknown
		//IL_4659: Unknown result type (might be due to invalid IL or missing references)
		//IL_465f: Expected O, but got Unknown
		//IL_46b7: Unknown result type (might be due to invalid IL or missing references)
		//IL_46bd: Expected O, but got Unknown
		//IL_4715: Unknown result type (might be due to invalid IL or missing references)
		//IL_471b: Expected O, but got Unknown
		//IL_4773: Unknown result type (might be due to invalid IL or missing references)
		//IL_4779: Expected O, but got Unknown
		//IL_47dc: Unknown result type (might be due to invalid IL or missing references)
		//IL_47e2: Expected O, but got Unknown
		//IL_483a: Unknown result type (might be due to invalid IL or missing references)
		//IL_4840: Expected O, but got Unknown
		//IL_48ae: Unknown result type (might be due to invalid IL or missing references)
		//IL_48b4: Expected O, but got Unknown
		//IL_4901: Unknown result type (might be due to invalid IL or missing references)
		//IL_4907: Expected O, but got Unknown
		//IL_4991: Unknown result type (might be due to invalid IL or missing references)
		//IL_4997: Expected O, but got Unknown
		//IL_4a05: Unknown result type (might be due to invalid IL or missing references)
		//IL_4a0b: Expected O, but got Unknown
		//IL_4a58: Unknown result type (might be due to invalid IL or missing references)
		//IL_4a5e: Expected O, but got Unknown
		//IL_4ab6: Unknown result type (might be due to invalid IL or missing references)
		//IL_4abc: Expected O, but got Unknown
		//IL_4b1f: Unknown result type (might be due to invalid IL or missing references)
		//IL_4b25: Expected O, but got Unknown
		//IL_4b88: Unknown result type (might be due to invalid IL or missing references)
		//IL_4b8e: Expected O, but got Unknown
		//IL_4bf1: Unknown result type (might be due to invalid IL or missing references)
		//IL_4bf7: Expected O, but got Unknown
		//IL_4c5a: Unknown result type (might be due to invalid IL or missing references)
		//IL_4c60: Expected O, but got Unknown
		//IL_4cc3: Unknown result type (might be due to invalid IL or missing references)
		//IL_4cc9: Expected O, but got Unknown
		//IL_4d16: Unknown result type (might be due to invalid IL or missing references)
		//IL_4d1c: Expected O, but got Unknown
		//IL_4d69: Unknown result type (might be due to invalid IL or missing references)
		//IL_4d6f: Expected O, but got Unknown
		//IL_4dd2: Unknown result type (might be due to invalid IL or missing references)
		//IL_4dd8: Expected O, but got Unknown
		//IL_4e3b: Unknown result type (might be due to invalid IL or missing references)
		//IL_4e41: Expected O, but got Unknown
		//IL_4eaf: Unknown result type (might be due to invalid IL or missing references)
		//IL_4eb5: Expected O, but got Unknown
		//IL_4f23: Unknown result type (might be due to invalid IL or missing references)
		//IL_4f29: Expected O, but got Unknown
		//IL_4f97: Unknown result type (might be due to invalid IL or missing references)
		//IL_4f9d: Expected O, but got Unknown
		//IL_500b: Unknown result type (might be due to invalid IL or missing references)
		//IL_5011: Expected O, but got Unknown
		//IL_507f: Unknown result type (might be due to invalid IL or missing references)
		//IL_5085: Expected O, but got Unknown
		//IL_50e8: Unknown result type (might be due to invalid IL or missing references)
		//IL_50ee: Expected O, but got Unknown
		//IL_515c: Unknown result type (might be due to invalid IL or missing references)
		//IL_5162: Expected O, but got Unknown
		//IL_51d0: Unknown result type (might be due to invalid IL or missing references)
		//IL_51d6: Expected O, but got Unknown
		//IL_5244: Unknown result type (might be due to invalid IL or missing references)
		//IL_524a: Expected O, but got Unknown
		//IL_52ad: Unknown result type (might be due to invalid IL or missing references)
		//IL_52b3: Expected O, but got Unknown
		//IL_5321: Unknown result type (might be due to invalid IL or missing references)
		//IL_5327: Expected O, but got Unknown
		//IL_5395: Unknown result type (might be due to invalid IL or missing references)
		//IL_539b: Expected O, but got Unknown
		//IL_5409: Unknown result type (might be due to invalid IL or missing references)
		//IL_540f: Expected O, but got Unknown
		//IL_547d: Unknown result type (might be due to invalid IL or missing references)
		//IL_5483: Expected O, but got Unknown
		//IL_54f1: Unknown result type (might be due to invalid IL or missing references)
		//IL_54f7: Expected O, but got Unknown
		//IL_5565: Unknown result type (might be due to invalid IL or missing references)
		//IL_556b: Expected O, but got Unknown
		//IL_55d9: Unknown result type (might be due to invalid IL or missing references)
		//IL_55df: Expected O, but got Unknown
		//IL_564d: Unknown result type (might be due to invalid IL or missing references)
		//IL_5653: Expected O, but got Unknown
		//IL_56c1: Unknown result type (might be due to invalid IL or missing references)
		//IL_56c7: Expected O, but got Unknown
		//IL_5735: Unknown result type (might be due to invalid IL or missing references)
		//IL_573b: Expected O, but got Unknown
		//IL_57a9: Unknown result type (might be due to invalid IL or missing references)
		//IL_57af: Expected O, but got Unknown
		//IL_581d: Unknown result type (might be due to invalid IL or missing references)
		//IL_5823: Expected O, but got Unknown
		//IL_5891: Unknown result type (might be due to invalid IL or missing references)
		//IL_5897: Expected O, but got Unknown
		//IL_5905: Unknown result type (might be due to invalid IL or missing references)
		//IL_590b: Expected O, but got Unknown
		//IL_5979: Unknown result type (might be due to invalid IL or missing references)
		//IL_597f: Expected O, but got Unknown
		//IL_59ed: Unknown result type (might be due to invalid IL or missing references)
		//IL_59f3: Expected O, but got Unknown
		//IL_5a61: Unknown result type (might be due to invalid IL or missing references)
		//IL_5a67: Expected O, but got Unknown
		//IL_5ad5: Unknown result type (might be due to invalid IL or missing references)
		//IL_5adb: Expected O, but got Unknown
		//IL_5b49: Unknown result type (might be due to invalid IL or missing references)
		//IL_5b4f: Expected O, but got Unknown
		//IL_5bbd: Unknown result type (might be due to invalid IL or missing references)
		//IL_5bc3: Expected O, but got Unknown
		//IL_5c31: Unknown result type (might be due to invalid IL or missing references)
		//IL_5c37: Expected O, but got Unknown
		//IL_5ca5: Unknown result type (might be due to invalid IL or missing references)
		//IL_5cab: Expected O, but got Unknown
		//IL_5d19: Unknown result type (might be due to invalid IL or missing references)
		//IL_5d1f: Expected O, but got Unknown
		//IL_5d8d: Unknown result type (might be due to invalid IL or missing references)
		//IL_5d93: Expected O, but got Unknown
		//IL_5e01: Unknown result type (might be due to invalid IL or missing references)
		//IL_5e07: Expected O, but got Unknown
		//IL_5e75: Unknown result type (might be due to invalid IL or missing references)
		//IL_5e7b: Expected O, but got Unknown
		//IL_5ee9: Unknown result type (might be due to invalid IL or missing references)
		//IL_5eef: Expected O, but got Unknown
		//IL_5f5d: Unknown result type (might be due to invalid IL or missing references)
		//IL_5f63: Expected O, but got Unknown
		//IL_5fd1: Unknown result type (might be due to invalid IL or missing references)
		//IL_5fd7: Expected O, but got Unknown
		//IL_6045: Unknown result type (might be due to invalid IL or missing references)
		//IL_604b: Expected O, but got Unknown
		//IL_60b9: Unknown result type (might be due to invalid IL or missing references)
		//IL_60bf: Expected O, but got Unknown
		//IL_612d: Unknown result type (might be due to invalid IL or missing references)
		//IL_6133: Expected O, but got Unknown
		//IL_61a1: Unknown result type (might be due to invalid IL or missing references)
		//IL_61a7: Expected O, but got Unknown
		//IL_6215: Unknown result type (might be due to invalid IL or missing references)
		//IL_621b: Expected O, but got Unknown
		//IL_6289: Unknown result type (might be due to invalid IL or missing references)
		//IL_628f: Expected O, but got Unknown
		//IL_62fd: Unknown result type (might be due to invalid IL or missing references)
		//IL_6303: Expected O, but got Unknown
		//IL_6371: Unknown result type (might be due to invalid IL or missing references)
		//IL_6377: Expected O, but got Unknown
		//IL_63e5: Unknown result type (might be due to invalid IL or missing references)
		//IL_63eb: Expected O, but got Unknown
		//IL_644e: Unknown result type (might be due to invalid IL or missing references)
		//IL_6454: Expected O, but got Unknown
		//IL_64b7: Unknown result type (might be due to invalid IL or missing references)
		//IL_64bd: Expected O, but got Unknown
		//IL_6515: Unknown result type (might be due to invalid IL or missing references)
		//IL_651b: Expected O, but got Unknown
		//IL_6573: Unknown result type (might be due to invalid IL or missing references)
		//IL_6579: Expected O, but got Unknown
		//IL_65e7: Unknown result type (might be due to invalid IL or missing references)
		//IL_65ed: Expected O, but got Unknown
		//IL_663a: Unknown result type (might be due to invalid IL or missing references)
		//IL_6640: Expected O, but got Unknown
		//IL_66a3: Unknown result type (might be due to invalid IL or missing references)
		//IL_66a9: Expected O, but got Unknown
		//IL_670c: Unknown result type (might be due to invalid IL or missing references)
		//IL_6712: Expected O, but got Unknown
		//IL_675f: Unknown result type (might be due to invalid IL or missing references)
		//IL_6765: Expected O, but got Unknown
		//IL_67b2: Unknown result type (might be due to invalid IL or missing references)
		//IL_67b8: Expected O, but got Unknown
		//IL_681b: Unknown result type (might be due to invalid IL or missing references)
		//IL_6821: Expected O, but got Unknown
		//IL_686e: Unknown result type (might be due to invalid IL or missing references)
		//IL_6874: Expected O, but got Unknown
		//IL_68d7: Unknown result type (might be due to invalid IL or missing references)
		//IL_68dd: Expected O, but got Unknown
		//IL_6940: Unknown result type (might be due to invalid IL or missing references)
		//IL_6946: Expected O, but got Unknown
		//IL_69a9: Unknown result type (might be due to invalid IL or missing references)
		//IL_69af: Expected O, but got Unknown
		//IL_6a12: Unknown result type (might be due to invalid IL or missing references)
		//IL_6a18: Expected O, but got Unknown
		//IL_6a7b: Unknown result type (might be due to invalid IL or missing references)
		//IL_6a81: Expected O, but got Unknown
		//IL_6ae4: Unknown result type (might be due to invalid IL or missing references)
		//IL_6aea: Expected O, but got Unknown
		//IL_6b37: Unknown result type (might be due to invalid IL or missing references)
		//IL_6b3d: Expected O, but got Unknown
		//IL_6bab: Unknown result type (might be due to invalid IL or missing references)
		//IL_6bb1: Expected O, but got Unknown
		//IL_6c14: Unknown result type (might be due to invalid IL or missing references)
		//IL_6c1a: Expected O, but got Unknown
		//IL_6c7d: Unknown result type (might be due to invalid IL or missing references)
		//IL_6c83: Expected O, but got Unknown
		//IL_6ce6: Unknown result type (might be due to invalid IL or missing references)
		//IL_6cec: Expected O, but got Unknown
		//IL_6d4f: Unknown result type (might be due to invalid IL or missing references)
		//IL_6d55: Expected O, but got Unknown
		//IL_6db8: Unknown result type (might be due to invalid IL or missing references)
		//IL_6dbe: Expected O, but got Unknown
		//IL_6e21: Unknown result type (might be due to invalid IL or missing references)
		//IL_6e27: Expected O, but got Unknown
		//IL_6e8a: Unknown result type (might be due to invalid IL or missing references)
		//IL_6e90: Expected O, but got Unknown
		//IL_6ef3: Unknown result type (might be due to invalid IL or missing references)
		//IL_6ef9: Expected O, but got Unknown
		//IL_6f5c: Unknown result type (might be due to invalid IL or missing references)
		//IL_6f62: Expected O, but got Unknown
		//IL_6fc5: Unknown result type (might be due to invalid IL or missing references)
		//IL_6fcb: Expected O, but got Unknown
		//IL_702e: Unknown result type (might be due to invalid IL or missing references)
		//IL_7034: Expected O, but got Unknown
		//IL_7097: Unknown result type (might be due to invalid IL or missing references)
		//IL_709d: Expected O, but got Unknown
		//IL_7100: Unknown result type (might be due to invalid IL or missing references)
		//IL_7106: Expected O, but got Unknown
		//IL_7169: Unknown result type (might be due to invalid IL or missing references)
		//IL_716f: Expected O, but got Unknown
		//IL_71d2: Unknown result type (might be due to invalid IL or missing references)
		//IL_71d8: Expected O, but got Unknown
		//IL_723b: Unknown result type (might be due to invalid IL or missing references)
		//IL_7241: Expected O, but got Unknown
		//IL_72a4: Unknown result type (might be due to invalid IL or missing references)
		//IL_72aa: Expected O, but got Unknown
		//IL_730d: Unknown result type (might be due to invalid IL or missing references)
		//IL_7313: Expected O, but got Unknown
		//IL_7376: Unknown result type (might be due to invalid IL or missing references)
		//IL_737c: Expected O, but got Unknown
		//IL_73df: Unknown result type (might be due to invalid IL or missing references)
		//IL_73e5: Expected O, but got Unknown
		//IL_7448: Unknown result type (might be due to invalid IL or missing references)
		//IL_744e: Expected O, but got Unknown
		//IL_74b1: Unknown result type (might be due to invalid IL or missing references)
		//IL_74b7: Expected O, but got Unknown
		//IL_751a: Unknown result type (might be due to invalid IL or missing references)
		//IL_7520: Expected O, but got Unknown
		//IL_7583: Unknown result type (might be due to invalid IL or missing references)
		//IL_7589: Expected O, but got Unknown
		//IL_75ec: Unknown result type (might be due to invalid IL or missing references)
		//IL_75f2: Expected O, but got Unknown
		//IL_7655: Unknown result type (might be due to invalid IL or missing references)
		//IL_765b: Expected O, but got Unknown
		//IL_76be: Unknown result type (might be due to invalid IL or missing references)
		//IL_76c4: Expected O, but got Unknown
		//IL_7727: Unknown result type (might be due to invalid IL or missing references)
		//IL_772d: Expected O, but got Unknown
		//IL_7790: Unknown result type (might be due to invalid IL or missing references)
		//IL_7796: Expected O, but got Unknown
		//IL_77f9: Unknown result type (might be due to invalid IL or missing references)
		//IL_77ff: Expected O, but got Unknown
		//IL_7862: Unknown result type (might be due to invalid IL or missing references)
		//IL_7868: Expected O, but got Unknown
		//IL_78cb: Unknown result type (might be due to invalid IL or missing references)
		//IL_78d1: Expected O, but got Unknown
		//IL_7934: Unknown result type (might be due to invalid IL or missing references)
		//IL_793a: Expected O, but got Unknown
		//IL_799d: Unknown result type (might be due to invalid IL or missing references)
		//IL_79a3: Expected O, but got Unknown
		//IL_7a06: Unknown result type (might be due to invalid IL or missing references)
		//IL_7a0c: Expected O, but got Unknown
		//IL_7a6f: Unknown result type (might be due to invalid IL or missing references)
		//IL_7a75: Expected O, but got Unknown
		//IL_7ad8: Unknown result type (might be due to invalid IL or missing references)
		//IL_7ade: Expected O, but got Unknown
		//IL_7b41: Unknown result type (might be due to invalid IL or missing references)
		//IL_7b47: Expected O, but got Unknown
		//IL_7baa: Unknown result type (might be due to invalid IL or missing references)
		//IL_7bb0: Expected O, but got Unknown
		//IL_7c13: Unknown result type (might be due to invalid IL or missing references)
		//IL_7c19: Expected O, but got Unknown
		//IL_7c7c: Unknown result type (might be due to invalid IL or missing references)
		//IL_7c82: Expected O, but got Unknown
		//IL_7ce5: Unknown result type (might be due to invalid IL or missing references)
		//IL_7ceb: Expected O, but got Unknown
		//IL_7d4e: Unknown result type (might be due to invalid IL or missing references)
		//IL_7d54: Expected O, but got Unknown
		//IL_7db7: Unknown result type (might be due to invalid IL or missing references)
		//IL_7dbd: Expected O, but got Unknown
		//IL_7e20: Unknown result type (might be due to invalid IL or missing references)
		//IL_7e26: Expected O, but got Unknown
		//IL_7e89: Unknown result type (might be due to invalid IL or missing references)
		//IL_7e8f: Expected O, but got Unknown
		//IL_7ef2: Unknown result type (might be due to invalid IL or missing references)
		//IL_7ef8: Expected O, but got Unknown
		//IL_7f5b: Unknown result type (might be due to invalid IL or missing references)
		//IL_7f61: Expected O, but got Unknown
		//IL_7fc4: Unknown result type (might be due to invalid IL or missing references)
		//IL_7fca: Expected O, but got Unknown
		//IL_802d: Unknown result type (might be due to invalid IL or missing references)
		//IL_8033: Expected O, but got Unknown
		//IL_80b6: Unknown result type (might be due to invalid IL or missing references)
		//IL_80bc: Expected O, but got Unknown
		//IL_811f: Unknown result type (might be due to invalid IL or missing references)
		//IL_8125: Expected O, but got Unknown
		//IL_81a8: Unknown result type (might be due to invalid IL or missing references)
		//IL_81ae: Expected O, but got Unknown
		//IL_8211: Unknown result type (might be due to invalid IL or missing references)
		//IL_8217: Expected O, but got Unknown
		//IL_827a: Unknown result type (might be due to invalid IL or missing references)
		//IL_8280: Expected O, but got Unknown
		//IL_82e3: Unknown result type (might be due to invalid IL or missing references)
		//IL_82e9: Expected O, but got Unknown
		//IL_834c: Unknown result type (might be due to invalid IL or missing references)
		//IL_8352: Expected O, but got Unknown
		//IL_83b5: Unknown result type (might be due to invalid IL or missing references)
		//IL_83bb: Expected O, but got Unknown
		//IL_841e: Unknown result type (might be due to invalid IL or missing references)
		//IL_8424: Expected O, but got Unknown
		//IL_8487: Unknown result type (might be due to invalid IL or missing references)
		//IL_848d: Expected O, but got Unknown
		//IL_84f0: Unknown result type (might be due to invalid IL or missing references)
		//IL_84f6: Expected O, but got Unknown
		//IL_8559: Unknown result type (might be due to invalid IL or missing references)
		//IL_855f: Expected O, but got Unknown
		//IL_85c2: Unknown result type (might be due to invalid IL or missing references)
		//IL_85c8: Expected O, but got Unknown
		//IL_862b: Unknown result type (might be due to invalid IL or missing references)
		//IL_8631: Expected O, but got Unknown
		//IL_8694: Unknown result type (might be due to invalid IL or missing references)
		//IL_869a: Expected O, but got Unknown
		//IL_86fd: Unknown result type (might be due to invalid IL or missing references)
		//IL_8703: Expected O, but got Unknown
		//IL_8766: Unknown result type (might be due to invalid IL or missing references)
		//IL_876c: Expected O, but got Unknown
		//IL_87cf: Unknown result type (might be due to invalid IL or missing references)
		//IL_87d5: Expected O, but got Unknown
		//IL_8838: Unknown result type (might be due to invalid IL or missing references)
		//IL_883e: Expected O, but got Unknown
		//IL_88a1: Unknown result type (might be due to invalid IL or missing references)
		//IL_88a7: Expected O, but got Unknown
		//IL_890a: Unknown result type (might be due to invalid IL or missing references)
		//IL_8910: Expected O, but got Unknown
		//IL_8973: Unknown result type (might be due to invalid IL or missing references)
		//IL_8979: Expected O, but got Unknown
		//IL_89dc: Unknown result type (might be due to invalid IL or missing references)
		//IL_89e2: Expected O, but got Unknown
		//IL_8a45: Unknown result type (might be due to invalid IL or missing references)
		//IL_8a4b: Expected O, but got Unknown
		//IL_8aae: Unknown result type (might be due to invalid IL or missing references)
		//IL_8ab4: Expected O, but got Unknown
		//IL_8b17: Unknown result type (might be due to invalid IL or missing references)
		//IL_8b1d: Expected O, but got Unknown
		//IL_8b80: Unknown result type (might be due to invalid IL or missing references)
		//IL_8b86: Expected O, but got Unknown
		//IL_8be9: Unknown result type (might be due to invalid IL or missing references)
		//IL_8bef: Expected O, but got Unknown
		//IL_8c52: Unknown result type (might be due to invalid IL or missing references)
		//IL_8c58: Expected O, but got Unknown
		//IL_8cbb: Unknown result type (might be due to invalid IL or missing references)
		//IL_8cc1: Expected O, but got Unknown
		//IL_8d24: Unknown result type (might be due to invalid IL or missing references)
		//IL_8d2a: Expected O, but got Unknown
		//IL_8d8d: Unknown result type (might be due to invalid IL or missing references)
		//IL_8d93: Expected O, but got Unknown
		//IL_8df6: Unknown result type (might be due to invalid IL or missing references)
		//IL_8dfc: Expected O, but got Unknown
		//IL_8e5f: Unknown result type (might be due to invalid IL or missing references)
		//IL_8e65: Expected O, but got Unknown
		//IL_8ec8: Unknown result type (might be due to invalid IL or missing references)
		//IL_8ece: Expected O, but got Unknown
		//IL_8f31: Unknown result type (might be due to invalid IL or missing references)
		//IL_8f37: Expected O, but got Unknown
		//IL_8f9a: Unknown result type (might be due to invalid IL or missing references)
		//IL_8fa0: Expected O, but got Unknown
		//IL_9003: Unknown result type (might be due to invalid IL or missing references)
		//IL_9009: Expected O, but got Unknown
		//IL_906c: Unknown result type (might be due to invalid IL or missing references)
		//IL_9072: Expected O, but got Unknown
		//IL_90d5: Unknown result type (might be due to invalid IL or missing references)
		//IL_90db: Expected O, but got Unknown
		//IL_913e: Unknown result type (might be due to invalid IL or missing references)
		//IL_9144: Expected O, but got Unknown
		//IL_91a7: Unknown result type (might be due to invalid IL or missing references)
		//IL_91ad: Expected O, but got Unknown
		//IL_9210: Unknown result type (might be due to invalid IL or missing references)
		//IL_9216: Expected O, but got Unknown
		//IL_9279: Unknown result type (might be due to invalid IL or missing references)
		//IL_927f: Expected O, but got Unknown
		//IL_92e2: Unknown result type (might be due to invalid IL or missing references)
		//IL_92e8: Expected O, but got Unknown
		//IL_934b: Unknown result type (might be due to invalid IL or missing references)
		//IL_9351: Expected O, but got Unknown
		//IL_93b4: Unknown result type (might be due to invalid IL or missing references)
		//IL_93ba: Expected O, but got Unknown
		//IL_941d: Unknown result type (might be due to invalid IL or missing references)
		//IL_9423: Expected O, but got Unknown
		//IL_9486: Unknown result type (might be due to invalid IL or missing references)
		//IL_948c: Expected O, but got Unknown
		//IL_94ef: Unknown result type (might be due to invalid IL or missing references)
		//IL_94f5: Expected O, but got Unknown
		//IL_9558: Unknown result type (might be due to invalid IL or missing references)
		//IL_955e: Expected O, but got Unknown
		//IL_95c1: Unknown result type (might be due to invalid IL or missing references)
		//IL_95c7: Expected O, but got Unknown
		//IL_962a: Unknown result type (might be due to invalid IL or missing references)
		//IL_9630: Expected O, but got Unknown
		//IL_9693: Unknown result type (might be due to invalid IL or missing references)
		//IL_9699: Expected O, but got Unknown
		//IL_96fc: Unknown result type (might be due to invalid IL or missing references)
		//IL_9702: Expected O, but got Unknown
		//IL_9765: Unknown result type (might be due to invalid IL or missing references)
		//IL_976b: Expected O, but got Unknown
		//IL_97ce: Unknown result type (might be due to invalid IL or missing references)
		//IL_97d4: Expected O, but got Unknown
		//IL_9837: Unknown result type (might be due to invalid IL or missing references)
		//IL_983d: Expected O, but got Unknown
		//IL_98a0: Unknown result type (might be due to invalid IL or missing references)
		//IL_98a6: Expected O, but got Unknown
		//IL_9909: Unknown result type (might be due to invalid IL or missing references)
		//IL_990f: Expected O, but got Unknown
		//IL_9972: Unknown result type (might be due to invalid IL or missing references)
		//IL_9978: Expected O, but got Unknown
		//IL_99db: Unknown result type (might be due to invalid IL or missing references)
		//IL_99e1: Expected O, but got Unknown
		//IL_9a44: Unknown result type (might be due to invalid IL or missing references)
		//IL_9a4a: Expected O, but got Unknown
		//IL_9aad: Unknown result type (might be due to invalid IL or missing references)
		//IL_9ab3: Expected O, but got Unknown
		//IL_9b16: Unknown result type (might be due to invalid IL or missing references)
		//IL_9b1c: Expected O, but got Unknown
		//IL_9b7f: Unknown result type (might be due to invalid IL or missing references)
		//IL_9b85: Expected O, but got Unknown
		//IL_9be8: Unknown result type (might be due to invalid IL or missing references)
		//IL_9bee: Expected O, but got Unknown
		//IL_9c51: Unknown result type (might be due to invalid IL or missing references)
		//IL_9c57: Expected O, but got Unknown
		//IL_9cc5: Unknown result type (might be due to invalid IL or missing references)
		//IL_9ccb: Expected O, but got Unknown
		//IL_9d18: Unknown result type (might be due to invalid IL or missing references)
		//IL_9d1e: Expected O, but got Unknown
		//IL_9d6b: Unknown result type (might be due to invalid IL or missing references)
		//IL_9d71: Expected O, but got Unknown
		//IL_9dbe: Unknown result type (might be due to invalid IL or missing references)
		//IL_9dc4: Expected O, but got Unknown
		//IL_9e11: Unknown result type (might be due to invalid IL or missing references)
		//IL_9e17: Expected O, but got Unknown
		//IL_9e7a: Unknown result type (might be due to invalid IL or missing references)
		//IL_9e80: Expected O, but got Unknown
		//IL_9ee3: Unknown result type (might be due to invalid IL or missing references)
		//IL_9ee9: Expected O, but got Unknown
		//IL_9f4c: Unknown result type (might be due to invalid IL or missing references)
		//IL_9f52: Expected O, but got Unknown
		//IL_9fb5: Unknown result type (might be due to invalid IL or missing references)
		//IL_9fbb: Expected O, but got Unknown
		//IL_a029: Unknown result type (might be due to invalid IL or missing references)
		//IL_a02f: Expected O, but got Unknown
		//IL_a07c: Unknown result type (might be due to invalid IL or missing references)
		//IL_a082: Expected O, but got Unknown
		//IL_a0e5: Unknown result type (might be due to invalid IL or missing references)
		//IL_a0eb: Expected O, but got Unknown
		//IL_a14e: Unknown result type (might be due to invalid IL or missing references)
		//IL_a154: Expected O, but got Unknown
		//IL_a1c2: Unknown result type (might be due to invalid IL or missing references)
		//IL_a1c8: Expected O, but got Unknown
		//IL_a215: Unknown result type (might be due to invalid IL or missing references)
		//IL_a21b: Expected O, but got Unknown
		//IL_a268: Unknown result type (might be due to invalid IL or missing references)
		//IL_a26e: Expected O, but got Unknown
		//IL_a2c6: Unknown result type (might be due to invalid IL or missing references)
		//IL_a2cc: Expected O, but got Unknown
		//IL_a34f: Unknown result type (might be due to invalid IL or missing references)
		//IL_a355: Expected O, but got Unknown
		//IL_a3c3: Unknown result type (might be due to invalid IL or missing references)
		//IL_a3c9: Expected O, but got Unknown
		//IL_a42c: Unknown result type (might be due to invalid IL or missing references)
		//IL_a432: Expected O, but got Unknown
		//IL_a495: Unknown result type (might be due to invalid IL or missing references)
		//IL_a49b: Expected O, but got Unknown
		//IL_a4e8: Unknown result type (might be due to invalid IL or missing references)
		//IL_a4ee: Expected O, but got Unknown
		//IL_a551: Unknown result type (might be due to invalid IL or missing references)
		//IL_a557: Expected O, but got Unknown
		//IL_a5ba: Unknown result type (might be due to invalid IL or missing references)
		//IL_a5c0: Expected O, but got Unknown
		//IL_a60d: Unknown result type (might be due to invalid IL or missing references)
		//IL_a613: Expected O, but got Unknown
		//IL_a660: Unknown result type (might be due to invalid IL or missing references)
		//IL_a666: Expected O, but got Unknown
		//IL_a6c9: Unknown result type (might be due to invalid IL or missing references)
		//IL_a6cf: Expected O, but got Unknown
		//IL_a752: Unknown result type (might be due to invalid IL or missing references)
		//IL_a758: Expected O, but got Unknown
		//IL_a7db: Unknown result type (might be due to invalid IL or missing references)
		//IL_a7e1: Expected O, but got Unknown
		//IL_a84f: Unknown result type (might be due to invalid IL or missing references)
		//IL_a855: Expected O, but got Unknown
		//IL_a8d8: Unknown result type (might be due to invalid IL or missing references)
		//IL_a8de: Expected O, but got Unknown
		//IL_a941: Unknown result type (might be due to invalid IL or missing references)
		//IL_a947: Expected O, but got Unknown
		//IL_a994: Unknown result type (might be due to invalid IL or missing references)
		//IL_a99a: Expected O, but got Unknown
		//IL_a9e7: Unknown result type (might be due to invalid IL or missing references)
		//IL_a9ed: Expected O, but got Unknown
		//IL_aa3a: Unknown result type (might be due to invalid IL or missing references)
		//IL_aa40: Expected O, but got Unknown
		//IL_aaa3: Unknown result type (might be due to invalid IL or missing references)
		//IL_aaa9: Expected O, but got Unknown
		//IL_aaf6: Unknown result type (might be due to invalid IL or missing references)
		//IL_aafc: Expected O, but got Unknown
		//IL_ab49: Unknown result type (might be due to invalid IL or missing references)
		//IL_ab4f: Expected O, but got Unknown
		//IL_abdd: Unknown result type (might be due to invalid IL or missing references)
		//IL_abe3: Expected O, but got Unknown
		//IL_ac51: Unknown result type (might be due to invalid IL or missing references)
		//IL_ac57: Expected O, but got Unknown
		//IL_acaf: Unknown result type (might be due to invalid IL or missing references)
		//IL_acb5: Expected O, but got Unknown
		//IL_ad23: Unknown result type (might be due to invalid IL or missing references)
		//IL_ad29: Expected O, but got Unknown
		//IL_ad97: Unknown result type (might be due to invalid IL or missing references)
		//IL_ad9d: Expected O, but got Unknown
		//IL_ae0b: Unknown result type (might be due to invalid IL or missing references)
		//IL_ae11: Expected O, but got Unknown
		//IL_ae7f: Unknown result type (might be due to invalid IL or missing references)
		//IL_ae85: Expected O, but got Unknown
		//IL_aef3: Unknown result type (might be due to invalid IL or missing references)
		//IL_aef9: Expected O, but got Unknown
		//IL_af67: Unknown result type (might be due to invalid IL or missing references)
		//IL_af6d: Expected O, but got Unknown
		//IL_afdb: Unknown result type (might be due to invalid IL or missing references)
		//IL_afe1: Expected O, but got Unknown
		//IL_b04f: Unknown result type (might be due to invalid IL or missing references)
		//IL_b055: Expected O, but got Unknown
		//IL_b0c3: Unknown result type (might be due to invalid IL or missing references)
		//IL_b0c9: Expected O, but got Unknown
		//IL_b137: Unknown result type (might be due to invalid IL or missing references)
		//IL_b13d: Expected O, but got Unknown
		//IL_b1ab: Unknown result type (might be due to invalid IL or missing references)
		//IL_b1b1: Expected O, but got Unknown
		//IL_b1fe: Unknown result type (might be due to invalid IL or missing references)
		//IL_b204: Expected O, but got Unknown
		//IL_b251: Unknown result type (might be due to invalid IL or missing references)
		//IL_b257: Expected O, but got Unknown
		//IL_b2ba: Unknown result type (might be due to invalid IL or missing references)
		//IL_b2c0: Expected O, but got Unknown
		//IL_b30d: Unknown result type (might be due to invalid IL or missing references)
		//IL_b313: Expected O, but got Unknown
		//IL_b360: Unknown result type (might be due to invalid IL or missing references)
		//IL_b366: Expected O, but got Unknown
		//IL_b3b3: Unknown result type (might be due to invalid IL or missing references)
		//IL_b3b9: Expected O, but got Unknown
		//IL_b406: Unknown result type (might be due to invalid IL or missing references)
		//IL_b40c: Expected O, but got Unknown
		//IL_b459: Unknown result type (might be due to invalid IL or missing references)
		//IL_b45f: Expected O, but got Unknown
		//IL_b4ac: Unknown result type (might be due to invalid IL or missing references)
		//IL_b4b2: Expected O, but got Unknown
		//IL_b4ff: Unknown result type (might be due to invalid IL or missing references)
		//IL_b505: Expected O, but got Unknown
		//IL_b552: Unknown result type (might be due to invalid IL or missing references)
		//IL_b558: Expected O, but got Unknown
		//IL_b5a5: Unknown result type (might be due to invalid IL or missing references)
		//IL_b5ab: Expected O, but got Unknown
		//IL_b5f8: Unknown result type (might be due to invalid IL or missing references)
		//IL_b5fe: Expected O, but got Unknown
		//IL_b64b: Unknown result type (might be due to invalid IL or missing references)
		//IL_b651: Expected O, but got Unknown
		//IL_b69e: Unknown result type (might be due to invalid IL or missing references)
		//IL_b6a4: Expected O, but got Unknown
		//IL_b707: Unknown result type (might be due to invalid IL or missing references)
		//IL_b70d: Expected O, but got Unknown
		//IL_b7a2: Unknown result type (might be due to invalid IL or missing references)
		//IL_b7a8: Expected O, but got Unknown
		//IL_b812: Unknown result type (might be due to invalid IL or missing references)
		//IL_b818: Expected O, but got Unknown
		//IL_b8ad: Unknown result type (might be due to invalid IL or missing references)
		//IL_b8b3: Expected O, but got Unknown
		//IL_b948: Unknown result type (might be due to invalid IL or missing references)
		//IL_b94e: Expected O, but got Unknown
		//IL_b9e3: Unknown result type (might be due to invalid IL or missing references)
		//IL_b9e9: Expected O, but got Unknown
		//IL_ba7e: Unknown result type (might be due to invalid IL or missing references)
		//IL_ba84: Expected O, but got Unknown
		//IL_bad8: Unknown result type (might be due to invalid IL or missing references)
		//IL_bade: Expected O, but got Unknown
		//IL_bb2b: Unknown result type (might be due to invalid IL or missing references)
		//IL_bb31: Expected O, but got Unknown
		//IL_bb85: Unknown result type (might be due to invalid IL or missing references)
		//IL_bb8b: Expected O, but got Unknown
		//IL_bbd8: Unknown result type (might be due to invalid IL or missing references)
		//IL_bbde: Expected O, but got Unknown
		//IL_bc73: Unknown result type (might be due to invalid IL or missing references)
		//IL_bc79: Expected O, but got Unknown
		//IL_bcc6: Unknown result type (might be due to invalid IL or missing references)
		//IL_bccc: Expected O, but got Unknown
		//IL_bd19: Unknown result type (might be due to invalid IL or missing references)
		//IL_bd1f: Expected O, but got Unknown
		//IL_bd77: Unknown result type (might be due to invalid IL or missing references)
		//IL_bd7d: Expected O, but got Unknown
		//IL_bdd5: Unknown result type (might be due to invalid IL or missing references)
		//IL_bddb: Expected O, but got Unknown
		//IL_be33: Unknown result type (might be due to invalid IL or missing references)
		//IL_be39: Expected O, but got Unknown
		//IL_be91: Unknown result type (might be due to invalid IL or missing references)
		//IL_be97: Expected O, but got Unknown
		//IL_beef: Unknown result type (might be due to invalid IL or missing references)
		//IL_bef5: Expected O, but got Unknown
		//IL_bf58: Unknown result type (might be due to invalid IL or missing references)
		//IL_bf5e: Expected O, but got Unknown
		//IL_bfc1: Unknown result type (might be due to invalid IL or missing references)
		//IL_bfc7: Expected O, but got Unknown
		//IL_c02a: Unknown result type (might be due to invalid IL or missing references)
		//IL_c030: Expected O, but got Unknown
		//IL_c07d: Unknown result type (might be due to invalid IL or missing references)
		//IL_c083: Expected O, but got Unknown
		//IL_c0db: Unknown result type (might be due to invalid IL or missing references)
		//IL_c0e1: Expected O, but got Unknown
		//IL_c12e: Unknown result type (might be due to invalid IL or missing references)
		//IL_c134: Expected O, but got Unknown
		//IL_c181: Unknown result type (might be due to invalid IL or missing references)
		//IL_c187: Expected O, but got Unknown
		//IL_c1d4: Unknown result type (might be due to invalid IL or missing references)
		//IL_c1da: Expected O, but got Unknown
		//IL_c23d: Unknown result type (might be due to invalid IL or missing references)
		//IL_c243: Expected O, but got Unknown
		//IL_c290: Unknown result type (might be due to invalid IL or missing references)
		//IL_c296: Expected O, but got Unknown
		//IL_c2e3: Unknown result type (might be due to invalid IL or missing references)
		//IL_c2e9: Expected O, but got Unknown
		//IL_c357: Unknown result type (might be due to invalid IL or missing references)
		//IL_c35d: Expected O, but got Unknown
		//IL_c3aa: Unknown result type (might be due to invalid IL or missing references)
		//IL_c3b0: Expected O, but got Unknown
		//IL_c3fd: Unknown result type (might be due to invalid IL or missing references)
		//IL_c403: Expected O, but got Unknown
		//IL_c450: Unknown result type (might be due to invalid IL or missing references)
		//IL_c456: Expected O, but got Unknown
		//IL_c4a3: Unknown result type (might be due to invalid IL or missing references)
		//IL_c4a9: Expected O, but got Unknown
		//IL_c501: Unknown result type (might be due to invalid IL or missing references)
		//IL_c507: Expected O, but got Unknown
		//IL_c55f: Unknown result type (might be due to invalid IL or missing references)
		//IL_c565: Expected O, but got Unknown
		//IL_c5bd: Unknown result type (might be due to invalid IL or missing references)
		//IL_c5c3: Expected O, but got Unknown
		//IL_c61b: Unknown result type (might be due to invalid IL or missing references)
		//IL_c621: Expected O, but got Unknown
		//IL_c66e: Unknown result type (might be due to invalid IL or missing references)
		//IL_c674: Expected O, but got Unknown
		//IL_c6c1: Unknown result type (might be due to invalid IL or missing references)
		//IL_c6c7: Expected O, but got Unknown
		//IL_c714: Unknown result type (might be due to invalid IL or missing references)
		//IL_c71a: Expected O, but got Unknown
		//IL_c772: Unknown result type (might be due to invalid IL or missing references)
		//IL_c778: Expected O, but got Unknown
		//IL_c7db: Unknown result type (might be due to invalid IL or missing references)
		//IL_c7e1: Expected O, but got Unknown
		//IL_c82e: Unknown result type (might be due to invalid IL or missing references)
		//IL_c834: Expected O, but got Unknown
		//IL_c897: Unknown result type (might be due to invalid IL or missing references)
		//IL_c89d: Expected O, but got Unknown
		//IL_c8f5: Unknown result type (might be due to invalid IL or missing references)
		//IL_c8fb: Expected O, but got Unknown
		//IL_c948: Unknown result type (might be due to invalid IL or missing references)
		//IL_c94e: Expected O, but got Unknown
		//IL_c9ad: Unknown result type (might be due to invalid IL or missing references)
		//IL_c9b3: Expected O, but got Unknown
		//IL_ca12: Unknown result type (might be due to invalid IL or missing references)
		//IL_ca18: Expected O, but got Unknown
		//IL_ca65: Unknown result type (might be due to invalid IL or missing references)
		//IL_ca6b: Expected O, but got Unknown
		//IL_cac3: Unknown result type (might be due to invalid IL or missing references)
		//IL_cac9: Expected O, but got Unknown
		//IL_cb16: Unknown result type (might be due to invalid IL or missing references)
		//IL_cb1c: Expected O, but got Unknown
		//IL_cb69: Unknown result type (might be due to invalid IL or missing references)
		//IL_cb6f: Expected O, but got Unknown
		//IL_cbbc: Unknown result type (might be due to invalid IL or missing references)
		//IL_cbc2: Expected O, but got Unknown
		//IL_cc0f: Unknown result type (might be due to invalid IL or missing references)
		//IL_cc15: Expected O, but got Unknown
		//IL_cc62: Unknown result type (might be due to invalid IL or missing references)
		//IL_cc68: Expected O, but got Unknown
		//IL_ccb5: Unknown result type (might be due to invalid IL or missing references)
		//IL_ccbb: Expected O, but got Unknown
		//IL_cd08: Unknown result type (might be due to invalid IL or missing references)
		//IL_cd0e: Expected O, but got Unknown
		//IL_cd5b: Unknown result type (might be due to invalid IL or missing references)
		//IL_cd61: Expected O, but got Unknown
		//IL_cdae: Unknown result type (might be due to invalid IL or missing references)
		//IL_cdb4: Expected O, but got Unknown
		//IL_ce01: Unknown result type (might be due to invalid IL or missing references)
		//IL_ce07: Expected O, but got Unknown
		//IL_ce54: Unknown result type (might be due to invalid IL or missing references)
		//IL_ce5a: Expected O, but got Unknown
		//IL_cebd: Unknown result type (might be due to invalid IL or missing references)
		//IL_cec3: Expected O, but got Unknown
		//IL_cf10: Unknown result type (might be due to invalid IL or missing references)
		//IL_cf16: Expected O, but got Unknown
		//IL_cf63: Unknown result type (might be due to invalid IL or missing references)
		//IL_cf69: Expected O, but got Unknown
		//IL_cfb6: Unknown result type (might be due to invalid IL or missing references)
		//IL_cfbc: Expected O, but got Unknown
		//IL_d02a: Unknown result type (might be due to invalid IL or missing references)
		//IL_d030: Expected O, but got Unknown
		//IL_d09e: Unknown result type (might be due to invalid IL or missing references)
		//IL_d0a4: Expected O, but got Unknown
		//IL_d112: Unknown result type (might be due to invalid IL or missing references)
		//IL_d118: Expected O, but got Unknown
		//IL_d186: Unknown result type (might be due to invalid IL or missing references)
		//IL_d18c: Expected O, but got Unknown
		//IL_d1fa: Unknown result type (might be due to invalid IL or missing references)
		//IL_d200: Expected O, but got Unknown
		//IL_d26e: Unknown result type (might be due to invalid IL or missing references)
		//IL_d274: Expected O, but got Unknown
		//IL_d2e2: Unknown result type (might be due to invalid IL or missing references)
		//IL_d2e8: Expected O, but got Unknown
		//IL_d356: Unknown result type (might be due to invalid IL or missing references)
		//IL_d35c: Expected O, but got Unknown
		//IL_d3ca: Unknown result type (might be due to invalid IL or missing references)
		//IL_d3d0: Expected O, but got Unknown
		//IL_d43e: Unknown result type (might be due to invalid IL or missing references)
		//IL_d444: Expected O, but got Unknown
		//IL_d4b2: Unknown result type (might be due to invalid IL or missing references)
		//IL_d4b8: Expected O, but got Unknown
		//IL_d526: Unknown result type (might be due to invalid IL or missing references)
		//IL_d52c: Expected O, but got Unknown
		//IL_d59a: Unknown result type (might be due to invalid IL or missing references)
		//IL_d5a0: Expected O, but got Unknown
		//IL_d60e: Unknown result type (might be due to invalid IL or missing references)
		//IL_d614: Expected O, but got Unknown
		//IL_d682: Unknown result type (might be due to invalid IL or missing references)
		//IL_d688: Expected O, but got Unknown
		//IL_d6f6: Unknown result type (might be due to invalid IL or missing references)
		//IL_d6fc: Expected O, but got Unknown
		//IL_d78a: Unknown result type (might be due to invalid IL or missing references)
		//IL_d790: Expected O, but got Unknown
		//IL_d7f3: Unknown result type (might be due to invalid IL or missing references)
		//IL_d7f9: Expected O, but got Unknown
		//IL_d867: Unknown result type (might be due to invalid IL or missing references)
		//IL_d86d: Expected O, but got Unknown
		//IL_d8db: Unknown result type (might be due to invalid IL or missing references)
		//IL_d8e1: Expected O, but got Unknown
		//IL_d94f: Unknown result type (might be due to invalid IL or missing references)
		//IL_d955: Expected O, but got Unknown
		//IL_d9c3: Unknown result type (might be due to invalid IL or missing references)
		//IL_d9c9: Expected O, but got Unknown
		//IL_da37: Unknown result type (might be due to invalid IL or missing references)
		//IL_da3d: Expected O, but got Unknown
		//IL_daab: Unknown result type (might be due to invalid IL or missing references)
		//IL_dab1: Expected O, but got Unknown
		//IL_db1f: Unknown result type (might be due to invalid IL or missing references)
		//IL_db25: Expected O, but got Unknown
		//IL_db93: Unknown result type (might be due to invalid IL or missing references)
		//IL_db99: Expected O, but got Unknown
		//IL_dc07: Unknown result type (might be due to invalid IL or missing references)
		//IL_dc0d: Expected O, but got Unknown
		//IL_dc7b: Unknown result type (might be due to invalid IL or missing references)
		//IL_dc81: Expected O, but got Unknown
		//IL_dcef: Unknown result type (might be due to invalid IL or missing references)
		//IL_dcf5: Expected O, but got Unknown
		//IL_dd63: Unknown result type (might be due to invalid IL or missing references)
		//IL_dd69: Expected O, but got Unknown
		//IL_ddd7: Unknown result type (might be due to invalid IL or missing references)
		//IL_dddd: Expected O, but got Unknown
		//IL_de40: Unknown result type (might be due to invalid IL or missing references)
		//IL_de46: Expected O, but got Unknown
		//IL_dea9: Unknown result type (might be due to invalid IL or missing references)
		//IL_deaf: Expected O, but got Unknown
		//IL_df3d: Unknown result type (might be due to invalid IL or missing references)
		//IL_df43: Expected O, but got Unknown
		//IL_dfd1: Unknown result type (might be due to invalid IL or missing references)
		//IL_dfd7: Expected O, but got Unknown
		//IL_e065: Unknown result type (might be due to invalid IL or missing references)
		//IL_e06b: Expected O, but got Unknown
		//IL_e0f9: Unknown result type (might be due to invalid IL or missing references)
		//IL_e0ff: Expected O, but got Unknown
		//IL_e18d: Unknown result type (might be due to invalid IL or missing references)
		//IL_e193: Expected O, but got Unknown
		//IL_e221: Unknown result type (might be due to invalid IL or missing references)
		//IL_e227: Expected O, but got Unknown
		//IL_e2b5: Unknown result type (might be due to invalid IL or missing references)
		//IL_e2bb: Expected O, but got Unknown
		//IL_e349: Unknown result type (might be due to invalid IL or missing references)
		//IL_e34f: Expected O, but got Unknown
		//IL_e3bd: Unknown result type (might be due to invalid IL or missing references)
		//IL_e3c3: Expected O, but got Unknown
		//IL_e431: Unknown result type (might be due to invalid IL or missing references)
		//IL_e437: Expected O, but got Unknown
		//IL_e4a5: Unknown result type (might be due to invalid IL or missing references)
		//IL_e4ab: Expected O, but got Unknown
		//IL_e519: Unknown result type (might be due to invalid IL or missing references)
		//IL_e51f: Expected O, but got Unknown
		//IL_e58d: Unknown result type (might be due to invalid IL or missing references)
		//IL_e593: Expected O, but got Unknown
		//IL_e5f6: Unknown result type (might be due to invalid IL or missing references)
		//IL_e5fc: Expected O, but got Unknown
		//IL_e649: Unknown result type (might be due to invalid IL or missing references)
		//IL_e64f: Expected O, but got Unknown
		//IL_e6c4: Unknown result type (might be due to invalid IL or missing references)
		//IL_e6ca: Expected O, but got Unknown
		//IL_e73f: Unknown result type (might be due to invalid IL or missing references)
		//IL_e745: Expected O, but got Unknown
		//IL_e7b3: Unknown result type (might be due to invalid IL or missing references)
		//IL_e7b9: Expected O, but got Unknown
		//IL_e82e: Unknown result type (might be due to invalid IL or missing references)
		//IL_e834: Expected O, but got Unknown
		//IL_e881: Unknown result type (might be due to invalid IL or missing references)
		//IL_e887: Expected O, but got Unknown
		//IL_e8f1: Unknown result type (might be due to invalid IL or missing references)
		//IL_e8f7: Expected O, but got Unknown
		//IL_e96c: Unknown result type (might be due to invalid IL or missing references)
		//IL_e972: Expected O, but got Unknown
		//IL_e9e0: Unknown result type (might be due to invalid IL or missing references)
		//IL_e9e6: Expected O, but got Unknown
		//IL_ea50: Unknown result type (might be due to invalid IL or missing references)
		//IL_ea56: Expected O, but got Unknown
		//IL_eac0: Unknown result type (might be due to invalid IL or missing references)
		//IL_eac6: Expected O, but got Unknown
		//IL_eb29: Unknown result type (might be due to invalid IL or missing references)
		//IL_eb2f: Expected O, but got Unknown
		//IL_eb92: Unknown result type (might be due to invalid IL or missing references)
		//IL_eb98: Expected O, but got Unknown
		//IL_ebe5: Unknown result type (might be due to invalid IL or missing references)
		//IL_ebeb: Expected O, but got Unknown
		//IL_ec4e: Unknown result type (might be due to invalid IL or missing references)
		//IL_ec54: Expected O, but got Unknown
		//IL_ecbe: Unknown result type (might be due to invalid IL or missing references)
		//IL_ecc4: Expected O, but got Unknown
		//IL_ed2e: Unknown result type (might be due to invalid IL or missing references)
		//IL_ed34: Expected O, but got Unknown
		//IL_eda9: Unknown result type (might be due to invalid IL or missing references)
		//IL_edaf: Expected O, but got Unknown
		//IL_edfc: Unknown result type (might be due to invalid IL or missing references)
		//IL_ee02: Expected O, but got Unknown
		//IL_ee5a: Unknown result type (might be due to invalid IL or missing references)
		//IL_ee60: Expected O, but got Unknown
		//IL_eeb8: Unknown result type (might be due to invalid IL or missing references)
		//IL_eebe: Expected O, but got Unknown
		//IL_ef0b: Unknown result type (might be due to invalid IL or missing references)
		//IL_ef11: Expected O, but got Unknown
		//IL_ef5e: Unknown result type (might be due to invalid IL or missing references)
		//IL_ef64: Expected O, but got Unknown
		//IL_efb1: Unknown result type (might be due to invalid IL or missing references)
		//IL_efb7: Expected O, but got Unknown
		//IL_f004: Unknown result type (might be due to invalid IL or missing references)
		//IL_f00a: Expected O, but got Unknown
		//IL_f057: Unknown result type (might be due to invalid IL or missing references)
		//IL_f05d: Expected O, but got Unknown
		//IL_f0aa: Unknown result type (might be due to invalid IL or missing references)
		//IL_f0b0: Expected O, but got Unknown
		//IL_f0fd: Unknown result type (might be due to invalid IL or missing references)
		//IL_f103: Expected O, but got Unknown
		//IL_f150: Unknown result type (might be due to invalid IL or missing references)
		//IL_f156: Expected O, but got Unknown
		//IL_f1a3: Unknown result type (might be due to invalid IL or missing references)
		//IL_f1a9: Expected O, but got Unknown
		//IL_f1f6: Unknown result type (might be due to invalid IL or missing references)
		//IL_f1fc: Expected O, but got Unknown
		//IL_f249: Unknown result type (might be due to invalid IL or missing references)
		//IL_f24f: Expected O, but got Unknown
		//IL_f29c: Unknown result type (might be due to invalid IL or missing references)
		//IL_f2a2: Expected O, but got Unknown
		//IL_f2ef: Unknown result type (might be due to invalid IL or missing references)
		//IL_f2f5: Expected O, but got Unknown
		//IL_f342: Unknown result type (might be due to invalid IL or missing references)
		//IL_f348: Expected O, but got Unknown
		//IL_f3ab: Unknown result type (might be due to invalid IL or missing references)
		//IL_f3b1: Expected O, but got Unknown
		//IL_f414: Unknown result type (might be due to invalid IL or missing references)
		//IL_f41a: Expected O, but got Unknown
		//IL_f49d: Unknown result type (might be due to invalid IL or missing references)
		//IL_f4a3: Expected O, but got Unknown
		//IL_f526: Unknown result type (might be due to invalid IL or missing references)
		//IL_f52c: Expected O, but got Unknown
		//IL_f5af: Unknown result type (might be due to invalid IL or missing references)
		//IL_f5b5: Expected O, but got Unknown
		//IL_f638: Unknown result type (might be due to invalid IL or missing references)
		//IL_f63e: Expected O, but got Unknown
		//IL_f6a1: Unknown result type (might be due to invalid IL or missing references)
		//IL_f6a7: Expected O, but got Unknown
		//IL_f72a: Unknown result type (might be due to invalid IL or missing references)
		//IL_f730: Expected O, but got Unknown
		//IL_f79a: Unknown result type (might be due to invalid IL or missing references)
		//IL_f7a0: Expected O, but got Unknown
		//IL_f803: Unknown result type (might be due to invalid IL or missing references)
		//IL_f809: Expected O, but got Unknown
		//IL_f856: Unknown result type (might be due to invalid IL or missing references)
		//IL_f85c: Expected O, but got Unknown
		//IL_f8a9: Unknown result type (might be due to invalid IL or missing references)
		//IL_f8af: Expected O, but got Unknown
		//IL_f8fc: Unknown result type (might be due to invalid IL or missing references)
		//IL_f902: Expected O, but got Unknown
		//IL_f94f: Unknown result type (might be due to invalid IL or missing references)
		//IL_f955: Expected O, but got Unknown
		//IL_f9bf: Unknown result type (might be due to invalid IL or missing references)
		//IL_f9c5: Expected O, but got Unknown
		//IL_fa12: Unknown result type (might be due to invalid IL or missing references)
		//IL_fa18: Expected O, but got Unknown
		//IL_fa65: Unknown result type (might be due to invalid IL or missing references)
		//IL_fa6b: Expected O, but got Unknown
		//IL_fab8: Unknown result type (might be due to invalid IL or missing references)
		//IL_fabe: Expected O, but got Unknown
		//IL_fb0b: Unknown result type (might be due to invalid IL or missing references)
		//IL_fb11: Expected O, but got Unknown
		//IL_fb74: Unknown result type (might be due to invalid IL or missing references)
		//IL_fb7a: Expected O, but got Unknown
		//IL_fbdd: Unknown result type (might be due to invalid IL or missing references)
		//IL_fbe3: Expected O, but got Unknown
		//IL_fc46: Unknown result type (might be due to invalid IL or missing references)
		//IL_fc4c: Expected O, but got Unknown
		//IL_fc99: Unknown result type (might be due to invalid IL or missing references)
		//IL_fc9f: Expected O, but got Unknown
		//IL_fd02: Unknown result type (might be due to invalid IL or missing references)
		//IL_fd08: Expected O, but got Unknown
		//IL_fd55: Unknown result type (might be due to invalid IL or missing references)
		//IL_fd5b: Expected O, but got Unknown
		//IL_fda8: Unknown result type (might be due to invalid IL or missing references)
		//IL_fdae: Expected O, but got Unknown
		//IL_fe2e: Unknown result type (might be due to invalid IL or missing references)
		//IL_fe34: Expected O, but got Unknown
		//IL_fe81: Unknown result type (might be due to invalid IL or missing references)
		//IL_fe87: Expected O, but got Unknown
		//IL_fed4: Unknown result type (might be due to invalid IL or missing references)
		//IL_feda: Expected O, but got Unknown
		//IL_ff27: Unknown result type (might be due to invalid IL or missing references)
		//IL_ff2d: Expected O, but got Unknown
		//IL_ff7a: Unknown result type (might be due to invalid IL or missing references)
		//IL_ff80: Expected O, but got Unknown
		//IL_ffcd: Unknown result type (might be due to invalid IL or missing references)
		//IL_ffd3: Expected O, but got Unknown
		//IL_10020: Unknown result type (might be due to invalid IL or missing references)
		//IL_10026: Expected O, but got Unknown
		//IL_10089: Unknown result type (might be due to invalid IL or missing references)
		//IL_1008f: Expected O, but got Unknown
		//IL_100fd: Unknown result type (might be due to invalid IL or missing references)
		//IL_10103: Expected O, but got Unknown
		//IL_10150: Unknown result type (might be due to invalid IL or missing references)
		//IL_10156: Expected O, but got Unknown
		//IL_101b9: Unknown result type (might be due to invalid IL or missing references)
		//IL_101bf: Expected O, but got Unknown
		//IL_1020c: Unknown result type (might be due to invalid IL or missing references)
		//IL_10212: Expected O, but got Unknown
		//IL_1025f: Unknown result type (might be due to invalid IL or missing references)
		//IL_10265: Expected O, but got Unknown
		//IL_102c8: Unknown result type (might be due to invalid IL or missing references)
		//IL_102ce: Expected O, but got Unknown
		//IL_1031b: Unknown result type (might be due to invalid IL or missing references)
		//IL_10321: Expected O, but got Unknown
		//IL_1039d: Unknown result type (might be due to invalid IL or missing references)
		//IL_103a3: Expected O, but got Unknown
		//IL_10406: Unknown result type (might be due to invalid IL or missing references)
		//IL_1040c: Expected O, but got Unknown
		//IL_10459: Unknown result type (might be due to invalid IL or missing references)
		//IL_1045f: Expected O, but got Unknown
		//IL_104c9: Unknown result type (might be due to invalid IL or missing references)
		//IL_104cf: Expected O, but got Unknown
		//IL_10532: Unknown result type (might be due to invalid IL or missing references)
		//IL_10538: Expected O, but got Unknown
		//IL_10585: Unknown result type (might be due to invalid IL or missing references)
		//IL_1058b: Expected O, but got Unknown
		//IL_105d8: Unknown result type (might be due to invalid IL or missing references)
		//IL_105de: Expected O, but got Unknown
		//IL_1062b: Unknown result type (might be due to invalid IL or missing references)
		//IL_10631: Expected O, but got Unknown
		//IL_1067e: Unknown result type (might be due to invalid IL or missing references)
		//IL_10684: Expected O, but got Unknown
		//IL_106d1: Unknown result type (might be due to invalid IL or missing references)
		//IL_106d7: Expected O, but got Unknown
		//IL_10724: Unknown result type (might be due to invalid IL or missing references)
		//IL_1072a: Expected O, but got Unknown
		//IL_10777: Unknown result type (might be due to invalid IL or missing references)
		//IL_1077d: Expected O, but got Unknown
		//IL_107ca: Unknown result type (might be due to invalid IL or missing references)
		//IL_107d0: Expected O, but got Unknown
		//IL_1081d: Unknown result type (might be due to invalid IL or missing references)
		//IL_10823: Expected O, but got Unknown
		//IL_10870: Unknown result type (might be due to invalid IL or missing references)
		//IL_10876: Expected O, but got Unknown
		//IL_108d9: Unknown result type (might be due to invalid IL or missing references)
		//IL_108df: Expected O, but got Unknown
		//IL_1092c: Unknown result type (might be due to invalid IL or missing references)
		//IL_10932: Expected O, but got Unknown
		//IL_1097f: Unknown result type (might be due to invalid IL or missing references)
		//IL_10985: Expected O, but got Unknown
		//IL_109d2: Unknown result type (might be due to invalid IL or missing references)
		//IL_109d8: Expected O, but got Unknown
		//IL_10a25: Unknown result type (might be due to invalid IL or missing references)
		//IL_10a2b: Expected O, but got Unknown
		//IL_10aa7: Unknown result type (might be due to invalid IL or missing references)
		//IL_10aad: Expected O, but got Unknown
		//IL_10b29: Unknown result type (might be due to invalid IL or missing references)
		//IL_10b2f: Expected O, but got Unknown
		//IL_10b7c: Unknown result type (might be due to invalid IL or missing references)
		//IL_10b82: Expected O, but got Unknown
		//IL_10bcf: Unknown result type (might be due to invalid IL or missing references)
		//IL_10bd5: Expected O, but got Unknown
		//IL_10c22: Unknown result type (might be due to invalid IL or missing references)
		//IL_10c28: Expected O, but got Unknown
		//IL_10c75: Unknown result type (might be due to invalid IL or missing references)
		//IL_10c7b: Expected O, but got Unknown
		//IL_10cc8: Unknown result type (might be due to invalid IL or missing references)
		//IL_10cce: Expected O, but got Unknown
		//IL_10d1b: Unknown result type (might be due to invalid IL or missing references)
		//IL_10d21: Expected O, but got Unknown
		//IL_10d6e: Unknown result type (might be due to invalid IL or missing references)
		//IL_10d74: Expected O, but got Unknown
		//IL_10dc1: Unknown result type (might be due to invalid IL or missing references)
		//IL_10dc7: Expected O, but got Unknown
		//IL_10e14: Unknown result type (might be due to invalid IL or missing references)
		//IL_10e1a: Expected O, but got Unknown
		//IL_10e67: Unknown result type (might be due to invalid IL or missing references)
		//IL_10e6d: Expected O, but got Unknown
		//IL_10eba: Unknown result type (might be due to invalid IL or missing references)
		//IL_10ec0: Expected O, but got Unknown
		//IL_10f0d: Unknown result type (might be due to invalid IL or missing references)
		//IL_10f13: Expected O, but got Unknown
		//IL_10f60: Unknown result type (might be due to invalid IL or missing references)
		//IL_10f66: Expected O, but got Unknown
		//IL_10fb3: Unknown result type (might be due to invalid IL or missing references)
		//IL_10fb9: Expected O, but got Unknown
		//IL_11006: Unknown result type (might be due to invalid IL or missing references)
		//IL_1100c: Expected O, but got Unknown
		//IL_11059: Unknown result type (might be due to invalid IL or missing references)
		//IL_1105f: Expected O, but got Unknown
		//IL_110ac: Unknown result type (might be due to invalid IL or missing references)
		//IL_110b2: Expected O, but got Unknown
		//IL_110ff: Unknown result type (might be due to invalid IL or missing references)
		//IL_11105: Expected O, but got Unknown
		//IL_11152: Unknown result type (might be due to invalid IL or missing references)
		//IL_11158: Expected O, but got Unknown
		//IL_111a5: Unknown result type (might be due to invalid IL or missing references)
		//IL_111ab: Expected O, but got Unknown
		//IL_111f8: Unknown result type (might be due to invalid IL or missing references)
		//IL_111fe: Expected O, but got Unknown
		//IL_1125d: Unknown result type (might be due to invalid IL or missing references)
		//IL_11263: Expected O, but got Unknown
		//IL_112c6: Unknown result type (might be due to invalid IL or missing references)
		//IL_112cc: Expected O, but got Unknown
		//IL_11320: Unknown result type (might be due to invalid IL or missing references)
		//IL_11326: Expected O, but got Unknown
		//IL_11389: Unknown result type (might be due to invalid IL or missing references)
		//IL_1138f: Expected O, but got Unknown
		//IL_113f2: Unknown result type (might be due to invalid IL or missing references)
		//IL_113f8: Expected O, but got Unknown
		//IL_11466: Unknown result type (might be due to invalid IL or missing references)
		//IL_1146c: Expected O, but got Unknown
		//IL_114da: Unknown result type (might be due to invalid IL or missing references)
		//IL_114e0: Expected O, but got Unknown
		//IL_1154e: Unknown result type (might be due to invalid IL or missing references)
		//IL_11554: Expected O, but got Unknown
		//IL_115c2: Unknown result type (might be due to invalid IL or missing references)
		//IL_115c8: Expected O, but got Unknown
		//IL_11636: Unknown result type (might be due to invalid IL or missing references)
		//IL_1163c: Expected O, but got Unknown
		//IL_116aa: Unknown result type (might be due to invalid IL or missing references)
		//IL_116b0: Expected O, but got Unknown
		//IL_1171e: Unknown result type (might be due to invalid IL or missing references)
		//IL_11724: Expected O, but got Unknown
		//IL_11771: Unknown result type (might be due to invalid IL or missing references)
		//IL_11777: Expected O, but got Unknown
		//IL_117c4: Unknown result type (might be due to invalid IL or missing references)
		//IL_117ca: Expected O, but got Unknown
		//IL_11817: Unknown result type (might be due to invalid IL or missing references)
		//IL_1181d: Expected O, but got Unknown
		//IL_1186a: Unknown result type (might be due to invalid IL or missing references)
		//IL_11870: Expected O, but got Unknown
		//IL_118bd: Unknown result type (might be due to invalid IL or missing references)
		//IL_118c3: Expected O, but got Unknown
		//IL_1191b: Unknown result type (might be due to invalid IL or missing references)
		//IL_11921: Expected O, but got Unknown
		//IL_11979: Unknown result type (might be due to invalid IL or missing references)
		//IL_1197f: Expected O, but got Unknown
		//IL_119d7: Unknown result type (might be due to invalid IL or missing references)
		//IL_119dd: Expected O, but got Unknown
		//IL_11a35: Unknown result type (might be due to invalid IL or missing references)
		//IL_11a3b: Expected O, but got Unknown
		//IL_11a88: Unknown result type (might be due to invalid IL or missing references)
		//IL_11a8e: Expected O, but got Unknown
		//IL_11ae6: Unknown result type (might be due to invalid IL or missing references)
		//IL_11aec: Expected O, but got Unknown
		//IL_11b44: Unknown result type (might be due to invalid IL or missing references)
		//IL_11b4a: Expected O, but got Unknown
		//IL_11bd8: Unknown result type (might be due to invalid IL or missing references)
		//IL_11bde: Expected O, but got Unknown
		//IL_11c2b: Unknown result type (might be due to invalid IL or missing references)
		//IL_11c31: Expected O, but got Unknown
		//IL_11c7e: Unknown result type (might be due to invalid IL or missing references)
		//IL_11c84: Expected O, but got Unknown
		//IL_11cd1: Unknown result type (might be due to invalid IL or missing references)
		//IL_11cd7: Expected O, but got Unknown
		//IL_11d2f: Unknown result type (might be due to invalid IL or missing references)
		//IL_11d35: Expected O, but got Unknown
		//IL_11d82: Unknown result type (might be due to invalid IL or missing references)
		//IL_11d88: Expected O, but got Unknown
		//IL_11de0: Unknown result type (might be due to invalid IL or missing references)
		//IL_11de6: Expected O, but got Unknown
		//IL_11e33: Unknown result type (might be due to invalid IL or missing references)
		//IL_11e39: Expected O, but got Unknown
		//IL_11e91: Unknown result type (might be due to invalid IL or missing references)
		//IL_11e97: Expected O, but got Unknown
		//IL_11eef: Unknown result type (might be due to invalid IL or missing references)
		//IL_11ef5: Expected O, but got Unknown
		//IL_11f42: Unknown result type (might be due to invalid IL or missing references)
		//IL_11f48: Expected O, but got Unknown
		//IL_11fa0: Unknown result type (might be due to invalid IL or missing references)
		//IL_11fa6: Expected O, but got Unknown
		//IL_11ff3: Unknown result type (might be due to invalid IL or missing references)
		//IL_11ff9: Expected O, but got Unknown
		//IL_12051: Unknown result type (might be due to invalid IL or missing references)
		//IL_12057: Expected O, but got Unknown
		//IL_120a4: Unknown result type (might be due to invalid IL or missing references)
		//IL_120aa: Expected O, but got Unknown
		//IL_120f7: Unknown result type (might be due to invalid IL or missing references)
		//IL_120fd: Expected O, but got Unknown
		//IL_12155: Unknown result type (might be due to invalid IL or missing references)
		//IL_1215b: Expected O, but got Unknown
		//IL_121b3: Unknown result type (might be due to invalid IL or missing references)
		//IL_121b9: Expected O, but got Unknown
		//IL_1221c: Unknown result type (might be due to invalid IL or missing references)
		//IL_12222: Expected O, but got Unknown
		//IL_1226f: Unknown result type (might be due to invalid IL or missing references)
		//IL_12275: Expected O, but got Unknown
		//IL_122c2: Unknown result type (might be due to invalid IL or missing references)
		//IL_122c8: Expected O, but got Unknown
		//IL_12315: Unknown result type (might be due to invalid IL or missing references)
		//IL_1231b: Expected O, but got Unknown
		//IL_12368: Unknown result type (might be due to invalid IL or missing references)
		//IL_1236e: Expected O, but got Unknown
		//IL_123bb: Unknown result type (might be due to invalid IL or missing references)
		//IL_123c1: Expected O, but got Unknown
		//IL_1240e: Unknown result type (might be due to invalid IL or missing references)
		//IL_12414: Expected O, but got Unknown
		//IL_12482: Unknown result type (might be due to invalid IL or missing references)
		//IL_12488: Expected O, but got Unknown
		//IL_124eb: Unknown result type (might be due to invalid IL or missing references)
		//IL_124f1: Expected O, but got Unknown
		//IL_1255f: Unknown result type (might be due to invalid IL or missing references)
		//IL_12565: Expected O, but got Unknown
		//IL_125d3: Unknown result type (might be due to invalid IL or missing references)
		//IL_125d9: Expected O, but got Unknown
		//IL_1263c: Unknown result type (might be due to invalid IL or missing references)
		//IL_12642: Expected O, but got Unknown
		//IL_126a5: Unknown result type (might be due to invalid IL or missing references)
		//IL_126ab: Expected O, but got Unknown
		//IL_1270e: Unknown result type (might be due to invalid IL or missing references)
		//IL_12714: Expected O, but got Unknown
		//IL_12761: Unknown result type (might be due to invalid IL or missing references)
		//IL_12767: Expected O, but got Unknown
		//IL_127d5: Unknown result type (might be due to invalid IL or missing references)
		//IL_127db: Expected O, but got Unknown
		//IL_12849: Unknown result type (might be due to invalid IL or missing references)
		//IL_1284f: Expected O, but got Unknown
		//IL_128dd: Unknown result type (might be due to invalid IL or missing references)
		//IL_128e3: Expected O, but got Unknown
		//IL_12951: Unknown result type (might be due to invalid IL or missing references)
		//IL_12957: Expected O, but got Unknown
		//IL_129c5: Unknown result type (might be due to invalid IL or missing references)
		//IL_129cb: Expected O, but got Unknown
		//IL_12a35: Unknown result type (might be due to invalid IL or missing references)
		//IL_12a3b: Expected O, but got Unknown
		//IL_12aa9: Unknown result type (might be due to invalid IL or missing references)
		//IL_12aaf: Expected O, but got Unknown
		//IL_12b1d: Unknown result type (might be due to invalid IL or missing references)
		//IL_12b23: Expected O, but got Unknown
		//IL_12b70: Unknown result type (might be due to invalid IL or missing references)
		//IL_12b76: Expected O, but got Unknown
		//IL_12be4: Unknown result type (might be due to invalid IL or missing references)
		//IL_12bea: Expected O, but got Unknown
		//IL_12c58: Unknown result type (might be due to invalid IL or missing references)
		//IL_12c5e: Expected O, but got Unknown
		//IL_12cab: Unknown result type (might be due to invalid IL or missing references)
		//IL_12cb1: Expected O, but got Unknown
		//IL_12d1f: Unknown result type (might be due to invalid IL or missing references)
		//IL_12d25: Expected O, but got Unknown
		//IL_12d72: Unknown result type (might be due to invalid IL or missing references)
		//IL_12d78: Expected O, but got Unknown
		//IL_12de6: Unknown result type (might be due to invalid IL or missing references)
		//IL_12dec: Expected O, but got Unknown
		//IL_12e4f: Unknown result type (might be due to invalid IL or missing references)
		//IL_12e55: Expected O, but got Unknown
		//IL_12ec3: Unknown result type (might be due to invalid IL or missing references)
		//IL_12ec9: Expected O, but got Unknown
		//IL_12f16: Unknown result type (might be due to invalid IL or missing references)
		//IL_12f1c: Expected O, but got Unknown
		//IL_12f8a: Unknown result type (might be due to invalid IL or missing references)
		//IL_12f90: Expected O, but got Unknown
		//IL_12fe8: Unknown result type (might be due to invalid IL or missing references)
		//IL_12fee: Expected O, but got Unknown
		//IL_13051: Unknown result type (might be due to invalid IL or missing references)
		//IL_13057: Expected O, but got Unknown
		//IL_130da: Unknown result type (might be due to invalid IL or missing references)
		//IL_130e0: Expected O, but got Unknown
		//IL_13163: Unknown result type (might be due to invalid IL or missing references)
		//IL_13169: Expected O, but got Unknown
		//IL_131ec: Unknown result type (might be due to invalid IL or missing references)
		//IL_131f2: Expected O, but got Unknown
		//IL_13275: Unknown result type (might be due to invalid IL or missing references)
		//IL_1327b: Expected O, but got Unknown
		//IL_132fe: Unknown result type (might be due to invalid IL or missing references)
		//IL_13304: Expected O, but got Unknown
		//IL_13387: Unknown result type (might be due to invalid IL or missing references)
		//IL_1338d: Expected O, but got Unknown
		//IL_13410: Unknown result type (might be due to invalid IL or missing references)
		//IL_13416: Expected O, but got Unknown
		//IL_13499: Unknown result type (might be due to invalid IL or missing references)
		//IL_1349f: Expected O, but got Unknown
		//IL_13502: Unknown result type (might be due to invalid IL or missing references)
		//IL_13508: Expected O, but got Unknown
		//IL_1356b: Unknown result type (might be due to invalid IL or missing references)
		//IL_13571: Expected O, but got Unknown
		//IL_135be: Unknown result type (might be due to invalid IL or missing references)
		//IL_135c4: Expected O, but got Unknown
		//IL_13611: Unknown result type (might be due to invalid IL or missing references)
		//IL_13617: Expected O, but got Unknown
		//IL_13664: Unknown result type (might be due to invalid IL or missing references)
		//IL_1366a: Expected O, but got Unknown
		//IL_136b7: Unknown result type (might be due to invalid IL or missing references)
		//IL_136bd: Expected O, but got Unknown
		//IL_1370a: Unknown result type (might be due to invalid IL or missing references)
		//IL_13710: Expected O, but got Unknown
		//IL_13773: Unknown result type (might be due to invalid IL or missing references)
		//IL_13779: Expected O, but got Unknown
		//IL_137dc: Unknown result type (might be due to invalid IL or missing references)
		//IL_137e2: Expected O, but got Unknown
		//IL_1382f: Unknown result type (might be due to invalid IL or missing references)
		//IL_13835: Expected O, but got Unknown
		//IL_13882: Unknown result type (might be due to invalid IL or missing references)
		//IL_13888: Expected O, but got Unknown
		//IL_138d5: Unknown result type (might be due to invalid IL or missing references)
		//IL_138db: Expected O, but got Unknown
		//IL_13928: Unknown result type (might be due to invalid IL or missing references)
		//IL_1392e: Expected O, but got Unknown
		//IL_1397b: Unknown result type (might be due to invalid IL or missing references)
		//IL_13981: Expected O, but got Unknown
		//IL_139ce: Unknown result type (might be due to invalid IL or missing references)
		//IL_139d4: Expected O, but got Unknown
		//IL_13a37: Unknown result type (might be due to invalid IL or missing references)
		//IL_13a3d: Expected O, but got Unknown
		//IL_13aa0: Unknown result type (might be due to invalid IL or missing references)
		//IL_13aa6: Expected O, but got Unknown
		//IL_13b09: Unknown result type (might be due to invalid IL or missing references)
		//IL_13b0f: Expected O, but got Unknown
		//IL_13b72: Unknown result type (might be due to invalid IL or missing references)
		//IL_13b78: Expected O, but got Unknown
		//IL_13bdb: Unknown result type (might be due to invalid IL or missing references)
		//IL_13be1: Expected O, but got Unknown
		//IL_13c4f: Unknown result type (might be due to invalid IL or missing references)
		//IL_13c55: Expected O, but got Unknown
		//IL_13ce3: Unknown result type (might be due to invalid IL or missing references)
		//IL_13ce9: Expected O, but got Unknown
		//IL_13d4c: Unknown result type (might be due to invalid IL or missing references)
		//IL_13d52: Expected O, but got Unknown
		//IL_13db5: Unknown result type (might be due to invalid IL or missing references)
		//IL_13dbb: Expected O, but got Unknown
		//IL_13e1e: Unknown result type (might be due to invalid IL or missing references)
		//IL_13e24: Expected O, but got Unknown
		//IL_13e92: Unknown result type (might be due to invalid IL or missing references)
		//IL_13e98: Expected O, but got Unknown
		//IL_13f06: Unknown result type (might be due to invalid IL or missing references)
		//IL_13f0c: Expected O, but got Unknown
		//IL_13fa8: Unknown result type (might be due to invalid IL or missing references)
		//IL_13fae: Expected O, but got Unknown
		//IL_14011: Unknown result type (might be due to invalid IL or missing references)
		//IL_14017: Expected O, but got Unknown
		//IL_14085: Unknown result type (might be due to invalid IL or missing references)
		//IL_1408b: Expected O, but got Unknown
		//IL_140ee: Unknown result type (might be due to invalid IL or missing references)
		//IL_140f4: Expected O, but got Unknown
		//IL_14190: Unknown result type (might be due to invalid IL or missing references)
		//IL_14196: Expected O, but got Unknown
		//IL_141f9: Unknown result type (might be due to invalid IL or missing references)
		//IL_141ff: Expected O, but got Unknown
		//IL_14262: Unknown result type (might be due to invalid IL or missing references)
		//IL_14268: Expected O, but got Unknown
		//IL_142cb: Unknown result type (might be due to invalid IL or missing references)
		//IL_142d1: Expected O, but got Unknown
		//IL_14334: Unknown result type (might be due to invalid IL or missing references)
		//IL_1433a: Expected O, but got Unknown
		//IL_1439d: Unknown result type (might be due to invalid IL or missing references)
		//IL_143a3: Expected O, but got Unknown
		//IL_14406: Unknown result type (might be due to invalid IL or missing references)
		//IL_1440c: Expected O, but got Unknown
		//IL_14459: Unknown result type (might be due to invalid IL or missing references)
		//IL_1445f: Expected O, but got Unknown
		//IL_144ac: Unknown result type (might be due to invalid IL or missing references)
		//IL_144b2: Expected O, but got Unknown
		//IL_144ff: Unknown result type (might be due to invalid IL or missing references)
		//IL_14505: Expected O, but got Unknown
		//IL_14552: Unknown result type (might be due to invalid IL or missing references)
		//IL_14558: Expected O, but got Unknown
		//IL_145a5: Unknown result type (might be due to invalid IL or missing references)
		//IL_145ab: Expected O, but got Unknown
		//IL_145f8: Unknown result type (might be due to invalid IL or missing references)
		//IL_145fe: Expected O, but got Unknown
		//IL_1464b: Unknown result type (might be due to invalid IL or missing references)
		//IL_14651: Expected O, but got Unknown
		//IL_1469e: Unknown result type (might be due to invalid IL or missing references)
		//IL_146a4: Expected O, but got Unknown
		//IL_14707: Unknown result type (might be due to invalid IL or missing references)
		//IL_1470d: Expected O, but got Unknown
		//IL_14770: Unknown result type (might be due to invalid IL or missing references)
		//IL_14776: Expected O, but got Unknown
		//IL_147c3: Unknown result type (might be due to invalid IL or missing references)
		//IL_147c9: Expected O, but got Unknown
		//IL_14816: Unknown result type (might be due to invalid IL or missing references)
		//IL_1481c: Expected O, but got Unknown
		//IL_14869: Unknown result type (might be due to invalid IL or missing references)
		//IL_1486f: Expected O, but got Unknown
		//IL_148bc: Unknown result type (might be due to invalid IL or missing references)
		//IL_148c2: Expected O, but got Unknown
		//IL_14925: Unknown result type (might be due to invalid IL or missing references)
		//IL_1492b: Expected O, but got Unknown
		//IL_14978: Unknown result type (might be due to invalid IL or missing references)
		//IL_1497e: Expected O, but got Unknown
		//IL_149cb: Unknown result type (might be due to invalid IL or missing references)
		//IL_149d1: Expected O, but got Unknown
		//IL_14a1e: Unknown result type (might be due to invalid IL or missing references)
		//IL_14a24: Expected O, but got Unknown
		//IL_14a71: Unknown result type (might be due to invalid IL or missing references)
		//IL_14a77: Expected O, but got Unknown
		//IL_14ad6: Unknown result type (might be due to invalid IL or missing references)
		//IL_14adc: Expected O, but got Unknown
		//IL_14b34: Unknown result type (might be due to invalid IL or missing references)
		//IL_14b3a: Expected O, but got Unknown
		//IL_14b92: Unknown result type (might be due to invalid IL or missing references)
		//IL_14b98: Expected O, but got Unknown
		//IL_14bf7: Unknown result type (might be due to invalid IL or missing references)
		//IL_14bfd: Expected O, but got Unknown
		//IL_14c4a: Unknown result type (might be due to invalid IL or missing references)
		//IL_14c50: Expected O, but got Unknown
		//IL_14ca8: Unknown result type (might be due to invalid IL or missing references)
		//IL_14cae: Expected O, but got Unknown
		//IL_14cfb: Unknown result type (might be due to invalid IL or missing references)
		//IL_14d01: Expected O, but got Unknown
		//IL_14d4e: Unknown result type (might be due to invalid IL or missing references)
		//IL_14d54: Expected O, but got Unknown
		//IL_14dd7: Unknown result type (might be due to invalid IL or missing references)
		//IL_14ddd: Expected O, but got Unknown
		//IL_14e60: Unknown result type (might be due to invalid IL or missing references)
		//IL_14e66: Expected O, but got Unknown
		//IL_14eb3: Unknown result type (might be due to invalid IL or missing references)
		//IL_14eb9: Expected O, but got Unknown
		//IL_14f06: Unknown result type (might be due to invalid IL or missing references)
		//IL_14f0c: Expected O, but got Unknown
		//IL_14f59: Unknown result type (might be due to invalid IL or missing references)
		//IL_14f5f: Expected O, but got Unknown
		//IL_14fdb: Unknown result type (might be due to invalid IL or missing references)
		//IL_14fe1: Expected O, but got Unknown
		//IL_1502e: Unknown result type (might be due to invalid IL or missing references)
		//IL_15034: Expected O, but got Unknown
		//IL_15081: Unknown result type (might be due to invalid IL or missing references)
		//IL_15087: Expected O, but got Unknown
		//IL_150d4: Unknown result type (might be due to invalid IL or missing references)
		//IL_150da: Expected O, but got Unknown
		//IL_1513d: Unknown result type (might be due to invalid IL or missing references)
		//IL_15143: Expected O, but got Unknown
		//IL_151a6: Unknown result type (might be due to invalid IL or missing references)
		//IL_151ac: Expected O, but got Unknown
		//IL_151f9: Unknown result type (might be due to invalid IL or missing references)
		//IL_151ff: Expected O, but got Unknown
		//IL_1524c: Unknown result type (might be due to invalid IL or missing references)
		//IL_15252: Expected O, but got Unknown
		//IL_152b5: Unknown result type (might be due to invalid IL or missing references)
		//IL_152bb: Expected O, but got Unknown
		//IL_1531e: Unknown result type (might be due to invalid IL or missing references)
		//IL_15324: Expected O, but got Unknown
		//IL_15371: Unknown result type (might be due to invalid IL or missing references)
		//IL_15377: Expected O, but got Unknown
		//IL_153c4: Unknown result type (might be due to invalid IL or missing references)
		//IL_153ca: Expected O, but got Unknown
		//IL_15417: Unknown result type (might be due to invalid IL or missing references)
		//IL_1541d: Expected O, but got Unknown
		//IL_1546a: Unknown result type (might be due to invalid IL or missing references)
		//IL_15470: Expected O, but got Unknown
		//IL_154bd: Unknown result type (might be due to invalid IL or missing references)
		//IL_154c3: Expected O, but got Unknown
		//IL_15510: Unknown result type (might be due to invalid IL or missing references)
		//IL_15516: Expected O, but got Unknown
		//IL_1556e: Unknown result type (might be due to invalid IL or missing references)
		//IL_15574: Expected O, but got Unknown
		//IL_155cc: Unknown result type (might be due to invalid IL or missing references)
		//IL_155d2: Expected O, but got Unknown
		//IL_15647: Unknown result type (might be due to invalid IL or missing references)
		//IL_1564d: Expected O, but got Unknown
		//IL_1569a: Unknown result type (might be due to invalid IL or missing references)
		//IL_156a0: Expected O, but got Unknown
		//IL_156ed: Unknown result type (might be due to invalid IL or missing references)
		//IL_156f3: Expected O, but got Unknown
		//IL_1574b: Unknown result type (might be due to invalid IL or missing references)
		//IL_15751: Expected O, but got Unknown
		//IL_157d4: Unknown result type (might be due to invalid IL or missing references)
		//IL_157da: Expected O, but got Unknown
		//IL_15827: Unknown result type (might be due to invalid IL or missing references)
		//IL_1582d: Expected O, but got Unknown
		//IL_1589b: Unknown result type (might be due to invalid IL or missing references)
		//IL_158a1: Expected O, but got Unknown
		//IL_1590f: Unknown result type (might be due to invalid IL or missing references)
		//IL_15915: Expected O, but got Unknown
		//IL_15983: Unknown result type (might be due to invalid IL or missing references)
		//IL_15989: Expected O, but got Unknown
		//IL_15a17: Unknown result type (might be due to invalid IL or missing references)
		//IL_15a1d: Expected O, but got Unknown
		//IL_15aab: Unknown result type (might be due to invalid IL or missing references)
		//IL_15ab1: Expected O, but got Unknown
		//IL_15b1f: Unknown result type (might be due to invalid IL or missing references)
		//IL_15b25: Expected O, but got Unknown
		//IL_15b8f: Unknown result type (might be due to invalid IL or missing references)
		//IL_15b95: Expected O, but got Unknown
		//IL_15bf8: Unknown result type (might be due to invalid IL or missing references)
		//IL_15bfe: Expected O, but got Unknown
		//IL_15c61: Unknown result type (might be due to invalid IL or missing references)
		//IL_15c67: Expected O, but got Unknown
		//IL_15cca: Unknown result type (might be due to invalid IL or missing references)
		//IL_15cd0: Expected O, but got Unknown
		//IL_15d33: Unknown result type (might be due to invalid IL or missing references)
		//IL_15d39: Expected O, but got Unknown
		//IL_15da3: Unknown result type (might be due to invalid IL or missing references)
		//IL_15da9: Expected O, but got Unknown
		//IL_15e13: Unknown result type (might be due to invalid IL or missing references)
		//IL_15e19: Expected O, but got Unknown
		//IL_15ea3: Unknown result type (might be due to invalid IL or missing references)
		//IL_15ea9: Expected O, but got Unknown
		//IL_15f0c: Unknown result type (might be due to invalid IL or missing references)
		//IL_15f12: Expected O, but got Unknown
		//IL_15f8e: Unknown result type (might be due to invalid IL or missing references)
		//IL_15f94: Expected O, but got Unknown
		//IL_15fec: Unknown result type (might be due to invalid IL or missing references)
		//IL_15ff2: Expected O, but got Unknown
		//IL_16075: Unknown result type (might be due to invalid IL or missing references)
		//IL_1607b: Expected O, but got Unknown
		//IL_160e9: Unknown result type (might be due to invalid IL or missing references)
		//IL_160ef: Expected O, but got Unknown
		//IL_1615d: Unknown result type (might be due to invalid IL or missing references)
		//IL_16163: Expected O, but got Unknown
		//IL_161d1: Unknown result type (might be due to invalid IL or missing references)
		//IL_161d7: Expected O, but got Unknown
		//IL_16241: Unknown result type (might be due to invalid IL or missing references)
		//IL_16247: Expected O, but got Unknown
		//IL_162b1: Unknown result type (might be due to invalid IL or missing references)
		//IL_162b7: Expected O, but got Unknown
		//IL_16304: Unknown result type (might be due to invalid IL or missing references)
		//IL_1630a: Expected O, but got Unknown
		//IL_1636d: Unknown result type (might be due to invalid IL or missing references)
		//IL_16373: Expected O, but got Unknown
		//IL_163c0: Unknown result type (might be due to invalid IL or missing references)
		//IL_163c6: Expected O, but got Unknown
		//IL_16430: Unknown result type (might be due to invalid IL or missing references)
		//IL_16436: Expected O, but got Unknown
		//IL_164a0: Unknown result type (might be due to invalid IL or missing references)
		//IL_164a6: Expected O, but got Unknown
		//IL_16522: Unknown result type (might be due to invalid IL or missing references)
		//IL_16528: Expected O, but got Unknown
		//IL_16592: Unknown result type (might be due to invalid IL or missing references)
		//IL_16598: Expected O, but got Unknown
		//IL_16602: Unknown result type (might be due to invalid IL or missing references)
		//IL_16608: Expected O, but got Unknown
		//IL_16676: Unknown result type (might be due to invalid IL or missing references)
		//IL_1667c: Expected O, but got Unknown
		//IL_166c9: Unknown result type (might be due to invalid IL or missing references)
		//IL_166cf: Expected O, but got Unknown
		//IL_16752: Unknown result type (might be due to invalid IL or missing references)
		//IL_16758: Expected O, but got Unknown
		//IL_167a5: Unknown result type (might be due to invalid IL or missing references)
		//IL_167ab: Expected O, but got Unknown
		//IL_16803: Unknown result type (might be due to invalid IL or missing references)
		//IL_16809: Expected O, but got Unknown
		//IL_16856: Unknown result type (might be due to invalid IL or missing references)
		//IL_1685c: Expected O, but got Unknown
		//IL_168bb: Unknown result type (might be due to invalid IL or missing references)
		//IL_168c1: Expected O, but got Unknown
		//IL_16920: Unknown result type (might be due to invalid IL or missing references)
		//IL_16926: Expected O, but got Unknown
		//IL_16989: Unknown result type (might be due to invalid IL or missing references)
		//IL_1698f: Expected O, but got Unknown
		//IL_169f2: Unknown result type (might be due to invalid IL or missing references)
		//IL_169f8: Expected O, but got Unknown
		//IL_16a5b: Unknown result type (might be due to invalid IL or missing references)
		//IL_16a61: Expected O, but got Unknown
		//IL_16ac4: Unknown result type (might be due to invalid IL or missing references)
		//IL_16aca: Expected O, but got Unknown
		//IL_16b46: Unknown result type (might be due to invalid IL or missing references)
		//IL_16b4c: Expected O, but got Unknown
		//IL_16baf: Unknown result type (might be due to invalid IL or missing references)
		//IL_16bb5: Expected O, but got Unknown
		//IL_16c0d: Unknown result type (might be due to invalid IL or missing references)
		//IL_16c13: Expected O, but got Unknown
		//IL_16c76: Unknown result type (might be due to invalid IL or missing references)
		//IL_16c7c: Expected O, but got Unknown
		//IL_16cf1: Unknown result type (might be due to invalid IL or missing references)
		//IL_16cf7: Expected O, but got Unknown
		//IL_16d65: Unknown result type (might be due to invalid IL or missing references)
		//IL_16d6b: Expected O, but got Unknown
		//IL_16dd9: Unknown result type (might be due to invalid IL or missing references)
		//IL_16ddf: Expected O, but got Unknown
		//IL_16e42: Unknown result type (might be due to invalid IL or missing references)
		//IL_16e48: Expected O, but got Unknown
		//IL_16eab: Unknown result type (might be due to invalid IL or missing references)
		//IL_16eb1: Expected O, but got Unknown
		//IL_16f4d: Unknown result type (might be due to invalid IL or missing references)
		//IL_16f53: Expected O, but got Unknown
		//IL_16fbd: Unknown result type (might be due to invalid IL or missing references)
		//IL_16fc3: Expected O, but got Unknown
		//IL_17026: Unknown result type (might be due to invalid IL or missing references)
		//IL_1702c: Expected O, but got Unknown
		//IL_1709a: Unknown result type (might be due to invalid IL or missing references)
		//IL_170a0: Expected O, but got Unknown
		//IL_17103: Unknown result type (might be due to invalid IL or missing references)
		//IL_17109: Expected O, but got Unknown
		//IL_17161: Unknown result type (might be due to invalid IL or missing references)
		//IL_17167: Expected O, but got Unknown
		//IL_171e3: Unknown result type (might be due to invalid IL or missing references)
		//IL_171e9: Expected O, but got Unknown
		//IL_1724c: Unknown result type (might be due to invalid IL or missing references)
		//IL_17252: Expected O, but got Unknown
		//IL_172b5: Unknown result type (might be due to invalid IL or missing references)
		//IL_172bb: Expected O, but got Unknown
		//IL_1731e: Unknown result type (might be due to invalid IL or missing references)
		//IL_17324: Expected O, but got Unknown
		//IL_173b2: Unknown result type (might be due to invalid IL or missing references)
		//IL_173b8: Expected O, but got Unknown
		//IL_1741b: Unknown result type (might be due to invalid IL or missing references)
		//IL_17421: Expected O, but got Unknown
		//IL_1749d: Unknown result type (might be due to invalid IL or missing references)
		//IL_174a3: Expected O, but got Unknown
		//IL_1751f: Unknown result type (might be due to invalid IL or missing references)
		//IL_17525: Expected O, but got Unknown
		//IL_17588: Unknown result type (might be due to invalid IL or missing references)
		//IL_1758e: Expected O, but got Unknown
		//IL_175db: Unknown result type (might be due to invalid IL or missing references)
		//IL_175e1: Expected O, but got Unknown
		//IL_1766f: Unknown result type (might be due to invalid IL or missing references)
		//IL_17675: Expected O, but got Unknown
		//IL_176d8: Unknown result type (might be due to invalid IL or missing references)
		//IL_176de: Expected O, but got Unknown
		//IL_1772b: Unknown result type (might be due to invalid IL or missing references)
		//IL_17731: Expected O, but got Unknown
		//IL_177bb: Unknown result type (might be due to invalid IL or missing references)
		//IL_177c1: Expected O, but got Unknown
		//IL_1784b: Unknown result type (might be due to invalid IL or missing references)
		//IL_17851: Expected O, but got Unknown
		//IL_178b4: Unknown result type (might be due to invalid IL or missing references)
		//IL_178ba: Expected O, but got Unknown
		//IL_1792b: Unknown result type (might be due to invalid IL or missing references)
		//IL_17931: Expected O, but got Unknown
		//IL_1799f: Unknown result type (might be due to invalid IL or missing references)
		//IL_179a5: Expected O, but got Unknown
		//IL_17a21: Unknown result type (might be due to invalid IL or missing references)
		//IL_17a27: Expected O, but got Unknown
		//IL_17a91: Unknown result type (might be due to invalid IL or missing references)
		//IL_17a97: Expected O, but got Unknown
		//IL_17afa: Unknown result type (might be due to invalid IL or missing references)
		//IL_17b00: Expected O, but got Unknown
		//IL_17b63: Unknown result type (might be due to invalid IL or missing references)
		//IL_17b69: Expected O, but got Unknown
		//IL_17bd3: Unknown result type (might be due to invalid IL or missing references)
		//IL_17bd9: Expected O, but got Unknown
		//IL_17c3c: Unknown result type (might be due to invalid IL or missing references)
		//IL_17c42: Expected O, but got Unknown
		//IL_17ca5: Unknown result type (might be due to invalid IL or missing references)
		//IL_17cab: Expected O, but got Unknown
		//IL_17d20: Unknown result type (might be due to invalid IL or missing references)
		//IL_17d26: Expected O, but got Unknown
		//IL_17d94: Unknown result type (might be due to invalid IL or missing references)
		//IL_17d9a: Expected O, but got Unknown
		//IL_17e16: Unknown result type (might be due to invalid IL or missing references)
		//IL_17e1c: Expected O, but got Unknown
		//IL_17e98: Unknown result type (might be due to invalid IL or missing references)
		//IL_17e9e: Expected O, but got Unknown
		//IL_17f13: Unknown result type (might be due to invalid IL or missing references)
		//IL_17f19: Expected O, but got Unknown
		//IL_17f7c: Unknown result type (might be due to invalid IL or missing references)
		//IL_17f82: Expected O, but got Unknown
		//IL_17fe5: Unknown result type (might be due to invalid IL or missing references)
		//IL_17feb: Expected O, but got Unknown
		//IL_1804e: Unknown result type (might be due to invalid IL or missing references)
		//IL_18054: Expected O, but got Unknown
		//IL_180b7: Unknown result type (might be due to invalid IL or missing references)
		//IL_180bd: Expected O, but got Unknown
		//IL_18120: Unknown result type (might be due to invalid IL or missing references)
		//IL_18126: Expected O, but got Unknown
		//IL_18189: Unknown result type (might be due to invalid IL or missing references)
		//IL_1818f: Expected O, but got Unknown
		//IL_181f2: Unknown result type (might be due to invalid IL or missing references)
		//IL_181f8: Expected O, but got Unknown
		//IL_1825b: Unknown result type (might be due to invalid IL or missing references)
		//IL_18261: Expected O, but got Unknown
		//IL_182c4: Unknown result type (might be due to invalid IL or missing references)
		//IL_182ca: Expected O, but got Unknown
		//IL_18322: Unknown result type (might be due to invalid IL or missing references)
		//IL_18328: Expected O, but got Unknown
		//IL_18380: Unknown result type (might be due to invalid IL or missing references)
		//IL_18386: Expected O, but got Unknown
		//IL_183f7: Unknown result type (might be due to invalid IL or missing references)
		//IL_183fd: Expected O, but got Unknown
		//IL_1846b: Unknown result type (might be due to invalid IL or missing references)
		//IL_18471: Expected O, but got Unknown
		//IL_184f4: Unknown result type (might be due to invalid IL or missing references)
		//IL_184fa: Expected O, but got Unknown
		//IL_1857d: Unknown result type (might be due to invalid IL or missing references)
		//IL_18583: Expected O, but got Unknown
		//IL_185e6: Unknown result type (might be due to invalid IL or missing references)
		//IL_185ec: Expected O, but got Unknown
		//IL_1864f: Unknown result type (might be due to invalid IL or missing references)
		//IL_18655: Expected O, but got Unknown
		//IL_186b8: Unknown result type (might be due to invalid IL or missing references)
		//IL_186be: Expected O, but got Unknown
		//IL_18721: Unknown result type (might be due to invalid IL or missing references)
		//IL_18727: Expected O, but got Unknown
		//IL_1878a: Unknown result type (might be due to invalid IL or missing references)
		//IL_18790: Expected O, but got Unknown
		//IL_187fe: Unknown result type (might be due to invalid IL or missing references)
		//IL_18804: Expected O, but got Unknown
		//IL_188a0: Unknown result type (might be due to invalid IL or missing references)
		//IL_188a6: Expected O, but got Unknown
		//IL_18922: Unknown result type (might be due to invalid IL or missing references)
		//IL_18928: Expected O, but got Unknown
		//IL_189a4: Unknown result type (might be due to invalid IL or missing references)
		//IL_189aa: Expected O, but got Unknown
		//IL_18a0d: Unknown result type (might be due to invalid IL or missing references)
		//IL_18a13: Expected O, but got Unknown
		//IL_18a76: Unknown result type (might be due to invalid IL or missing references)
		//IL_18a7c: Expected O, but got Unknown
		//IL_18adf: Unknown result type (might be due to invalid IL or missing references)
		//IL_18ae5: Expected O, but got Unknown
		//IL_18b48: Unknown result type (might be due to invalid IL or missing references)
		//IL_18b4e: Expected O, but got Unknown
		//IL_18bb1: Unknown result type (might be due to invalid IL or missing references)
		//IL_18bb7: Expected O, but got Unknown
		//IL_18c1a: Unknown result type (might be due to invalid IL or missing references)
		//IL_18c20: Expected O, but got Unknown
		//IL_18c83: Unknown result type (might be due to invalid IL or missing references)
		//IL_18c89: Expected O, but got Unknown
		//IL_18cec: Unknown result type (might be due to invalid IL or missing references)
		//IL_18cf2: Expected O, but got Unknown
		//IL_18d55: Unknown result type (might be due to invalid IL or missing references)
		//IL_18d5b: Expected O, but got Unknown
		//IL_18dbe: Unknown result type (might be due to invalid IL or missing references)
		//IL_18dc4: Expected O, but got Unknown
		//IL_18e27: Unknown result type (might be due to invalid IL or missing references)
		//IL_18e2d: Expected O, but got Unknown
		//IL_18e97: Unknown result type (might be due to invalid IL or missing references)
		//IL_18e9d: Expected O, but got Unknown
		//IL_18f00: Unknown result type (might be due to invalid IL or missing references)
		//IL_18f06: Expected O, but got Unknown
		//IL_18f69: Unknown result type (might be due to invalid IL or missing references)
		//IL_18f6f: Expected O, but got Unknown
		//IL_18fd2: Unknown result type (might be due to invalid IL or missing references)
		//IL_18fd8: Expected O, but got Unknown
		//IL_1903b: Unknown result type (might be due to invalid IL or missing references)
		//IL_19041: Expected O, but got Unknown
		//IL_190a4: Unknown result type (might be due to invalid IL or missing references)
		//IL_190aa: Expected O, but got Unknown
		//IL_1910d: Unknown result type (might be due to invalid IL or missing references)
		//IL_19113: Expected O, but got Unknown
		//IL_19176: Unknown result type (might be due to invalid IL or missing references)
		//IL_1917c: Expected O, but got Unknown
		//IL_191df: Unknown result type (might be due to invalid IL or missing references)
		//IL_191e5: Expected O, but got Unknown
		//IL_1924f: Unknown result type (might be due to invalid IL or missing references)
		//IL_19255: Expected O, but got Unknown
		//IL_192bf: Unknown result type (might be due to invalid IL or missing references)
		//IL_192c5: Expected O, but got Unknown
		//IL_19328: Unknown result type (might be due to invalid IL or missing references)
		//IL_1932e: Expected O, but got Unknown
		//IL_19391: Unknown result type (might be due to invalid IL or missing references)
		//IL_19397: Expected O, but got Unknown
		//IL_19428: Unknown result type (might be due to invalid IL or missing references)
		//IL_1942e: Expected O, but got Unknown
		//IL_19491: Unknown result type (might be due to invalid IL or missing references)
		//IL_19497: Expected O, but got Unknown
		//IL_194fa: Unknown result type (might be due to invalid IL or missing references)
		//IL_19500: Expected O, but got Unknown
		//IL_19563: Unknown result type (might be due to invalid IL or missing references)
		//IL_19569: Expected O, but got Unknown
		//IL_195b6: Unknown result type (might be due to invalid IL or missing references)
		//IL_195bc: Expected O, but got Unknown
		//IL_19626: Unknown result type (might be due to invalid IL or missing references)
		//IL_1962c: Expected O, but got Unknown
		//IL_1969a: Unknown result type (might be due to invalid IL or missing references)
		//IL_196a0: Expected O, but got Unknown
		//IL_19703: Unknown result type (might be due to invalid IL or missing references)
		//IL_19709: Expected O, but got Unknown
		//IL_1976c: Unknown result type (might be due to invalid IL or missing references)
		//IL_19772: Expected O, but got Unknown
		//IL_197dc: Unknown result type (might be due to invalid IL or missing references)
		//IL_197e2: Expected O, but got Unknown
		//IL_1984c: Unknown result type (might be due to invalid IL or missing references)
		//IL_19852: Expected O, but got Unknown
		//IL_198bc: Unknown result type (might be due to invalid IL or missing references)
		//IL_198c2: Expected O, but got Unknown
		//IL_1990f: Unknown result type (might be due to invalid IL or missing references)
		//IL_19915: Expected O, but got Unknown
		//IL_19978: Unknown result type (might be due to invalid IL or missing references)
		//IL_1997e: Expected O, but got Unknown
		//IL_19a1a: Unknown result type (might be due to invalid IL or missing references)
		//IL_19a20: Expected O, but got Unknown
		//IL_19a83: Unknown result type (might be due to invalid IL or missing references)
		//IL_19a89: Expected O, but got Unknown
		//IL_19b05: Unknown result type (might be due to invalid IL or missing references)
		//IL_19b0b: Expected O, but got Unknown
		//IL_19b6e: Unknown result type (might be due to invalid IL or missing references)
		//IL_19b74: Expected O, but got Unknown
		//IL_19bf7: Unknown result type (might be due to invalid IL or missing references)
		//IL_19bfd: Expected O, but got Unknown
		//IL_19c60: Unknown result type (might be due to invalid IL or missing references)
		//IL_19c66: Expected O, but got Unknown
		//IL_19cb3: Unknown result type (might be due to invalid IL or missing references)
		//IL_19cb9: Expected O, but got Unknown
		//IL_19d06: Unknown result type (might be due to invalid IL or missing references)
		//IL_19d0c: Expected O, but got Unknown
		//IL_19d6f: Unknown result type (might be due to invalid IL or missing references)
		//IL_19d75: Expected O, but got Unknown
		//IL_19dcd: Unknown result type (might be due to invalid IL or missing references)
		//IL_19dd3: Expected O, but got Unknown
		//IL_19e3d: Unknown result type (might be due to invalid IL or missing references)
		//IL_19e43: Expected O, but got Unknown
		//IL_19ea6: Unknown result type (might be due to invalid IL or missing references)
		//IL_19eac: Expected O, but got Unknown
		//IL_19f0f: Unknown result type (might be due to invalid IL or missing references)
		//IL_19f15: Expected O, but got Unknown
		//IL_19f83: Unknown result type (might be due to invalid IL or missing references)
		//IL_19f89: Expected O, but got Unknown
		//IL_19ff7: Unknown result type (might be due to invalid IL or missing references)
		//IL_19ffd: Expected O, but got Unknown
		//IL_1a06b: Unknown result type (might be due to invalid IL or missing references)
		//IL_1a071: Expected O, but got Unknown
		//IL_1a0df: Unknown result type (might be due to invalid IL or missing references)
		//IL_1a0e5: Expected O, but got Unknown
		//IL_1a153: Unknown result type (might be due to invalid IL or missing references)
		//IL_1a159: Expected O, but got Unknown
		//IL_1a1a6: Unknown result type (might be due to invalid IL or missing references)
		//IL_1a1ac: Expected O, but got Unknown
		//IL_1a204: Unknown result type (might be due to invalid IL or missing references)
		//IL_1a20a: Expected O, but got Unknown
		//IL_1a262: Unknown result type (might be due to invalid IL or missing references)
		//IL_1a268: Expected O, but got Unknown
		//IL_1a2c0: Unknown result type (might be due to invalid IL or missing references)
		//IL_1a2c6: Expected O, but got Unknown
		//IL_1a313: Unknown result type (might be due to invalid IL or missing references)
		//IL_1a319: Expected O, but got Unknown
		//IL_1a38e: Unknown result type (might be due to invalid IL or missing references)
		//IL_1a394: Expected O, but got Unknown
		//IL_1a3ec: Unknown result type (might be due to invalid IL or missing references)
		//IL_1a3f2: Expected O, but got Unknown
		//IL_1a44a: Unknown result type (might be due to invalid IL or missing references)
		//IL_1a450: Expected O, but got Unknown
		//IL_1a49d: Unknown result type (might be due to invalid IL or missing references)
		//IL_1a4a3: Expected O, but got Unknown
		//IL_1a506: Unknown result type (might be due to invalid IL or missing references)
		//IL_1a50c: Expected O, but got Unknown
		//IL_1a576: Unknown result type (might be due to invalid IL or missing references)
		//IL_1a57c: Expected O, but got Unknown
		//IL_1a5df: Unknown result type (might be due to invalid IL or missing references)
		//IL_1a5e5: Expected O, but got Unknown
		//IL_1a648: Unknown result type (might be due to invalid IL or missing references)
		//IL_1a64e: Expected O, but got Unknown
		//IL_1a6b8: Unknown result type (might be due to invalid IL or missing references)
		//IL_1a6be: Expected O, but got Unknown
		//IL_1a70b: Unknown result type (might be due to invalid IL or missing references)
		//IL_1a711: Expected O, but got Unknown
		//IL_1a774: Unknown result type (might be due to invalid IL or missing references)
		//IL_1a77a: Expected O, but got Unknown
		//IL_1a7ef: Unknown result type (might be due to invalid IL or missing references)
		//IL_1a7f5: Expected O, but got Unknown
		//IL_1a86a: Unknown result type (might be due to invalid IL or missing references)
		//IL_1a870: Expected O, but got Unknown
		//IL_1a8c8: Unknown result type (might be due to invalid IL or missing references)
		//IL_1a8ce: Expected O, but got Unknown
		//IL_1a93c: Unknown result type (might be due to invalid IL or missing references)
		//IL_1a942: Expected O, but got Unknown
		//IL_1a9a5: Unknown result type (might be due to invalid IL or missing references)
		//IL_1a9ab: Expected O, but got Unknown
		//IL_1aa19: Unknown result type (might be due to invalid IL or missing references)
		//IL_1aa1f: Expected O, but got Unknown
		//IL_1aa89: Unknown result type (might be due to invalid IL or missing references)
		//IL_1aa8f: Expected O, but got Unknown
		//IL_1aadc: Unknown result type (might be due to invalid IL or missing references)
		//IL_1aae2: Expected O, but got Unknown
		//IL_1ab45: Unknown result type (might be due to invalid IL or missing references)
		//IL_1ab4b: Expected O, but got Unknown
		//IL_1abae: Unknown result type (might be due to invalid IL or missing references)
		//IL_1abb4: Expected O, but got Unknown
		//IL_1ac0c: Unknown result type (might be due to invalid IL or missing references)
		//IL_1ac12: Expected O, but got Unknown
		//IL_1ac83: Unknown result type (might be due to invalid IL or missing references)
		//IL_1ac89: Expected O, but got Unknown
		//IL_1acec: Unknown result type (might be due to invalid IL or missing references)
		//IL_1acf2: Expected O, but got Unknown
		//IL_1ad55: Unknown result type (might be due to invalid IL or missing references)
		//IL_1ad5b: Expected O, but got Unknown
		//IL_1adbe: Unknown result type (might be due to invalid IL or missing references)
		//IL_1adc4: Expected O, but got Unknown
		//IL_1ae27: Unknown result type (might be due to invalid IL or missing references)
		//IL_1ae2d: Expected O, but got Unknown
		//IL_1ae90: Unknown result type (might be due to invalid IL or missing references)
		//IL_1ae96: Expected O, but got Unknown
		//IL_1aeee: Unknown result type (might be due to invalid IL or missing references)
		//IL_1aef4: Expected O, but got Unknown
		//IL_1af5e: Unknown result type (might be due to invalid IL or missing references)
		//IL_1af64: Expected O, but got Unknown
		//IL_1afbc: Unknown result type (might be due to invalid IL or missing references)
		//IL_1afc2: Expected O, but got Unknown
		//IL_1b02c: Unknown result type (might be due to invalid IL or missing references)
		//IL_1b032: Expected O, but got Unknown
		//IL_1b0c0: Unknown result type (might be due to invalid IL or missing references)
		//IL_1b0c6: Expected O, but got Unknown
		//IL_1b11e: Unknown result type (might be due to invalid IL or missing references)
		//IL_1b124: Expected O, but got Unknown
		//IL_1b18e: Unknown result type (might be due to invalid IL or missing references)
		//IL_1b194: Expected O, but got Unknown
		//IL_1b1fe: Unknown result type (might be due to invalid IL or missing references)
		//IL_1b204: Expected O, but got Unknown
		//IL_1b28e: Unknown result type (might be due to invalid IL or missing references)
		//IL_1b294: Expected O, but got Unknown
		//IL_1b2f7: Unknown result type (might be due to invalid IL or missing references)
		//IL_1b2fd: Expected O, but got Unknown
		//IL_1b355: Unknown result type (might be due to invalid IL or missing references)
		//IL_1b35b: Expected O, but got Unknown
		//IL_1b3be: Unknown result type (might be due to invalid IL or missing references)
		//IL_1b3c4: Expected O, but got Unknown
		//IL_1b427: Unknown result type (might be due to invalid IL or missing references)
		//IL_1b42d: Expected O, but got Unknown
		//IL_1b485: Unknown result type (might be due to invalid IL or missing references)
		//IL_1b48b: Expected O, but got Unknown
		//IL_1b4ee: Unknown result type (might be due to invalid IL or missing references)
		//IL_1b4f4: Expected O, but got Unknown
		//IL_1b557: Unknown result type (might be due to invalid IL or missing references)
		//IL_1b55d: Expected O, but got Unknown
		//IL_1b5d9: Unknown result type (might be due to invalid IL or missing references)
		//IL_1b5df: Expected O, but got Unknown
		//IL_1b642: Unknown result type (might be due to invalid IL or missing references)
		//IL_1b648: Expected O, but got Unknown
		//IL_1b6e4: Unknown result type (might be due to invalid IL or missing references)
		//IL_1b6ea: Expected O, but got Unknown
		//IL_1b74d: Unknown result type (might be due to invalid IL or missing references)
		//IL_1b753: Expected O, but got Unknown
		//IL_1b7b6: Unknown result type (might be due to invalid IL or missing references)
		//IL_1b7bc: Expected O, but got Unknown
		//IL_1b826: Unknown result type (might be due to invalid IL or missing references)
		//IL_1b82c: Expected O, but got Unknown
		//IL_1b896: Unknown result type (might be due to invalid IL or missing references)
		//IL_1b89c: Expected O, but got Unknown
		//IL_1b92a: Unknown result type (might be due to invalid IL or missing references)
		//IL_1b930: Expected O, but got Unknown
		//IL_1b993: Unknown result type (might be due to invalid IL or missing references)
		//IL_1b999: Expected O, but got Unknown
		//IL_1b9fc: Unknown result type (might be due to invalid IL or missing references)
		//IL_1ba02: Expected O, but got Unknown
		//IL_1ba77: Unknown result type (might be due to invalid IL or missing references)
		//IL_1ba7d: Expected O, but got Unknown
		//IL_1baeb: Unknown result type (might be due to invalid IL or missing references)
		//IL_1baf1: Expected O, but got Unknown
		//IL_1bb86: Unknown result type (might be due to invalid IL or missing references)
		//IL_1bb8c: Expected O, but got Unknown
		//IL_1bc21: Unknown result type (might be due to invalid IL or missing references)
		//IL_1bc27: Expected O, but got Unknown
		//IL_1bcbc: Unknown result type (might be due to invalid IL or missing references)
		//IL_1bcc2: Expected O, but got Unknown
		//IL_1bd25: Unknown result type (might be due to invalid IL or missing references)
		//IL_1bd2b: Expected O, but got Unknown
		//IL_1bda0: Unknown result type (might be due to invalid IL or missing references)
		//IL_1bda6: Expected O, but got Unknown
		//IL_1be1b: Unknown result type (might be due to invalid IL or missing references)
		//IL_1be21: Expected O, but got Unknown
		//IL_1be96: Unknown result type (might be due to invalid IL or missing references)
		//IL_1be9c: Expected O, but got Unknown
		//IL_1bef4: Unknown result type (might be due to invalid IL or missing references)
		//IL_1befa: Expected O, but got Unknown
		//IL_1bf47: Unknown result type (might be due to invalid IL or missing references)
		//IL_1bf4d: Expected O, but got Unknown
		//IL_1bf9a: Unknown result type (might be due to invalid IL or missing references)
		//IL_1bfa0: Expected O, but got Unknown
		//IL_1bfed: Unknown result type (might be due to invalid IL or missing references)
		//IL_1bff3: Expected O, but got Unknown
		//IL_1c040: Unknown result type (might be due to invalid IL or missing references)
		//IL_1c046: Expected O, but got Unknown
		//IL_1c093: Unknown result type (might be due to invalid IL or missing references)
		//IL_1c099: Expected O, but got Unknown
		//IL_1c0e6: Unknown result type (might be due to invalid IL or missing references)
		//IL_1c0ec: Expected O, but got Unknown
		//IL_1c139: Unknown result type (might be due to invalid IL or missing references)
		//IL_1c13f: Expected O, but got Unknown
		//IL_1c18c: Unknown result type (might be due to invalid IL or missing references)
		//IL_1c192: Expected O, but got Unknown
		//IL_1c1f5: Unknown result type (might be due to invalid IL or missing references)
		//IL_1c1fb: Expected O, but got Unknown
		//IL_1c25e: Unknown result type (might be due to invalid IL or missing references)
		//IL_1c264: Expected O, but got Unknown
		//IL_1c2c7: Unknown result type (might be due to invalid IL or missing references)
		//IL_1c2cd: Expected O, but got Unknown
		//IL_1c330: Unknown result type (might be due to invalid IL or missing references)
		//IL_1c336: Expected O, but got Unknown
		//IL_1c399: Unknown result type (might be due to invalid IL or missing references)
		//IL_1c39f: Expected O, but got Unknown
		//IL_1c402: Unknown result type (might be due to invalid IL or missing references)
		//IL_1c408: Expected O, but got Unknown
		//IL_1c455: Unknown result type (might be due to invalid IL or missing references)
		//IL_1c45b: Expected O, but got Unknown
		//IL_1c4be: Unknown result type (might be due to invalid IL or missing references)
		//IL_1c4c4: Expected O, but got Unknown
		//IL_1c527: Unknown result type (might be due to invalid IL or missing references)
		//IL_1c52d: Expected O, but got Unknown
		//IL_1c590: Unknown result type (might be due to invalid IL or missing references)
		//IL_1c596: Expected O, but got Unknown
		//IL_1c5e3: Unknown result type (might be due to invalid IL or missing references)
		//IL_1c5e9: Expected O, but got Unknown
		//IL_1c636: Unknown result type (might be due to invalid IL or missing references)
		//IL_1c63c: Expected O, but got Unknown
		//IL_1c689: Unknown result type (might be due to invalid IL or missing references)
		//IL_1c68f: Expected O, but got Unknown
		//IL_1c6f2: Unknown result type (might be due to invalid IL or missing references)
		//IL_1c6f8: Expected O, but got Unknown
		//IL_1c75b: Unknown result type (might be due to invalid IL or missing references)
		//IL_1c761: Expected O, but got Unknown
		//IL_1c7c4: Unknown result type (might be due to invalid IL or missing references)
		//IL_1c7ca: Expected O, but got Unknown
		//IL_1c82d: Unknown result type (might be due to invalid IL or missing references)
		//IL_1c833: Expected O, but got Unknown
		//IL_1c880: Unknown result type (might be due to invalid IL or missing references)
		//IL_1c886: Expected O, but got Unknown
		//IL_1c8e9: Unknown result type (might be due to invalid IL or missing references)
		//IL_1c8ef: Expected O, but got Unknown
		//IL_1c952: Unknown result type (might be due to invalid IL or missing references)
		//IL_1c958: Expected O, but got Unknown
		//IL_1c9bb: Unknown result type (might be due to invalid IL or missing references)
		//IL_1c9c1: Expected O, but got Unknown
		//IL_1ca24: Unknown result type (might be due to invalid IL or missing references)
		//IL_1ca2a: Expected O, but got Unknown
		//IL_1cabb: Unknown result type (might be due to invalid IL or missing references)
		//IL_1cac1: Expected O, but got Unknown
		//IL_1cb0e: Unknown result type (might be due to invalid IL or missing references)
		//IL_1cb14: Expected O, but got Unknown
		//IL_1cb61: Unknown result type (might be due to invalid IL or missing references)
		//IL_1cb67: Expected O, but got Unknown
		//IL_1cbb4: Unknown result type (might be due to invalid IL or missing references)
		//IL_1cbba: Expected O, but got Unknown
		//IL_1cc07: Unknown result type (might be due to invalid IL or missing references)
		//IL_1cc0d: Expected O, but got Unknown
		//IL_1cc9b: Unknown result type (might be due to invalid IL or missing references)
		//IL_1cca1: Expected O, but got Unknown
		//IL_1cd2f: Unknown result type (might be due to invalid IL or missing references)
		//IL_1cd35: Expected O, but got Unknown
		//IL_1cd98: Unknown result type (might be due to invalid IL or missing references)
		//IL_1cd9e: Expected O, but got Unknown
		//IL_1ce0c: Unknown result type (might be due to invalid IL or missing references)
		//IL_1ce12: Expected O, but got Unknown
		//IL_1ce80: Unknown result type (might be due to invalid IL or missing references)
		//IL_1ce86: Expected O, but got Unknown
		//IL_1cee9: Unknown result type (might be due to invalid IL or missing references)
		//IL_1ceef: Expected O, but got Unknown
		//IL_1cf52: Unknown result type (might be due to invalid IL or missing references)
		//IL_1cf58: Expected O, but got Unknown
		//IL_1cfbb: Unknown result type (might be due to invalid IL or missing references)
		//IL_1cfc1: Expected O, but got Unknown
		//IL_1d00e: Unknown result type (might be due to invalid IL or missing references)
		//IL_1d014: Expected O, but got Unknown
		//IL_1d077: Unknown result type (might be due to invalid IL or missing references)
		//IL_1d07d: Expected O, but got Unknown
		//IL_1d0d5: Unknown result type (might be due to invalid IL or missing references)
		//IL_1d0db: Expected O, but got Unknown
		//IL_1d149: Unknown result type (might be due to invalid IL or missing references)
		//IL_1d14f: Expected O, but got Unknown
		//IL_1d1bd: Unknown result type (might be due to invalid IL or missing references)
		//IL_1d1c3: Expected O, but got Unknown
		//IL_1d226: Unknown result type (might be due to invalid IL or missing references)
		//IL_1d22c: Expected O, but got Unknown
		//IL_1d279: Unknown result type (might be due to invalid IL or missing references)
		//IL_1d27f: Expected O, but got Unknown
		//IL_1d2cc: Unknown result type (might be due to invalid IL or missing references)
		//IL_1d2d2: Expected O, but got Unknown
		//IL_1d31f: Unknown result type (might be due to invalid IL or missing references)
		//IL_1d325: Expected O, but got Unknown
		//IL_1d372: Unknown result type (might be due to invalid IL or missing references)
		//IL_1d378: Expected O, but got Unknown
		//IL_1d3c5: Unknown result type (might be due to invalid IL or missing references)
		//IL_1d3cb: Expected O, but got Unknown
		//IL_1d418: Unknown result type (might be due to invalid IL or missing references)
		//IL_1d41e: Expected O, but got Unknown
		//IL_1d46b: Unknown result type (might be due to invalid IL or missing references)
		//IL_1d471: Expected O, but got Unknown
		//IL_1d4be: Unknown result type (might be due to invalid IL or missing references)
		//IL_1d4c4: Expected O, but got Unknown
		//IL_1d511: Unknown result type (might be due to invalid IL or missing references)
		//IL_1d517: Expected O, but got Unknown
		//IL_1d564: Unknown result type (might be due to invalid IL or missing references)
		//IL_1d56a: Expected O, but got Unknown
		//IL_1d5b7: Unknown result type (might be due to invalid IL or missing references)
		//IL_1d5bd: Expected O, but got Unknown
		//IL_1d62b: Unknown result type (might be due to invalid IL or missing references)
		//IL_1d631: Expected O, but got Unknown
		//IL_1d69f: Unknown result type (might be due to invalid IL or missing references)
		//IL_1d6a5: Expected O, but got Unknown
		//IL_1d708: Unknown result type (might be due to invalid IL or missing references)
		//IL_1d70e: Expected O, but got Unknown
		//IL_1d771: Unknown result type (might be due to invalid IL or missing references)
		//IL_1d777: Expected O, but got Unknown
		//IL_1d7da: Unknown result type (might be due to invalid IL or missing references)
		//IL_1d7e0: Expected O, but got Unknown
		//IL_1d843: Unknown result type (might be due to invalid IL or missing references)
		//IL_1d849: Expected O, but got Unknown
		//IL_1d8ac: Unknown result type (might be due to invalid IL or missing references)
		//IL_1d8b2: Expected O, but got Unknown
		//IL_1d915: Unknown result type (might be due to invalid IL or missing references)
		//IL_1d91b: Expected O, but got Unknown
		//IL_1d97e: Unknown result type (might be due to invalid IL or missing references)
		//IL_1d984: Expected O, but got Unknown
		//IL_1d9e7: Unknown result type (might be due to invalid IL or missing references)
		//IL_1d9ed: Expected O, but got Unknown
		//IL_1da45: Unknown result type (might be due to invalid IL or missing references)
		//IL_1da4b: Expected O, but got Unknown
		//IL_1dace: Unknown result type (might be due to invalid IL or missing references)
		//IL_1dad4: Expected O, but got Unknown
		//IL_1db57: Unknown result type (might be due to invalid IL or missing references)
		//IL_1db5d: Expected O, but got Unknown
		//IL_1dbe0: Unknown result type (might be due to invalid IL or missing references)
		//IL_1dbe6: Expected O, but got Unknown
		//IL_1dc69: Unknown result type (might be due to invalid IL or missing references)
		//IL_1dc6f: Expected O, but got Unknown
		//IL_1dcf2: Unknown result type (might be due to invalid IL or missing references)
		//IL_1dcf8: Expected O, but got Unknown
		//IL_1dd7b: Unknown result type (might be due to invalid IL or missing references)
		//IL_1dd81: Expected O, but got Unknown
		//IL_1de04: Unknown result type (might be due to invalid IL or missing references)
		//IL_1de0a: Expected O, but got Unknown
		//IL_1de8d: Unknown result type (might be due to invalid IL or missing references)
		//IL_1de93: Expected O, but got Unknown
		//IL_1df16: Unknown result type (might be due to invalid IL or missing references)
		//IL_1df1c: Expected O, but got Unknown
		//IL_1df9f: Unknown result type (might be due to invalid IL or missing references)
		//IL_1dfa5: Expected O, but got Unknown
		//IL_1e028: Unknown result type (might be due to invalid IL or missing references)
		//IL_1e02e: Expected O, but got Unknown
		//IL_1e0b1: Unknown result type (might be due to invalid IL or missing references)
		//IL_1e0b7: Expected O, but got Unknown
		//IL_1e13a: Unknown result type (might be due to invalid IL or missing references)
		//IL_1e140: Expected O, but got Unknown
		//IL_1e1c3: Unknown result type (might be due to invalid IL or missing references)
		//IL_1e1c9: Expected O, but got Unknown
		//IL_1e24c: Unknown result type (might be due to invalid IL or missing references)
		//IL_1e252: Expected O, but got Unknown
		//IL_1e2d5: Unknown result type (might be due to invalid IL or missing references)
		//IL_1e2db: Expected O, but got Unknown
		//IL_1e35e: Unknown result type (might be due to invalid IL or missing references)
		//IL_1e364: Expected O, but got Unknown
		//IL_1e3e7: Unknown result type (might be due to invalid IL or missing references)
		//IL_1e3ed: Expected O, but got Unknown
		//IL_1e470: Unknown result type (might be due to invalid IL or missing references)
		//IL_1e476: Expected O, but got Unknown
		//IL_1e4c3: Unknown result type (might be due to invalid IL or missing references)
		//IL_1e4c9: Expected O, but got Unknown
		//IL_1e54c: Unknown result type (might be due to invalid IL or missing references)
		//IL_1e552: Expected O, but got Unknown
		//IL_1e5d5: Unknown result type (might be due to invalid IL or missing references)
		//IL_1e5db: Expected O, but got Unknown
		//IL_1e65e: Unknown result type (might be due to invalid IL or missing references)
		//IL_1e664: Expected O, but got Unknown
		//IL_1e6e7: Unknown result type (might be due to invalid IL or missing references)
		//IL_1e6ed: Expected O, but got Unknown
		//IL_1e770: Unknown result type (might be due to invalid IL or missing references)
		//IL_1e776: Expected O, but got Unknown
		//IL_1e7f9: Unknown result type (might be due to invalid IL or missing references)
		//IL_1e7ff: Expected O, but got Unknown
		//IL_1e84c: Unknown result type (might be due to invalid IL or missing references)
		//IL_1e852: Expected O, but got Unknown
		//IL_1e89f: Unknown result type (might be due to invalid IL or missing references)
		//IL_1e8a5: Expected O, but got Unknown
		//IL_1e928: Unknown result type (might be due to invalid IL or missing references)
		//IL_1e92e: Expected O, but got Unknown
		//IL_1e9b1: Unknown result type (might be due to invalid IL or missing references)
		//IL_1e9b7: Expected O, but got Unknown
		//IL_1ea1a: Unknown result type (might be due to invalid IL or missing references)
		//IL_1ea20: Expected O, but got Unknown
		//IL_1ea83: Unknown result type (might be due to invalid IL or missing references)
		//IL_1ea89: Expected O, but got Unknown
		//IL_1eb0c: Unknown result type (might be due to invalid IL or missing references)
		//IL_1eb12: Expected O, but got Unknown
		//IL_1eb5f: Unknown result type (might be due to invalid IL or missing references)
		//IL_1eb65: Expected O, but got Unknown
		//IL_1ebc8: Unknown result type (might be due to invalid IL or missing references)
		//IL_1ebce: Expected O, but got Unknown
		//IL_1ec31: Unknown result type (might be due to invalid IL or missing references)
		//IL_1ec37: Expected O, but got Unknown
		//IL_1ec9a: Unknown result type (might be due to invalid IL or missing references)
		//IL_1eca0: Expected O, but got Unknown
		//IL_1eced: Unknown result type (might be due to invalid IL or missing references)
		//IL_1ecf3: Expected O, but got Unknown
		//IL_1ed52: Unknown result type (might be due to invalid IL or missing references)
		//IL_1ed58: Expected O, but got Unknown
		//IL_1edb7: Unknown result type (might be due to invalid IL or missing references)
		//IL_1edbd: Expected O, but got Unknown
		//IL_1ee1c: Unknown result type (might be due to invalid IL or missing references)
		//IL_1ee22: Expected O, but got Unknown
		//IL_1ee85: Unknown result type (might be due to invalid IL or missing references)
		//IL_1ee8b: Expected O, but got Unknown
		//IL_1eeee: Unknown result type (might be due to invalid IL or missing references)
		//IL_1eef4: Expected O, but got Unknown
		//IL_1ef41: Unknown result type (might be due to invalid IL or missing references)
		//IL_1ef47: Expected O, but got Unknown
		//IL_1efaa: Unknown result type (might be due to invalid IL or missing references)
		//IL_1efb0: Expected O, but got Unknown
		//IL_1f013: Unknown result type (might be due to invalid IL or missing references)
		//IL_1f019: Expected O, but got Unknown
		//IL_1f066: Unknown result type (might be due to invalid IL or missing references)
		//IL_1f06c: Expected O, but got Unknown
		//IL_1f0b9: Unknown result type (might be due to invalid IL or missing references)
		//IL_1f0bf: Expected O, but got Unknown
		//IL_1f10c: Unknown result type (might be due to invalid IL or missing references)
		//IL_1f112: Expected O, but got Unknown
		//IL_1f15f: Unknown result type (might be due to invalid IL or missing references)
		//IL_1f165: Expected O, but got Unknown
		//IL_1f1d3: Unknown result type (might be due to invalid IL or missing references)
		//IL_1f1d9: Expected O, but got Unknown
		//IL_1f26e: Unknown result type (might be due to invalid IL or missing references)
		//IL_1f274: Expected O, but got Unknown
		//IL_1f2e2: Unknown result type (might be due to invalid IL or missing references)
		//IL_1f2e8: Expected O, but got Unknown
		//IL_1f356: Unknown result type (might be due to invalid IL or missing references)
		//IL_1f35c: Expected O, but got Unknown
		//IL_1f3bf: Unknown result type (might be due to invalid IL or missing references)
		//IL_1f3c5: Expected O, but got Unknown
		//IL_1f428: Unknown result type (might be due to invalid IL or missing references)
		//IL_1f42e: Expected O, but got Unknown
		//IL_1f49c: Unknown result type (might be due to invalid IL or missing references)
		//IL_1f4a2: Expected O, but got Unknown
		//IL_1f4ef: Unknown result type (might be due to invalid IL or missing references)
		//IL_1f4f5: Expected O, but got Unknown
		//IL_1f542: Unknown result type (might be due to invalid IL or missing references)
		//IL_1f548: Expected O, but got Unknown
		//IL_1f595: Unknown result type (might be due to invalid IL or missing references)
		//IL_1f59b: Expected O, but got Unknown
		//IL_1f5fe: Unknown result type (might be due to invalid IL or missing references)
		//IL_1f604: Expected O, but got Unknown
		//IL_1f667: Unknown result type (might be due to invalid IL or missing references)
		//IL_1f66d: Expected O, but got Unknown
		//IL_1f6d0: Unknown result type (might be due to invalid IL or missing references)
		//IL_1f6d6: Expected O, but got Unknown
		//IL_1f739: Unknown result type (might be due to invalid IL or missing references)
		//IL_1f73f: Expected O, but got Unknown
		//IL_1f7ad: Unknown result type (might be due to invalid IL or missing references)
		//IL_1f7b3: Expected O, but got Unknown
		//IL_1f821: Unknown result type (might be due to invalid IL or missing references)
		//IL_1f827: Expected O, but got Unknown
		//IL_1f88a: Unknown result type (might be due to invalid IL or missing references)
		//IL_1f890: Expected O, but got Unknown
		//IL_1f8f3: Unknown result type (might be due to invalid IL or missing references)
		//IL_1f8f9: Expected O, but got Unknown
		//IL_1f95c: Unknown result type (might be due to invalid IL or missing references)
		//IL_1f962: Expected O, but got Unknown
		//IL_1f9c5: Unknown result type (might be due to invalid IL or missing references)
		//IL_1f9cb: Expected O, but got Unknown
		//IL_1fa2e: Unknown result type (might be due to invalid IL or missing references)
		//IL_1fa34: Expected O, but got Unknown
		//IL_1fa97: Unknown result type (might be due to invalid IL or missing references)
		//IL_1fa9d: Expected O, but got Unknown
		//IL_1faea: Unknown result type (might be due to invalid IL or missing references)
		//IL_1faf0: Expected O, but got Unknown
		//IL_1fb5e: Unknown result type (might be due to invalid IL or missing references)
		//IL_1fb64: Expected O, but got Unknown
		//IL_1fbd2: Unknown result type (might be due to invalid IL or missing references)
		//IL_1fbd8: Expected O, but got Unknown
		//IL_1fc46: Unknown result type (might be due to invalid IL or missing references)
		//IL_1fc4c: Expected O, but got Unknown
		//IL_1fc99: Unknown result type (might be due to invalid IL or missing references)
		//IL_1fc9f: Expected O, but got Unknown
		//IL_1fcf7: Unknown result type (might be due to invalid IL or missing references)
		//IL_1fcfd: Expected O, but got Unknown
		//IL_1fd55: Unknown result type (might be due to invalid IL or missing references)
		//IL_1fd5b: Expected O, but got Unknown
		//IL_1fdb3: Unknown result type (might be due to invalid IL or missing references)
		//IL_1fdb9: Expected O, but got Unknown
		//IL_1fe35: Unknown result type (might be due to invalid IL or missing references)
		//IL_1fe3b: Expected O, but got Unknown
		//IL_1fea9: Unknown result type (might be due to invalid IL or missing references)
		//IL_1feaf: Expected O, but got Unknown
		//IL_1ff1d: Unknown result type (might be due to invalid IL or missing references)
		//IL_1ff23: Expected O, but got Unknown
		//IL_1ff91: Unknown result type (might be due to invalid IL or missing references)
		//IL_1ff97: Expected O, but got Unknown
		//IL_1ffef: Unknown result type (might be due to invalid IL or missing references)
		//IL_1fff5: Expected O, but got Unknown
		//IL_2004d: Unknown result type (might be due to invalid IL or missing references)
		//IL_20053: Expected O, but got Unknown
		//IL_200ab: Unknown result type (might be due to invalid IL or missing references)
		//IL_200b1: Expected O, but got Unknown
		//IL_20109: Unknown result type (might be due to invalid IL or missing references)
		//IL_2010f: Expected O, but got Unknown
		//IL_20167: Unknown result type (might be due to invalid IL or missing references)
		//IL_2016d: Expected O, but got Unknown
		//IL_201db: Unknown result type (might be due to invalid IL or missing references)
		//IL_201e1: Expected O, but got Unknown
		//IL_2024f: Unknown result type (might be due to invalid IL or missing references)
		//IL_20255: Expected O, but got Unknown
		//IL_202c3: Unknown result type (might be due to invalid IL or missing references)
		//IL_202c9: Expected O, but got Unknown
		//IL_20337: Unknown result type (might be due to invalid IL or missing references)
		//IL_2033d: Expected O, but got Unknown
		//IL_203ab: Unknown result type (might be due to invalid IL or missing references)
		//IL_203b1: Expected O, but got Unknown
		//IL_20426: Unknown result type (might be due to invalid IL or missing references)
		//IL_2042c: Expected O, but got Unknown
		//IL_204a1: Unknown result type (might be due to invalid IL or missing references)
		//IL_204a7: Expected O, but got Unknown
		//IL_2051c: Unknown result type (might be due to invalid IL or missing references)
		//IL_20522: Expected O, but got Unknown
		//IL_20597: Unknown result type (might be due to invalid IL or missing references)
		//IL_2059d: Expected O, but got Unknown
		//IL_20612: Unknown result type (might be due to invalid IL or missing references)
		//IL_20618: Expected O, but got Unknown
		//IL_2068d: Unknown result type (might be due to invalid IL or missing references)
		//IL_20693: Expected O, but got Unknown
		//IL_20708: Unknown result type (might be due to invalid IL or missing references)
		//IL_2070e: Expected O, but got Unknown
		//IL_20783: Unknown result type (might be due to invalid IL or missing references)
		//IL_20789: Expected O, but got Unknown
		//IL_207fe: Unknown result type (might be due to invalid IL or missing references)
		//IL_20804: Expected O, but got Unknown
		//IL_2085c: Unknown result type (might be due to invalid IL or missing references)
		//IL_20862: Expected O, but got Unknown
		//IL_208c5: Unknown result type (might be due to invalid IL or missing references)
		//IL_208cb: Expected O, but got Unknown
		//IL_20940: Unknown result type (might be due to invalid IL or missing references)
		//IL_20946: Expected O, but got Unknown
		//IL_209bb: Unknown result type (might be due to invalid IL or missing references)
		//IL_209c1: Expected O, but got Unknown
		//IL_20a24: Unknown result type (might be due to invalid IL or missing references)
		//IL_20a2a: Expected O, but got Unknown
		//IL_20a77: Unknown result type (might be due to invalid IL or missing references)
		//IL_20a7d: Expected O, but got Unknown
		//IL_20aeb: Unknown result type (might be due to invalid IL or missing references)
		//IL_20af1: Expected O, but got Unknown
		//IL_20b5f: Unknown result type (might be due to invalid IL or missing references)
		//IL_20b65: Expected O, but got Unknown
		//IL_20bd3: Unknown result type (might be due to invalid IL or missing references)
		//IL_20bd9: Expected O, but got Unknown
		//IL_20c47: Unknown result type (might be due to invalid IL or missing references)
		//IL_20c4d: Expected O, but got Unknown
		//IL_20cbb: Unknown result type (might be due to invalid IL or missing references)
		//IL_20cc1: Expected O, but got Unknown
		//IL_20d2f: Unknown result type (might be due to invalid IL or missing references)
		//IL_20d35: Expected O, but got Unknown
		//IL_20da3: Unknown result type (might be due to invalid IL or missing references)
		//IL_20da9: Expected O, but got Unknown
		//IL_20e17: Unknown result type (might be due to invalid IL or missing references)
		//IL_20e1d: Expected O, but got Unknown
		//IL_20e80: Unknown result type (might be due to invalid IL or missing references)
		//IL_20e86: Expected O, but got Unknown
		//IL_20ef4: Unknown result type (might be due to invalid IL or missing references)
		//IL_20efa: Expected O, but got Unknown
		//IL_20f68: Unknown result type (might be due to invalid IL or missing references)
		//IL_20f6e: Expected O, but got Unknown
		//IL_20fdc: Unknown result type (might be due to invalid IL or missing references)
		//IL_20fe2: Expected O, but got Unknown
		//IL_21045: Unknown result type (might be due to invalid IL or missing references)
		//IL_2104b: Expected O, but got Unknown
		//IL_210ae: Unknown result type (might be due to invalid IL or missing references)
		//IL_210b4: Expected O, but got Unknown
		//IL_21129: Unknown result type (might be due to invalid IL or missing references)
		//IL_2112f: Expected O, but got Unknown
		//IL_21192: Unknown result type (might be due to invalid IL or missing references)
		//IL_21198: Expected O, but got Unknown
		//IL_2120d: Unknown result type (might be due to invalid IL or missing references)
		//IL_21213: Expected O, but got Unknown
		//IL_21281: Unknown result type (might be due to invalid IL or missing references)
		//IL_21287: Expected O, but got Unknown
		//IL_212f5: Unknown result type (might be due to invalid IL or missing references)
		//IL_212fb: Expected O, but got Unknown
		//IL_21369: Unknown result type (might be due to invalid IL or missing references)
		//IL_2136f: Expected O, but got Unknown
		//IL_213d2: Unknown result type (might be due to invalid IL or missing references)
		//IL_213d8: Expected O, but got Unknown
		//IL_21430: Unknown result type (might be due to invalid IL or missing references)
		//IL_21436: Expected O, but got Unknown
		//IL_21499: Unknown result type (might be due to invalid IL or missing references)
		//IL_2149f: Expected O, but got Unknown
		//IL_2150d: Unknown result type (might be due to invalid IL or missing references)
		//IL_21513: Expected O, but got Unknown
		//IL_21576: Unknown result type (might be due to invalid IL or missing references)
		//IL_2157c: Expected O, but got Unknown
		//IL_215df: Unknown result type (might be due to invalid IL or missing references)
		//IL_215e5: Expected O, but got Unknown
		//IL_21648: Unknown result type (might be due to invalid IL or missing references)
		//IL_2164e: Expected O, but got Unknown
		//IL_216b1: Unknown result type (might be due to invalid IL or missing references)
		//IL_216b7: Expected O, but got Unknown
		//IL_2171a: Unknown result type (might be due to invalid IL or missing references)
		//IL_21720: Expected O, but got Unknown
		//IL_21783: Unknown result type (might be due to invalid IL or missing references)
		//IL_21789: Expected O, but got Unknown
		//IL_217d6: Unknown result type (might be due to invalid IL or missing references)
		//IL_217dc: Expected O, but got Unknown
		//IL_2184a: Unknown result type (might be due to invalid IL or missing references)
		//IL_21850: Expected O, but got Unknown
		//IL_218be: Unknown result type (might be due to invalid IL or missing references)
		//IL_218c4: Expected O, but got Unknown
		//IL_21932: Unknown result type (might be due to invalid IL or missing references)
		//IL_21938: Expected O, but got Unknown
		//IL_219ad: Unknown result type (might be due to invalid IL or missing references)
		//IL_219b3: Expected O, but got Unknown
		//IL_21a28: Unknown result type (might be due to invalid IL or missing references)
		//IL_21a2e: Expected O, but got Unknown
		//IL_21a91: Unknown result type (might be due to invalid IL or missing references)
		//IL_21a97: Expected O, but got Unknown
		//IL_21afa: Unknown result type (might be due to invalid IL or missing references)
		//IL_21b00: Expected O, but got Unknown
		//IL_21b4d: Unknown result type (might be due to invalid IL or missing references)
		//IL_21b53: Expected O, but got Unknown
		//IL_21bab: Unknown result type (might be due to invalid IL or missing references)
		//IL_21bb1: Expected O, but got Unknown
		//IL_21c14: Unknown result type (might be due to invalid IL or missing references)
		//IL_21c1a: Expected O, but got Unknown
		//IL_21c88: Unknown result type (might be due to invalid IL or missing references)
		//IL_21c8e: Expected O, but got Unknown
		//IL_21d03: Unknown result type (might be due to invalid IL or missing references)
		//IL_21d09: Expected O, but got Unknown
		//IL_21d6c: Unknown result type (might be due to invalid IL or missing references)
		//IL_21d72: Expected O, but got Unknown
		//IL_21dd5: Unknown result type (might be due to invalid IL or missing references)
		//IL_21ddb: Expected O, but got Unknown
		//IL_21e49: Unknown result type (might be due to invalid IL or missing references)
		//IL_21e4f: Expected O, but got Unknown
		//IL_21ebd: Unknown result type (might be due to invalid IL or missing references)
		//IL_21ec3: Expected O, but got Unknown
		//IL_21f10: Unknown result type (might be due to invalid IL or missing references)
		//IL_21f16: Expected O, but got Unknown
		//IL_21f79: Unknown result type (might be due to invalid IL or missing references)
		//IL_21f7f: Expected O, but got Unknown
		//IL_21fe2: Unknown result type (might be due to invalid IL or missing references)
		//IL_21fe8: Expected O, but got Unknown
		//IL_2204b: Unknown result type (might be due to invalid IL or missing references)
		//IL_22051: Expected O, but got Unknown
		//IL_220b4: Unknown result type (might be due to invalid IL or missing references)
		//IL_220ba: Expected O, but got Unknown
		//IL_2211d: Unknown result type (might be due to invalid IL or missing references)
		//IL_22123: Expected O, but got Unknown
		//IL_22186: Unknown result type (might be due to invalid IL or missing references)
		//IL_2218c: Expected O, but got Unknown
		//IL_2221a: Unknown result type (might be due to invalid IL or missing references)
		//IL_22220: Expected O, but got Unknown
		//IL_22283: Unknown result type (might be due to invalid IL or missing references)
		//IL_22289: Expected O, but got Unknown
		//IL_222ec: Unknown result type (might be due to invalid IL or missing references)
		//IL_222f2: Expected O, but got Unknown
		//IL_22355: Unknown result type (might be due to invalid IL or missing references)
		//IL_2235b: Expected O, but got Unknown
		//IL_223de: Unknown result type (might be due to invalid IL or missing references)
		//IL_223e4: Expected O, but got Unknown
		//IL_22467: Unknown result type (might be due to invalid IL or missing references)
		//IL_2246d: Expected O, but got Unknown
		//IL_224cc: Unknown result type (might be due to invalid IL or missing references)
		//IL_224d2: Expected O, but got Unknown
		//IL_22535: Unknown result type (might be due to invalid IL or missing references)
		//IL_2253b: Expected O, but got Unknown
		//IL_2259e: Unknown result type (might be due to invalid IL or missing references)
		//IL_225a4: Expected O, but got Unknown
		//IL_22607: Unknown result type (might be due to invalid IL or missing references)
		//IL_2260d: Expected O, but got Unknown
		//IL_22682: Unknown result type (might be due to invalid IL or missing references)
		//IL_22688: Expected O, but got Unknown
		//IL_226d5: Unknown result type (might be due to invalid IL or missing references)
		//IL_226db: Expected O, but got Unknown
		//IL_2273e: Unknown result type (might be due to invalid IL or missing references)
		//IL_22744: Expected O, but got Unknown
		//IL_227b9: Unknown result type (might be due to invalid IL or missing references)
		//IL_227bf: Expected O, but got Unknown
		//IL_2282d: Unknown result type (might be due to invalid IL or missing references)
		//IL_22833: Expected O, but got Unknown
		//IL_228a1: Unknown result type (might be due to invalid IL or missing references)
		//IL_228a7: Expected O, but got Unknown
		//IL_2291c: Unknown result type (might be due to invalid IL or missing references)
		//IL_22922: Expected O, but got Unknown
		//IL_22985: Unknown result type (might be due to invalid IL or missing references)
		//IL_2298b: Expected O, but got Unknown
		//IL_229f9: Unknown result type (might be due to invalid IL or missing references)
		//IL_229ff: Expected O, but got Unknown
		//IL_22a6d: Unknown result type (might be due to invalid IL or missing references)
		//IL_22a73: Expected O, but got Unknown
		//IL_22ae1: Unknown result type (might be due to invalid IL or missing references)
		//IL_22ae7: Expected O, but got Unknown
		//IL_22b5c: Unknown result type (might be due to invalid IL or missing references)
		//IL_22b62: Expected O, but got Unknown
		//IL_22baf: Unknown result type (might be due to invalid IL or missing references)
		//IL_22bb5: Expected O, but got Unknown
		//IL_22c43: Unknown result type (might be due to invalid IL or missing references)
		//IL_22c49: Expected O, but got Unknown
		//IL_22ca1: Unknown result type (might be due to invalid IL or missing references)
		//IL_22ca7: Expected O, but got Unknown
		//IL_22d1c: Unknown result type (might be due to invalid IL or missing references)
		//IL_22d22: Expected O, but got Unknown
		//IL_22d97: Unknown result type (might be due to invalid IL or missing references)
		//IL_22d9d: Expected O, but got Unknown
		//IL_22e12: Unknown result type (might be due to invalid IL or missing references)
		//IL_22e18: Expected O, but got Unknown
		//IL_22e8d: Unknown result type (might be due to invalid IL or missing references)
		//IL_22e93: Expected O, but got Unknown
		//IL_22f08: Unknown result type (might be due to invalid IL or missing references)
		//IL_22f0e: Expected O, but got Unknown
		//IL_22f8a: Unknown result type (might be due to invalid IL or missing references)
		//IL_22f90: Expected O, but got Unknown
		//IL_2300c: Unknown result type (might be due to invalid IL or missing references)
		//IL_23012: Expected O, but got Unknown
		//IL_2308e: Unknown result type (might be due to invalid IL or missing references)
		//IL_23094: Expected O, but got Unknown
		//IL_230ec: Unknown result type (might be due to invalid IL or missing references)
		//IL_230f2: Expected O, but got Unknown
		//IL_2314a: Unknown result type (might be due to invalid IL or missing references)
		//IL_23150: Expected O, but got Unknown
		//IL_2319d: Unknown result type (might be due to invalid IL or missing references)
		//IL_231a3: Expected O, but got Unknown
		//IL_23218: Unknown result type (might be due to invalid IL or missing references)
		//IL_2321e: Expected O, but got Unknown
		//IL_23288: Unknown result type (might be due to invalid IL or missing references)
		//IL_2328e: Expected O, but got Unknown
		//IL_232f8: Unknown result type (might be due to invalid IL or missing references)
		//IL_232fe: Expected O, but got Unknown
		//IL_23361: Unknown result type (might be due to invalid IL or missing references)
		//IL_23367: Expected O, but got Unknown
		//IL_233ca: Unknown result type (might be due to invalid IL or missing references)
		//IL_233d0: Expected O, but got Unknown
		//IL_23433: Unknown result type (might be due to invalid IL or missing references)
		//IL_23439: Expected O, but got Unknown
		//IL_234bc: Unknown result type (might be due to invalid IL or missing references)
		//IL_234c2: Expected O, but got Unknown
		//IL_23525: Unknown result type (might be due to invalid IL or missing references)
		//IL_2352b: Expected O, but got Unknown
		//IL_2358e: Unknown result type (might be due to invalid IL or missing references)
		//IL_23594: Expected O, but got Unknown
		//IL_235f7: Unknown result type (might be due to invalid IL or missing references)
		//IL_235fd: Expected O, but got Unknown
		//IL_23660: Unknown result type (might be due to invalid IL or missing references)
		//IL_23666: Expected O, but got Unknown
		//IL_236c9: Unknown result type (might be due to invalid IL or missing references)
		//IL_236cf: Expected O, but got Unknown
		//IL_2373d: Unknown result type (might be due to invalid IL or missing references)
		//IL_23743: Expected O, but got Unknown
		//IL_237b1: Unknown result type (might be due to invalid IL or missing references)
		//IL_237b7: Expected O, but got Unknown
		//IL_23825: Unknown result type (might be due to invalid IL or missing references)
		//IL_2382b: Expected O, but got Unknown
		//IL_2388e: Unknown result type (might be due to invalid IL or missing references)
		//IL_23894: Expected O, but got Unknown
		//IL_23909: Unknown result type (might be due to invalid IL or missing references)
		//IL_2390f: Expected O, but got Unknown
		//IL_23972: Unknown result type (might be due to invalid IL or missing references)
		//IL_23978: Expected O, but got Unknown
		//IL_239db: Unknown result type (might be due to invalid IL or missing references)
		//IL_239e1: Expected O, but got Unknown
		//IL_23a44: Unknown result type (might be due to invalid IL or missing references)
		//IL_23a4a: Expected O, but got Unknown
		//IL_23aad: Unknown result type (might be due to invalid IL or missing references)
		//IL_23ab3: Expected O, but got Unknown
		//IL_23b00: Unknown result type (might be due to invalid IL or missing references)
		//IL_23b06: Expected O, but got Unknown
		//IL_23b53: Unknown result type (might be due to invalid IL or missing references)
		//IL_23b59: Expected O, but got Unknown
		//IL_23bdc: Unknown result type (might be due to invalid IL or missing references)
		//IL_23be2: Expected O, but got Unknown
		//IL_23c2f: Unknown result type (might be due to invalid IL or missing references)
		//IL_23c35: Expected O, but got Unknown
		//IL_23c82: Unknown result type (might be due to invalid IL or missing references)
		//IL_23c88: Expected O, but got Unknown
		//IL_23ceb: Unknown result type (might be due to invalid IL or missing references)
		//IL_23cf1: Expected O, but got Unknown
		//IL_23d3e: Unknown result type (might be due to invalid IL or missing references)
		//IL_23d44: Expected O, but got Unknown
		//IL_23d91: Unknown result type (might be due to invalid IL or missing references)
		//IL_23d97: Expected O, but got Unknown
		//IL_23dfa: Unknown result type (might be due to invalid IL or missing references)
		//IL_23e00: Expected O, but got Unknown
		//IL_23e63: Unknown result type (might be due to invalid IL or missing references)
		//IL_23e69: Expected O, but got Unknown
		//IL_23ecc: Unknown result type (might be due to invalid IL or missing references)
		//IL_23ed2: Expected O, but got Unknown
		//IL_23f1f: Unknown result type (might be due to invalid IL or missing references)
		//IL_23f25: Expected O, but got Unknown
		//IL_23f72: Unknown result type (might be due to invalid IL or missing references)
		//IL_23f78: Expected O, but got Unknown
		//IL_23fc5: Unknown result type (might be due to invalid IL or missing references)
		//IL_23fcb: Expected O, but got Unknown
		//IL_2402e: Unknown result type (might be due to invalid IL or missing references)
		//IL_24034: Expected O, but got Unknown
		//IL_24081: Unknown result type (might be due to invalid IL or missing references)
		//IL_24087: Expected O, but got Unknown
		//IL_240d4: Unknown result type (might be due to invalid IL or missing references)
		//IL_240da: Expected O, but got Unknown
		//IL_24127: Unknown result type (might be due to invalid IL or missing references)
		//IL_2412d: Expected O, but got Unknown
		//IL_2417a: Unknown result type (might be due to invalid IL or missing references)
		//IL_24180: Expected O, but got Unknown
		//IL_241cd: Unknown result type (might be due to invalid IL or missing references)
		//IL_241d3: Expected O, but got Unknown
		//IL_24248: Unknown result type (might be due to invalid IL or missing references)
		//IL_2424e: Expected O, but got Unknown
		//IL_242ca: Unknown result type (might be due to invalid IL or missing references)
		//IL_242d0: Expected O, but got Unknown
		//IL_2434c: Unknown result type (might be due to invalid IL or missing references)
		//IL_24352: Expected O, but got Unknown
		//IL_243c0: Unknown result type (might be due to invalid IL or missing references)
		//IL_243c6: Expected O, but got Unknown
		//IL_24429: Unknown result type (might be due to invalid IL or missing references)
		//IL_2442f: Expected O, but got Unknown
		//IL_244ab: Unknown result type (might be due to invalid IL or missing references)
		//IL_244b1: Expected O, but got Unknown
		//IL_24526: Unknown result type (might be due to invalid IL or missing references)
		//IL_2452c: Expected O, but got Unknown
		//IL_24579: Unknown result type (might be due to invalid IL or missing references)
		//IL_2457f: Expected O, but got Unknown
		//IL_245cc: Unknown result type (might be due to invalid IL or missing references)
		//IL_245d2: Expected O, but got Unknown
		//IL_2461f: Unknown result type (might be due to invalid IL or missing references)
		//IL_24625: Expected O, but got Unknown
		//IL_246a1: Unknown result type (might be due to invalid IL or missing references)
		//IL_246a7: Expected O, but got Unknown
		//IL_24715: Unknown result type (might be due to invalid IL or missing references)
		//IL_2471b: Expected O, but got Unknown
		//IL_24789: Unknown result type (might be due to invalid IL or missing references)
		//IL_2478f: Expected O, but got Unknown
		//IL_247fd: Unknown result type (might be due to invalid IL or missing references)
		//IL_24803: Expected O, but got Unknown
		//IL_24871: Unknown result type (might be due to invalid IL or missing references)
		//IL_24877: Expected O, but got Unknown
		//IL_248e5: Unknown result type (might be due to invalid IL or missing references)
		//IL_248eb: Expected O, but got Unknown
		//IL_24959: Unknown result type (might be due to invalid IL or missing references)
		//IL_2495f: Expected O, but got Unknown
		//IL_249cd: Unknown result type (might be due to invalid IL or missing references)
		//IL_249d3: Expected O, but got Unknown
		//IL_24a41: Unknown result type (might be due to invalid IL or missing references)
		//IL_24a47: Expected O, but got Unknown
		//IL_24ab5: Unknown result type (might be due to invalid IL or missing references)
		//IL_24abb: Expected O, but got Unknown
		//IL_24b29: Unknown result type (might be due to invalid IL or missing references)
		//IL_24b2f: Expected O, but got Unknown
		//IL_24b9d: Unknown result type (might be due to invalid IL or missing references)
		//IL_24ba3: Expected O, but got Unknown
		//IL_24c11: Unknown result type (might be due to invalid IL or missing references)
		//IL_24c17: Expected O, but got Unknown
		//IL_24c85: Unknown result type (might be due to invalid IL or missing references)
		//IL_24c8b: Expected O, but got Unknown
		//IL_24cf9: Unknown result type (might be due to invalid IL or missing references)
		//IL_24cff: Expected O, but got Unknown
		//IL_24d4c: Unknown result type (might be due to invalid IL or missing references)
		//IL_24d52: Expected O, but got Unknown
		//IL_24dc7: Unknown result type (might be due to invalid IL or missing references)
		//IL_24dcd: Expected O, but got Unknown
		//IL_24e42: Unknown result type (might be due to invalid IL or missing references)
		//IL_24e48: Expected O, but got Unknown
		//IL_24eab: Unknown result type (might be due to invalid IL or missing references)
		//IL_24eb1: Expected O, but got Unknown
		//IL_24f14: Unknown result type (might be due to invalid IL or missing references)
		//IL_24f1a: Expected O, but got Unknown
		//IL_24f8f: Unknown result type (might be due to invalid IL or missing references)
		//IL_24f95: Expected O, but got Unknown
		//IL_25003: Unknown result type (might be due to invalid IL or missing references)
		//IL_25009: Expected O, but got Unknown
		//IL_25077: Unknown result type (might be due to invalid IL or missing references)
		//IL_2507d: Expected O, but got Unknown
		//IL_250eb: Unknown result type (might be due to invalid IL or missing references)
		//IL_250f1: Expected O, but got Unknown
		//IL_2513e: Unknown result type (might be due to invalid IL or missing references)
		//IL_25144: Expected O, but got Unknown
		//IL_251b2: Unknown result type (might be due to invalid IL or missing references)
		//IL_251b8: Expected O, but got Unknown
		//IL_2521b: Unknown result type (might be due to invalid IL or missing references)
		//IL_25221: Expected O, but got Unknown
		//IL_25284: Unknown result type (might be due to invalid IL or missing references)
		//IL_2528a: Expected O, but got Unknown
		//IL_252d7: Unknown result type (might be due to invalid IL or missing references)
		//IL_252dd: Expected O, but got Unknown
		//IL_25340: Unknown result type (might be due to invalid IL or missing references)
		//IL_25346: Expected O, but got Unknown
		//IL_253bb: Unknown result type (might be due to invalid IL or missing references)
		//IL_253c1: Expected O, but got Unknown
		//IL_25419: Unknown result type (might be due to invalid IL or missing references)
		//IL_2541f: Expected O, but got Unknown
		//IL_25482: Unknown result type (might be due to invalid IL or missing references)
		//IL_25488: Expected O, but got Unknown
		//IL_2550b: Unknown result type (might be due to invalid IL or missing references)
		//IL_25511: Expected O, but got Unknown
		//IL_25574: Unknown result type (might be due to invalid IL or missing references)
		//IL_2557a: Expected O, but got Unknown
		//IL_255dd: Unknown result type (might be due to invalid IL or missing references)
		//IL_255e3: Expected O, but got Unknown
		//IL_25646: Unknown result type (might be due to invalid IL or missing references)
		//IL_2564c: Expected O, but got Unknown
		//IL_256c1: Unknown result type (might be due to invalid IL or missing references)
		//IL_256c7: Expected O, but got Unknown
		//IL_25735: Unknown result type (might be due to invalid IL or missing references)
		//IL_2573b: Expected O, but got Unknown
		//IL_257a9: Unknown result type (might be due to invalid IL or missing references)
		//IL_257af: Expected O, but got Unknown
		//IL_2581d: Unknown result type (might be due to invalid IL or missing references)
		//IL_25823: Expected O, but got Unknown
		//IL_25886: Unknown result type (might be due to invalid IL or missing references)
		//IL_2588c: Expected O, but got Unknown
		//IL_25901: Unknown result type (might be due to invalid IL or missing references)
		//IL_25907: Expected O, but got Unknown
		//IL_2596a: Unknown result type (might be due to invalid IL or missing references)
		//IL_25970: Expected O, but got Unknown
		//IL_259d3: Unknown result type (might be due to invalid IL or missing references)
		//IL_259d9: Expected O, but got Unknown
		//IL_25a3c: Unknown result type (might be due to invalid IL or missing references)
		//IL_25a42: Expected O, but got Unknown
		//IL_25aa5: Unknown result type (might be due to invalid IL or missing references)
		//IL_25aab: Expected O, but got Unknown
		//IL_25b0e: Unknown result type (might be due to invalid IL or missing references)
		//IL_25b14: Expected O, but got Unknown
		//IL_25b77: Unknown result type (might be due to invalid IL or missing references)
		//IL_25b7d: Expected O, but got Unknown
		//IL_25bca: Unknown result type (might be due to invalid IL or missing references)
		//IL_25bd0: Expected O, but got Unknown
		//IL_25c3e: Unknown result type (might be due to invalid IL or missing references)
		//IL_25c44: Expected O, but got Unknown
		//IL_25cb9: Unknown result type (might be due to invalid IL or missing references)
		//IL_25cbf: Expected O, but got Unknown
		//IL_25d2d: Unknown result type (might be due to invalid IL or missing references)
		//IL_25d33: Expected O, but got Unknown
		//IL_25da1: Unknown result type (might be due to invalid IL or missing references)
		//IL_25da7: Expected O, but got Unknown
		//IL_25e15: Unknown result type (might be due to invalid IL or missing references)
		//IL_25e1b: Expected O, but got Unknown
		//IL_25e7e: Unknown result type (might be due to invalid IL or missing references)
		//IL_25e84: Expected O, but got Unknown
		//IL_25ee7: Unknown result type (might be due to invalid IL or missing references)
		//IL_25eed: Expected O, but got Unknown
		//IL_25f77: Unknown result type (might be due to invalid IL or missing references)
		//IL_25f7d: Expected O, but got Unknown
		//IL_25fe0: Unknown result type (might be due to invalid IL or missing references)
		//IL_25fe6: Expected O, but got Unknown
		//IL_26049: Unknown result type (might be due to invalid IL or missing references)
		//IL_2604f: Expected O, but got Unknown
		//IL_2609c: Unknown result type (might be due to invalid IL or missing references)
		//IL_260a2: Expected O, but got Unknown
		//IL_260ef: Unknown result type (might be due to invalid IL or missing references)
		//IL_260f5: Expected O, but got Unknown
		//IL_26163: Unknown result type (might be due to invalid IL or missing references)
		//IL_26169: Expected O, but got Unknown
		//IL_261cc: Unknown result type (might be due to invalid IL or missing references)
		//IL_261d2: Expected O, but got Unknown
		//IL_26235: Unknown result type (might be due to invalid IL or missing references)
		//IL_2623b: Expected O, but got Unknown
		//IL_2629e: Unknown result type (might be due to invalid IL or missing references)
		//IL_262a4: Expected O, but got Unknown
		//IL_26312: Unknown result type (might be due to invalid IL or missing references)
		//IL_26318: Expected O, but got Unknown
		//IL_26365: Unknown result type (might be due to invalid IL or missing references)
		//IL_2636b: Expected O, but got Unknown
		//IL_263b8: Unknown result type (might be due to invalid IL or missing references)
		//IL_263be: Expected O, but got Unknown
		//IL_26421: Unknown result type (might be due to invalid IL or missing references)
		//IL_26427: Expected O, but got Unknown
		//IL_2648a: Unknown result type (might be due to invalid IL or missing references)
		//IL_26490: Expected O, but got Unknown
		//IL_264fe: Unknown result type (might be due to invalid IL or missing references)
		//IL_26504: Expected O, but got Unknown
		//IL_26572: Unknown result type (might be due to invalid IL or missing references)
		//IL_26578: Expected O, but got Unknown
		//IL_265e2: Unknown result type (might be due to invalid IL or missing references)
		//IL_265e8: Expected O, but got Unknown
		//IL_26656: Unknown result type (might be due to invalid IL or missing references)
		//IL_2665c: Expected O, but got Unknown
		//IL_266c6: Unknown result type (might be due to invalid IL or missing references)
		//IL_266cc: Expected O, but got Unknown
		//IL_26719: Unknown result type (might be due to invalid IL or missing references)
		//IL_2671f: Expected O, but got Unknown
		//IL_26777: Unknown result type (might be due to invalid IL or missing references)
		//IL_2677d: Expected O, but got Unknown
		//IL_267d5: Unknown result type (might be due to invalid IL or missing references)
		//IL_267db: Expected O, but got Unknown
		//IL_2683e: Unknown result type (might be due to invalid IL or missing references)
		//IL_26844: Expected O, but got Unknown
		//IL_268a7: Unknown result type (might be due to invalid IL or missing references)
		//IL_268ad: Expected O, but got Unknown
		//IL_26910: Unknown result type (might be due to invalid IL or missing references)
		//IL_26916: Expected O, but got Unknown
		//IL_26979: Unknown result type (might be due to invalid IL or missing references)
		//IL_2697f: Expected O, but got Unknown
		//IL_269f4: Unknown result type (might be due to invalid IL or missing references)
		//IL_269fa: Expected O, but got Unknown
		//IL_26a47: Unknown result type (might be due to invalid IL or missing references)
		//IL_26a4d: Expected O, but got Unknown
		//IL_26ab0: Unknown result type (might be due to invalid IL or missing references)
		//IL_26ab6: Expected O, but got Unknown
		//IL_26b19: Unknown result type (might be due to invalid IL or missing references)
		//IL_26b1f: Expected O, but got Unknown
		//IL_26b82: Unknown result type (might be due to invalid IL or missing references)
		//IL_26b88: Expected O, but got Unknown
		//IL_26beb: Unknown result type (might be due to invalid IL or missing references)
		//IL_26bf1: Expected O, but got Unknown
		//IL_26c54: Unknown result type (might be due to invalid IL or missing references)
		//IL_26c5a: Expected O, but got Unknown
		//IL_26cbd: Unknown result type (might be due to invalid IL or missing references)
		//IL_26cc3: Expected O, but got Unknown
		//IL_26d26: Unknown result type (might be due to invalid IL or missing references)
		//IL_26d2c: Expected O, but got Unknown
		//IL_26d8f: Unknown result type (might be due to invalid IL or missing references)
		//IL_26d95: Expected O, but got Unknown
		//IL_26de2: Unknown result type (might be due to invalid IL or missing references)
		//IL_26de8: Expected O, but got Unknown
		//IL_26e35: Unknown result type (might be due to invalid IL or missing references)
		//IL_26e3b: Expected O, but got Unknown
		//IL_26ea9: Unknown result type (might be due to invalid IL or missing references)
		//IL_26eaf: Expected O, but got Unknown
		//IL_26f1d: Unknown result type (might be due to invalid IL or missing references)
		//IL_26f23: Expected O, but got Unknown
		//IL_26f91: Unknown result type (might be due to invalid IL or missing references)
		//IL_26f97: Expected O, but got Unknown
		//IL_27005: Unknown result type (might be due to invalid IL or missing references)
		//IL_2700b: Expected O, but got Unknown
		//IL_27079: Unknown result type (might be due to invalid IL or missing references)
		//IL_2707f: Expected O, but got Unknown
		//IL_270f4: Unknown result type (might be due to invalid IL or missing references)
		//IL_270fa: Expected O, but got Unknown
		//IL_2716f: Unknown result type (might be due to invalid IL or missing references)
		//IL_27175: Expected O, but got Unknown
		//IL_271ea: Unknown result type (might be due to invalid IL or missing references)
		//IL_271f0: Expected O, but got Unknown
		//IL_27265: Unknown result type (might be due to invalid IL or missing references)
		//IL_2726b: Expected O, but got Unknown
		//IL_272b8: Unknown result type (might be due to invalid IL or missing references)
		//IL_272be: Expected O, but got Unknown
		//IL_2730b: Unknown result type (might be due to invalid IL or missing references)
		//IL_27311: Expected O, but got Unknown
		Command[] array = new Command[1535];
		Command val = new Command();
		val.Name = "overrideadventcalendarday";
		val.Parent = "adventcalendar";
		val.FullName = "adventcalendar.overrideadventcalendarday";
		val.ServerAdmin = true;
		val.Variable = true;
		val.GetOveride = () => AdventCalendar.overrideAdventCalendarDay.ToString();
		val.SetOveride = delegate(string str)
		{
			AdventCalendar.overrideAdventCalendarDay = StringExtensions.ToInt(str, 0);
		};
		array[0] = val;
		val = new Command();
		val.Name = "overrideadventcalendarmonth";
		val.Parent = "adventcalendar";
		val.FullName = "adventcalendar.overrideadventcalendarmonth";
		val.ServerAdmin = true;
		val.Variable = true;
		val.GetOveride = () => AdventCalendar.overrideAdventCalendarMonth.ToString();
		val.SetOveride = delegate(string str)
		{
			AdventCalendar.overrideAdventCalendarMonth = StringExtensions.ToInt(str, 0);
		};
		array[1] = val;
		val = new Command();
		val.Name = "humanknownplayerslosupdateinterval";
		val.Parent = "aibrainsenses";
		val.FullName = "aibrainsenses.humanknownplayerslosupdateinterval";
		val.ServerAdmin = true;
		val.Variable = true;
		val.GetOveride = () => AIBrainSenses.HumanKnownPlayersLOSUpdateInterval.ToString();
		val.SetOveride = delegate(string str)
		{
			AIBrainSenses.HumanKnownPlayersLOSUpdateInterval = StringExtensions.ToFloat(str, 0f);
		};
		array[2] = val;
		val = new Command();
		val.Name = "knownplayerslosupdateinterval";
		val.Parent = "aibrainsenses";
		val.FullName = "aibrainsenses.knownplayerslosupdateinterval";
		val.ServerAdmin = true;
		val.Variable = true;
		val.GetOveride = () => AIBrainSenses.KnownPlayersLOSUpdateInterval.ToString();
		val.SetOveride = delegate(string str)
		{
			AIBrainSenses.KnownPlayersLOSUpdateInterval = StringExtensions.ToFloat(str, 0f);
		};
		array[3] = val;
		val = new Command();
		val.Name = "updateinterval";
		val.Parent = "aibrainsenses";
		val.FullName = "aibrainsenses.updateinterval";
		val.ServerAdmin = true;
		val.Variable = true;
		val.GetOveride = () => AIBrainSenses.UpdateInterval.ToString();
		val.SetOveride = delegate(string str)
		{
			AIBrainSenses.UpdateInterval = StringExtensions.ToFloat(str, 0f);
		};
		array[4] = val;
		val = new Command();
		val.Name = "usesimpleloscheck";
		val.Parent = "aiinformationzone";
		val.FullName = "aiinformationzone.usesimpleloscheck";
		val.ServerAdmin = true;
		val.Variable = true;
		val.GetOveride = () => AIInformationZone.UseSimpleLOSCheck.ToString();
		val.SetOveride = delegate(string str)
		{
			AIInformationZone.UseSimpleLOSCheck = StringExtensions.ToBool(str);
		};
		array[5] = val;
		val = new Command();
		val.Name = "animalframebudgetms";
		val.Parent = "aithinkmanager";
		val.FullName = "aithinkmanager.animalframebudgetms";
		val.ServerAdmin = true;
		val.Variable = true;
		val.GetOveride = () => AIThinkManager.animalframebudgetms.ToString();
		val.SetOveride = delegate(string str)
		{
			AIThinkManager.animalframebudgetms = StringExtensions.ToFloat(str, 0f);
		};
		array[6] = val;
		val = new Command();
		val.Name = "framebudgetms";
		val.Parent = "aithinkmanager";
		val.FullName = "aithinkmanager.framebudgetms";
		val.ServerAdmin = true;
		val.Variable = true;
		val.GetOveride = () => AIThinkManager.framebudgetms.ToString();
		val.SetOveride = delegate(string str)
		{
			AIThinkManager.framebudgetms = StringExtensions.ToFloat(str, 0f);
		};
		array[7] = val;
		val = new Command();
		val.Name = "petframebudgetms";
		val.Parent = "aithinkmanager";
		val.FullName = "aithinkmanager.petframebudgetms";
		val.ServerAdmin = true;
		val.Variable = true;
		val.GetOveride = () => AIThinkManager.petframebudgetms.ToString();
		val.SetOveride = delegate(string str)
		{
			AIThinkManager.petframebudgetms = StringExtensions.ToFloat(str, 0f);
		};
		array[8] = val;
		val = new Command();
		val.Name = "auto_turret_budget_ms";
		val.Parent = "autoturret";
		val.FullName = "autoturret.auto_turret_budget_ms";
		val.ServerAdmin = true;
		val.Description = "How many milliseconds to spend on target scanning per frame";
		val.Variable = true;
		val.GetOveride = () => AutoTurret.auto_turret_budget_ms.ToString();
		val.SetOveride = delegate(string str)
		{
			AutoTurret.auto_turret_budget_ms = StringExtensions.ToFloat(str, 0f);
		};
		array[9] = val;
		val = new Command();
		val.Name = "reload";
		val.Parent = "ballistagun";
		val.FullName = "ballistagun.reload";
		val.ServerAdmin = true;
		val.Variable = false;
		val.Call = delegate(Arg arg)
		{
			BallistaGun.reload(arg);
		};
		array[10] = val;
		val = new Command();
		val.Name = "do_shore_drift";
		val.Parent = "baseboat";
		val.FullName = "baseboat.do_shore_drift";
		val.ServerAdmin = true;
		val.Variable = true;
		val.GetOveride = () => BaseBoat.do_shore_drift.ToString();
		val.SetOveride = delegate(string str)
		{
			BaseBoat.do_shore_drift = StringExtensions.ToBool(str);
		};
		array[11] = val;
		val = new Command();
		val.Name = "drift_speed";
		val.Parent = "baseboat";
		val.FullName = "baseboat.drift_speed";
		val.ServerAdmin = true;
		val.Variable = true;
		val.GetOveride = () => BaseBoat.drift_speed.ToString();
		val.SetOveride = delegate(string str)
		{
			BaseBoat.drift_speed = StringExtensions.ToFloat(str, 0f);
		};
		array[12] = val;
		val = new Command();
		val.Name = "generate_paths";
		val.Parent = "baseboat";
		val.FullName = "baseboat.generate_paths";
		val.ServerAdmin = true;
		val.Variable = true;
		val.GetOveride = () => BaseBoat.generate_paths.ToString();
		val.SetOveride = delegate(string str)
		{
			BaseBoat.generate_paths = StringExtensions.ToBool(str);
		};
		array[13] = val;
		val = new Command();
		val.Name = "seconds_between_shore_drift";
		val.Parent = "baseboat";
		val.FullName = "baseboat.seconds_between_shore_drift";
		val.ServerAdmin = true;
		val.Variable = false;
		val.Call = delegate(Arg arg)
		{
			int num = BaseBoat.seconds_between_shore_drift(arg);
			arg.ReplyWithObject((object)num);
		};
		array[14] = val;
		val = new Command();
		val.Name = "seconds_until_shore_drift";
		val.Parent = "baseboat";
		val.FullName = "baseboat.seconds_until_shore_drift";
		val.ServerAdmin = true;
		val.Variable = false;
		val.Call = delegate(Arg arg)
		{
			int num2 = BaseBoat.seconds_until_shore_drift(arg);
			arg.ReplyWithObject((object)num2);
		};
		array[15] = val;
		val = new Command();
		val.Name = "maxactivefireworks";
		val.Parent = "basefirework";
		val.FullName = "basefirework.maxactivefireworks";
		val.ServerAdmin = true;
		val.Variable = true;
		val.GetOveride = () => BaseFirework.maxActiveFireworks.ToString();
		val.SetOveride = delegate(string str)
		{
			BaseFirework.maxActiveFireworks = StringExtensions.ToInt(str, 0);
		};
		array[16] = val;
		val = new Command();
		val.Name = "forcefail";
		val.Parent = "basefishingrod";
		val.FullName = "basefishingrod.forcefail";
		val.ServerAdmin = true;
		val.Variable = true;
		val.GetOveride = () => BaseFishingRod.ForceFail.ToString();
		val.SetOveride = delegate(string str)
		{
			BaseFishingRod.ForceFail = StringExtensions.ToBool(str);
		};
		array[17] = val;
		val = new Command();
		val.Name = "forcesuccess";
		val.Parent = "basefishingrod";
		val.FullName = "basefishingrod.forcesuccess";
		val.ServerAdmin = true;
		val.Variable = true;
		val.GetOveride = () => BaseFishingRod.ForceSuccess.ToString();
		val.SetOveride = delegate(string str)
		{
			BaseFishingRod.ForceSuccess = StringExtensions.ToBool(str);
		};
		array[18] = val;
		val = new Command();
		val.Name = "immediatehook";
		val.Parent = "basefishingrod";
		val.FullName = "basefishingrod.immediatehook";
		val.ServerAdmin = true;
		val.Variable = true;
		val.GetOveride = () => BaseFishingRod.ImmediateHook.ToString();
		val.SetOveride = delegate(string str)
		{
			BaseFishingRod.ImmediateHook = StringExtensions.ToBool(str);
		};
		array[19] = val;
		val = new Command();
		val.Name = "detectlongrangetick";
		val.Parent = "basemetaldetector";
		val.FullName = "basemetaldetector.detectlongrangetick";
		val.ServerAdmin = true;
		val.Variable = true;
		val.GetOveride = () => BaseMetalDetector.DetectLongRangeTick.ToString();
		val.SetOveride = delegate(string str)
		{
			BaseMetalDetector.DetectLongRangeTick = StringExtensions.ToFloat(str, 0f);
		};
		array[20] = val;
		val = new Command();
		val.Name = "detectminmovementdistance";
		val.Parent = "basemetaldetector";
		val.FullName = "basemetaldetector.detectminmovementdistance";
		val.ServerAdmin = true;
		val.Variable = true;
		val.GetOveride = () => BaseMetalDetector.DetectMinMovementDistance.ToString();
		val.SetOveride = delegate(string str)
		{
			BaseMetalDetector.DetectMinMovementDistance = StringExtensions.ToFloat(str, 0f);
		};
		array[21] = val;
		val = new Command();
		val.Name = "nearestdistancetick";
		val.Parent = "basemetaldetector";
		val.FullName = "basemetaldetector.nearestdistancetick";
		val.ServerAdmin = true;
		val.Variable = true;
		val.GetOveride = () => BaseMetalDetector.NearestDistanceTick.ToString();
		val.SetOveride = delegate(string str)
		{
			BaseMetalDetector.NearestDistanceTick = StringExtensions.ToFloat(str, 0f);
		};
		array[22] = val;
		val = new Command();
		val.Name = "missionsenabled";
		val.Parent = "basemission";
		val.FullName = "basemission.missionsenabled";
		val.ServerAdmin = true;
		val.Variable = true;
		val.GetOveride = () => BaseMission.missionsenabled.ToString();
		val.SetOveride = delegate(string str)
		{
			BaseMission.missionsenabled = StringExtensions.ToBool(str);
		};
		array[23] = val;
		val = new Command();
		val.Name = "basenavmovementframeinterval";
		val.Parent = "basenavigator";
		val.FullName = "basenavigator.basenavmovementframeinterval";
		val.ServerAdmin = true;
		val.Description = "How many frames between base navigation movement updates";
		val.Variable = true;
		val.GetOveride = () => BaseNavigator.baseNavMovementFrameInterval.ToString();
		val.SetOveride = delegate(string str)
		{
			BaseNavigator.baseNavMovementFrameInterval = StringExtensions.ToInt(str, 0);
		};
		array[24] = val;
		val = new Command();
		val.Name = "maxstepupdistance";
		val.Parent = "basenavigator";
		val.FullName = "basenavigator.maxstepupdistance";
		val.ServerAdmin = true;
		val.Description = "The max step-up height difference for pet base navigation";
		val.Variable = true;
		val.GetOveride = () => BaseNavigator.maxStepUpDistance.ToString();
		val.SetOveride = delegate(string str)
		{
			BaseNavigator.maxStepUpDistance = StringExtensions.ToFloat(str, 0f);
		};
		array[25] = val;
		val = new Command();
		val.Name = "navtypedistance";
		val.Parent = "basenavigator";
		val.FullName = "basenavigator.navtypedistance";
		val.ServerAdmin = true;
		val.Variable = true;
		val.GetOveride = () => BaseNavigator.navTypeDistance.ToString();
		val.SetOveride = delegate(string str)
		{
			BaseNavigator.navTypeDistance = StringExtensions.ToFloat(str, 0f);
		};
		array[26] = val;
		val = new Command();
		val.Name = "navtypeheightoffset";
		val.Parent = "basenavigator";
		val.FullName = "basenavigator.navtypeheightoffset";
		val.ServerAdmin = true;
		val.Variable = true;
		val.GetOveride = () => BaseNavigator.navTypeHeightOffset.ToString();
		val.SetOveride = delegate(string str)
		{
			BaseNavigator.navTypeHeightOffset = StringExtensions.ToFloat(str, 0f);
		};
		array[27] = val;
		val = new Command();
		val.Name = "stucktriggerduration";
		val.Parent = "basenavigator";
		val.FullName = "basenavigator.stucktriggerduration";
		val.ServerAdmin = true;
		val.Description = "How long we are not moving for before trigger the stuck event";
		val.Variable = true;
		val.GetOveride = () => BaseNavigator.stuckTriggerDuration.ToString();
		val.SetOveride = delegate(string str)
		{
			BaseNavigator.stuckTriggerDuration = StringExtensions.ToFloat(str, 0f);
		};
		array[28] = val;
		val = new Command();
		val.Name = "movementupdatebudgetms";
		val.Parent = "basepet";
		val.FullName = "basepet.movementupdatebudgetms";
		val.ServerAdmin = true;
		val.Variable = true;
		val.GetOveride = () => BasePet.movementupdatebudgetms.ToString();
		val.SetOveride = delegate(string str)
		{
			BasePet.movementupdatebudgetms = StringExtensions.ToFloat(str, 0f);
		};
		array[29] = val;
		val = new Command();
		val.Name = "onlyqueuebasenavmovements";
		val.Parent = "basepet";
		val.FullName = "basepet.onlyqueuebasenavmovements";
		val.ServerAdmin = true;
		val.Variable = true;
		val.GetOveride = () => BasePet.onlyQueueBaseNavMovements.ToString();
		val.SetOveride = delegate(string str)
		{
			BasePet.onlyQueueBaseNavMovements = StringExtensions.ToBool(str);
		};
		array[30] = val;
		val = new Command();
		val.Name = "queuedmovementsallowed";
		val.Parent = "basepet";
		val.FullName = "basepet.queuedmovementsallowed";
		val.ServerAdmin = true;
		val.Variable = true;
		val.GetOveride = () => BasePet.queuedMovementsAllowed.ToString();
		val.SetOveride = delegate(string str)
		{
			BasePet.queuedMovementsAllowed = StringExtensions.ToBool(str);
		};
		array[31] = val;
		val = new Command();
		val.Name = "lifestoryframebudgetms";
		val.Parent = "baseplayer";
		val.FullName = "baseplayer.lifestoryframebudgetms";
		val.ServerAdmin = true;
		val.Variable = true;
		val.GetOveride = () => BasePlayer.lifeStoryFramebudgetms.ToString();
		val.SetOveride = delegate(string str)
		{
			BasePlayer.lifeStoryFramebudgetms = StringExtensions.ToFloat(str, 0f);
		};
		array[32] = val;
		val = new Command();
		val.Name = "outsidedecayminutes";
		val.Parent = "basesiegeweapon";
		val.FullName = "basesiegeweapon.outsidedecayminutes";
		val.ServerAdmin = true;
		val.Description = "How many minutes before a siege weapon loses all its health while outside";
		val.Variable = true;
		val.GetOveride = () => BaseSiegeWeapon.outsideDecayMinutes.ToString();
		val.SetOveride = delegate(string str)
		{
			BaseSiegeWeapon.outsideDecayMinutes = StringExtensions.ToFloat(str, 0f);
		};
		array[33] = val;
		val = new Command();
		val.Name = "deepwaterdecayminutes";
		val.Parent = "basesubmarine";
		val.FullName = "basesubmarine.deepwaterdecayminutes";
		val.ServerAdmin = true;
		val.Description = "How long before a submarine loses all its health while in deep water";
		val.Variable = true;
		val.GetOveride = () => BaseSubmarine.deepwaterdecayminutes.ToString();
		val.SetOveride = delegate(string str)
		{
			BaseSubmarine.deepwaterdecayminutes = StringExtensions.ToFloat(str, 0f);
		};
		array[34] = val;
		val = new Command();
		val.Name = "outsidedecayminutes";
		val.Parent = "basesubmarine";
		val.FullName = "basesubmarine.outsidedecayminutes";
		val.ServerAdmin = true;
		val.Description = "How long before a submarine loses all its health while outside. If it's in deep water, deepwaterdecayminutes is used";
		val.Variable = true;
		val.GetOveride = () => BaseSubmarine.outsidedecayminutes.ToString();
		val.SetOveride = delegate(string str)
		{
			BaseSubmarine.outsidedecayminutes = StringExtensions.ToFloat(str, 0f);
		};
		array[35] = val;
		val = new Command();
		val.Name = "oxygenminutes";
		val.Parent = "basesubmarine";
		val.FullName = "basesubmarine.oxygenminutes";
		val.ServerAdmin = true;
		val.Description = "How long a submarine can stay underwater until players start taking damage from low oxygen";
		val.Variable = true;
		val.GetOveride = () => BaseSubmarine.oxygenminutes.ToString();
		val.SetOveride = delegate(string str)
		{
			BaseSubmarine.oxygenminutes = StringExtensions.ToFloat(str, 0f);
		};
		array[36] = val;
		val = new Command();
		val.Name = "maxbuildingblockgrade";
		val.Parent = "batteringram";
		val.FullName = "batteringram.maxbuildingblockgrade";
		val.ServerAdmin = true;
		val.ClientAdmin = true;
		val.Variable = true;
		val.GetOveride = () => BatteringRam.maxBuildingBlockGrade.ToString();
		val.SetOveride = delegate(string str)
		{
			BatteringRam.maxBuildingBlockGrade = StringExtensions.ToInt(str, 0);
		};
		val.Default = "2";
		array[37] = val;
		val = new Command();
		val.Name = "hurt";
		val.Parent = "batteringramhead";
		val.FullName = "batteringramhead.hurt";
		val.ServerAdmin = true;
		val.Variable = false;
		val.Call = delegate(Arg arg)
		{
			BatteringRamHead.hurt(arg);
		};
		array[38] = val;
		val = new Command();
		val.Name = "population";
		val.Parent = "bear";
		val.FullName = "bear.population";
		val.ServerAdmin = true;
		val.Description = "Population active on the server, per square km";
		val.ShowInAdminUI = true;
		val.Variable = true;
		val.GetOveride = () => Bear.Population.ToString();
		val.SetOveride = delegate(string str)
		{
			Bear.Population = StringExtensions.ToFloat(str, 0f);
		};
		array[39] = val;
		val = new Command();
		val.Name = "updatehiveinterval";
		val.Parent = "beehive";
		val.FullName = "beehive.updatehiveinterval";
		val.ServerAdmin = true;
		val.Description = "How long before a Beehive will update";
		val.Variable = true;
		val.GetOveride = () => Beehive.updateHiveInterval.ToString();
		val.SetOveride = delegate(string str)
		{
			Beehive.updateHiveInterval = StringExtensions.ToFloat(str, 0f);
		};
		array[40] = val;
		val = new Command();
		val.Name = "updatehivestatsinterval";
		val.Parent = "beehive";
		val.FullName = "beehive.updatehivestatsinterval";
		val.ServerAdmin = true;
		val.Description = "How long before the Beehive will perform temperature and inside checks";
		val.Variable = true;
		val.GetOveride = () => Beehive.updateHiveStatsInterval.ToString();
		val.SetOveride = delegate(string str)
		{
			Beehive.updateHiveStatsInterval = StringExtensions.ToFloat(str, 0f);
		};
		array[41] = val;
		val = new Command();
		val.Name = "xpincreaseperhoneycomb";
		val.Parent = "beehive";
		val.FullName = "beehive.xpincreaseperhoneycomb";
		val.ServerAdmin = true;
		val.Description = "How much the Nucleus's XP should be increased per honeycomb generated";
		val.Variable = true;
		val.GetOveride = () => Beehive.xpIncreasePerHoneycomb.ToString();
		val.SetOveride = delegate(string str)
		{
			Beehive.xpIncreasePerHoneycomb = StringExtensions.ToInt(str, 0);
		};
		array[42] = val;
		val = new Command();
		val.Name = "breakrange";
		val.Parent = "beeswarmai";
		val.FullName = "beeswarmai.breakrange";
		val.ServerAdmin = true;
		val.Description = "Range to leave current target alone (should be higher than search)";
		val.Variable = true;
		val.GetOveride = () => BeeSwarmAI.breakRange.ToString();
		val.SetOveride = delegate(string str)
		{
			BeeSwarmAI.breakRange = StringExtensions.ToFloat(str, 0f);
		};
		array[43] = val;
		val = new Command();
		val.Name = "disable";
		val.Parent = "beeswarmai";
		val.FullName = "beeswarmai.disable";
		val.ServerAdmin = true;
		val.Variable = true;
		val.GetOveride = () => BeeSwarmAI.disable.ToString();
		val.SetOveride = delegate(string str)
		{
			BeeSwarmAI.disable = StringExtensions.ToBool(str);
		};
		array[44] = val;
		val = new Command();
		val.Name = "flamesettingdistance";
		val.Parent = "beeswarmai";
		val.FullName = "beeswarmai.flamesettingdistance";
		val.ServerAdmin = true;
		val.Description = "How far away fire has to be to set the swarm on fire";
		val.Variable = true;
		val.GetOveride = () => BeeSwarmAI.flameSettingDistance.ToString();
		val.SetOveride = delegate(string str)
		{
			BeeSwarmAI.flameSettingDistance = StringExtensions.ToFloat(str, 0f);
		};
		array[45] = val;
		val = new Command();
		val.Name = "killwithouttargettime";
		val.Parent = "beeswarmai";
		val.FullName = "beeswarmai.killwithouttargettime";
		val.ServerAdmin = true;
		val.Description = "How long a swarm will stick around without a target";
		val.Variable = true;
		val.GetOveride = () => BeeSwarmAI.killWithoutTargetTime.ToString();
		val.SetOveride = delegate(string str)
		{
			BeeSwarmAI.killWithoutTargetTime = StringExtensions.ToFloat(str, 0f);
		};
		array[46] = val;
		val = new Command();
		val.Name = "searchrange";
		val.Parent = "beeswarmai";
		val.FullName = "beeswarmai.searchrange";
		val.ServerAdmin = true;
		val.Description = "Range to find new targets";
		val.Variable = true;
		val.GetOveride = () => BeeSwarmAI.searchRange.ToString();
		val.SetOveride = delegate(string str)
		{
			BeeSwarmAI.searchRange = StringExtensions.ToFloat(str, 0f);
		};
		array[47] = val;
		val = new Command();
		val.Name = "waterthreshold";
		val.Parent = "beeswarmai";
		val.FullName = "beeswarmai.waterthreshold";
		val.ServerAdmin = true;
		val.Description = "How much water a player needs to be in to be ignored";
		val.Variable = true;
		val.GetOveride = () => BeeSwarmAI.waterThreshold.ToString();
		val.SetOveride = delegate(string str)
		{
			BeeSwarmAI.waterThreshold = StringExtensions.ToFloat(str, 0f);
		};
		array[48] = val;
		val = new Command();
		val.Name = "amounttospawn";
		val.Parent = "beeswarmmaster";
		val.FullName = "beeswarmmaster.amounttospawn";
		val.ServerAdmin = true;
		val.Description = "How many child swarms a master swarm will create";
		val.Variable = true;
		val.GetOveride = () => BeeSwarmMaster.amountToSpawn.ToString();
		val.SetOveride = delegate(string str)
		{
			BeeSwarmMaster.amountToSpawn = StringExtensions.ToInt(str, 0);
		};
		array[49] = val;
		val = new Command();
		val.Name = "killwithoutatargettime";
		val.Parent = "beeswarmmaster";
		val.FullName = "beeswarmmaster.killwithoutatargettime";
		val.ServerAdmin = true;
		val.Description = "How long a master swarm will stick around without a target";
		val.Variable = true;
		val.GetOveride = () => BeeSwarmMaster.killWithoutATargetTime.ToString();
		val.SetOveride = delegate(string str)
		{
			BeeSwarmMaster.killWithoutATargetTime = StringExtensions.ToFloat(str, 0f);
		};
		array[50] = val;
		val = new Command();
		val.Name = "secondsbetweenspawns";
		val.Parent = "beeswarmmaster";
		val.FullName = "beeswarmmaster.secondsbetweenspawns";
		val.ServerAdmin = true;
		val.Description = "How long before a master swarm will create a child";
		val.Variable = true;
		val.GetOveride = () => BeeSwarmMaster.secondsBetweenSpawns.ToString();
		val.SetOveride = delegate(string str)
		{
			BeeSwarmMaster.secondsBetweenSpawns = StringExtensions.ToFloat(str, 0f);
		};
		array[51] = val;
		val = new Command();
		val.Name = "spinfrequencyseconds";
		val.Parent = "bigwheelgame";
		val.FullName = "bigwheelgame.spinfrequencyseconds";
		val.ServerAdmin = true;
		val.Variable = true;
		val.GetOveride = () => BigWheelGame.spinFrequencySeconds.ToString();
		val.SetOveride = delegate(string str)
		{
			BigWheelGame.spinFrequencySeconds = StringExtensions.ToFloat(str, 0f);
		};
		array[52] = val;
		val = new Command();
		val.Name = "doplayerdamage";
		val.Parent = "bike";
		val.FullName = "bike.doplayerdamage";
		val.ServerAdmin = true;
		val.Description = "Can bike crashes cause damage or death to the rider?";
		val.Variable = true;
		val.GetOveride = () => Bike.doPlayerDamage.ToString();
		val.SetOveride = delegate(string str)
		{
			Bike.doPlayerDamage = StringExtensions.ToBool(str);
		};
		array[53] = val;
		val = new Command();
		val.Name = "motorbikemonumentpopulation";
		val.Parent = "bike";
		val.FullName = "bike.motorbikemonumentpopulation";
		val.ServerAdmin = true;
		val.Description = "Motorbike population in monuments";
		val.ShowInAdminUI = true;
		val.Variable = true;
		val.GetOveride = () => Bike.motorbikeMonumentPopulation.ToString();
		val.SetOveride = delegate(string str)
		{
			Bike.motorbikeMonumentPopulation = StringExtensions.ToFloat(str, 0f);
		};
		array[54] = val;
		val = new Command();
		val.Name = "outsidedecayminutes";
		val.Parent = "bike";
		val.FullName = "bike.outsidedecayminutes";
		val.ServerAdmin = true;
		val.Description = "How long before a bike loses all its health while outside";
		val.Variable = true;
		val.GetOveride = () => Bike.outsideDecayMinutes.ToString();
		val.SetOveride = delegate(string str)
		{
			Bike.outsideDecayMinutes = StringExtensions.ToFloat(str, 0f);
		};
		array[55] = val;
		val = new Command();
		val.Name = "pedalmonumentpopulation";
		val.Parent = "bike";
		val.FullName = "bike.pedalmonumentpopulation";
		val.ServerAdmin = true;
		val.Description = "Pedal bike population in monuments";
		val.ShowInAdminUI = true;
		val.Variable = true;
		val.GetOveride = () => Bike.pedalMonumentPopulation.ToString();
		val.SetOveride = delegate(string str)
		{
			Bike.pedalMonumentPopulation = StringExtensions.ToFloat(str, 0f);
		};
		array[56] = val;
		val = new Command();
		val.Name = "pedalroadsidepopulation";
		val.Parent = "bike";
		val.FullName = "bike.pedalroadsidepopulation";
		val.ServerAdmin = true;
		val.Description = "Pedal bike population active on the server (roadside spawns)";
		val.ShowInAdminUI = true;
		val.Variable = true;
		val.GetOveride = () => Bike.pedalRoadsidePopulation.ToString();
		val.SetOveride = delegate(string str)
		{
			Bike.pedalRoadsidePopulation = StringExtensions.ToFloat(str, 0f);
		};
		array[57] = val;
		val = new Command();
		val.Name = "playerdamageragdolltheshold";
		val.Parent = "bike";
		val.FullName = "bike.playerdamageragdolltheshold";
		val.ServerAdmin = true;
		val.Description = "Amount of collision damage on a bike required to ragdoll the player";
		val.Variable = true;
		val.GetOveride = () => Bike.playerDamageRagdollTheshold.ToString();
		val.SetOveride = delegate(string str)
		{
			Bike.playerDamageRagdollTheshold = StringExtensions.ToFloat(str, 0f);
		};
		array[58] = val;
		val = new Command();
		val.Name = "maxbet";
		val.Parent = "blackjackmachine";
		val.FullName = "blackjackmachine.maxbet";
		val.ServerAdmin = true;
		val.Description = "Maximum initial bet per round";
		val.Variable = true;
		val.GetOveride = () => BlackjackMachine.maxbet.ToString();
		val.SetOveride = delegate(string str)
		{
			BlackjackMachine.maxbet = StringExtensions.ToInt(str, 0);
		};
		array[59] = val;
		val = new Command();
		val.Name = "population";
		val.Parent = "boar";
		val.FullName = "boar.population";
		val.ServerAdmin = true;
		val.Description = "Population active on the server, per square km";
		val.ShowInAdminUI = true;
		val.Variable = true;
		val.GetOveride = () => Boar.Population.ToString();
		val.SetOveride = delegate(string str)
		{
			Boar.Population = StringExtensions.ToFloat(str, 0f);
		};
		array[60] = val;
		val = new Command();
		val.Name = "backtracklength";
		val.Parent = "boombox";
		val.FullName = "boombox.backtracklength";
		val.ServerAdmin = true;
		val.Saved = true;
		val.Variable = true;
		val.GetOveride = () => BoomBox.BacktrackLength.ToString();
		val.SetOveride = delegate(string str)
		{
			BoomBox.BacktrackLength = StringExtensions.ToInt(str, 0);
		};
		array[61] = val;
		val = new Command();
		val.Name = "clearradiobyuser";
		val.Parent = "boombox";
		val.FullName = "boombox.clearradiobyuser";
		val.ServerAdmin = true;
		val.Variable = false;
		val.Call = delegate(Arg arg)
		{
			BoomBox.ClearRadioByUser(arg);
		};
		array[62] = val;
		val = new Command();
		val.Name = "serverurllist";
		val.Parent = "boombox";
		val.FullName = "boombox.serverurllist";
		val.ServerAdmin = true;
		val.ClientAdmin = true;
		val.Client = true;
		val.Saved = true;
		val.Description = "A list of radio stations that are valid on this server. Format: NAME,URL,NAME,URL,etc";
		val.Replicated = true;
		val.ShowInAdminUI = true;
		val.Variable = true;
		val.GetOveride = () => BoomBox.ServerUrlList ?? "";
		val.SetOveride = delegate(string str)
		{
			BoomBox.ServerUrlList = str;
		};
		val.Default = "";
		array[63] = val;
		val = new Command();
		val.Name = "deployattackdistancemax";
		val.Parent = "bradleyapc";
		val.FullName = "bradleyapc.deployattackdistancemax";
		val.ServerAdmin = true;
		val.Variable = true;
		val.GetOveride = () => BradleyAPC.DeployAttackDistanceMax.ToString();
		val.SetOveride = delegate(string str)
		{
			BradleyAPC.DeployAttackDistanceMax = StringExtensions.ToFloat(str, 0f);
		};
		array[64] = val;
		val = new Command();
		val.Name = "deployhealthrangemax";
		val.Parent = "bradleyapc";
		val.FullName = "bradleyapc.deployhealthrangemax";
		val.ServerAdmin = true;
		val.Variable = true;
		val.GetOveride = () => BradleyAPC.DeployHealthRangeMax.ToString();
		val.SetOveride = delegate(string str)
		{
			BradleyAPC.DeployHealthRangeMax = StringExtensions.ToFloat(str, 0f);
		};
		array[65] = val;
		val = new Command();
		val.Name = "deployhealthrangemin";
		val.Parent = "bradleyapc";
		val.FullName = "bradleyapc.deployhealthrangemin";
		val.ServerAdmin = true;
		val.Variable = true;
		val.GetOveride = () => BradleyAPC.DeployHealthRangeMin.ToString();
		val.SetOveride = delegate(string str)
		{
			BradleyAPC.DeployHealthRangeMin = StringExtensions.ToFloat(str, 0f);
		};
		array[66] = val;
		val = new Command();
		val.Name = "deployinterval";
		val.Parent = "bradleyapc";
		val.FullName = "bradleyapc.deployinterval";
		val.ServerAdmin = true;
		val.Variable = true;
		val.GetOveride = () => BradleyAPC.DeployInterval.ToString();
		val.SetOveride = delegate(string str)
		{
			BradleyAPC.DeployInterval = StringExtensions.ToFloat(str, 0f);
		};
		array[67] = val;
		val = new Command();
		val.Name = "deployondamagecheckinterval";
		val.Parent = "bradleyapc";
		val.FullName = "bradleyapc.deployondamagecheckinterval";
		val.ServerAdmin = true;
		val.Variable = true;
		val.GetOveride = () => BradleyAPC.DeployOnDamageCheckInterval.ToString();
		val.SetOveride = delegate(string str)
		{
			BradleyAPC.DeployOnDamageCheckInterval = StringExtensions.ToFloat(str, 0f);
		};
		array[68] = val;
		val = new Command();
		val.Name = "killscientistsonbradleydeath";
		val.Parent = "bradleyapc";
		val.FullName = "bradleyapc.killscientistsonbradleydeath";
		val.ServerAdmin = true;
		val.Variable = true;
		val.GetOveride = () => BradleyAPC.KillScientistsOnBradleyDeath.ToString();
		val.SetOveride = delegate(string str)
		{
			BradleyAPC.KillScientistsOnBradleyDeath = StringExtensions.ToBool(str);
		};
		array[69] = val;
		val = new Command();
		val.Name = "mountafternotattackedduration";
		val.Parent = "bradleyapc";
		val.FullName = "bradleyapc.mountafternotattackedduration";
		val.ServerAdmin = true;
		val.Variable = true;
		val.GetOveride = () => BradleyAPC.MountAfterNotAttackedDuration.ToString();
		val.SetOveride = delegate(string str)
		{
			BradleyAPC.MountAfterNotAttackedDuration = StringExtensions.ToFloat(str, 0f);
		};
		array[70] = val;
		val = new Command();
		val.Name = "mountafternotfiredduration";
		val.Parent = "bradleyapc";
		val.FullName = "bradleyapc.mountafternotfiredduration";
		val.ServerAdmin = true;
		val.Variable = true;
		val.GetOveride = () => BradleyAPC.MountAfterNotFiredDuration.ToString();
		val.SetOveride = delegate(string str)
		{
			BradleyAPC.MountAfterNotFiredDuration = StringExtensions.ToFloat(str, 0f);
		};
		array[71] = val;
		val = new Command();
		val.Name = "mountafternottargetsduration";
		val.Parent = "bradleyapc";
		val.FullName = "bradleyapc.mountafternottargetsduration";
		val.ServerAdmin = true;
		val.Variable = true;
		val.GetOveride = () => BradleyAPC.MountAfterNotTargetsDuration.ToString();
		val.SetOveride = delegate(string str)
		{
			BradleyAPC.MountAfterNotTargetsDuration = StringExtensions.ToFloat(str, 0f);
		};
		array[72] = val;
		val = new Command();
		val.Name = "scientistredeploymentmininterval";
		val.Parent = "bradleyapc";
		val.FullName = "bradleyapc.scientistredeploymentmininterval";
		val.ServerAdmin = true;
		val.Variable = true;
		val.GetOveride = () => BradleyAPC.ScientistRedeploymentMinInterval.ToString();
		val.SetOveride = delegate(string str)
		{
			BradleyAPC.ScientistRedeploymentMinInterval = StringExtensions.ToFloat(str, 0f);
		};
		array[73] = val;
		val = new Command();
		val.Name = "spawnroadbradley";
		val.Parent = "bradleyapc";
		val.FullName = "bradleyapc.spawnroadbradley";
		val.ServerAdmin = true;
		val.Variable = false;
		val.Call = delegate(Arg arg)
		{
			//IL_0002: Unknown result type (might be due to invalid IL or missing references)
			//IL_0007: Unknown result type (might be due to invalid IL or missing references)
			//IL_000e: Unknown result type (might be due to invalid IL or missing references)
			//IL_0013: Unknown result type (might be due to invalid IL or missing references)
			string text = BradleyAPC.svspawnroadbradley(arg.GetVector3(0, Vector3.zero), arg.GetVector3(1, Vector3.zero));
			arg.ReplyWithObject((object)text);
		};
		array[74] = val;
		val = new Command();
		val.Name = "usesmokegrenades";
		val.Parent = "bradleyapc";
		val.FullName = "bradleyapc.usesmokegrenades";
		val.ServerAdmin = true;
		val.Variable = true;
		val.GetOveride = () => BradleyAPC.UseSmokeGrenades.ToString();
		val.SetOveride = delegate(string str)
		{
			BradleyAPC.UseSmokeGrenades = StringExtensions.ToBool(str);
		};
		array[75] = val;
		val = new Command();
		val.Name = "cargo_escape_boat_rhib";
		val.Parent = "cargoship";
		val.FullName = "cargoship.cargo_escape_boat_rhib";
		val.ServerAdmin = true;
		val.Variable = true;
		val.GetOveride = () => CargoShip.cargo_escape_boat_rhib.ToString();
		val.SetOveride = delegate(string str)
		{
			CargoShip.cargo_escape_boat_rhib = StringExtensions.ToBool(str);
		};
		array[76] = val;
		val = new Command();
		val.Name = "debug_cargo_status";
		val.Parent = "cargoship";
		val.FullName = "cargoship.debug_cargo_status";
		val.ServerAdmin = true;
		val.Variable = false;
		val.Call = delegate(Arg arg)
		{
			CargoShip.debug_cargo_status(arg);
		};
		array[77] = val;
		val = new Command();
		val.Name = "debug_info";
		val.Parent = "cargoship";
		val.FullName = "cargoship.debug_info";
		val.ServerAdmin = true;
		val.Variable = false;
		val.Call = delegate(Arg arg)
		{
			CargoShip.debug_info(arg);
		};
		array[78] = val;
		val = new Command();
		val.Name = "dock_time";
		val.Parent = "cargoship";
		val.FullName = "cargoship.dock_time";
		val.ServerAdmin = true;
		val.Variable = true;
		val.GetOveride = () => CargoShip.dock_time.ToString();
		val.SetOveride = delegate(string str)
		{
			CargoShip.dock_time = StringExtensions.ToFloat(str, 0f);
		};
		array[79] = val;
		val = new Command();
		val.Name = "docking_debug";
		val.Parent = "cargoship";
		val.FullName = "cargoship.docking_debug";
		val.ServerAdmin = true;
		val.Variable = true;
		val.GetOveride = () => CargoShip.docking_debug.ToString();
		val.SetOveride = delegate(string str)
		{
			CargoShip.docking_debug = StringExtensions.ToBool(str);
		};
		array[80] = val;
		val = new Command();
		val.Name = "egress_duration_minutes";
		val.Parent = "cargoship";
		val.FullName = "cargoship.egress_duration_minutes";
		val.ServerAdmin = true;
		val.Variable = true;
		val.GetOveride = () => CargoShip.egress_duration_minutes.ToString();
		val.SetOveride = delegate(string str)
		{
			CargoShip.egress_duration_minutes = StringExtensions.ToFloat(str, 0f);
		};
		array[81] = val;
		val = new Command();
		val.Name = "event_duration_minutes";
		val.Parent = "cargoship";
		val.FullName = "cargoship.event_duration_minutes";
		val.ServerAdmin = true;
		val.Variable = true;
		val.GetOveride = () => CargoShip.event_duration_minutes.ToString();
		val.SetOveride = delegate(string str)
		{
			CargoShip.event_duration_minutes = StringExtensions.ToFloat(str, 0f);
		};
		array[82] = val;
		val = new Command();
		val.Name = "event_enabled";
		val.Parent = "cargoship";
		val.FullName = "cargoship.event_enabled";
		val.ServerAdmin = true;
		val.Variable = true;
		val.GetOveride = () => CargoShip.event_enabled.ToString();
		val.SetOveride = delegate(string str)
		{
			CargoShip.event_enabled = StringExtensions.ToBool(str);
		};
		array[83] = val;
		val = new Command();
		val.Name = "loot_round_spacing_minutes";
		val.Parent = "cargoship";
		val.FullName = "cargoship.loot_round_spacing_minutes";
		val.ServerAdmin = true;
		val.Variable = true;
		val.GetOveride = () => CargoShip.loot_round_spacing_minutes.ToString();
		val.SetOveride = delegate(string str)
		{
			CargoShip.loot_round_spacing_minutes = StringExtensions.ToFloat(str, 0f);
		};
		array[84] = val;
		val = new Command();
		val.Name = "loot_rounds";
		val.Parent = "cargoship";
		val.FullName = "cargoship.loot_rounds";
		val.ServerAdmin = true;
		val.Variable = true;
		val.GetOveride = () => CargoShip.loot_rounds.ToString();
		val.SetOveride = delegate(string str)
		{
			CargoShip.loot_rounds = StringExtensions.ToInt(str, 0);
		};
		array[85] = val;
		val = new Command();
		val.Name = "refresh_loot_on_dock";
		val.Parent = "cargoship";
		val.FullName = "cargoship.refresh_loot_on_dock";
		val.ServerAdmin = true;
		val.Variable = true;
		val.GetOveride = () => CargoShip.refresh_loot_on_dock.ToString();
		val.SetOveride = delegate(string str)
		{
			CargoShip.refresh_loot_on_dock = StringExtensions.ToBool(str);
		};
		array[86] = val;
		val = new Command();
		val.Name = "should_dock";
		val.Parent = "cargoship";
		val.FullName = "cargoship.should_dock";
		val.ServerAdmin = true;
		val.Variable = true;
		val.GetOveride = () => CargoShip.should_dock.ToString();
		val.SetOveride = delegate(string str)
		{
			CargoShip.should_dock = StringExtensions.ToBool(str);
		};
		array[87] = val;
		val = new Command();
		val.Name = "clearcassettes";
		val.Parent = "cassette";
		val.FullName = "cassette.clearcassettes";
		val.ServerAdmin = true;
		val.Variable = false;
		val.Call = delegate(Arg arg)
		{
			Cassette.ClearCassettes(arg);
		};
		array[88] = val;
		val = new Command();
		val.Name = "clearcassettesbyuser";
		val.Parent = "cassette";
		val.FullName = "cassette.clearcassettesbyuser";
		val.ServerAdmin = true;
		val.Variable = false;
		val.Call = delegate(Arg arg)
		{
			Cassette.ClearCassettesByUser(arg);
		};
		array[89] = val;
		val = new Command();
		val.Name = "maxcassettefilesizemb";
		val.Parent = "cassette";
		val.FullName = "cassette.maxcassettefilesizemb";
		val.ServerAdmin = true;
		val.ClientAdmin = true;
		val.Client = true;
		val.Replicated = true;
		val.Variable = true;
		val.GetOveride = () => Cassette.MaxCassetteFileSizeMB.ToString();
		val.SetOveride = delegate(string str)
		{
			Cassette.MaxCassetteFileSizeMB = StringExtensions.ToFloat(str, 0f);
		};
		val.Default = "5";
		array[90] = val;
		val = new Command();
		val.Name = "fire";
		val.Parent = "catapult";
		val.FullName = "catapult.fire";
		val.ServerAdmin = true;
		val.Variable = false;
		val.Call = delegate(Arg arg)
		{
			Catapult.fire(arg);
		};
		array[91] = val;
		val = new Command();
		val.Name = "reload";
		val.Parent = "catapult";
		val.FullName = "catapult.reload";
		val.ServerAdmin = true;
		val.Variable = false;
		val.Call = delegate(Arg arg)
		{
			Catapult.reload(arg);
		};
		array[92] = val;
		val = new Command();
		val.Name = "camera_disable_seconds";
		val.Parent = "cctv";
		val.FullName = "cctv.camera_disable_seconds";
		val.ServerAdmin = true;
		val.Variable = true;
		val.GetOveride = () => CCTV_RC.CameraDisableSeconds.ToString();
		val.SetOveride = delegate(string str)
		{
			CCTV_RC.CameraDisableSeconds = StringExtensions.ToFloat(str, 0f);
		};
		array[93] = val;
		val = new Command();
		val.Name = "population";
		val.Parent = "chicken";
		val.FullName = "chicken.population";
		val.ServerAdmin = true;
		val.Description = "Population active on the server, per square km";
		val.ShowInAdminUI = true;
		val.Variable = true;
		val.GetOveride = () => Chicken.Population.ToString();
		val.SetOveride = delegate(string str)
		{
			Chicken.Population = StringExtensions.ToFloat(str, 0f);
		};
		array[94] = val;
		val = new Command();
		val.Name = "hideobjects";
		val.Parent = "cinematicentity";
		val.FullName = "cinematicentity.hideobjects";
		val.ServerAdmin = true;
		val.Description = "Hides cinematic entities by group (0= none, 1= lights, 2= BGs, 3= props, 4= misc)";
		val.Variable = false;
		val.Call = delegate(Arg arg)
		{
			CinematicEntity.HideObjects(arg);
		};
		array[95] = val;
		val = new Command();
		val.Name = "clothloddist";
		val.Parent = "clothlod";
		val.FullName = "clothlod.clothloddist";
		val.ServerAdmin = true;
		val.Description = "distance cloth will simulate until";
		val.Variable = true;
		val.GetOveride = () => ClothLOD.clothLODDist.ToString();
		val.SetOveride = delegate(string str)
		{
			ClothLOD.clothLODDist = StringExtensions.ToFloat(str, 0f);
		};
		array[96] = val;
		val = new Command();
		val.Name = "lockoutcooldown";
		val.Parent = "codelock";
		val.FullName = "codelock.lockoutcooldown";
		val.ServerAdmin = true;
		val.Variable = true;
		val.GetOveride = () => CodeLock.lockoutCooldown.ToString();
		val.SetOveride = delegate(string str)
		{
			CodeLock.lockoutCooldown = StringExtensions.ToFloat(str, 0f);
		};
		array[97] = val;
		val = new Command();
		val.Name = "maxfailedattempts";
		val.Parent = "codelock";
		val.FullName = "codelock.maxfailedattempts";
		val.ServerAdmin = true;
		val.Variable = true;
		val.GetOveride = () => CodeLock.maxFailedAttempts.ToString();
		val.SetOveride = delegate(string str)
		{
			CodeLock.maxFailedAttempts = StringExtensions.ToFloat(str, 0f);
		};
		array[98] = val;
		val = new Command();
		val.Name = "echo";
		val.Parent = "commands";
		val.FullName = "commands.echo";
		val.ServerAdmin = true;
		val.Variable = false;
		val.Call = delegate(Arg arg)
		{
			Commands.Echo(arg.FullString);
		};
		array[99] = val;
		val = new Command();
		val.Name = "find";
		val.Parent = "commands";
		val.FullName = "commands.find";
		val.ServerAdmin = true;
		val.Variable = false;
		val.Call = delegate(Arg arg)
		{
			Commands.Find(arg);
		};
		array[100] = val;
		val = new Command();
		val.Name = "pool_stats";
		val.Parent = "camerarenderermanager";
		val.FullName = "camerarenderermanager.pool_stats";
		val.ServerAdmin = true;
		val.Variable = false;
		val.Call = delegate(Arg arg)
		{
			CameraRendererManager.pool_stats(arg);
		};
		array[101] = val;
		val = new Command();
		val.Name = "completionframebudgetms";
		val.Parent = "camerarenderer";
		val.FullName = "camerarenderer.completionframebudgetms";
		val.ServerAdmin = true;
		val.Variable = true;
		val.GetOveride = () => CameraRenderer.completionFrameBudgetMs.ToString();
		val.SetOveride = delegate(string str)
		{
			CameraRenderer.completionFrameBudgetMs = StringExtensions.ToFloat(str, 0f);
		};
		array[102] = val;
		val = new Command();
		val.Name = "enabled";
		val.Parent = "camerarenderer";
		val.FullName = "camerarenderer.enabled";
		val.ServerAdmin = true;
		val.Variable = true;
		val.GetOveride = () => CameraRenderer.enabled.ToString();
		val.SetOveride = delegate(string str)
		{
			CameraRenderer.enabled = StringExtensions.ToBool(str);
		};
		array[103] = val;
		val = new Command();
		val.Name = "entitymaxage";
		val.Parent = "camerarenderer";
		val.FullName = "camerarenderer.entitymaxage";
		val.ServerAdmin = true;
		val.Variable = true;
		val.GetOveride = () => CameraRenderer.entityMaxAge.ToString();
		val.SetOveride = delegate(string str)
		{
			CameraRenderer.entityMaxAge = StringExtensions.ToInt(str, 0);
		};
		array[104] = val;
		val = new Command();
		val.Name = "entitymaxdistance";
		val.Parent = "camerarenderer";
		val.FullName = "camerarenderer.entitymaxdistance";
		val.ServerAdmin = true;
		val.Variable = true;
		val.GetOveride = () => CameraRenderer.entityMaxDistance.ToString();
		val.SetOveride = delegate(string str)
		{
			CameraRenderer.entityMaxDistance = StringExtensions.ToInt(str, 0);
		};
		array[105] = val;
		val = new Command();
		val.Name = "farplane";
		val.Parent = "camerarenderer";
		val.FullName = "camerarenderer.farplane";
		val.ServerAdmin = true;
		val.Variable = true;
		val.GetOveride = () => CameraRenderer.farPlane.ToString();
		val.SetOveride = delegate(string str)
		{
			CameraRenderer.farPlane = StringExtensions.ToFloat(str, 0f);
		};
		array[106] = val;
		val = new Command();
		val.Name = "height";
		val.Parent = "camerarenderer";
		val.FullName = "camerarenderer.height";
		val.ServerAdmin = true;
		val.Variable = true;
		val.GetOveride = () => CameraRenderer.height.ToString();
		val.SetOveride = delegate(string str)
		{
			CameraRenderer.height = StringExtensions.ToInt(str, 0);
		};
		array[107] = val;
		val = new Command();
		val.Name = "layermask";
		val.Parent = "camerarenderer";
		val.FullName = "camerarenderer.layermask";
		val.ServerAdmin = true;
		val.Variable = true;
		val.GetOveride = () => CameraRenderer.layerMask.ToString();
		val.SetOveride = delegate(string str)
		{
			CameraRenderer.layerMask = StringExtensions.ToInt(str, 0);
		};
		array[108] = val;
		val = new Command();
		val.Name = "maxraysperframe";
		val.Parent = "camerarenderer";
		val.FullName = "camerarenderer.maxraysperframe";
		val.ServerAdmin = true;
		val.Variable = true;
		val.GetOveride = () => CameraRenderer.maxRaysPerFrame.ToString();
		val.SetOveride = delegate(string str)
		{
			CameraRenderer.maxRaysPerFrame = StringExtensions.ToInt(str, 0);
		};
		array[109] = val;
		val = new Command();
		val.Name = "maxrendersperframe";
		val.Parent = "camerarenderer";
		val.FullName = "camerarenderer.maxrendersperframe";
		val.ServerAdmin = true;
		val.Variable = true;
		val.GetOveride = () => CameraRenderer.maxRendersPerFrame.ToString();
		val.SetOveride = delegate(string str)
		{
			CameraRenderer.maxRendersPerFrame = StringExtensions.ToInt(str, 0);
		};
		array[110] = val;
		val = new Command();
		val.Name = "nearplane";
		val.Parent = "camerarenderer";
		val.FullName = "camerarenderer.nearplane";
		val.ServerAdmin = true;
		val.Variable = true;
		val.GetOveride = () => CameraRenderer.nearPlane.ToString();
		val.SetOveride = delegate(string str)
		{
			CameraRenderer.nearPlane = StringExtensions.ToFloat(str, 0f);
		};
		array[111] = val;
		val = new Command();
		val.Name = "playermaxdistance";
		val.Parent = "camerarenderer";
		val.FullName = "camerarenderer.playermaxdistance";
		val.ServerAdmin = true;
		val.Variable = true;
		val.GetOveride = () => CameraRenderer.playerMaxDistance.ToString();
		val.SetOveride = delegate(string str)
		{
			CameraRenderer.playerMaxDistance = StringExtensions.ToInt(str, 0);
		};
		array[112] = val;
		val = new Command();
		val.Name = "playernamemaxdistance";
		val.Parent = "camerarenderer";
		val.FullName = "camerarenderer.playernamemaxdistance";
		val.ServerAdmin = true;
		val.Variable = true;
		val.GetOveride = () => CameraRenderer.playerNameMaxDistance.ToString();
		val.SetOveride = delegate(string str)
		{
			CameraRenderer.playerNameMaxDistance = StringExtensions.ToInt(str, 0);
		};
		array[113] = val;
		val = new Command();
		val.Name = "renderinterval";
		val.Parent = "camerarenderer";
		val.FullName = "camerarenderer.renderinterval";
		val.ServerAdmin = true;
		val.Variable = true;
		val.GetOveride = () => CameraRenderer.renderInterval.ToString();
		val.SetOveride = delegate(string str)
		{
			CameraRenderer.renderInterval = StringExtensions.ToFloat(str, 0f);
		};
		array[114] = val;
		val = new Command();
		val.Name = "samplesperrender";
		val.Parent = "camerarenderer";
		val.FullName = "camerarenderer.samplesperrender";
		val.ServerAdmin = true;
		val.Variable = true;
		val.GetOveride = () => CameraRenderer.samplesPerRender.ToString();
		val.SetOveride = delegate(string str)
		{
			CameraRenderer.samplesPerRender = StringExtensions.ToInt(str, 0);
		};
		array[115] = val;
		val = new Command();
		val.Name = "verticalfov";
		val.Parent = "camerarenderer";
		val.FullName = "camerarenderer.verticalfov";
		val.ServerAdmin = true;
		val.Variable = true;
		val.GetOveride = () => CameraRenderer.verticalFov.ToString();
		val.SetOveride = delegate(string str)
		{
			CameraRenderer.verticalFov = StringExtensions.ToFloat(str, 0f);
		};
		array[116] = val;
		val = new Command();
		val.Name = "width";
		val.Parent = "camerarenderer";
		val.FullName = "camerarenderer.width";
		val.ServerAdmin = true;
		val.Variable = true;
		val.GetOveride = () => CameraRenderer.width.ToString();
		val.SetOveride = delegate(string str)
		{
			CameraRenderer.width = StringExtensions.ToInt(str, 0);
		};
		array[117] = val;
		val = new Command();
		val.Name = "add_wallpaper_radius";
		val.Parent = "global";
		val.FullName = "global.add_wallpaper_radius";
		val.ServerAdmin = true;
		val.Description = "add_wallpaper_radius 'wallpaper' 'radius'";
		val.Variable = false;
		val.Call = delegate(Arg arg)
		{
			Admin.add_wallpaper_radius(arg);
		};
		array[118] = val;
		val = new Command();
		val.Name = "adminui_deleteugccontent";
		val.Parent = "global";
		val.FullName = "global.adminui_deleteugccontent";
		val.ServerAdmin = true;
		val.Variable = false;
		val.Call = delegate(Arg arg)
		{
			Admin.AdminUI_DeleteUGCContent(arg);
		};
		array[119] = val;
		val = new Command();
		val.Name = "adminui_fullrefresh";
		val.Parent = "global";
		val.FullName = "global.adminui_fullrefresh";
		val.ServerAdmin = true;
		val.Variable = false;
		val.Call = delegate(Arg arg)
		{
			Admin.AdminUI_FullRefresh(arg);
		};
		array[120] = val;
		val = new Command();
		val.Name = "adminui_requestfireworkpattern";
		val.Parent = "global";
		val.FullName = "global.adminui_requestfireworkpattern";
		val.ServerAdmin = true;
		val.Variable = false;
		val.Call = delegate(Arg arg)
		{
			Admin.AdminUI_RequestFireworkPattern(arg);
		};
		array[121] = val;
		val = new Command();
		val.Name = "adminui_requestplayerlist";
		val.Parent = "global";
		val.FullName = "global.adminui_requestplayerlist";
		val.ServerAdmin = true;
		val.Variable = false;
		val.Call = delegate(Arg arg)
		{
			Admin.AdminUI_RequestPlayerList(arg);
		};
		array[122] = val;
		val = new Command();
		val.Name = "adminui_requestserverconvars";
		val.Parent = "global";
		val.FullName = "global.adminui_requestserverconvars";
		val.ServerAdmin = true;
		val.Variable = false;
		val.Call = delegate(Arg arg)
		{
			Admin.AdminUI_RequestServerConvars(arg);
		};
		array[123] = val;
		val = new Command();
		val.Name = "adminui_requestserverinfo";
		val.Parent = "global";
		val.FullName = "global.adminui_requestserverinfo";
		val.ServerAdmin = true;
		val.Variable = false;
		val.Call = delegate(Arg arg)
		{
			Admin.AdminUI_RequestServerInfo(arg);
		};
		array[124] = val;
		val = new Command();
		val.Name = "adminui_requestugccontent";
		val.Parent = "global";
		val.FullName = "global.adminui_requestugccontent";
		val.ServerAdmin = true;
		val.Variable = false;
		val.Call = delegate(Arg arg)
		{
			Admin.AdminUI_RequestUGCContent(arg);
		};
		array[125] = val;
		val = new Command();
		val.Name = "adminui_requestugclist";
		val.Parent = "global";
		val.FullName = "global.adminui_requestugclist";
		val.ServerAdmin = true;
		val.Variable = false;
		val.Call = delegate(Arg arg)
		{
			Admin.AdminUI_RequestUGCList(arg);
		};
		array[126] = val;
		val = new Command();
		val.Name = "allowadminui";
		val.Parent = "global";
		val.FullName = "global.allowadminui";
		val.ServerAdmin = true;
		val.ClientAdmin = true;
		val.Client = true;
		val.Description = "Controls whether the in-game admin UI is displayed to admins";
		val.Replicated = true;
		val.Variable = true;
		val.GetOveride = () => Admin.allowAdminUI.ToString();
		val.SetOveride = delegate(string str)
		{
			Admin.allowAdminUI = StringExtensions.ToBool(str);
		};
		val.Default = "True";
		array[127] = val;
		val = new Command();
		val.Name = "authcount";
		val.Parent = "global";
		val.FullName = "global.authcount";
		val.ServerAdmin = true;
		val.Description = "Returns all entities that the provided player is authed to (TC's, locks, etc), supports --json";
		val.Variable = false;
		val.Call = delegate(Arg arg)
		{
			Admin.authcount(arg);
		};
		array[128] = val;
		val = new Command();
		val.Name = "authradius";
		val.Parent = "global";
		val.FullName = "global.authradius";
		val.ServerAdmin = true;
		val.Variable = false;
		val.Call = delegate(Arg arg)
		{
			Admin.authradius(arg);
		};
		array[129] = val;
		val = new Command();
		val.Name = "authradius_multi";
		val.Parent = "global";
		val.FullName = "global.authradius_multi";
		val.ServerAdmin = true;
		val.Variable = false;
		val.Call = delegate(Arg arg)
		{
			Admin.authradius_multi(arg);
		};
		array[130] = val;
		val = new Command();
		val.Name = "authradius_radius";
		val.Parent = "global";
		val.FullName = "global.authradius_radius";
		val.ServerAdmin = true;
		val.Variable = false;
		val.Call = delegate(Arg arg)
		{
			Admin.authradius_radius(arg);
		};
		array[131] = val;
		val = new Command();
		val.Name = "ban";
		val.Parent = "global";
		val.FullName = "global.ban";
		val.ServerAdmin = true;
		val.Description = "ban <player> <reason> [optional duration]";
		val.Variable = false;
		val.Call = delegate(Arg arg)
		{
			Admin.ban(arg);
		};
		array[132] = val;
		val = new Command();
		val.Name = "banid";
		val.Parent = "global";
		val.FullName = "global.banid";
		val.ServerAdmin = true;
		val.Description = "banid <steamid> <username> <reason> [optional duration]";
		val.Variable = false;
		val.Call = delegate(Arg arg)
		{
			Admin.banid(arg);
		};
		array[133] = val;
		val = new Command();
		val.Name = "banlist";
		val.Parent = "global";
		val.FullName = "global.banlist";
		val.ServerAdmin = true;
		val.Description = "List of banned users (sourceds compat)";
		val.Variable = false;
		val.Call = delegate(Arg arg)
		{
			Admin.banlist(arg);
		};
		array[134] = val;
		val = new Command();
		val.Name = "banlistex";
		val.Parent = "global";
		val.FullName = "global.banlistex";
		val.ServerAdmin = true;
		val.Description = "List of banned users - shows reasons and usernames";
		val.Variable = false;
		val.Call = delegate(Arg arg)
		{
			Admin.banlistex(arg);
		};
		array[135] = val;
		val = new Command();
		val.Name = "bans";
		val.Parent = "global";
		val.FullName = "global.bans";
		val.ServerAdmin = true;
		val.Description = "List of banned users";
		val.Variable = false;
		val.Call = delegate(Arg arg)
		{
			ServerUsers.User[] array2 = Admin.Bans();
			arg.ReplyWithObject((object)array2);
		};
		array[136] = val;
		val = new Command();
		val.Name = "buildinfo";
		val.Parent = "global";
		val.FullName = "global.buildinfo";
		val.ServerAdmin = true;
		val.Description = "Get information about this build";
		val.Variable = false;
		val.Call = delegate(Arg arg)
		{
			BuildInfo val2 = Admin.BuildInfo();
			arg.ReplyWithObject((object)val2);
		};
		array[137] = val;
		val = new Command();
		val.Name = "carstats";
		val.Parent = "global";
		val.FullName = "global.carstats";
		val.ServerAdmin = true;
		val.Description = "Get information about all the cars in the world";
		val.Variable = false;
		val.Call = delegate(Arg arg)
		{
			Admin.carstats(arg);
		};
		array[138] = val;
		val = new Command();
		val.Name = "change_wallpaper_radius";
		val.Parent = "global";
		val.FullName = "global.change_wallpaper_radius";
		val.ServerAdmin = true;
		val.Description = "change_wallpaper_radius 'wallpaper' 'radius'";
		val.Variable = false;
		val.Call = delegate(Arg arg)
		{
			Admin.change_wallpaper_radius(arg);
		};
		array[139] = val;
		val = new Command();
		val.Name = "clear_wallpaper_radius";
		val.Parent = "global";
		val.FullName = "global.clear_wallpaper_radius";
		val.ServerAdmin = true;
		val.Description = "clear_wallpaper_radius 'radius'";
		val.Variable = false;
		val.Call = delegate(Arg arg)
		{
			Admin.clear_wallpaper_radius(arg);
		};
		array[140] = val;
		val = new Command();
		val.Name = "clearugcbyplayer";
		val.Parent = "global";
		val.FullName = "global.clearugcbyplayer";
		val.ServerAdmin = true;
		val.Variable = false;
		val.Call = delegate(Arg arg)
		{
			Admin.clearUGCByPlayer(arg);
		};
		array[141] = val;
		val = new Command();
		val.Name = "clearugcentitiesinrange";
		val.Parent = "global";
		val.FullName = "global.clearugcentitiesinrange";
		val.ServerAdmin = true;
		val.Variable = false;
		val.Call = delegate(Arg arg)
		{
			Admin.clearugcentitiesinrange(arg);
		};
		array[142] = val;
		val = new Command();
		val.Name = "clearugcentity";
		val.Parent = "global";
		val.FullName = "global.clearugcentity";
		val.ServerAdmin = true;
		val.Variable = false;
		val.Call = delegate(Arg arg)
		{
			Admin.clearugcentity(arg);
		};
		array[143] = val;
		val = new Command();
		val.Name = "clearvendingmachinenamescontaining";
		val.Parent = "global";
		val.FullName = "global.clearvendingmachinenamescontaining";
		val.ServerAdmin = true;
		val.Variable = false;
		val.Call = delegate(Arg arg)
		{
			Admin.clearVendingMachineNamesContaining(arg);
		};
		array[144] = val;
		val = new Command();
		val.Name = "clientperf";
		val.Parent = "global";
		val.FullName = "global.clientperf";
		val.ServerAdmin = true;
		val.Variable = false;
		val.Call = delegate(Arg arg)
		{
			Admin.clientperf(arg);
		};
		array[145] = val;
		val = new Command();
		val.Name = "deauthradius";
		val.Parent = "global";
		val.FullName = "global.deauthradius";
		val.ServerAdmin = true;
		val.Variable = false;
		val.Call = delegate(Arg arg)
		{
			Admin.deauthradius(arg);
		};
		array[146] = val;
		val = new Command();
		val.Name = "deauthradius_multi";
		val.Parent = "global";
		val.FullName = "global.deauthradius_multi";
		val.ServerAdmin = true;
		val.Variable = false;
		val.Call = delegate(Arg arg)
		{
			Admin.deauthradius_multi(arg);
		};
		array[147] = val;
		val = new Command();
		val.Name = "deauthradius_radius";
		val.Parent = "global";
		val.FullName = "global.deauthradius_radius";
		val.ServerAdmin = true;
		val.Variable = false;
		val.Call = delegate(Arg arg)
		{
			Admin.deauthradius_radius(arg);
		};
		array[148] = val;
		val = new Command();
		val.Name = "entcount";
		val.Parent = "global";
		val.FullName = "global.entcount";
		val.ServerAdmin = true;
		val.Description = "Returns all entities that the provided player has placed, supports --json";
		val.Variable = false;
		val.Call = delegate(Arg arg)
		{
			Admin.entcount(arg);
		};
		array[149] = val;
		val = new Command();
		val.Name = "entid";
		val.Parent = "global";
		val.FullName = "global.entid";
		val.ServerAdmin = true;
		val.Variable = false;
		val.Call = delegate(Arg arg)
		{
			Admin.entid(arg);
		};
		array[150] = val;
		val = new Command();
		val.Name = "getugcinfo";
		val.Parent = "global";
		val.FullName = "global.getugcinfo";
		val.ServerAdmin = true;
		val.Variable = false;
		val.Call = delegate(Arg arg)
		{
			Admin.getugcinfo(arg);
		};
		array[151] = val;
		val = new Command();
		val.Name = "injureplayer";
		val.Parent = "global";
		val.FullName = "global.injureplayer";
		val.ServerAdmin = true;
		val.Variable = false;
		val.Call = delegate(Arg arg)
		{
			Admin.injureplayer(arg);
		};
		array[152] = val;
		val = new Command();
		val.Name = "kick";
		val.Parent = "global";
		val.FullName = "global.kick";
		val.ServerAdmin = true;
		val.Variable = false;
		val.Call = delegate(Arg arg)
		{
			Admin.kick(arg);
		};
		array[153] = val;
		val = new Command();
		val.Name = "kickall";
		val.Parent = "global";
		val.FullName = "global.kickall";
		val.ServerAdmin = true;
		val.Variable = false;
		val.Call = delegate(Arg arg)
		{
			Admin.kickall(arg);
		};
		array[154] = val;
		val = new Command();
		val.Name = "killallplayers";
		val.Parent = "global";
		val.FullName = "global.killallplayers";
		val.ServerAdmin = true;
		val.Variable = false;
		val.Call = delegate(Arg arg)
		{
			Admin.killallplayers(arg);
		};
		array[155] = val;
		val = new Command();
		val.Name = "killplayer";
		val.Parent = "global";
		val.FullName = "global.killplayer";
		val.ServerAdmin = true;
		val.Variable = false;
		val.Call = delegate(Arg arg)
		{
			Admin.killplayer(arg);
		};
		array[156] = val;
		val = new Command();
		val.Name = "listid";
		val.Parent = "global";
		val.FullName = "global.listid";
		val.ServerAdmin = true;
		val.Description = "List of banned users, by ID (sourceds compat)";
		val.Variable = false;
		val.Call = delegate(Arg arg)
		{
			Admin.listid(arg);
		};
		array[157] = val;
		val = new Command();
		val.Name = "moderatorid";
		val.Parent = "global";
		val.FullName = "global.moderatorid";
		val.ServerAdmin = true;
		val.Variable = false;
		val.Call = delegate(Arg arg)
		{
			Admin.moderatorid(arg);
		};
		array[158] = val;
		val = new Command();
		val.Name = "mute";
		val.Parent = "global";
		val.FullName = "global.mute";
		val.ServerAdmin = true;
		val.Variable = false;
		val.Call = delegate(Arg arg)
		{
			Admin.mute(arg);
		};
		array[159] = val;
		val = new Command();
		val.Name = "mutelist";
		val.Parent = "global";
		val.FullName = "global.mutelist";
		val.ServerAdmin = true;
		val.Description = "Print a list of currently muted players";
		val.Variable = false;
		val.Call = delegate(Arg arg)
		{
			Admin.mutelist(arg);
		};
		array[160] = val;
		val = new Command();
		val.Name = "ownerid";
		val.Parent = "global";
		val.FullName = "global.ownerid";
		val.ServerAdmin = true;
		val.Variable = false;
		val.Call = delegate(Arg arg)
		{
			Admin.ownerid(arg);
		};
		array[161] = val;
		val = new Command();
		val.Name = "playerlist";
		val.Parent = "global";
		val.FullName = "global.playerlist";
		val.ServerAdmin = true;
		val.Description = "Get a list of players";
		val.Variable = false;
		val.Call = delegate(Arg arg)
		{
			Admin.PlayerInfo[] array3 = Admin.playerlist();
			arg.ReplyWithObject((object)array3);
		};
		array[162] = val;
		val = new Command();
		val.Name = "players";
		val.Parent = "global";
		val.FullName = "global.players";
		val.ServerAdmin = true;
		val.Description = "Print out currently connected clients etc";
		val.Variable = false;
		val.Call = delegate(Arg arg)
		{
			Admin.players(arg);
		};
		array[163] = val;
		val = new Command();
		val.Name = "recoverplayer";
		val.Parent = "global";
		val.FullName = "global.recoverplayer";
		val.ServerAdmin = true;
		val.Variable = false;
		val.Call = delegate(Arg arg)
		{
			Admin.recoverplayer(arg);
		};
		array[164] = val;
		val = new Command();
		val.Name = "removemoderator";
		val.Parent = "global";
		val.FullName = "global.removemoderator";
		val.ServerAdmin = true;
		val.Variable = false;
		val.Call = delegate(Arg arg)
		{
			Admin.removemoderator(arg);
		};
		array[165] = val;
		val = new Command();
		val.Name = "removeowner";
		val.Parent = "global";
		val.FullName = "global.removeowner";
		val.ServerAdmin = true;
		val.Variable = false;
		val.Call = delegate(Arg arg)
		{
			Admin.removeowner(arg);
		};
		array[166] = val;
		val = new Command();
		val.Name = "removeskipqueue";
		val.Parent = "global";
		val.FullName = "global.removeskipqueue";
		val.ServerAdmin = true;
		val.Description = "Removes skip queue permission from a SteamID";
		val.Variable = false;
		val.Call = delegate(Arg arg)
		{
			Admin.removeskipqueue(arg);
		};
		array[167] = val;
		val = new Command();
		val.Name = "say";
		val.Parent = "global";
		val.FullName = "global.say";
		val.ServerAdmin = true;
		val.Description = "Sends a message in chat";
		val.Variable = false;
		val.Call = delegate(Arg arg)
		{
			Admin.say(arg);
		};
		array[168] = val;
		val = new Command();
		val.Name = "serverinfo";
		val.Parent = "global";
		val.FullName = "global.serverinfo";
		val.ServerAdmin = true;
		val.Description = "Get a list of information about the server";
		val.Variable = false;
		val.Call = delegate(Arg arg)
		{
			Admin.ServerInfoOutput serverInfoOutput = Admin.ServerInfo();
			arg.ReplyWithObject((object)serverInfoOutput);
		};
		array[169] = val;
		val = new Command();
		val.Name = "skick";
		val.Parent = "global";
		val.FullName = "global.skick";
		val.ServerAdmin = true;
		val.Variable = false;
		val.Call = delegate(Arg arg)
		{
			Admin.skick(arg);
		};
		array[170] = val;
		val = new Command();
		val.Name = "skin_looking";
		val.Parent = "global";
		val.FullName = "global.skin_looking";
		val.ServerAdmin = true;
		val.Description = "<skin>";
		val.Variable = false;
		val.Call = delegate(Arg arg)
		{
			Admin.skin_looking(arg);
		};
		array[171] = val;
		val = new Command();
		val.Name = "skin_radius";
		val.Parent = "global";
		val.FullName = "global.skin_radius";
		val.ServerAdmin = true;
		val.Description = "skin_radius 'skin' 'radius'";
		val.Variable = false;
		val.Call = delegate(Arg arg)
		{
			Admin.skin_radius(arg);
		};
		array[172] = val;
		val = new Command();
		val.Name = "skipqueue";
		val.Parent = "global";
		val.FullName = "global.skipqueue";
		val.ServerAdmin = true;
		val.Variable = false;
		val.Call = delegate(Arg arg)
		{
			Admin.skipqueue(arg);
		};
		array[173] = val;
		val = new Command();
		val.Name = "skipqueueid";
		val.Parent = "global";
		val.FullName = "global.skipqueueid";
		val.ServerAdmin = true;
		val.Description = "Adds skip queue permissions to a SteamID";
		val.Variable = false;
		val.Call = delegate(Arg arg)
		{
			Admin.skipqueueid(arg);
		};
		array[174] = val;
		val = new Command();
		val.Name = "sleepingusers";
		val.Parent = "global";
		val.FullName = "global.sleepingusers";
		val.ServerAdmin = true;
		val.Description = "Show user info for players on server.";
		val.Variable = false;
		val.Call = delegate(Arg arg)
		{
			Admin.sleepingusers(arg);
		};
		array[175] = val;
		val = new Command();
		val.Name = "sleepingusersinrange";
		val.Parent = "global";
		val.FullName = "global.sleepingusersinrange";
		val.ServerAdmin = true;
		val.Description = "Show user info for sleeping players on server in range of the player.";
		val.Variable = false;
		val.Call = delegate(Arg arg)
		{
			Admin.sleepingusersinrange(arg);
		};
		array[176] = val;
		val = new Command();
		val.Name = "stats";
		val.Parent = "global";
		val.FullName = "global.stats";
		val.ServerAdmin = true;
		val.Description = "Print out stats of currently connected clients";
		val.Variable = false;
		val.Call = delegate(Arg arg)
		{
			Admin.stats(arg);
		};
		array[177] = val;
		val = new Command();
		val.Name = "status";
		val.Parent = "global";
		val.FullName = "global.status";
		val.ServerAdmin = true;
		val.Description = "Print out currently connected clients";
		val.Variable = false;
		val.Call = delegate(Arg arg)
		{
			Admin.status(arg);
		};
		array[178] = val;
		val = new Command();
		val.Name = "teaminfo";
		val.Parent = "global";
		val.FullName = "global.teaminfo";
		val.ServerAdmin = true;
		val.Variable = false;
		val.Call = delegate(Arg arg)
		{
			string text2 = Admin.teaminfo(arg);
			arg.ReplyWithObject((object)text2);
		};
		array[179] = val;
		val = new Command();
		val.Name = "unban";
		val.Parent = "global";
		val.FullName = "global.unban";
		val.ServerAdmin = true;
		val.Variable = false;
		val.Call = delegate(Arg arg)
		{
			Admin.unban(arg);
		};
		array[180] = val;
		val = new Command();
		val.Name = "unmute";
		val.Parent = "global";
		val.FullName = "global.unmute";
		val.ServerAdmin = true;
		val.Variable = false;
		val.Call = delegate(Arg arg)
		{
			Admin.unmute(arg);
		};
		array[181] = val;
		val = new Command();
		val.Name = "upgrade_looking";
		val.Parent = "global";
		val.FullName = "global.upgrade_looking";
		val.ServerAdmin = true;
		val.Description = "<grade>";
		val.Variable = false;
		val.Call = delegate(Arg arg)
		{
			Admin.upgrade_looking(arg);
		};
		array[182] = val;
		val = new Command();
		val.Name = "upgrade_radius";
		val.Parent = "global";
		val.FullName = "global.upgrade_radius";
		val.ServerAdmin = true;
		val.Description = "upgrade_radius 'grade' 'radius'";
		val.Variable = false;
		val.Call = delegate(Arg arg)
		{
			Admin.upgrade_radius(arg);
		};
		array[183] = val;
		val = new Command();
		val.Name = "users";
		val.Parent = "global";
		val.FullName = "global.users";
		val.ServerAdmin = true;
		val.Description = "Show user info for players on server.";
		val.Variable = false;
		val.Call = delegate(Arg arg)
		{
			Admin.users(arg);
		};
		array[184] = val;
		val = new Command();
		val.Name = "usersinrange";
		val.Parent = "global";
		val.FullName = "global.usersinrange";
		val.ServerAdmin = true;
		val.Description = "Show user info for players on server in range of the player.";
		val.Variable = false;
		val.Call = delegate(Arg arg)
		{
			Admin.usersinrange(arg);
		};
		array[185] = val;
		val = new Command();
		val.Name = "usersinrangeofplayer";
		val.Parent = "global";
		val.FullName = "global.usersinrangeofplayer";
		val.ServerAdmin = true;
		val.Description = "Show user info for players on server in range of the supplied player (eg. Jim 50)";
		val.Variable = false;
		val.Call = delegate(Arg arg)
		{
			Admin.usersinrangeofplayer(arg);
		};
		array[186] = val;
		val = new Command();
		val.Name = "accuratevisiondistance";
		val.Parent = "ai";
		val.FullName = "ai.accuratevisiondistance";
		val.ServerAdmin = true;
		val.Variable = true;
		val.GetOveride = () => AI.accuratevisiondistance.ToString();
		val.SetOveride = delegate(string str)
		{
			AI.accuratevisiondistance = StringExtensions.ToBool(str);
		};
		array[187] = val;
		val = new Command();
		val.Name = "addignoreplayer";
		val.Parent = "ai";
		val.FullName = "ai.addignoreplayer";
		val.ServerAdmin = true;
		val.Description = "Add a player (or command user if no player is specified) to the AIs ignore list.";
		val.Variable = false;
		val.Call = delegate(Arg arg)
		{
			AI.addignoreplayer(arg);
		};
		array[188] = val;
		val = new Command();
		val.Name = "aimedatangle";
		val.Parent = "ai";
		val.FullName = "ai.aimedatangle";
		val.ServerAdmin = true;
		val.Description = "The angle under which the AI will think it's being aimed at at by a player";
		val.Variable = true;
		val.GetOveride = () => AI.aimedAtAngle.ToString();
		val.SetOveride = delegate(string str)
		{
			AI.aimedAtAngle = StringExtensions.ToFloat(str, 0f);
		};
		array[189] = val;
		val = new Command();
		val.Name = "aizonestats";
		val.Parent = "ai";
		val.FullName = "ai.aizonestats";
		val.ServerAdmin = true;
		val.Variable = false;
		val.Call = delegate(Arg arg)
		{
			AI.aizonestats(arg);
		};
		array[190] = val;
		val = new Command();
		val.Name = "allowdesigning";
		val.Parent = "ai";
		val.FullName = "ai.allowdesigning";
		val.ServerAdmin = true;
		val.ClientAdmin = true;
		val.Client = true;
		val.Saved = true;
		val.Replicated = true;
		val.Variable = true;
		val.GetOveride = () => AI.allowdesigning.ToString();
		val.SetOveride = delegate(string str)
		{
			AI.allowdesigning = StringExtensions.ToBool(str);
		};
		val.Default = "True";
		array[191] = val;
		val = new Command();
		val.Name = "animal_ignore_food";
		val.Parent = "ai";
		val.FullName = "ai.animal_ignore_food";
		val.ServerAdmin = true;
		val.Description = "If animal_ignore_food is true, animals will not sense food sources or interact with them (server optimization). (default: true)";
		val.Variable = true;
		val.GetOveride = () => AI.animal_ignore_food.ToString();
		val.SetOveride = delegate(string str)
		{
			AI.animal_ignore_food = StringExtensions.ToBool(str);
		};
		array[192] = val;
		val = new Command();
		val.Name = "brainstats";
		val.Parent = "ai";
		val.FullName = "ai.brainstats";
		val.ServerAdmin = true;
		val.Variable = false;
		val.Call = delegate(Arg arg)
		{
			AI.brainstats(arg);
		};
		array[193] = val;
		val = new Command();
		val.Name = "clearignoredplayers";
		val.Parent = "ai";
		val.FullName = "ai.clearignoredplayers";
		val.ServerAdmin = true;
		val.Description = "Remove all players from the AIs ignore list.";
		val.Variable = false;
		val.Call = delegate(Arg arg)
		{
			AI.clearignoredplayers(arg);
		};
		array[194] = val;
		val = new Command();
		val.Name = "defaultinterpolationdelay";
		val.Parent = "ai";
		val.FullName = "ai.defaultinterpolationdelay";
		val.ServerAdmin = true;
		val.Variable = true;
		val.GetOveride = () => AI.defaultInterpolationDelay.ToString();
		val.SetOveride = delegate(string str)
		{
			AI.defaultInterpolationDelay = StringExtensions.ToFloat(str, 0f);
		};
		array[195] = val;
		val = new Command();
		val.Name = "effectaiweapons";
		val.Parent = "ai";
		val.FullName = "ai.effectaiweapons";
		val.ServerAdmin = true;
		val.Variable = true;
		val.GetOveride = () => AI.effectaiweapons.ToString();
		val.SetOveride = delegate(string str)
		{
			AI.effectaiweapons = StringExtensions.ToBool(str);
		};
		array[196] = val;
		val = new Command();
		val.Name = "frametime";
		val.Parent = "ai";
		val.FullName = "ai.frametime";
		val.ServerAdmin = true;
		val.Variable = true;
		val.GetOveride = () => AI.frametime.ToString();
		val.SetOveride = delegate(string str)
		{
			AI.frametime = StringExtensions.ToFloat(str, 0f);
		};
		array[197] = val;
		val = new Command();
		val.Name = "groups";
		val.Parent = "ai";
		val.FullName = "ai.groups";
		val.ServerAdmin = true;
		val.Variable = true;
		val.GetOveride = () => AI.groups.ToString();
		val.SetOveride = delegate(string str)
		{
			AI.groups = StringExtensions.ToBool(str);
		};
		array[198] = val;
		val = new Command();
		val.Name = "ignoreplayers";
		val.Parent = "ai";
		val.FullName = "ai.ignoreplayers";
		val.ServerAdmin = true;
		val.Variable = true;
		val.GetOveride = () => AI.ignoreplayers.ToString();
		val.SetOveride = delegate(string str)
		{
			AI.ignoreplayers = StringExtensions.ToBool(str);
		};
		array[199] = val;
		val = new Command();
		val.Name = "killanimals";
		val.Parent = "ai";
		val.FullName = "ai.killanimals";
		val.ServerAdmin = true;
		val.Variable = false;
		val.Call = delegate(Arg arg)
		{
			AI.killanimals(arg);
		};
		array[200] = val;
		val = new Command();
		val.Name = "killscientists";
		val.Parent = "ai";
		val.FullName = "ai.killscientists";
		val.ServerAdmin = true;
		val.Variable = false;
		val.Call = delegate(Arg arg)
		{
			AI.killscientists(arg);
		};
		array[201] = val;
		val = new Command();
		val.Name = "logissues";
		val.Parent = "ai";
		val.FullName = "ai.logissues";
		val.ServerAdmin = true;
		val.Variable = true;
		val.GetOveride = () => AI.logIssues.ToString();
		val.SetOveride = delegate(string str)
		{
			AI.logIssues = StringExtensions.ToBool(str);
		};
		array[202] = val;
		val = new Command();
		val.Name = "move";
		val.Parent = "ai";
		val.FullName = "ai.move";
		val.ServerAdmin = true;
		val.Variable = true;
		val.GetOveride = () => AI.move.ToString();
		val.SetOveride = delegate(string str)
		{
			AI.move = StringExtensions.ToBool(str);
		};
		array[203] = val;
		val = new Command();
		val.Name = "nav_carve_height";
		val.Parent = "ai";
		val.FullName = "ai.nav_carve_height";
		val.ServerAdmin = true;
		val.Description = "The height of the carve volume. (default: 2)";
		val.Variable = true;
		val.GetOveride = () => AI.nav_carve_height.ToString();
		val.SetOveride = delegate(string str)
		{
			AI.nav_carve_height = StringExtensions.ToFloat(str, 0f);
		};
		array[204] = val;
		val = new Command();
		val.Name = "nav_carve_min_base_size";
		val.Parent = "ai";
		val.FullName = "ai.nav_carve_min_base_size";
		val.ServerAdmin = true;
		val.Description = "The minimum size we allow a carving volume to be. (default: 2)";
		val.Variable = true;
		val.GetOveride = () => AI.nav_carve_min_base_size.ToString();
		val.SetOveride = delegate(string str)
		{
			AI.nav_carve_min_base_size = StringExtensions.ToFloat(str, 0f);
		};
		array[205] = val;
		val = new Command();
		val.Name = "nav_carve_min_building_blocks_to_apply_optimization";
		val.Parent = "ai";
		val.FullName = "ai.nav_carve_min_building_blocks_to_apply_optimization";
		val.ServerAdmin = true;
		val.Description = "The minimum number of building blocks a building needs to consist of for this optimization to be applied. (default: 25)";
		val.Variable = true;
		val.GetOveride = () => AI.nav_carve_min_building_blocks_to_apply_optimization.ToString();
		val.SetOveride = delegate(string str)
		{
			AI.nav_carve_min_building_blocks_to_apply_optimization = StringExtensions.ToInt(str, 0);
		};
		array[206] = val;
		val = new Command();
		val.Name = "nav_carve_size_multiplier";
		val.Parent = "ai";
		val.FullName = "ai.nav_carve_size_multiplier";
		val.ServerAdmin = true;
		val.Description = "The size multiplier applied to the size of the carve volume. The smaller the value, the tighter the skirt around foundation edges, but too small and animals can attack through walls. (default: 4)";
		val.Variable = true;
		val.GetOveride = () => AI.nav_carve_size_multiplier.ToString();
		val.SetOveride = delegate(string str)
		{
			AI.nav_carve_size_multiplier = StringExtensions.ToFloat(str, 0f);
		};
		array[207] = val;
		val = new Command();
		val.Name = "nav_carve_use_building_optimization";
		val.Parent = "ai";
		val.FullName = "ai.nav_carve_use_building_optimization";
		val.ServerAdmin = true;
		val.Description = "If nav_carve_use_building_optimization is true, we attempt to reduce the amount of navmesh carves for a building. (default: false)";
		val.Variable = true;
		val.GetOveride = () => AI.nav_carve_use_building_optimization.ToString();
		val.SetOveride = delegate(string str)
		{
			AI.nav_carve_use_building_optimization = StringExtensions.ToBool(str);
		};
		array[208] = val;
		val = new Command();
		val.Name = "navthink";
		val.Parent = "ai";
		val.FullName = "ai.navthink";
		val.ServerAdmin = true;
		val.Variable = true;
		val.GetOveride = () => AI.navthink.ToString();
		val.SetOveride = delegate(string str)
		{
			AI.navthink = StringExtensions.ToBool(str);
		};
		array[209] = val;
		val = new Command();
		val.Name = "npc_alertness_drain_rate";
		val.Parent = "ai";
		val.FullName = "ai.npc_alertness_drain_rate";
		val.ServerAdmin = true;
		val.Description = "npc_alertness_drain_rate define the rate at which we drain the alertness level of an NPC when there are no enemies in sight. (Default: 0.01)";
		val.Variable = true;
		val.GetOveride = () => AI.npc_alertness_drain_rate.ToString();
		val.SetOveride = delegate(string str)
		{
			AI.npc_alertness_drain_rate = StringExtensions.ToFloat(str, 0f);
		};
		array[210] = val;
		val = new Command();
		val.Name = "npc_alertness_to_aim_modifier";
		val.Parent = "ai";
		val.FullName = "ai.npc_alertness_to_aim_modifier";
		val.ServerAdmin = true;
		val.Description = "This is multiplied with the current alertness (0-10) to decide how long it will take for the NPC to deliberately miss again. (default: 0.33)";
		val.Variable = true;
		val.GetOveride = () => AI.npc_alertness_to_aim_modifier.ToString();
		val.SetOveride = delegate(string str)
		{
			AI.npc_alertness_to_aim_modifier = StringExtensions.ToFloat(str, 0f);
		};
		array[211] = val;
		val = new Command();
		val.Name = "npc_alertness_zero_detection_mod";
		val.Parent = "ai";
		val.FullName = "ai.npc_alertness_zero_detection_mod";
		val.ServerAdmin = true;
		val.Description = "npc_alertness_zero_detection_mod define the threshold of visibility required to detect an enemy when alertness is zero. (Default: 0.5)";
		val.Variable = true;
		val.GetOveride = () => AI.npc_alertness_zero_detection_mod.ToString();
		val.SetOveride = delegate(string str)
		{
			AI.npc_alertness_zero_detection_mod = StringExtensions.ToFloat(str, 0f);
		};
		array[212] = val;
		val = new Command();
		val.Name = "npc_check_spawner_is_on_navmesh";
		val.Parent = "ai";
		val.FullName = "ai.npc_check_spawner_is_on_navmesh";
		val.ServerAdmin = true;
		val.Variable = true;
		val.GetOveride = () => AI.npc_check_spawner_is_on_navmesh.ToString();
		val.SetOveride = delegate(string str)
		{
			AI.npc_check_spawner_is_on_navmesh = StringExtensions.ToBool(str);
		};
		array[213] = val;
		val = new Command();
		val.Name = "npc_cover_compromised_cooldown";
		val.Parent = "ai";
		val.FullName = "ai.npc_cover_compromised_cooldown";
		val.ServerAdmin = true;
		val.Description = "npc_cover_compromised_cooldown defines how long a cover point is marked as compromised before it's cleared again for selection. (default: 10)";
		val.Variable = true;
		val.GetOveride = () => AI.npc_cover_compromised_cooldown.ToString();
		val.SetOveride = delegate(string str)
		{
			AI.npc_cover_compromised_cooldown = StringExtensions.ToFloat(str, 0f);
		};
		array[214] = val;
		val = new Command();
		val.Name = "npc_cover_info_tick_rate_multiplier";
		val.Parent = "ai";
		val.FullName = "ai.npc_cover_info_tick_rate_multiplier";
		val.ServerAdmin = true;
		val.Description = "The rate at which we gather information about available cover points. Minimum value is 1, as it multiplies with the tick-rate of the fixed AI tick rate of 0.1 (Default: 20)";
		val.Variable = true;
		val.GetOveride = () => AI.npc_cover_info_tick_rate_multiplier.ToString();
		val.SetOveride = delegate(string str)
		{
			AI.npc_cover_info_tick_rate_multiplier = StringExtensions.ToFloat(str, 0f);
		};
		array[215] = val;
		val = new Command();
		val.Name = "npc_cover_path_vs_straight_dist_max_diff";
		val.Parent = "ai";
		val.FullName = "ai.npc_cover_path_vs_straight_dist_max_diff";
		val.ServerAdmin = true;
		val.Description = "npc_cover_path_vs_straight_dist_max_diff defines what the maximum difference between straight-line distance and path distance can be when evaluating cover points. (default: 2)";
		val.Variable = true;
		val.GetOveride = () => AI.npc_cover_path_vs_straight_dist_max_diff.ToString();
		val.SetOveride = delegate(string str)
		{
			AI.npc_cover_path_vs_straight_dist_max_diff = StringExtensions.ToFloat(str, 0f);
		};
		array[216] = val;
		val = new Command();
		val.Name = "npc_cover_use_path_distance";
		val.Parent = "ai";
		val.FullName = "ai.npc_cover_use_path_distance";
		val.ServerAdmin = true;
		val.Description = "If npc_cover_use_path_distance is set to true then npcs will look at the distance between the cover point and their target using the path between the two, rather than the straight-line distance.";
		val.Variable = true;
		val.GetOveride = () => AI.npc_cover_use_path_distance.ToString();
		val.SetOveride = delegate(string str)
		{
			AI.npc_cover_use_path_distance = StringExtensions.ToBool(str);
		};
		array[217] = val;
		val = new Command();
		val.Name = "npc_deliberate_hit_randomizer";
		val.Parent = "ai";
		val.FullName = "ai.npc_deliberate_hit_randomizer";
		val.ServerAdmin = true;
		val.Description = "The percentage away from a maximum miss the randomizer is allowed to travel when shooting to deliberately hit the target (we don't want perfect hits with every shot). (default: 0.85f)";
		val.Variable = true;
		val.GetOveride = () => AI.npc_deliberate_hit_randomizer.ToString();
		val.SetOveride = delegate(string str)
		{
			AI.npc_deliberate_hit_randomizer = StringExtensions.ToFloat(str, 0f);
		};
		array[218] = val;
		val = new Command();
		val.Name = "npc_deliberate_miss_offset_multiplier";
		val.Parent = "ai";
		val.FullName = "ai.npc_deliberate_miss_offset_multiplier";
		val.ServerAdmin = true;
		val.Description = "The offset with which the NPC will maximum miss the target. (default: 1.25)";
		val.Variable = true;
		val.GetOveride = () => AI.npc_deliberate_miss_offset_multiplier.ToString();
		val.SetOveride = delegate(string str)
		{
			AI.npc_deliberate_miss_offset_multiplier = StringExtensions.ToFloat(str, 0f);
		};
		array[219] = val;
		val = new Command();
		val.Name = "npc_deliberate_miss_to_hit_alignment_time";
		val.Parent = "ai";
		val.FullName = "ai.npc_deliberate_miss_to_hit_alignment_time";
		val.ServerAdmin = true;
		val.Description = "The time it takes for the NPC to deliberately miss to the time the NPC tries to hit its target. (default: 1.5)";
		val.Variable = true;
		val.GetOveride = () => AI.npc_deliberate_miss_to_hit_alignment_time.ToString();
		val.SetOveride = delegate(string str)
		{
			AI.npc_deliberate_miss_to_hit_alignment_time = StringExtensions.ToFloat(str, 0f);
		};
		array[220] = val;
		val = new Command();
		val.Name = "npc_door_trigger_size";
		val.Parent = "ai";
		val.FullName = "ai.npc_door_trigger_size";
		val.ServerAdmin = true;
		val.Description = "npc_door_trigger_size defines the size of the trigger box on doors that opens the door as npcs walk close to it (default: 1.5)";
		val.Variable = true;
		val.GetOveride = () => AI.npc_door_trigger_size.ToString();
		val.SetOveride = delegate(string str)
		{
			AI.npc_door_trigger_size = StringExtensions.ToFloat(str, 0f);
		};
		array[221] = val;
		val = new Command();
		val.Name = "npc_enable";
		val.Parent = "ai";
		val.FullName = "ai.npc_enable";
		val.ServerAdmin = true;
		val.Description = "If npc_enable is set to false then npcs won't spawn. (default: true)";
		val.Variable = true;
		val.GetOveride = () => AI.npc_enable.ToString();
		val.SetOveride = delegate(string str)
		{
			AI.npc_enable = StringExtensions.ToBool(str);
		};
		array[222] = val;
		val = new Command();
		val.Name = "npc_families_no_hurt";
		val.Parent = "ai";
		val.FullName = "ai.npc_families_no_hurt";
		val.ServerAdmin = true;
		val.Description = "If npc_families_no_hurt is true, npcs of the same family won't be able to hurt each other. (default: true)";
		val.Variable = true;
		val.GetOveride = () => AI.npc_families_no_hurt.ToString();
		val.SetOveride = delegate(string str)
		{
			AI.npc_families_no_hurt = StringExtensions.ToBool(str);
		};
		array[223] = val;
		val = new Command();
		val.Name = "npc_gun_noise_silencer_modifier";
		val.Parent = "ai";
		val.FullName = "ai.npc_gun_noise_silencer_modifier";
		val.ServerAdmin = true;
		val.Description = "The modifier by which a silencer reduce the noise that a gun makes when shot. (Default: 0.15)";
		val.Variable = true;
		val.GetOveride = () => AI.npc_gun_noise_silencer_modifier.ToString();
		val.SetOveride = delegate(string str)
		{
			AI.npc_gun_noise_silencer_modifier = StringExtensions.ToFloat(str, 0f);
		};
		array[224] = val;
		val = new Command();
		val.Name = "npc_htn_player_base_damage_modifier";
		val.Parent = "ai";
		val.FullName = "ai.npc_htn_player_base_damage_modifier";
		val.ServerAdmin = true;
		val.Description = "Baseline damage modifier for the new HTN Player NPCs to nerf their damage compared to the old NPCs. (default: 1.15f)";
		val.Variable = true;
		val.GetOveride = () => AI.npc_htn_player_base_damage_modifier.ToString();
		val.SetOveride = delegate(string str)
		{
			AI.npc_htn_player_base_damage_modifier = StringExtensions.ToFloat(str, 0f);
		};
		array[225] = val;
		val = new Command();
		val.Name = "npc_htn_player_frustration_threshold";
		val.Parent = "ai";
		val.FullName = "ai.npc_htn_player_frustration_threshold";
		val.ServerAdmin = true;
		val.Description = "npc_htn_player_frustration_threshold defines where the frustration threshold for NPCs go, where they have the opportunity to change to a more aggressive tactic. (default: 3)";
		val.Variable = true;
		val.GetOveride = () => AI.npc_htn_player_frustration_threshold.ToString();
		val.SetOveride = delegate(string str)
		{
			AI.npc_htn_player_frustration_threshold = StringExtensions.ToInt(str, 0);
		};
		array[226] = val;
		val = new Command();
		val.Name = "npc_ignore_chairs";
		val.Parent = "ai";
		val.FullName = "ai.npc_ignore_chairs";
		val.ServerAdmin = true;
		val.Description = "If npc_ignore_chairs is true, npcs won't care about seeking out and sitting in chairs. (default: true)";
		val.Variable = true;
		val.GetOveride = () => AI.npc_ignore_chairs.ToString();
		val.SetOveride = delegate(string str)
		{
			AI.npc_ignore_chairs = StringExtensions.ToBool(str);
		};
		array[227] = val;
		val = new Command();
		val.Name = "npc_junkpile_dist_aggro_gate";
		val.Parent = "ai";
		val.FullName = "ai.npc_junkpile_dist_aggro_gate";
		val.ServerAdmin = true;
		val.Description = "npc_junkpile_dist_aggro_gate define at what range (or closer) a junkpile scientist will get aggressive. (Default: 8)";
		val.Variable = true;
		val.GetOveride = () => AI.npc_junkpile_dist_aggro_gate.ToString();
		val.SetOveride = delegate(string str)
		{
			AI.npc_junkpile_dist_aggro_gate = StringExtensions.ToFloat(str, 0f);
		};
		array[228] = val;
		val = new Command();
		val.Name = "npc_junkpilespawn_chance";
		val.Parent = "ai";
		val.FullName = "ai.npc_junkpilespawn_chance";
		val.ServerAdmin = true;
		val.Description = "defines the chance for scientists to spawn at NPC junkpiles. (Default: 0.1)";
		val.Variable = true;
		val.GetOveride = () => AI.npc_junkpilespawn_chance.ToString();
		val.SetOveride = delegate(string str)
		{
			AI.npc_junkpilespawn_chance = StringExtensions.ToFloat(str, 0f);
		};
		array[229] = val;
		val = new Command();
		val.Name = "npc_max_junkpile_count";
		val.Parent = "ai";
		val.FullName = "ai.npc_max_junkpile_count";
		val.ServerAdmin = true;
		val.Description = "npc_max_junkpile_count define how many npcs can spawn into the world at junkpiles at the same time (does not include monuments) (Default: 30)";
		val.Variable = true;
		val.GetOveride = () => AI.npc_max_junkpile_count.ToString();
		val.SetOveride = delegate(string str)
		{
			AI.npc_max_junkpile_count = StringExtensions.ToInt(str, 0);
		};
		array[230] = val;
		val = new Command();
		val.Name = "npc_max_population_military_tunnels";
		val.Parent = "ai";
		val.FullName = "ai.npc_max_population_military_tunnels";
		val.ServerAdmin = true;
		val.Description = "npc_max_population_military_tunnels defines the size of the npc population at military tunnels. (default: 3)";
		val.Variable = true;
		val.GetOveride = () => AI.npc_max_population_military_tunnels.ToString();
		val.SetOveride = delegate(string str)
		{
			AI.npc_max_population_military_tunnels = StringExtensions.ToInt(str, 0);
		};
		array[231] = val;
		val = new Command();
		val.Name = "npc_max_roam_multiplier";
		val.Parent = "ai";
		val.FullName = "ai.npc_max_roam_multiplier";
		val.ServerAdmin = true;
		val.Description = "This is multiplied with the max roam range stat of an NPC to determine how far from its spawn point the NPC is allowed to roam. (default: 3)";
		val.Variable = true;
		val.GetOveride = () => AI.npc_max_roam_multiplier.ToString();
		val.SetOveride = delegate(string str)
		{
			AI.npc_max_roam_multiplier = StringExtensions.ToFloat(str, 0f);
		};
		array[232] = val;
		val = new Command();
		val.Name = "npc_only_hurt_active_target_in_safezone";
		val.Parent = "ai";
		val.FullName = "ai.npc_only_hurt_active_target_in_safezone";
		val.ServerAdmin = true;
		val.Description = "If npc_only_hurt_active_target_in_safezone is true, npcs won't any player other than their actively targeted player when in a safe zone. (default: true)";
		val.Variable = true;
		val.GetOveride = () => AI.npc_only_hurt_active_target_in_safezone.ToString();
		val.SetOveride = delegate(string str)
		{
			AI.npc_only_hurt_active_target_in_safezone = StringExtensions.ToBool(str);
		};
		array[233] = val;
		val = new Command();
		val.Name = "npc_patrol_point_cooldown";
		val.Parent = "ai";
		val.FullName = "ai.npc_patrol_point_cooldown";
		val.ServerAdmin = true;
		val.Description = "npc_patrol_point_cooldown defines the cooldown time on a patrol point until it's available again (default: 5)";
		val.Variable = true;
		val.GetOveride = () => AI.npc_patrol_point_cooldown.ToString();
		val.SetOveride = delegate(string str)
		{
			AI.npc_patrol_point_cooldown = StringExtensions.ToFloat(str, 0f);
		};
		array[234] = val;
		val = new Command();
		val.Name = "npc_reasoning_system_tick_rate_multiplier";
		val.Parent = "ai";
		val.FullName = "ai.npc_reasoning_system_tick_rate_multiplier";
		val.ServerAdmin = true;
		val.Description = "The rate at which we tick the reasoning system. Minimum value is 1, as it multiplies with the tick-rate of the fixed AI tick rate of 0.1 (Default: 1)";
		val.Variable = true;
		val.GetOveride = () => AI.npc_reasoning_system_tick_rate_multiplier.ToString();
		val.SetOveride = delegate(string str)
		{
			AI.npc_reasoning_system_tick_rate_multiplier = StringExtensions.ToFloat(str, 0f);
		};
		array[235] = val;
		val = new Command();
		val.Name = "npc_respawn_delay_max_military_tunnels";
		val.Parent = "ai";
		val.FullName = "ai.npc_respawn_delay_max_military_tunnels";
		val.ServerAdmin = true;
		val.Description = "npc_respawn_delay_max_military_tunnels defines the maximum delay between spawn ticks at military tunnels. (default: 1920)";
		val.Variable = true;
		val.GetOveride = () => AI.npc_respawn_delay_max_military_tunnels.ToString();
		val.SetOveride = delegate(string str)
		{
			AI.npc_respawn_delay_max_military_tunnels = StringExtensions.ToFloat(str, 0f);
		};
		array[236] = val;
		val = new Command();
		val.Name = "npc_respawn_delay_min_military_tunnels";
		val.Parent = "ai";
		val.FullName = "ai.npc_respawn_delay_min_military_tunnels";
		val.ServerAdmin = true;
		val.Description = "npc_respawn_delay_min_military_tunnels defines the minimum delay between spawn ticks at military tunnels. (default: 480)";
		val.Variable = true;
		val.GetOveride = () => AI.npc_respawn_delay_min_military_tunnels.ToString();
		val.SetOveride = delegate(string str)
		{
			AI.npc_respawn_delay_min_military_tunnels = StringExtensions.ToFloat(str, 0f);
		};
		array[237] = val;
		val = new Command();
		val.Name = "npc_sensory_system_tick_rate_multiplier";
		val.Parent = "ai";
		val.FullName = "ai.npc_sensory_system_tick_rate_multiplier";
		val.ServerAdmin = true;
		val.Description = "The rate at which we tick the sensory system. Minimum value is 1, as it multiplies with the tick-rate of the fixed AI tick rate of 0.1 (Default: 5)";
		val.Variable = true;
		val.GetOveride = () => AI.npc_sensory_system_tick_rate_multiplier.ToString();
		val.SetOveride = delegate(string str)
		{
			AI.npc_sensory_system_tick_rate_multiplier = StringExtensions.ToFloat(str, 0f);
		};
		array[238] = val;
		val = new Command();
		val.Name = "npc_spawn_on_cargo_ship";
		val.Parent = "ai";
		val.FullName = "ai.npc_spawn_on_cargo_ship";
		val.ServerAdmin = true;
		val.Description = "Spawn NPCs on the Cargo Ship. (default: true)";
		val.Variable = true;
		val.GetOveride = () => AI.npc_spawn_on_cargo_ship.ToString();
		val.SetOveride = delegate(string str)
		{
			AI.npc_spawn_on_cargo_ship = StringExtensions.ToBool(str);
		};
		array[239] = val;
		val = new Command();
		val.Name = "npc_spawn_on_junkpile";
		val.Parent = "ai";
		val.FullName = "ai.npc_spawn_on_junkpile";
		val.ServerAdmin = true;
		val.Description = "Spawn NPCs on junkpiles (default: true)";
		val.Variable = true;
		val.GetOveride = () => AI.npc_spawn_on_junkpile.ToString();
		val.SetOveride = delegate(string str)
		{
			AI.npc_spawn_on_junkpile = StringExtensions.ToBool(str);
		};
		array[240] = val;
		val = new Command();
		val.Name = "npc_spawn_per_tick_max_military_tunnels";
		val.Parent = "ai";
		val.FullName = "ai.npc_spawn_per_tick_max_military_tunnels";
		val.ServerAdmin = true;
		val.Description = "npc_spawn_per_tick_max_military_tunnels defines how many can maximum spawn at once at military tunnels. (default: 1)";
		val.Variable = true;
		val.GetOveride = () => AI.npc_spawn_per_tick_max_military_tunnels.ToString();
		val.SetOveride = delegate(string str)
		{
			AI.npc_spawn_per_tick_max_military_tunnels = StringExtensions.ToInt(str, 0);
		};
		array[241] = val;
		val = new Command();
		val.Name = "npc_spawn_per_tick_min_military_tunnels";
		val.Parent = "ai";
		val.FullName = "ai.npc_spawn_per_tick_min_military_tunnels";
		val.ServerAdmin = true;
		val.Description = "npc_spawn_per_tick_min_military_tunnels defineshow many will minimum spawn at once at military tunnels. (default: 1)";
		val.Variable = true;
		val.GetOveride = () => AI.npc_spawn_per_tick_min_military_tunnels.ToString();
		val.SetOveride = delegate(string str)
		{
			AI.npc_spawn_per_tick_min_military_tunnels = StringExtensions.ToInt(str, 0);
		};
		array[242] = val;
		val = new Command();
		val.Name = "npc_speed_crouch_run";
		val.Parent = "ai";
		val.FullName = "ai.npc_speed_crouch_run";
		val.ServerAdmin = true;
		val.Description = "npc_speed_crouch_run define the speed of an npc when in the crouched run state, and should be a number between 0 and 1. (Default: 0.25)";
		val.Variable = true;
		val.GetOveride = () => AI.npc_speed_crouch_run.ToString();
		val.SetOveride = delegate(string str)
		{
			AI.npc_speed_crouch_run = StringExtensions.ToFloat(str, 0f);
		};
		array[243] = val;
		val = new Command();
		val.Name = "npc_speed_crouch_walk";
		val.Parent = "ai";
		val.FullName = "ai.npc_speed_crouch_walk";
		val.ServerAdmin = true;
		val.Description = "npc_speed_walk define the speed of an npc when in the crouched walk state, and should be a number between 0 and 1. (Default: 0.1)";
		val.Variable = true;
		val.GetOveride = () => AI.npc_speed_crouch_walk.ToString();
		val.SetOveride = delegate(string str)
		{
			AI.npc_speed_crouch_walk = StringExtensions.ToFloat(str, 0f);
		};
		array[244] = val;
		val = new Command();
		val.Name = "npc_speed_run";
		val.Parent = "ai";
		val.FullName = "ai.npc_speed_run";
		val.ServerAdmin = true;
		val.Description = "npc_speed_walk define the speed of an npc when in the run state, and should be a number between 0 and 1. (Default: 0.4)";
		val.Variable = true;
		val.GetOveride = () => AI.npc_speed_run.ToString();
		val.SetOveride = delegate(string str)
		{
			AI.npc_speed_run = StringExtensions.ToFloat(str, 0f);
		};
		array[245] = val;
		val = new Command();
		val.Name = "npc_speed_sprint";
		val.Parent = "ai";
		val.FullName = "ai.npc_speed_sprint";
		val.ServerAdmin = true;
		val.Description = "npc_speed_walk define the speed of an npc when in the sprint state, and should be a number between 0 and 1. (Default: 1.0)";
		val.Variable = true;
		val.GetOveride = () => AI.npc_speed_sprint.ToString();
		val.SetOveride = delegate(string str)
		{
			AI.npc_speed_sprint = StringExtensions.ToFloat(str, 0f);
		};
		array[246] = val;
		val = new Command();
		val.Name = "npc_speed_walk";
		val.Parent = "ai";
		val.FullName = "ai.npc_speed_walk";
		val.ServerAdmin = true;
		val.Description = "npc_speed_walk define the speed of an npc when in the walk state, and should be a number between 0 and 1. (Default: 0.18)";
		val.Variable = true;
		val.GetOveride = () => AI.npc_speed_walk.ToString();
		val.SetOveride = delegate(string str)
		{
			AI.npc_speed_walk = StringExtensions.ToFloat(str, 0f);
		};
		array[247] = val;
		val = new Command();
		val.Name = "npc_use_new_aim_system";
		val.Parent = "ai";
		val.FullName = "ai.npc_use_new_aim_system";
		val.ServerAdmin = true;
		val.Description = "If npc_use_new_aim_system is true, npcs will miss on purpose on occasion, where the old system would randomize aim cone. (default: true)";
		val.Variable = true;
		val.GetOveride = () => AI.npc_use_new_aim_system.ToString();
		val.SetOveride = delegate(string str)
		{
			AI.npc_use_new_aim_system = StringExtensions.ToBool(str);
		};
		array[248] = val;
		val = new Command();
		val.Name = "npc_use_thrown_weapons";
		val.Parent = "ai";
		val.FullName = "ai.npc_use_thrown_weapons";
		val.ServerAdmin = true;
		val.Description = "If npc_use_thrown_weapons is true, npcs will throw grenades, etc. This is an experimental feature. (default: true)";
		val.Variable = true;
		val.GetOveride = () => AI.npc_use_thrown_weapons.ToString();
		val.SetOveride = delegate(string str)
		{
			AI.npc_use_thrown_weapons = StringExtensions.ToBool(str);
		};
		array[249] = val;
		val = new Command();
		val.Name = "npc_valid_aim_cone";
		val.Parent = "ai";
		val.FullName = "ai.npc_valid_aim_cone";
		val.ServerAdmin = true;
		val.Description = "npc_valid_aim_cone defines how close their aim needs to be on target in order to fire. (default: 0.8)";
		val.Variable = true;
		val.GetOveride = () => AI.npc_valid_aim_cone.ToString();
		val.SetOveride = delegate(string str)
		{
			AI.npc_valid_aim_cone = StringExtensions.ToFloat(str, 0f);
		};
		array[250] = val;
		val = new Command();
		val.Name = "npc_valid_mounted_aim_cone";
		val.Parent = "ai";
		val.FullName = "ai.npc_valid_mounted_aim_cone";
		val.ServerAdmin = true;
		val.Description = "npc_valid_mounted_aim_cone defines how close their aim needs to be on target in order to fire while mounted. (default: 0.92)";
		val.Variable = true;
		val.GetOveride = () => AI.npc_valid_mounted_aim_cone.ToString();
		val.SetOveride = delegate(string str)
		{
			AI.npc_valid_mounted_aim_cone = StringExtensions.ToFloat(str, 0f);
		};
		array[251] = val;
		val = new Command();
		val.Name = "npcswimming";
		val.Parent = "ai";
		val.FullName = "ai.npcswimming";
		val.ServerAdmin = true;
		val.Variable = true;
		val.GetOveride = () => AI.npcswimming.ToString();
		val.SetOveride = delegate(string str)
		{
			AI.npcswimming = StringExtensions.ToBool(str);
		};
		array[252] = val;
		val = new Command();
		val.Name = "ocean_patrol_path_iterations";
		val.Parent = "ai";
		val.FullName = "ai.ocean_patrol_path_iterations";
		val.ServerAdmin = true;
		val.Variable = true;
		val.GetOveride = () => AI.ocean_patrol_path_iterations.ToString();
		val.SetOveride = delegate(string str)
		{
			AI.ocean_patrol_path_iterations = StringExtensions.ToInt(str, 0);
		};
		array[253] = val;
		val = new Command();
		val.Name = "printignoredplayers";
		val.Parent = "ai";
		val.FullName = "ai.printignoredplayers";
		val.ServerAdmin = true;
		val.Description = "Print a lost of all the players in the AI ignore list.";
		val.Variable = false;
		val.Call = delegate(Arg arg)
		{
			AI.printignoredplayers(arg);
		};
		array[254] = val;
		val = new Command();
		val.Name = "removeignoreplayer";
		val.Parent = "ai";
		val.FullName = "ai.removeignoreplayer";
		val.ServerAdmin = true;
		val.Description = "Remove a player (or command user if no player is specified) from the AIs ignore list.";
		val.Variable = false;
		val.Call = delegate(Arg arg)
		{
			AI.removeignoreplayer(arg);
		};
		array[255] = val;
		val = new Command();
		val.Name = "scientist_spawners_enabled";
		val.Parent = "ai";
		val.FullName = "ai.scientist_spawners_enabled";
		val.ServerAdmin = true;
		val.Description = "Do any kind of scientists spawn on the map (default: true)";
		val.Variable = true;
		val.GetOveride = () => AI.scientist_spawners_enabled.ToString();
		val.SetOveride = delegate(string str)
		{
			AI.scientist_spawners_enabled = StringExtensions.ToBool(str);
		};
		array[256] = val;
		val = new Command();
		val.Name = "selectnpclookatserver";
		val.Parent = "ai";
		val.FullName = "ai.selectnpclookatserver";
		val.ServerAdmin = true;
		val.Variable = false;
		val.Call = delegate(Arg arg)
		{
			AI.selectNPCLookatServer(arg);
		};
		array[257] = val;
		val = new Command();
		val.Name = "sensetime";
		val.Parent = "ai";
		val.FullName = "ai.sensetime";
		val.ServerAdmin = true;
		val.Variable = true;
		val.GetOveride = () => AI.sensetime.ToString();
		val.SetOveride = delegate(string str)
		{
			AI.sensetime = StringExtensions.ToFloat(str, 0f);
		};
		array[258] = val;
		val = new Command();
		val.Name = "setdestinationsamplenavmesh";
		val.Parent = "ai";
		val.FullName = "ai.setdestinationsamplenavmesh";
		val.ServerAdmin = true;
		val.Variable = true;
		val.GetOveride = () => AI.setdestinationsamplenavmesh.ToString();
		val.SetOveride = delegate(string str)
		{
			AI.setdestinationsamplenavmesh = StringExtensions.ToBool(str);
		};
		array[259] = val;
		val = new Command();
		val.Name = "showdistributions";
		val.Parent = "ai";
		val.FullName = "ai.showdistributions";
		val.ServerAdmin = true;
		val.Variable = false;
		val.Call = delegate(Arg arg)
		{
			AI.showDistributions(arg);
		};
		array[260] = val;
		val = new Command();
		val.Name = "showstate";
		val.Parent = "ai";
		val.FullName = "ai.showstate";
		val.ServerAdmin = true;
		val.Variable = false;
		val.Call = delegate(Arg arg)
		{
			AI.showState(arg);
		};
		array[261] = val;
		val = new Command();
		val.Name = "sleepwake";
		val.Parent = "ai";
		val.FullName = "ai.sleepwake";
		val.ServerAdmin = true;
		val.Variable = true;
		val.GetOveride = () => AI.sleepwake.ToString();
		val.SetOveride = delegate(string str)
		{
			AI.sleepwake = StringExtensions.ToBool(str);
		};
		array[262] = val;
		val = new Command();
		val.Name = "sleepwakestats";
		val.Parent = "ai";
		val.FullName = "ai.sleepwakestats";
		val.ServerAdmin = true;
		val.Variable = false;
		val.Call = delegate(Arg arg)
		{
			AI.sleepwakestats(arg);
		};
		array[263] = val;
		val = new Command();
		val.Name = "spliceupdates";
		val.Parent = "ai";
		val.FullName = "ai.spliceupdates";
		val.ServerAdmin = true;
		val.Variable = true;
		val.GetOveride = () => AI.spliceupdates.ToString();
		val.SetOveride = delegate(string str)
		{
			AI.spliceupdates = StringExtensions.ToBool(str);
		};
		array[264] = val;
		val = new Command();
		val.Name = "think";
		val.Parent = "ai";
		val.FullName = "ai.think";
		val.ServerAdmin = true;
		val.Variable = true;
		val.GetOveride = () => AI.think.ToString();
		val.SetOveride = delegate(string str)
		{
			AI.think = StringExtensions.ToBool(str);
		};
		array[265] = val;
		val = new Command();
		val.Name = "tickrate";
		val.Parent = "ai";
		val.FullName = "ai.tickrate";
		val.ServerAdmin = true;
		val.Variable = true;
		val.GetOveride = () => AI.tickrate.ToString();
		val.SetOveride = delegate(string str)
		{
			AI.tickrate = StringExtensions.ToFloat(str, 0f);
		};
		array[266] = val;
		val = new Command();
		val.Name = "usecalculatepath";
		val.Parent = "ai";
		val.FullName = "ai.usecalculatepath";
		val.ServerAdmin = true;
		val.Variable = true;
		val.GetOveride = () => AI.usecalculatepath.ToString();
		val.SetOveride = delegate(string str)
		{
			AI.usecalculatepath = StringExtensions.ToBool(str);
		};
		array[267] = val;
		val = new Command();
		val.Name = "usegrid";
		val.Parent = "ai";
		val.FullName = "ai.usegrid";
		val.ServerAdmin = true;
		val.Variable = true;
		val.GetOveride = () => AI.usegrid.ToString();
		val.SetOveride = delegate(string str)
		{
			AI.usegrid = StringExtensions.ToBool(str);
		};
		array[268] = val;
		val = new Command();
		val.Name = "usesetdestinationfallback";
		val.Parent = "ai";
		val.FullName = "ai.usesetdestinationfallback";
		val.ServerAdmin = true;
		val.Variable = true;
		val.GetOveride = () => AI.usesetdestinationfallback.ToString();
		val.SetOveride = delegate(string str)
		{
			AI.usesetdestinationfallback = StringExtensions.ToBool(str);
		};
		array[269] = val;
		val = new Command();
		val.Name = "wakesleepingai";
		val.Parent = "ai";
		val.FullName = "ai.wakesleepingai";
		val.ServerAdmin = true;
		val.Variable = false;
		val.Call = delegate(Arg arg)
		{
			AI.wakesleepingai(arg);
		};
		array[270] = val;
		val = new Command();
		val.Name = "watchedangle";
		val.Parent = "ai";
		val.FullName = "ai.watchedangle";
		val.ServerAdmin = true;
		val.Description = "The angle under which the AI will think it's being watched by another entity";
		val.Variable = true;
		val.GetOveride = () => AI.watchedAngle.ToString();
		val.SetOveride = delegate(string str)
		{
			AI.watchedAngle = StringExtensions.ToFloat(str, 0f);
		};
		array[271] = val;
		val = new Command();
		val.Name = "admincheat";
		val.Parent = "antihack";
		val.FullName = "antihack.admincheat";
		val.ServerAdmin = true;
		val.Variable = true;
		val.GetOveride = () => ConVar.AntiHack.admincheat.ToString();
		val.SetOveride = delegate(string str)
		{
			ConVar.AntiHack.admincheat = StringExtensions.ToBool(str);
		};
		array[272] = val;
		val = new Command();
		val.Name = "build_inside_check";
		val.Parent = "antihack";
		val.FullName = "antihack.build_inside_check";
		val.ServerAdmin = true;
		val.Variable = true;
		val.GetOveride = () => ConVar.AntiHack.build_inside_check.ToString();
		val.SetOveride = delegate(string str)
		{
			ConVar.AntiHack.build_inside_check = StringExtensions.ToInt(str, 0);
		};
		array[273] = val;
		val = new Command();
		val.Name = "build_losradius";
		val.Parent = "antihack";
		val.FullName = "antihack.build_losradius";
		val.ServerAdmin = true;
		val.Variable = true;
		val.GetOveride = () => ConVar.AntiHack.build_losradius.ToString();
		val.SetOveride = delegate(string str)
		{
			ConVar.AntiHack.build_losradius = StringExtensions.ToFloat(str, 0f);
		};
		array[274] = val;
		val = new Command();
		val.Name = "build_losradius_sleepingbag";
		val.Parent = "antihack";
		val.FullName = "antihack.build_losradius_sleepingbag";
		val.ServerAdmin = true;
		val.Variable = true;
		val.GetOveride = () => ConVar.AntiHack.build_losradius_sleepingbag.ToString();
		val.SetOveride = delegate(string str)
		{
			ConVar.AntiHack.build_losradius_sleepingbag = StringExtensions.ToFloat(str, 0f);
		};
		array[275] = val;
		val = new Command();
		val.Name = "build_terraincheck";
		val.Parent = "antihack";
		val.FullName = "antihack.build_terraincheck";
		val.ServerAdmin = true;
		val.Variable = true;
		val.GetOveride = () => ConVar.AntiHack.build_terraincheck.ToString();
		val.SetOveride = delegate(string str)
		{
			ConVar.AntiHack.build_terraincheck = StringExtensions.ToBool(str);
		};
		array[276] = val;
		val = new Command();
		val.Name = "build_vehiclecheck";
		val.Parent = "antihack";
		val.FullName = "antihack.build_vehiclecheck";
		val.ServerAdmin = true;
		val.Variable = true;
		val.GetOveride = () => ConVar.AntiHack.build_vehiclecheck.ToString();
		val.SetOveride = delegate(string str)
		{
			ConVar.AntiHack.build_vehiclecheck = StringExtensions.ToBool(str);
		};
		array[277] = val;
		val = new Command();
		val.Name = "debuglevel";
		val.Parent = "antihack";
		val.FullName = "antihack.debuglevel";
		val.ServerAdmin = true;
		val.Variable = true;
		val.GetOveride = () => ConVar.AntiHack.debuglevel.ToString();
		val.SetOveride = delegate(string str)
		{
			ConVar.AntiHack.debuglevel = StringExtensions.ToInt(str, 0);
		};
		array[278] = val;
		val = new Command();
		val.Name = "enforcementlevel";
		val.Parent = "antihack";
		val.FullName = "antihack.enforcementlevel";
		val.ServerAdmin = true;
		val.Variable = true;
		val.GetOveride = () => ConVar.AntiHack.enforcementlevel.ToString();
		val.SetOveride = delegate(string str)
		{
			ConVar.AntiHack.enforcementlevel = StringExtensions.ToInt(str, 0);
		};
		array[279] = val;
		val = new Command();
		val.Name = "eye_clientframes";
		val.Parent = "antihack";
		val.FullName = "antihack.eye_clientframes";
		val.ServerAdmin = true;
		val.Variable = true;
		val.GetOveride = () => ConVar.AntiHack.eye_clientframes.ToString();
		val.SetOveride = delegate(string str)
		{
			ConVar.AntiHack.eye_clientframes = StringExtensions.ToFloat(str, 0f);
		};
		array[280] = val;
		val = new Command();
		val.Name = "eye_distance_parented_mounted_forgiveness";
		val.Parent = "antihack";
		val.FullName = "antihack.eye_distance_parented_mounted_forgiveness";
		val.ServerAdmin = true;
		val.Variable = true;
		val.GetOveride = () => ConVar.AntiHack.eye_distance_parented_mounted_forgiveness.ToString();
		val.SetOveride = delegate(string str)
		{
			ConVar.AntiHack.eye_distance_parented_mounted_forgiveness = StringExtensions.ToFloat(str, 0f);
		};
		array[281] = val;
		val = new Command();
		val.Name = "eye_forgiveness";
		val.Parent = "antihack";
		val.FullName = "antihack.eye_forgiveness";
		val.ServerAdmin = true;
		val.Variable = true;
		val.GetOveride = () => ConVar.AntiHack.eye_forgiveness.ToString();
		val.SetOveride = delegate(string str)
		{
			ConVar.AntiHack.eye_forgiveness = StringExtensions.ToFloat(str, 0f);
		};
		array[282] = val;
		val = new Command();
		val.Name = "eye_history_forgiveness";
		val.Parent = "antihack";
		val.FullName = "antihack.eye_history_forgiveness";
		val.ServerAdmin = true;
		val.Variable = true;
		val.GetOveride = () => ConVar.AntiHack.eye_history_forgiveness.ToString();
		val.SetOveride = delegate(string str)
		{
			ConVar.AntiHack.eye_history_forgiveness = StringExtensions.ToFloat(str, 0f);
		};
		array[283] = val;
		val = new Command();
		val.Name = "eye_history_penalty";
		val.Parent = "antihack";
		val.FullName = "antihack.eye_history_penalty";
		val.ServerAdmin = true;
		val.Variable = true;
		val.GetOveride = () => ConVar.AntiHack.eye_history_penalty.ToString();
		val.SetOveride = delegate(string str)
		{
			ConVar.AntiHack.eye_history_penalty = StringExtensions.ToFloat(str, 0f);
		};
		array[284] = val;
		val = new Command();
		val.Name = "eye_losradius";
		val.Parent = "antihack";
		val.FullName = "antihack.eye_losradius";
		val.ServerAdmin = true;
		val.Variable = true;
		val.GetOveride = () => ConVar.AntiHack.eye_losradius.ToString();
		val.SetOveride = delegate(string str)
		{
			ConVar.AntiHack.eye_losradius = StringExtensions.ToFloat(str, 0f);
		};
		array[285] = val;
		val = new Command();
		val.Name = "eye_noclip_backtracking";
		val.Parent = "antihack";
		val.FullName = "antihack.eye_noclip_backtracking";
		val.ServerAdmin = true;
		val.Variable = true;
		val.GetOveride = () => ConVar.AntiHack.eye_noclip_backtracking.ToString();
		val.SetOveride = delegate(string str)
		{
			ConVar.AntiHack.eye_noclip_backtracking = StringExtensions.ToFloat(str, 0f);
		};
		array[286] = val;
		val = new Command();
		val.Name = "eye_noclip_cutoff";
		val.Parent = "antihack";
		val.FullName = "antihack.eye_noclip_cutoff";
		val.ServerAdmin = true;
		val.Variable = true;
		val.GetOveride = () => ConVar.AntiHack.eye_noclip_cutoff.ToString();
		val.SetOveride = delegate(string str)
		{
			ConVar.AntiHack.eye_noclip_cutoff = StringExtensions.ToFloat(str, 0f);
		};
		array[287] = val;
		val = new Command();
		val.Name = "eye_noclip_margin";
		val.Parent = "antihack";
		val.FullName = "antihack.eye_noclip_margin";
		val.ServerAdmin = true;
		val.Variable = true;
		val.GetOveride = () => ConVar.AntiHack.eye_noclip_margin.ToString();
		val.SetOveride = delegate(string str)
		{
			ConVar.AntiHack.eye_noclip_margin = StringExtensions.ToFloat(str, 0f);
		};
		array[288] = val;
		val = new Command();
		val.Name = "eye_penalty";
		val.Parent = "antihack";
		val.FullName = "antihack.eye_penalty";
		val.ServerAdmin = true;
		val.Variable = true;
		val.GetOveride = () => ConVar.AntiHack.eye_penalty.ToString();
		val.SetOveride = delegate(string str)
		{
			ConVar.AntiHack.eye_penalty = StringExtensions.ToFloat(str, 0f);
		};
		array[289] = val;
		val = new Command();
		val.Name = "eye_protection";
		val.Parent = "antihack";
		val.FullName = "antihack.eye_protection";
		val.ServerAdmin = true;
		val.Variable = true;
		val.GetOveride = () => ConVar.AntiHack.eye_protection.ToString();
		val.SetOveride = delegate(string str)
		{
			ConVar.AntiHack.eye_protection = StringExtensions.ToInt(str, 0);
		};
		array[290] = val;
		val = new Command();
		val.Name = "eye_serverframes";
		val.Parent = "antihack";
		val.FullName = "antihack.eye_serverframes";
		val.ServerAdmin = true;
		val.Variable = true;
		val.GetOveride = () => ConVar.AntiHack.eye_serverframes.ToString();
		val.SetOveride = delegate(string str)
		{
			ConVar.AntiHack.eye_serverframes = StringExtensions.ToFloat(str, 0f);
		};
		array[291] = val;
		val = new Command();
		val.Name = "eye_terraincheck";
		val.Parent = "antihack";
		val.FullName = "antihack.eye_terraincheck";
		val.ServerAdmin = true;
		val.Variable = true;
		val.GetOveride = () => ConVar.AntiHack.eye_terraincheck.ToString();
		val.SetOveride = delegate(string str)
		{
			ConVar.AntiHack.eye_terraincheck = StringExtensions.ToBool(str);
		};
		array[292] = val;
		val = new Command();
		val.Name = "eye_vehiclecheck";
		val.Parent = "antihack";
		val.FullName = "antihack.eye_vehiclecheck";
		val.ServerAdmin = true;
		val.Variable = true;
		val.GetOveride = () => ConVar.AntiHack.eye_vehiclecheck.ToString();
		val.SetOveride = delegate(string str)
		{
			ConVar.AntiHack.eye_vehiclecheck = StringExtensions.ToBool(str);
		};
		array[293] = val;
		val = new Command();
		val.Name = "flyhack_extrusion";
		val.Parent = "antihack";
		val.FullName = "antihack.flyhack_extrusion";
		val.ServerAdmin = true;
		val.Variable = true;
		val.GetOveride = () => ConVar.AntiHack.flyhack_extrusion.ToString();
		val.SetOveride = delegate(string str)
		{
			ConVar.AntiHack.flyhack_extrusion = StringExtensions.ToFloat(str, 0f);
		};
		array[294] = val;
		val = new Command();
		val.Name = "flyhack_forgiveness_horizontal";
		val.Parent = "antihack";
		val.FullName = "antihack.flyhack_forgiveness_horizontal";
		val.ServerAdmin = true;
		val.Variable = true;
		val.GetOveride = () => ConVar.AntiHack.flyhack_forgiveness_horizontal.ToString();
		val.SetOveride = delegate(string str)
		{
			ConVar.AntiHack.flyhack_forgiveness_horizontal = StringExtensions.ToFloat(str, 0f);
		};
		array[295] = val;
		val = new Command();
		val.Name = "flyhack_forgiveness_horizontal_inertia";
		val.Parent = "antihack";
		val.FullName = "antihack.flyhack_forgiveness_horizontal_inertia";
		val.ServerAdmin = true;
		val.Variable = true;
		val.GetOveride = () => ConVar.AntiHack.flyhack_forgiveness_horizontal_inertia.ToString();
		val.SetOveride = delegate(string str)
		{
			ConVar.AntiHack.flyhack_forgiveness_horizontal_inertia = StringExtensions.ToFloat(str, 0f);
		};
		array[296] = val;
		val = new Command();
		val.Name = "flyhack_forgiveness_vertical";
		val.Parent = "antihack";
		val.FullName = "antihack.flyhack_forgiveness_vertical";
		val.ServerAdmin = true;
		val.Variable = true;
		val.GetOveride = () => ConVar.AntiHack.flyhack_forgiveness_vertical.ToString();
		val.SetOveride = delegate(string str)
		{
			ConVar.AntiHack.flyhack_forgiveness_vertical = StringExtensions.ToFloat(str, 0f);
		};
		array[297] = val;
		val = new Command();
		val.Name = "flyhack_forgiveness_vertical_inertia";
		val.Parent = "antihack";
		val.FullName = "antihack.flyhack_forgiveness_vertical_inertia";
		val.ServerAdmin = true;
		val.Variable = true;
		val.GetOveride = () => ConVar.AntiHack.flyhack_forgiveness_vertical_inertia.ToString();
		val.SetOveride = delegate(string str)
		{
			ConVar.AntiHack.flyhack_forgiveness_vertical_inertia = StringExtensions.ToFloat(str, 0f);
		};
		array[298] = val;
		val = new Command();
		val.Name = "flyhack_margin";
		val.Parent = "antihack";
		val.FullName = "antihack.flyhack_margin";
		val.ServerAdmin = true;
		val.Variable = true;
		val.GetOveride = () => ConVar.AntiHack.flyhack_margin.ToString();
		val.SetOveride = delegate(string str)
		{
			ConVar.AntiHack.flyhack_margin = StringExtensions.ToFloat(str, 0f);
		};
		array[299] = val;
		val = new Command();
		val.Name = "flyhack_maxsteps";
		val.Parent = "antihack";
		val.FullName = "antihack.flyhack_maxsteps";
		val.ServerAdmin = true;
		val.Variable = true;
		val.GetOveride = () => ConVar.AntiHack.flyhack_maxsteps.ToString();
		val.SetOveride = delegate(string str)
		{
			ConVar.AntiHack.flyhack_maxsteps = StringExtensions.ToInt(str, 0);
		};
		array[300] = val;
		val = new Command();
		val.Name = "flyhack_penalty";
		val.Parent = "antihack";
		val.FullName = "antihack.flyhack_penalty";
		val.ServerAdmin = true;
		val.Variable = true;
		val.GetOveride = () => ConVar.AntiHack.flyhack_penalty.ToString();
		val.SetOveride = delegate(string str)
		{
			ConVar.AntiHack.flyhack_penalty = StringExtensions.ToFloat(str, 0f);
		};
		array[301] = val;
		val = new Command();
		val.Name = "flyhack_protection";
		val.Parent = "antihack";
		val.FullName = "antihack.flyhack_protection";
		val.ServerAdmin = true;
		val.Variable = true;
		val.GetOveride = () => ConVar.AntiHack.flyhack_protection.ToString();
		val.SetOveride = delegate(string str)
		{
			ConVar.AntiHack.flyhack_protection = StringExtensions.ToInt(str, 0);
		};
		array[302] = val;
		val = new Command();
		val.Name = "flyhack_reject";
		val.Parent = "antihack";
		val.FullName = "antihack.flyhack_reject";
		val.ServerAdmin = true;
		val.Variable = true;
		val.GetOveride = () => ConVar.AntiHack.flyhack_reject.ToString();
		val.SetOveride = delegate(string str)
		{
			ConVar.AntiHack.flyhack_reject = StringExtensions.ToBool(str);
		};
		array[303] = val;
		val = new Command();
		val.Name = "flyhack_stepsize";
		val.Parent = "antihack";
		val.FullName = "antihack.flyhack_stepsize";
		val.ServerAdmin = true;
		val.Variable = true;
		val.GetOveride = () => ConVar.AntiHack.flyhack_stepsize.ToString();
		val.SetOveride = delegate(string str)
		{
			ConVar.AntiHack.flyhack_stepsize = StringExtensions.ToFloat(str, 0f);
		};
		array[304] = val;
		val = new Command();
		val.Name = "flyhack_usecachedstate";
		val.Parent = "antihack";
		val.FullName = "antihack.flyhack_usecachedstate";
		val.ServerAdmin = true;
		val.Variable = true;
		val.GetOveride = () => ConVar.AntiHack.flyhack_usecachedstate.ToString();
		val.SetOveride = delegate(string str)
		{
			ConVar.AntiHack.flyhack_usecachedstate = StringExtensions.ToBool(str);
		};
		array[305] = val;
		val = new Command();
		val.Name = "forceposition";
		val.Parent = "antihack";
		val.FullName = "antihack.forceposition";
		val.ServerAdmin = true;
		val.Variable = true;
		val.GetOveride = () => ConVar.AntiHack.forceposition.ToString();
		val.SetOveride = delegate(string str)
		{
			ConVar.AntiHack.forceposition = StringExtensions.ToBool(str);
		};
		array[306] = val;
		val = new Command();
		val.Name = "impact_effect_distance_forgiveness";
		val.Parent = "antihack";
		val.FullName = "antihack.impact_effect_distance_forgiveness";
		val.ServerAdmin = true;
		val.Variable = true;
		val.GetOveride = () => ConVar.AntiHack.impact_effect_distance_forgiveness.ToString();
		val.SetOveride = delegate(string str)
		{
			ConVar.AntiHack.impact_effect_distance_forgiveness = StringExtensions.ToFloat(str, 0f);
		};
		array[307] = val;
		val = new Command();
		val.Name = "maxdeltatime";
		val.Parent = "antihack";
		val.FullName = "antihack.maxdeltatime";
		val.ServerAdmin = true;
		val.Variable = true;
		val.GetOveride = () => ConVar.AntiHack.maxdeltatime.ToString();
		val.SetOveride = delegate(string str)
		{
			ConVar.AntiHack.maxdeltatime = StringExtensions.ToFloat(str, 0f);
		};
		array[308] = val;
		val = new Command();
		val.Name = "maxdesync";
		val.Parent = "antihack";
		val.FullName = "antihack.maxdesync";
		val.ServerAdmin = true;
		val.Variable = true;
		val.GetOveride = () => ConVar.AntiHack.maxdesync.ToString();
		val.SetOveride = delegate(string str)
		{
			ConVar.AntiHack.maxdesync = StringExtensions.ToFloat(str, 0f);
		};
		array[309] = val;
		val = new Command();
		val.Name = "maxviolation";
		val.Parent = "antihack";
		val.FullName = "antihack.maxviolation";
		val.ServerAdmin = true;
		val.Variable = true;
		val.GetOveride = () => ConVar.AntiHack.maxviolation.ToString();
		val.SetOveride = delegate(string str)
		{
			ConVar.AntiHack.maxviolation = StringExtensions.ToFloat(str, 0f);
		};
		array[310] = val;
		val = new Command();
		val.Name = "melee_backtracking";
		val.Parent = "antihack";
		val.FullName = "antihack.melee_backtracking";
		val.ServerAdmin = true;
		val.Variable = true;
		val.GetOveride = () => ConVar.AntiHack.melee_backtracking.ToString();
		val.SetOveride = delegate(string str)
		{
			ConVar.AntiHack.melee_backtracking = StringExtensions.ToFloat(str, 0f);
		};
		array[311] = val;
		val = new Command();
		val.Name = "melee_clientframes";
		val.Parent = "antihack";
		val.FullName = "antihack.melee_clientframes";
		val.ServerAdmin = true;
		val.Variable = true;
		val.GetOveride = () => ConVar.AntiHack.melee_clientframes.ToString();
		val.SetOveride = delegate(string str)
		{
			ConVar.AntiHack.melee_clientframes = StringExtensions.ToFloat(str, 0f);
		};
		array[312] = val;
		val = new Command();
		val.Name = "melee_forgiveness";
		val.Parent = "antihack";
		val.FullName = "antihack.melee_forgiveness";
		val.ServerAdmin = true;
		val.Variable = true;
		val.GetOveride = () => ConVar.AntiHack.melee_forgiveness.ToString();
		val.SetOveride = delegate(string str)
		{
			ConVar.AntiHack.melee_forgiveness = StringExtensions.ToFloat(str, 0f);
		};
		array[313] = val;
		val = new Command();
		val.Name = "melee_losforgiveness";
		val.Parent = "antihack";
		val.FullName = "antihack.melee_losforgiveness";
		val.ServerAdmin = true;
		val.Variable = true;
		val.GetOveride = () => ConVar.AntiHack.melee_losforgiveness.ToString();
		val.SetOveride = delegate(string str)
		{
			ConVar.AntiHack.melee_losforgiveness = StringExtensions.ToFloat(str, 0f);
		};
		array[314] = val;
		val = new Command();
		val.Name = "melee_penalty";
		val.Parent = "antihack";
		val.FullName = "antihack.melee_penalty";
		val.ServerAdmin = true;
		val.Variable = true;
		val.GetOveride = () => ConVar.AntiHack.melee_penalty.ToString();
		val.SetOveride = delegate(string str)
		{
			ConVar.AntiHack.melee_penalty = StringExtensions.ToFloat(str, 0f);
		};
		array[315] = val;
		val = new Command();
		val.Name = "melee_protection";
		val.Parent = "antihack";
		val.FullName = "antihack.melee_protection";
		val.ServerAdmin = true;
		val.Variable = true;
		val.GetOveride = () => ConVar.AntiHack.melee_protection.ToString();
		val.SetOveride = delegate(string str)
		{
			ConVar.AntiHack.melee_protection = StringExtensions.ToInt(str, 0);
		};
		array[316] = val;
		val = new Command();
		val.Name = "melee_serverframes";
		val.Parent = "antihack";
		val.FullName = "antihack.melee_serverframes";
		val.ServerAdmin = true;
		val.Variable = true;
		val.GetOveride = () => ConVar.AntiHack.melee_serverframes.ToString();
		val.SetOveride = delegate(string str)
		{
			ConVar.AntiHack.melee_serverframes = StringExtensions.ToFloat(str, 0f);
		};
		array[317] = val;
		val = new Command();
		val.Name = "melee_terraincheck";
		val.Parent = "antihack";
		val.FullName = "antihack.melee_terraincheck";
		val.ServerAdmin = true;
		val.Variable = true;
		val.GetOveride = () => ConVar.AntiHack.melee_terraincheck.ToString();
		val.SetOveride = delegate(string str)
		{
			ConVar.AntiHack.melee_terraincheck = StringExtensions.ToBool(str);
		};
		array[318] = val;
		val = new Command();
		val.Name = "melee_vehiclecheck";
		val.Parent = "antihack";
		val.FullName = "antihack.melee_vehiclecheck";
		val.ServerAdmin = true;
		val.Variable = true;
		val.GetOveride = () => ConVar.AntiHack.melee_vehiclecheck.ToString();
		val.SetOveride = delegate(string str)
		{
			ConVar.AntiHack.melee_vehiclecheck = StringExtensions.ToBool(str);
		};
		array[319] = val;
		val = new Command();
		val.Name = "mesh_inside_check_distance";
		val.Parent = "antihack";
		val.FullName = "antihack.mesh_inside_check_distance";
		val.ServerAdmin = true;
		val.Variable = true;
		val.GetOveride = () => ConVar.AntiHack.mesh_inside_check_distance.ToString();
		val.SetOveride = delegate(string str)
		{
			ConVar.AntiHack.mesh_inside_check_distance = StringExtensions.ToFloat(str, 0f);
		};
		array[320] = val;
		val = new Command();
		val.Name = "modelstate";
		val.Parent = "antihack";
		val.FullName = "antihack.modelstate";
		val.ServerAdmin = true;
		val.Variable = true;
		val.GetOveride = () => ConVar.AntiHack.modelstate.ToString();
		val.SetOveride = delegate(string str)
		{
			ConVar.AntiHack.modelstate = StringExtensions.ToBool(str);
		};
		array[321] = val;
		val = new Command();
		val.Name = "noclip_backtracking";
		val.Parent = "antihack";
		val.FullName = "antihack.noclip_backtracking";
		val.ServerAdmin = true;
		val.ClientAdmin = true;
		val.Client = true;
		val.Replicated = true;
		val.Variable = true;
		val.GetOveride = () => ConVar.AntiHack.noclip_backtracking.ToString();
		val.SetOveride = delegate(string str)
		{
			ConVar.AntiHack.noclip_backtracking = StringExtensions.ToFloat(str, 0f);
		};
		val.Default = "0.01";
		array[322] = val;
		val = new Command();
		val.Name = "noclip_margin";
		val.Parent = "antihack";
		val.FullName = "antihack.noclip_margin";
		val.ServerAdmin = true;
		val.Variable = true;
		val.GetOveride = () => ConVar.AntiHack.noclip_margin.ToString();
		val.SetOveride = delegate(string str)
		{
			ConVar.AntiHack.noclip_margin = StringExtensions.ToFloat(str, 0f);
		};
		array[323] = val;
		val = new Command();
		val.Name = "noclip_margin_dismount";
		val.Parent = "antihack";
		val.FullName = "antihack.noclip_margin_dismount";
		val.ServerAdmin = true;
		val.ClientAdmin = true;
		val.Client = true;
		val.Replicated = true;
		val.Variable = true;
		val.GetOveride = () => ConVar.AntiHack.noclip_margin_dismount.ToString();
		val.SetOveride = delegate(string str)
		{
			ConVar.AntiHack.noclip_margin_dismount = StringExtensions.ToFloat(str, 0f);
		};
		val.Default = "0.22";
		array[324] = val;
		val = new Command();
		val.Name = "noclip_maxsteps";
		val.Parent = "antihack";
		val.FullName = "antihack.noclip_maxsteps";
		val.ServerAdmin = true;
		val.Variable = true;
		val.GetOveride = () => ConVar.AntiHack.noclip_maxsteps.ToString();
		val.SetOveride = delegate(string str)
		{
			ConVar.AntiHack.noclip_maxsteps = StringExtensions.ToInt(str, 0);
		};
		array[325] = val;
		val = new Command();
		val.Name = "noclip_penalty";
		val.Parent = "antihack";
		val.FullName = "antihack.noclip_penalty";
		val.ServerAdmin = true;
		val.Variable = true;
		val.GetOveride = () => ConVar.AntiHack.noclip_penalty.ToString();
		val.SetOveride = delegate(string str)
		{
			ConVar.AntiHack.noclip_penalty = StringExtensions.ToFloat(str, 0f);
		};
		array[326] = val;
		val = new Command();
		val.Name = "noclip_protection";
		val.Parent = "antihack";
		val.FullName = "antihack.noclip_protection";
		val.ServerAdmin = true;
		val.Variable = true;
		val.GetOveride = () => ConVar.AntiHack.noclip_protection.ToString();
		val.SetOveride = delegate(string str)
		{
			ConVar.AntiHack.noclip_protection = StringExtensions.ToInt(str, 0);
		};
		array[327] = val;
		val = new Command();
		val.Name = "noclip_reject";
		val.Parent = "antihack";
		val.FullName = "antihack.noclip_reject";
		val.ServerAdmin = true;
		val.Variable = true;
		val.GetOveride = () => ConVar.AntiHack.noclip_reject.ToString();
		val.SetOveride = delegate(string str)
		{
			ConVar.AntiHack.noclip_reject = StringExtensions.ToBool(str);
		};
		array[328] = val;
		val = new Command();
		val.Name = "noclip_stepsize";
		val.Parent = "antihack";
		val.FullName = "antihack.noclip_stepsize";
		val.ServerAdmin = true;
		val.Variable = true;
		val.GetOveride = () => ConVar.AntiHack.noclip_stepsize.ToString();
		val.SetOveride = delegate(string str)
		{
			ConVar.AntiHack.noclip_stepsize = StringExtensions.ToFloat(str, 0f);
		};
		array[329] = val;
		val = new Command();
		val.Name = "objectplacement";
		val.Parent = "antihack";
		val.FullName = "antihack.objectplacement";
		val.ServerAdmin = true;
		val.Variable = true;
		val.GetOveride = () => ConVar.AntiHack.objectplacement.ToString();
		val.SetOveride = delegate(string str)
		{
			ConVar.AntiHack.objectplacement = StringExtensions.ToBool(str);
		};
		array[330] = val;
		val = new Command();
		val.Name = "projectile_anglechange";
		val.Parent = "antihack";
		val.FullName = "antihack.projectile_anglechange";
		val.ServerAdmin = true;
		val.Variable = true;
		val.GetOveride = () => ConVar.AntiHack.projectile_anglechange.ToString();
		val.SetOveride = delegate(string str)
		{
			ConVar.AntiHack.projectile_anglechange = StringExtensions.ToFloat(str, 0f);
		};
		array[331] = val;
		val = new Command();
		val.Name = "projectile_backtracking";
		val.Parent = "antihack";
		val.FullName = "antihack.projectile_backtracking";
		val.ServerAdmin = true;
		val.Variable = true;
		val.GetOveride = () => ConVar.AntiHack.projectile_backtracking.ToString();
		val.SetOveride = delegate(string str)
		{
			ConVar.AntiHack.projectile_backtracking = StringExtensions.ToFloat(str, 0f);
		};
		array[332] = val;
		val = new Command();
		val.Name = "projectile_clientframes";
		val.Parent = "antihack";
		val.FullName = "antihack.projectile_clientframes";
		val.ServerAdmin = true;
		val.Variable = true;
		val.GetOveride = () => ConVar.AntiHack.projectile_clientframes.ToString();
		val.SetOveride = delegate(string str)
		{
			ConVar.AntiHack.projectile_clientframes = StringExtensions.ToFloat(str, 0f);
		};
		array[333] = val;
		val = new Command();
		val.Name = "projectile_damagedepth";
		val.Parent = "antihack";
		val.FullName = "antihack.projectile_damagedepth";
		val.ServerAdmin = true;
		val.Variable = true;
		val.GetOveride = () => ConVar.AntiHack.projectile_damagedepth.ToString();
		val.SetOveride = delegate(string str)
		{
			ConVar.AntiHack.projectile_damagedepth = StringExtensions.ToInt(str, 0);
		};
		array[334] = val;
		val = new Command();
		val.Name = "projectile_desync";
		val.Parent = "antihack";
		val.FullName = "antihack.projectile_desync";
		val.ServerAdmin = true;
		val.Variable = true;
		val.GetOveride = () => ConVar.AntiHack.projectile_desync.ToString();
		val.SetOveride = delegate(string str)
		{
			ConVar.AntiHack.projectile_desync = StringExtensions.ToFloat(str, 0f);
		};
		array[335] = val;
		val = new Command();
		val.Name = "projectile_distance_forgiveness_minimum";
		val.Parent = "antihack";
		val.FullName = "antihack.projectile_distance_forgiveness_minimum";
		val.ServerAdmin = true;
		val.Variable = true;
		val.GetOveride = () => ConVar.AntiHack.projectile_distance_forgiveness_minimum.ToString();
		val.SetOveride = delegate(string str)
		{
			ConVar.AntiHack.projectile_distance_forgiveness_minimum = StringExtensions.ToFloat(str, 0f);
		};
		array[336] = val;
		val = new Command();
		val.Name = "projectile_forgiveness";
		val.Parent = "antihack";
		val.FullName = "antihack.projectile_forgiveness";
		val.ServerAdmin = true;
		val.Variable = true;
		val.GetOveride = () => ConVar.AntiHack.projectile_forgiveness.ToString();
		val.SetOveride = delegate(string str)
		{
			ConVar.AntiHack.projectile_forgiveness = StringExtensions.ToFloat(str, 0f);
		};
		array[337] = val;
		val = new Command();
		val.Name = "projectile_impactspawndepth";
		val.Parent = "antihack";
		val.FullName = "antihack.projectile_impactspawndepth";
		val.ServerAdmin = true;
		val.Variable = true;
		val.GetOveride = () => ConVar.AntiHack.projectile_impactspawndepth.ToString();
		val.SetOveride = delegate(string str)
		{
			ConVar.AntiHack.projectile_impactspawndepth = StringExtensions.ToInt(str, 0);
		};
		array[338] = val;
		val = new Command();
		val.Name = "projectile_losforgiveness";
		val.Parent = "antihack";
		val.FullName = "antihack.projectile_losforgiveness";
		val.ServerAdmin = true;
		val.Variable = true;
		val.GetOveride = () => ConVar.AntiHack.projectile_losforgiveness.ToString();
		val.SetOveride = delegate(string str)
		{
			ConVar.AntiHack.projectile_losforgiveness = StringExtensions.ToFloat(str, 0f);
		};
		array[339] = val;
		val = new Command();
		val.Name = "projectile_penalty";
		val.Parent = "antihack";
		val.FullName = "antihack.projectile_penalty";
		val.ServerAdmin = true;
		val.Variable = true;
		val.GetOveride = () => ConVar.AntiHack.projectile_penalty.ToString();
		val.SetOveride = delegate(string str)
		{
			ConVar.AntiHack.projectile_penalty = StringExtensions.ToFloat(str, 0f);
		};
		array[340] = val;
		val = new Command();
		val.Name = "projectile_positionoffset";
		val.Parent = "antihack";
		val.FullName = "antihack.projectile_positionoffset";
		val.ServerAdmin = true;
		val.Variable = true;
		val.GetOveride = () => ConVar.AntiHack.projectile_positionoffset.ToString();
		val.SetOveride = delegate(string str)
		{
			ConVar.AntiHack.projectile_positionoffset = StringExtensions.ToBool(str);
		};
		array[341] = val;
		val = new Command();
		val.Name = "projectile_protection";
		val.Parent = "antihack";
		val.FullName = "antihack.projectile_protection";
		val.ServerAdmin = true;
		val.Variable = true;
		val.GetOveride = () => ConVar.AntiHack.projectile_protection.ToString();
		val.SetOveride = delegate(string str)
		{
			ConVar.AntiHack.projectile_protection = StringExtensions.ToInt(str, 0);
		};
		array[342] = val;
		val = new Command();
		val.Name = "projectile_serverframes";
		val.Parent = "antihack";
		val.FullName = "antihack.projectile_serverframes";
		val.ServerAdmin = true;
		val.Variable = true;
		val.GetOveride = () => ConVar.AntiHack.projectile_serverframes.ToString();
		val.SetOveride = delegate(string str)
		{
			ConVar.AntiHack.projectile_serverframes = StringExtensions.ToFloat(str, 0f);
		};
		array[343] = val;
		val = new Command();
		val.Name = "projectile_terraincheck";
		val.Parent = "antihack";
		val.FullName = "antihack.projectile_terraincheck";
		val.ServerAdmin = true;
		val.Variable = true;
		val.GetOveride = () => ConVar.AntiHack.projectile_terraincheck.ToString();
		val.SetOveride = delegate(string str)
		{
			ConVar.AntiHack.projectile_terraincheck = StringExtensions.ToBool(str);
		};
		array[344] = val;
		val = new Command();
		val.Name = "projectile_trajectory";
		val.Parent = "antihack";
		val.FullName = "antihack.projectile_trajectory";
		val.ServerAdmin = true;
		val.Variable = true;
		val.GetOveride = () => ConVar.AntiHack.projectile_trajectory.ToString();
		val.SetOveride = delegate(string str)
		{
			ConVar.AntiHack.projectile_trajectory = StringExtensions.ToFloat(str, 0f);
		};
		array[345] = val;
		val = new Command();
		val.Name = "projectile_trajectory_update";
		val.Parent = "antihack";
		val.FullName = "antihack.projectile_trajectory_update";
		val.ServerAdmin = true;
		val.Variable = true;
		val.GetOveride = () => ConVar.AntiHack.projectile_trajectory_update.ToString();
		val.SetOveride = delegate(string str)
		{
			ConVar.AntiHack.projectile_trajectory_update = StringExtensions.ToFloat(str, 0f);
		};
		array[346] = val;
		val = new Command();
		val.Name = "projectile_update_limit";
		val.Parent = "antihack";
		val.FullName = "antihack.projectile_update_limit";
		val.ServerAdmin = true;
		val.Variable = true;
		val.GetOveride = () => ConVar.AntiHack.projectile_update_limit.ToString();
		val.SetOveride = delegate(string str)
		{
			ConVar.AntiHack.projectile_update_limit = StringExtensions.ToInt(str, 0);
		};
		array[347] = val;
		val = new Command();
		val.Name = "projectile_vehiclecheck";
		val.Parent = "antihack";
		val.FullName = "antihack.projectile_vehiclecheck";
		val.ServerAdmin = true;
		val.Variable = true;
		val.GetOveride = () => ConVar.AntiHack.projectile_vehiclecheck.ToString();
		val.SetOveride = delegate(string str)
		{
			ConVar.AntiHack.projectile_vehiclecheck = StringExtensions.ToBool(str);
		};
		array[348] = val;
		val = new Command();
		val.Name = "projectile_velocitychange";
		val.Parent = "antihack";
		val.FullName = "antihack.projectile_velocitychange";
		val.ServerAdmin = true;
		val.Variable = true;
		val.GetOveride = () => ConVar.AntiHack.projectile_velocitychange.ToString();
		val.SetOveride = delegate(string str)
		{
			ConVar.AntiHack.projectile_velocitychange = StringExtensions.ToFloat(str, 0f);
		};
		array[349] = val;
		val = new Command();
		val.Name = "relaxationpause";
		val.Parent = "antihack";
		val.FullName = "antihack.relaxationpause";
		val.ServerAdmin = true;
		val.Variable = true;
		val.GetOveride = () => ConVar.AntiHack.relaxationpause.ToString();
		val.SetOveride = delegate(string str)
		{
			ConVar.AntiHack.relaxationpause = StringExtensions.ToFloat(str, 0f);
		};
		array[350] = val;
		val = new Command();
		val.Name = "relaxationrate";
		val.Parent = "antihack";
		val.FullName = "antihack.relaxationrate";
		val.ServerAdmin = true;
		val.Variable = true;
		val.GetOveride = () => ConVar.AntiHack.relaxationrate.ToString();
		val.SetOveride = delegate(string str)
		{
			ConVar.AntiHack.relaxationrate = StringExtensions.ToFloat(str, 0f);
		};
		array[351] = val;
		val = new Command();
		val.Name = "reporting";
		val.Parent = "antihack";
		val.FullName = "antihack.reporting";
		val.ServerAdmin = true;
		val.Variable = true;
		val.GetOveride = () => ConVar.AntiHack.reporting.ToString();
		val.SetOveride = delegate(string str)
		{
			ConVar.AntiHack.reporting = StringExtensions.ToBool(str);
		};
		array[352] = val;
		val = new Command();
		val.Name = "rpc_timer_forgiveness";
		val.Parent = "antihack";
		val.FullName = "antihack.rpc_timer_forgiveness";
		val.ServerAdmin = true;
		val.Variable = true;
		val.GetOveride = () => ConVar.AntiHack.rpc_timer_forgiveness.ToString();
		val.SetOveride = delegate(string str)
		{
			ConVar.AntiHack.rpc_timer_forgiveness = StringExtensions.ToFloat(str, 0f);
		};
		array[353] = val;
		val = new Command();
		val.Name = "rpcstallfade";
		val.Parent = "antihack";
		val.FullName = "antihack.rpcstallfade";
		val.ServerAdmin = true;
		val.Variable = true;
		val.GetOveride = () => ConVar.AntiHack.rpcstallfade.ToString();
		val.SetOveride = delegate(string str)
		{
			ConVar.AntiHack.rpcstallfade = StringExtensions.ToFloat(str, 0f);
		};
		array[354] = val;
		val = new Command();
		val.Name = "rpcstallmode";
		val.Parent = "antihack";
		val.FullName = "antihack.rpcstallmode";
		val.ServerAdmin = true;
		val.Variable = true;
		val.GetOveride = () => ConVar.AntiHack.rpcstallmode.ToString();
		val.SetOveride = delegate(string str)
		{
			ConVar.AntiHack.rpcstallmode = StringExtensions.ToInt(str, 0);
		};
		array[355] = val;
		val = new Command();
		val.Name = "rpcstallthreshold";
		val.Parent = "antihack";
		val.FullName = "antihack.rpcstallthreshold";
		val.ServerAdmin = true;
		val.Variable = true;
		val.GetOveride = () => ConVar.AntiHack.rpcstallthreshold.ToString();
		val.SetOveride = delegate(string str)
		{
			ConVar.AntiHack.rpcstallthreshold = StringExtensions.ToFloat(str, 0f);
		};
		array[356] = val;
		val = new Command();
		val.Name = "server_occlusion_admin_bypass";
		val.Parent = "antihack";
		val.FullName = "antihack.server_occlusion_admin_bypass";
		val.ServerAdmin = true;
		val.Variable = true;
		val.GetOveride = () => ConVar.AntiHack.server_occlusion_admin_bypass.ToString();
		val.SetOveride = delegate(string str)
		{
			ConVar.AntiHack.server_occlusion_admin_bypass = StringExtensions.ToBool(str);
		};
		array[357] = val;
		val = new Command();
		val.Name = "server_occlusion_blocked_grid_threshold";
		val.Parent = "antihack";
		val.FullName = "antihack.server_occlusion_blocked_grid_threshold";
		val.ServerAdmin = true;
		val.Variable = true;
		val.GetOveride = () => ConVar.AntiHack.server_occlusion_blocked_grid_threshold.ToString();
		val.SetOveride = delegate(string str)
		{
			ConVar.AntiHack.server_occlusion_blocked_grid_threshold = StringExtensions.ToInt(str, 0);
		};
		array[358] = val;
		val = new Command();
		val.Name = "server_occlusion_caching";
		val.Parent = "antihack";
		val.FullName = "antihack.server_occlusion_caching";
		val.ServerAdmin = true;
		val.Variable = true;
		val.GetOveride = () => ConVar.AntiHack.server_occlusion_caching.ToString();
		val.SetOveride = delegate(string str)
		{
			ConVar.AntiHack.server_occlusion_caching = StringExtensions.ToBool(str);
		};
		array[359] = val;
		val = new Command();
		val.Name = "server_occlusion_disable_los";
		val.Parent = "antihack";
		val.FullName = "antihack.server_occlusion_disable_los";
		val.ServerAdmin = true;
		val.Variable = true;
		val.GetOveride = () => ConVar.AntiHack.server_occlusion_disable_los.ToString();
		val.SetOveride = delegate(string str)
		{
			ConVar.AntiHack.server_occlusion_disable_los = StringExtensions.ToBool(str);
		};
		array[360] = val;
		val = new Command();
		val.Name = "server_occlusion_disable_sleeper_los";
		val.Parent = "antihack";
		val.FullName = "antihack.server_occlusion_disable_sleeper_los";
		val.ServerAdmin = true;
		val.Variable = true;
		val.GetOveride = () => ConVar.AntiHack.server_occlusion_disable_sleeper_los.ToString();
		val.SetOveride = delegate(string str)
		{
			ConVar.AntiHack.server_occlusion_disable_sleeper_los = StringExtensions.ToBool(str);
		};
		array[361] = val;
		val = new Command();
		val.Name = "server_occlusion_neighbour_threshold";
		val.Parent = "antihack";
		val.FullName = "antihack.server_occlusion_neighbour_threshold";
		val.ServerAdmin = true;
		val.Variable = true;
		val.GetOveride = () => ConVar.AntiHack.server_occlusion_neighbour_threshold.ToString();
		val.SetOveride = delegate(string str)
		{
			ConVar.AntiHack.server_occlusion_neighbour_threshold = StringExtensions.ToInt(str, 0);
		};
		array[362] = val;
		val = new Command();
		val.Name = "server_occlusion_save_grid";
		val.Parent = "antihack";
		val.FullName = "antihack.server_occlusion_save_grid";
		val.ServerAdmin = true;
		val.Variable = true;
		val.GetOveride = () => ConVar.AntiHack.server_occlusion_save_grid.ToString();
		val.SetOveride = delegate(string str)
		{
			ConVar.AntiHack.server_occlusion_save_grid = StringExtensions.ToBool(str);
		};
		array[363] = val;
		val = new Command();
		val.Name = "server_occlusion_use_neighbour_thresholds";
		val.Parent = "antihack";
		val.FullName = "antihack.server_occlusion_use_neighbour_thresholds";
		val.ServerAdmin = true;
		val.Variable = true;
		val.GetOveride = () => ConVar.AntiHack.server_occlusion_use_neighbour_thresholds.ToString();
		val.SetOveride = delegate(string str)
		{
			ConVar.AntiHack.server_occlusion_use_neighbour_thresholds = StringExtensions.ToBool(str);
		};
		array[364] = val;
		val = new Command();
		val.Name = "serverside_fall_damage";
		val.Parent = "antihack";
		val.FullName = "antihack.serverside_fall_damage";
		val.ServerAdmin = true;
		val.Variable = true;
		val.GetOveride = () => ConVar.AntiHack.serverside_fall_damage.ToString();
		val.SetOveride = delegate(string str)
		{
			ConVar.AntiHack.serverside_fall_damage = StringExtensions.ToBool(str);
		};
		array[365] = val;
		val = new Command();
		val.Name = "speedhack_forgiveness";
		val.Parent = "antihack";
		val.FullName = "antihack.speedhack_forgiveness";
		val.ServerAdmin = true;
		val.Variable = true;
		val.GetOveride = () => ConVar.AntiHack.speedhack_forgiveness.ToString();
		val.SetOveride = delegate(string str)
		{
			ConVar.AntiHack.speedhack_forgiveness = StringExtensions.ToFloat(str, 0f);
		};
		array[366] = val;
		val = new Command();
		val.Name = "speedhack_forgiveness_inertia";
		val.Parent = "antihack";
		val.FullName = "antihack.speedhack_forgiveness_inertia";
		val.ServerAdmin = true;
		val.Variable = true;
		val.GetOveride = () => ConVar.AntiHack.speedhack_forgiveness_inertia.ToString();
		val.SetOveride = delegate(string str)
		{
			ConVar.AntiHack.speedhack_forgiveness_inertia = StringExtensions.ToFloat(str, 0f);
		};
		array[367] = val;
		val = new Command();
		val.Name = "speedhack_penalty";
		val.Parent = "antihack";
		val.FullName = "antihack.speedhack_penalty";
		val.ServerAdmin = true;
		val.Variable = true;
		val.GetOveride = () => ConVar.AntiHack.speedhack_penalty.ToString();
		val.SetOveride = delegate(string str)
		{
			ConVar.AntiHack.speedhack_penalty = StringExtensions.ToFloat(str, 0f);
		};
		array[368] = val;
		val = new Command();
		val.Name = "speedhack_protection";
		val.Parent = "antihack";
		val.FullName = "antihack.speedhack_protection";
		val.ServerAdmin = true;
		val.Variable = true;
		val.GetOveride = () => ConVar.AntiHack.speedhack_protection.ToString();
		val.SetOveride = delegate(string str)
		{
			ConVar.AntiHack.speedhack_protection = StringExtensions.ToInt(str, 0);
		};
		array[369] = val;
		val = new Command();
		val.Name = "speedhack_reject";
		val.Parent = "antihack";
		val.FullName = "antihack.speedhack_reject";
		val.ServerAdmin = true;
		val.Variable = true;
		val.GetOveride = () => ConVar.AntiHack.speedhack_reject.ToString();
		val.SetOveride = delegate(string str)
		{
			ConVar.AntiHack.speedhack_reject = StringExtensions.ToBool(str);
		};
		array[370] = val;
		val = new Command();
		val.Name = "speedhack_slopespeed";
		val.Parent = "antihack";
		val.FullName = "antihack.speedhack_slopespeed";
		val.ServerAdmin = true;
		val.Variable = true;
		val.GetOveride = () => ConVar.AntiHack.speedhack_slopespeed.ToString();
		val.SetOveride = delegate(string str)
		{
			ConVar.AntiHack.speedhack_slopespeed = StringExtensions.ToFloat(str, 0f);
		};
		array[371] = val;
		val = new Command();
		val.Name = "terrain_check_geometry";
		val.Parent = "antihack";
		val.FullName = "antihack.terrain_check_geometry";
		val.ServerAdmin = true;
		val.Variable = true;
		val.GetOveride = () => ConVar.AntiHack.terrain_check_geometry.ToString();
		val.SetOveride = delegate(string str)
		{
			ConVar.AntiHack.terrain_check_geometry = StringExtensions.ToBool(str);
		};
		array[372] = val;
		val = new Command();
		val.Name = "terrain_kill";
		val.Parent = "antihack";
		val.FullName = "antihack.terrain_kill";
		val.ServerAdmin = true;
		val.Variable = true;
		val.GetOveride = () => ConVar.AntiHack.terrain_kill.ToString();
		val.SetOveride = delegate(string str)
		{
			ConVar.AntiHack.terrain_kill = StringExtensions.ToBool(str);
		};
		array[373] = val;
		val = new Command();
		val.Name = "terrain_padding";
		val.Parent = "antihack";
		val.FullName = "antihack.terrain_padding";
		val.ServerAdmin = true;
		val.Variable = true;
		val.GetOveride = () => ConVar.AntiHack.terrain_padding.ToString();
		val.SetOveride = delegate(string str)
		{
			ConVar.AntiHack.terrain_padding = StringExtensions.ToFloat(str, 0f);
		};
		array[374] = val;
		val = new Command();
		val.Name = "terrain_penalty";
		val.Parent = "antihack";
		val.FullName = "antihack.terrain_penalty";
		val.ServerAdmin = true;
		val.Variable = true;
		val.GetOveride = () => ConVar.AntiHack.terrain_penalty.ToString();
		val.SetOveride = delegate(string str)
		{
			ConVar.AntiHack.terrain_penalty = StringExtensions.ToFloat(str, 0f);
		};
		array[375] = val;
		val = new Command();
		val.Name = "terrain_protection";
		val.Parent = "antihack";
		val.FullName = "antihack.terrain_protection";
		val.ServerAdmin = true;
		val.Variable = true;
		val.GetOveride = () => ConVar.AntiHack.terrain_protection.ToString();
		val.SetOveride = delegate(string str)
		{
			ConVar.AntiHack.terrain_protection = StringExtensions.ToInt(str, 0);
		};
		array[376] = val;
		val = new Command();
		val.Name = "terrain_timeslice";
		val.Parent = "antihack";
		val.FullName = "antihack.terrain_timeslice";
		val.ServerAdmin = true;
		val.Variable = true;
		val.GetOveride = () => ConVar.AntiHack.terrain_timeslice.ToString();
		val.SetOveride = delegate(string str)
		{
			ConVar.AntiHack.terrain_timeslice = StringExtensions.ToInt(str, 0);
		};
		array[377] = val;
		val = new Command();
		val.Name = "tick_buffer_noclip_threshold";
		val.Parent = "antihack";
		val.FullName = "antihack.tick_buffer_noclip_threshold";
		val.ServerAdmin = true;
		val.Variable = true;
		val.GetOveride = () => ConVar.AntiHack.tick_buffer_noclip_threshold.ToString();
		val.SetOveride = delegate(string str)
		{
			ConVar.AntiHack.tick_buffer_noclip_threshold = StringExtensions.ToFloat(str, 0f);
		};
		array[378] = val;
		val = new Command();
		val.Name = "tick_buffer_preventions";
		val.Parent = "antihack";
		val.FullName = "antihack.tick_buffer_preventions";
		val.ServerAdmin = true;
		val.Variable = true;
		val.GetOveride = () => ConVar.AntiHack.tick_buffer_preventions.ToString();
		val.SetOveride = delegate(string str)
		{
			ConVar.AntiHack.tick_buffer_preventions = StringExtensions.ToBool(str);
		};
		array[379] = val;
		val = new Command();
		val.Name = "tick_buffer_reject_threshold";
		val.Parent = "antihack";
		val.FullName = "antihack.tick_buffer_reject_threshold";
		val.ServerAdmin = true;
		val.Variable = true;
		val.GetOveride = () => ConVar.AntiHack.tick_buffer_reject_threshold.ToString();
		val.SetOveride = delegate(string str)
		{
			ConVar.AntiHack.tick_buffer_reject_threshold = StringExtensions.ToFloat(str, 0f);
		};
		array[380] = val;
		val = new Command();
		val.Name = "tick_buffer_server_lag_threshold";
		val.Parent = "antihack";
		val.FullName = "antihack.tick_buffer_server_lag_threshold";
		val.ServerAdmin = true;
		val.Variable = true;
		val.GetOveride = () => ConVar.AntiHack.tick_buffer_server_lag_threshold.ToString();
		val.SetOveride = delegate(string str)
		{
			ConVar.AntiHack.tick_buffer_server_lag_threshold = StringExtensions.ToFloat(str, 0f);
		};
		array[381] = val;
		val = new Command();
		val.Name = "tick_distance_forgiveness";
		val.Parent = "antihack";
		val.FullName = "antihack.tick_distance_forgiveness";
		val.ServerAdmin = true;
		val.Variable = true;
		val.GetOveride = () => ConVar.AntiHack.tick_distance_forgiveness.ToString();
		val.SetOveride = delegate(string str)
		{
			ConVar.AntiHack.tick_distance_forgiveness = StringExtensions.ToFloat(str, 0f);
		};
		array[382] = val;
		val = new Command();
		val.Name = "tick_max_distance";
		val.Parent = "antihack";
		val.FullName = "antihack.tick_max_distance";
		val.ServerAdmin = true;
		val.Variable = true;
		val.GetOveride = () => ConVar.AntiHack.tick_max_distance.ToString();
		val.SetOveride = delegate(string str)
		{
			ConVar.AntiHack.tick_max_distance = StringExtensions.ToFloat(str, 0f);
		};
		array[383] = val;
		val = new Command();
		val.Name = "tick_max_distance_falling";
		val.Parent = "antihack";
		val.FullName = "antihack.tick_max_distance_falling";
		val.ServerAdmin = true;
		val.Variable = true;
		val.GetOveride = () => ConVar.AntiHack.tick_max_distance_falling.ToString();
		val.SetOveride = delegate(string str)
		{
			ConVar.AntiHack.tick_max_distance_falling = StringExtensions.ToFloat(str, 0f);
		};
		array[384] = val;
		val = new Command();
		val.Name = "tick_max_distance_parented";
		val.Parent = "antihack";
		val.FullName = "antihack.tick_max_distance_parented";
		val.ServerAdmin = true;
		val.Variable = true;
		val.GetOveride = () => ConVar.AntiHack.tick_max_distance_parented.ToString();
		val.SetOveride = delegate(string str)
		{
			ConVar.AntiHack.tick_max_distance_parented = StringExtensions.ToFloat(str, 0f);
		};
		array[385] = val;
		val = new Command();
		val.Name = "tickhistoryforgiveness";
		val.Parent = "antihack";
		val.FullName = "antihack.tickhistoryforgiveness";
		val.ServerAdmin = true;
		val.Variable = true;
		val.GetOveride = () => ConVar.AntiHack.tickhistoryforgiveness.ToString();
		val.SetOveride = delegate(string str)
		{
			ConVar.AntiHack.tickhistoryforgiveness = StringExtensions.ToFloat(str, 0f);
		};
		array[386] = val;
		val = new Command();
		val.Name = "tickhistorytime";
		val.Parent = "antihack";
		val.FullName = "antihack.tickhistorytime";
		val.ServerAdmin = true;
		val.Variable = true;
		val.GetOveride = () => ConVar.AntiHack.tickhistorytime.ToString();
		val.SetOveride = delegate(string str)
		{
			ConVar.AntiHack.tickhistorytime = StringExtensions.ToFloat(str, 0f);
		};
		array[387] = val;
		val = new Command();
		val.Name = "use_legacy_mesh_inside_check";
		val.Parent = "antihack";
		val.FullName = "antihack.use_legacy_mesh_inside_check";
		val.ServerAdmin = true;
		val.Variable = true;
		val.GetOveride = () => ConVar.AntiHack.use_legacy_mesh_inside_check.ToString();
		val.SetOveride = delegate(string str)
		{
			ConVar.AntiHack.use_legacy_mesh_inside_check = StringExtensions.ToBool(str);
		};
		array[388] = val;
		val = new Command();
		val.Name = "userlevel";
		val.Parent = "antihack";
		val.FullName = "antihack.userlevel";
		val.ServerAdmin = true;
		val.Variable = true;
		val.GetOveride = () => ConVar.AntiHack.userlevel.ToString();
		val.SetOveride = delegate(string str)
		{
			ConVar.AntiHack.userlevel = StringExtensions.ToInt(str, 0);
		};
		array[389] = val;
		val = new Command();
		val.Name = "alarmcooldown";
		val.Parent = "app";
		val.FullName = "app.alarmcooldown";
		val.ServerAdmin = true;
		val.Description = "Cooldown time before alarms can send another notification (in seconds)";
		val.Variable = true;
		val.GetOveride = () => App.alarmcooldown.ToString();
		val.SetOveride = delegate(string str)
		{
			App.alarmcooldown = StringExtensions.ToFloat(str, 0f);
		};
		array[390] = val;
		val = new Command();
		val.Name = "appban";
		val.Parent = "app";
		val.FullName = "app.appban";
		val.ServerAdmin = true;
		val.Variable = false;
		val.Call = delegate(Arg arg)
		{
			App.appban(arg);
		};
		array[391] = val;
		val = new Command();
		val.Name = "appunban";
		val.Parent = "app";
		val.FullName = "app.appunban";
		val.ServerAdmin = true;
		val.Variable = false;
		val.Call = delegate(Arg arg)
		{
			App.appunban(arg);
		};
		array[392] = val;
		val = new Command();
		val.Name = "connections";
		val.Parent = "app";
		val.FullName = "app.connections";
		val.ServerAdmin = true;
		val.Variable = false;
		val.Call = delegate(Arg arg)
		{
			App.connections(arg);
		};
		array[393] = val;
		val = new Command();
		val.Name = "info";
		val.Parent = "app";
		val.FullName = "app.info";
		val.ServerAdmin = true;
		val.Variable = false;
		val.Call = delegate(Arg arg)
		{
			App.info(arg);
		};
		array[394] = val;
		val = new Command();
		val.Name = "listenip";
		val.Parent = "app";
		val.FullName = "app.listenip";
		val.ServerAdmin = true;
		val.Variable = true;
		val.GetOveride = () => App.listenip ?? "";
		val.SetOveride = delegate(string str)
		{
			App.listenip = str;
		};
		array[395] = val;
		val = new Command();
		val.Name = "maxconnections";
		val.Parent = "app";
		val.FullName = "app.maxconnections";
		val.ServerAdmin = true;
		val.Variable = true;
		val.GetOveride = () => App.maxconnections.ToString();
		val.SetOveride = delegate(string str)
		{
			App.maxconnections = StringExtensions.ToInt(str, 0);
		};
		array[396] = val;
		val = new Command();
		val.Name = "maxconnectionsperip";
		val.Parent = "app";
		val.FullName = "app.maxconnectionsperip";
		val.ServerAdmin = true;
		val.Variable = true;
		val.GetOveride = () => App.maxconnectionsperip.ToString();
		val.SetOveride = delegate(string str)
		{
			App.maxconnectionsperip = StringExtensions.ToInt(str, 0);
		};
		array[397] = val;
		val = new Command();
		val.Name = "maxmessagesize";
		val.Parent = "app";
		val.FullName = "app.maxmessagesize";
		val.ServerAdmin = true;
		val.Variable = true;
		val.GetOveride = () => App.maxmessagesize.ToString();
		val.SetOveride = delegate(string str)
		{
			App.maxmessagesize = StringExtensions.ToInt(str, 0);
		};
		array[398] = val;
		val = new Command();
		val.Name = "notifications";
		val.Parent = "app";
		val.FullName = "app.notifications";
		val.ServerAdmin = true;
		val.Description = "Enables sending push notifications";
		val.Variable = true;
		val.GetOveride = () => App.notifications.ToString();
		val.SetOveride = delegate(string str)
		{
			App.notifications = StringExtensions.ToBool(str);
		};
		array[399] = val;
		val = new Command();
		val.Name = "pair";
		val.Parent = "app";
		val.FullName = "app.pair";
		val.ServerUser = true;
		val.Variable = false;
		val.Call = delegate(Arg arg)
		{
			App.pair(arg);
		};
		array[400] = val;
		val = new Command();
		val.Name = "port";
		val.Parent = "app";
		val.FullName = "app.port";
		val.ServerAdmin = true;
		val.Variable = true;
		val.GetOveride = () => App.port.ToString();
		val.SetOveride = delegate(string str)
		{
			App.port = StringExtensions.ToInt(str, 0);
		};
		array[401] = val;
		val = new Command();
		val.Name = "publicip";
		val.Parent = "app";
		val.FullName = "app.publicip";
		val.ServerAdmin = true;
		val.Variable = true;
		val.GetOveride = () => App.publicip ?? "";
		val.SetOveride = delegate(string str)
		{
			App.publicip = str;
		};
		array[402] = val;
		val = new Command();
		val.Name = "queuelimit";
		val.Parent = "app";
		val.FullName = "app.queuelimit";
		val.ServerAdmin = true;
		val.Description = "Max number of queued messages - set to 0 to disable message processing";
		val.Variable = true;
		val.GetOveride = () => App.queuelimit.ToString();
		val.SetOveride = delegate(string str)
		{
			App.queuelimit = StringExtensions.ToInt(str, 0);
		};
		array[403] = val;
		val = new Command();
		val.Name = "regeneratetoken";
		val.Parent = "app";
		val.FullName = "app.regeneratetoken";
		val.ServerUser = true;
		val.Variable = false;
		val.Call = delegate(Arg arg)
		{
			App.regeneratetoken(arg);
		};
		array[404] = val;
		val = new Command();
		val.Name = "resetlimiter";
		val.Parent = "app";
		val.FullName = "app.resetlimiter";
		val.ServerAdmin = true;
		val.Variable = false;
		val.Call = delegate(Arg arg)
		{
			App.resetlimiter(arg);
		};
		array[405] = val;
		val = new Command();
		val.Name = "retry_initialize";
		val.Parent = "app";
		val.FullName = "app.retry_initialize";
		val.ServerAdmin = true;
		val.Description = "Retry initializing the Rust+ companion server if it previously failed";
		val.Variable = false;
		val.Call = delegate(Arg arg)
		{
			App.retry_initialize(arg);
		};
		array[406] = val;
		val = new Command();
		val.Name = "serverid";
		val.Parent = "app";
		val.FullName = "app.serverid";
		val.ServerAdmin = true;
		val.ClientAdmin = true;
		val.Client = true;
		val.Replicated = true;
		val.Variable = true;
		val.GetOveride = () => App.serverid ?? "";
		val.SetOveride = delegate(string str)
		{
			App.serverid = str;
		};
		val.Default = "";
		array[407] = val;
		val = new Command();
		val.Name = "update";
		val.Parent = "app";
		val.FullName = "app.update";
		val.ServerAdmin = true;
		val.Description = "Disables updating entirely - emergency use only";
		val.Variable = true;
		val.GetOveride = () => App.update.ToString();
		val.SetOveride = delegate(string str)
		{
			App.update = StringExtensions.ToBool(str);
		};
		array[408] = val;
		val = new Command();
		val.Name = "verbose";
		val.Parent = "batching";
		val.FullName = "batching.verbose";
		val.ServerAdmin = true;
		val.Variable = true;
		val.GetOveride = () => Batching.verbose.ToString();
		val.SetOveride = delegate(string str)
		{
			Batching.verbose = StringExtensions.ToInt(str, 0);
		};
		array[409] = val;
		val = new Command();
		val.Name = "enabled";
		val.Parent = "bradley";
		val.FullName = "bradley.enabled";
		val.ServerAdmin = true;
		val.Variable = true;
		val.GetOveride = () => Bradley.enabled.ToString();
		val.SetOveride = delegate(string str)
		{
			Bradley.enabled = StringExtensions.ToBool(str);
		};
		array[410] = val;
		val = new Command();
		val.Name = "quickrespawn";
		val.Parent = "bradley";
		val.FullName = "bradley.quickrespawn";
		val.ServerAdmin = true;
		val.Variable = false;
		val.Call = delegate(Arg arg)
		{
			Bradley.quickrespawn(arg);
		};
		array[411] = val;
		val = new Command();
		val.Name = "respawndelayminutes";
		val.Parent = "bradley";
		val.FullName = "bradley.respawndelayminutes";
		val.ServerAdmin = true;
		val.Variable = true;
		val.GetOveride = () => Bradley.respawnDelayMinutes.ToString();
		val.SetOveride = delegate(string str)
		{
			Bradley.respawnDelayMinutes = StringExtensions.ToFloat(str, 0f);
		};
		array[412] = val;
		val = new Command();
		val.Name = "respawndelayvariance";
		val.Parent = "bradley";
		val.FullName = "bradley.respawndelayvariance";
		val.ServerAdmin = true;
		val.Variable = true;
		val.GetOveride = () => Bradley.respawnDelayVariance.ToString();
		val.SetOveride = delegate(string str)
		{
			Bradley.respawnDelayVariance = StringExtensions.ToFloat(str, 0f);
		};
		array[413] = val;
		val = new Command();
		val.Name = "cardgamesay";
		val.Parent = "chat";
		val.FullName = "chat.cardgamesay";
		val.ServerUser = true;
		val.Variable = false;
		val.Call = delegate(Arg arg)
		{
			Chat.cardgamesay(arg);
		};
		array[414] = val;
		val = new Command();
		val.Name = "clansay";
		val.Parent = "chat";
		val.FullName = "chat.clansay";
		val.ServerUser = true;
		val.Variable = false;
		val.Call = delegate(Arg arg)
		{
			Chat.clansay(arg);
		};
		array[415] = val;
		val = new Command();
		val.Name = "enabled";
		val.Parent = "chat";
		val.FullName = "chat.enabled";
		val.ServerAdmin = true;
		val.Variable = true;
		val.GetOveride = () => Chat.enabled.ToString();
		val.SetOveride = delegate(string str)
		{
			Chat.enabled = StringExtensions.ToBool(str);
		};
		array[416] = val;
		val = new Command();
		val.Name = "globalchat";
		val.Parent = "chat";
		val.FullName = "chat.globalchat";
		val.ServerAdmin = true;
		val.ClientAdmin = true;
		val.Client = true;
		val.Replicated = true;
		val.Variable = true;
		val.GetOveride = () => Chat.globalchat.ToString();
		val.SetOveride = delegate(string str)
		{
			Chat.globalchat = StringExtensions.ToBool(str);
		};
		val.Default = "True";
		array[417] = val;
		val = new Command();
		val.Name = "hidechatintutorial";
		val.Parent = "chat";
		val.FullName = "chat.hidechatintutorial";
		val.ServerAdmin = true;
		val.ClientAdmin = true;
		val.Client = true;
		val.Replicated = true;
		val.Variable = true;
		val.GetOveride = () => Chat.hideChatInTutorial.ToString();
		val.SetOveride = delegate(string str)
		{
			Chat.hideChatInTutorial = StringExtensions.ToBool(str);
		};
		val.Default = "True";
		array[418] = val;
		val = new Command();
		val.Name = "historysize";
		val.Parent = "chat";
		val.FullName = "chat.historysize";
		val.ServerAdmin = true;
		val.Description = "Number of messages to keep in memory for chat history";
		val.Variable = true;
		val.GetOveride = () => Chat.historysize.ToString();
		val.SetOveride = delegate(string str)
		{
			Chat.historysize = StringExtensions.ToInt(str, 0);
		};
		array[419] = val;
		val = new Command();
		val.Name = "localchat";
		val.Parent = "chat";
		val.FullName = "chat.localchat";
		val.ServerAdmin = true;
		val.ClientAdmin = true;
		val.Client = true;
		val.Replicated = true;
		val.Variable = true;
		val.GetOveride = () => Chat.localchat.ToString();
		val.SetOveride = delegate(string str)
		{
			Chat.localchat = StringExtensions.ToBool(str);
		};
		val.Default = "False";
		array[420] = val;
		val = new Command();
		val.Name = "localchatrange";
		val.Parent = "chat";
		val.FullName = "chat.localchatrange";
		val.ServerAdmin = true;
		val.Variable = true;
		val.GetOveride = () => Chat.localChatRange.ToString();
		val.SetOveride = delegate(string str)
		{
			Chat.localChatRange = StringExtensions.ToFloat(str, 0f);
		};
		array[421] = val;
		val = new Command();
		val.Name = "localsay";
		val.Parent = "chat";
		val.FullName = "chat.localsay";
		val.ServerUser = true;
		val.Variable = false;
		val.Call = delegate(Arg arg)
		{
			Chat.localsay(arg);
		};
		array[422] = val;
		val = new Command();
		val.Name = "say";
		val.Parent = "chat";
		val.FullName = "chat.say";
		val.ServerUser = true;
		val.Variable = false;
		val.Call = delegate(Arg arg)
		{
			Chat.say(arg);
		};
		array[423] = val;
		val = new Command();
		val.Name = "search";
		val.Parent = "chat";
		val.FullName = "chat.search";
		val.ServerAdmin = true;
		val.Variable = false;
		val.Call = delegate(Arg arg)
		{
			IEnumerable<Chat.ChatEntry> enumerable = Chat.search(arg);
			arg.ReplyWithObject((object)enumerable);
		};
		array[424] = val;
		val = new Command();
		val.Name = "serverlog";
		val.Parent = "chat";
		val.FullName = "chat.serverlog";
		val.ServerAdmin = true;
		val.Variable = true;
		val.GetOveride = () => Chat.serverlog.ToString();
		val.SetOveride = delegate(string str)
		{
			Chat.serverlog = StringExtensions.ToBool(str);
		};
		array[425] = val;
		val = new Command();
		val.Name = "tail";
		val.Parent = "chat";
		val.FullName = "chat.tail";
		val.ServerAdmin = true;
		val.Variable = false;
		val.Call = delegate(Arg arg)
		{
			IEnumerable<Chat.ChatEntry> enumerable2 = Chat.tail(arg);
			arg.ReplyWithObject((object)enumerable2);
		};
		array[426] = val;
		val = new Command();
		val.Name = "teamsay";
		val.Parent = "chat";
		val.FullName = "chat.teamsay";
		val.ServerUser = true;
		val.Variable = false;
		val.Call = delegate(Arg arg)
		{
			Chat.teamsay(arg);
		};
		array[427] = val;
		val = new Command();
		val.Name = "editsrequireclantable";
		val.Parent = "clan";
		val.FullName = "clan.editsrequireclantable";
		val.ServerAdmin = true;
		val.ClientAdmin = true;
		val.Client = true;
		val.Description = "If enabled then players will need to be near a Clan Table to make changes to clans";
		val.Replicated = true;
		val.Variable = true;
		val.GetOveride = () => Clan.editsRequireClanTable.ToString();
		val.SetOveride = delegate(string str)
		{
			Clan.editsRequireClanTable = StringExtensions.ToBool(str);
		};
		val.Default = "true";
		array[428] = val;
		val = new Command();
		val.Name = "enabled";
		val.Parent = "clan";
		val.FullName = "clan.enabled";
		val.ServerAdmin = true;
		val.Description = "Enables the clan system if set to true (must be set at boot, requires restart)";
		val.Variable = true;
		val.GetOveride = () => Clan.enabled.ToString();
		val.SetOveride = delegate(string str)
		{
			Clan.enabled = StringExtensions.ToBool(str);
		};
		array[429] = val;
		val = new Command();
		val.Name = "info";
		val.Parent = "clan";
		val.FullName = "clan.info";
		val.ServerAdmin = true;
		val.Description = "Prints info about a clan given its ID";
		val.Variable = false;
		val.Call = delegate(Arg arg)
		{
			Clan.Info(arg);
		};
		array[430] = val;
		val = new Command();
		val.Name = "maxmembercount";
		val.Parent = "clan";
		val.FullName = "clan.maxmembercount";
		val.ServerAdmin = true;
		val.Description = "Maximum number of members each clan can have (local backend only!)";
		val.Variable = true;
		val.GetOveride = () => Clan.maxMemberCount.ToString();
		val.SetOveride = delegate(string str)
		{
			Clan.maxMemberCount = StringExtensions.ToInt(str, 0);
		};
		array[431] = val;
		val = new Command();
		val.Name = "scorefordestroyingbradley";
		val.Parent = "clan";
		val.FullName = "clan.scorefordestroyingbradley";
		val.ServerAdmin = true;
		val.Description = "How much score players earn for destroying bradley";
		val.Variable = true;
		val.GetOveride = () => Clan.scoreForDestroyingBradley.ToString();
		val.SetOveride = delegate(string str)
		{
			Clan.scoreForDestroyingBradley = StringExtensions.ToInt(str, 0);
		};
		array[432] = val;
		val = new Command();
		val.Name = "scorefordestroyingtoolcupboards";
		val.Parent = "clan";
		val.FullName = "clan.scorefordestroyingtoolcupboards";
		val.ServerAdmin = true;
		val.Description = "How much score players earn for destroying other player's tool cupboards";
		val.Variable = true;
		val.GetOveride = () => Clan.scoreForDestroyingToolCupboards.ToString();
		val.SetOveride = delegate(string str)
		{
			Clan.scoreForDestroyingToolCupboards = StringExtensions.ToInt(str, 0);
		};
		array[433] = val;
		val = new Command();
		val.Name = "scoreforhackingcrates";
		val.Parent = "clan";
		val.FullName = "clan.scoreforhackingcrates";
		val.ServerAdmin = true;
		val.Description = "How much score players earn for hacking crates";
		val.Variable = true;
		val.GetOveride = () => Clan.scoreForHackingCrates.ToString();
		val.SetOveride = delegate(string str)
		{
			Clan.scoreForHackingCrates = StringExtensions.ToInt(str, 0);
		};
		array[434] = val;
		val = new Command();
		val.Name = "scoreforkilledbyplayerinotherclan";
		val.Parent = "clan";
		val.FullName = "clan.scoreforkilledbyplayerinotherclan";
		val.ServerAdmin = true;
		val.Description = "How much score players earn for being killed by a player in another clan (this value should be negative)";
		val.Variable = true;
		val.GetOveride = () => Clan.scoreForKilledByPlayerInOtherClan.ToString();
		val.SetOveride = delegate(string str)
		{
			Clan.scoreForKilledByPlayerInOtherClan = StringExtensions.ToInt(str, 0);
		};
		array[435] = val;
		val = new Command();
		val.Name = "scoreforkillingplayerinotherclan";
		val.Parent = "clan";
		val.FullName = "clan.scoreforkillingplayerinotherclan";
		val.ServerAdmin = true;
		val.Description = "How much score players earn for killing a player in another clan";
		val.Variable = true;
		val.GetOveride = () => Clan.scoreForKillingPlayerInOtherClan.ToString();
		val.SetOveride = delegate(string str)
		{
			Clan.scoreForKillingPlayerInOtherClan = StringExtensions.ToInt(str, 0);
		};
		array[436] = val;
		val = new Command();
		val.Name = "scoreforkillingunarmedplayer";
		val.Parent = "clan";
		val.FullName = "clan.scoreforkillingunarmedplayer";
		val.ServerAdmin = true;
		val.Description = "How much score players earn for killing unarmed players (this value should be negative)";
		val.Variable = true;
		val.GetOveride = () => Clan.scoreForKillingUnarmedPlayer.ToString();
		val.SetOveride = delegate(string str)
		{
			Clan.scoreForKillingUnarmedPlayer = StringExtensions.ToInt(str, 0);
		};
		array[437] = val;
		val = new Command();
		val.Name = "scoreforlootingelitecrate";
		val.Parent = "clan";
		val.FullName = "clan.scoreforlootingelitecrate";
		val.ServerAdmin = true;
		val.Description = "How much score players earn for looting an elite crate";
		val.Variable = true;
		val.GetOveride = () => Clan.scoreForLootingEliteCrate.ToString();
		val.SetOveride = delegate(string str)
		{
			Clan.scoreForLootingEliteCrate = StringExtensions.ToInt(str, 0);
		};
		array[438] = val;
		val = new Command();
		val.Name = "scoreforopeninghackedcrates";
		val.Parent = "clan";
		val.FullName = "clan.scoreforopeninghackedcrates";
		val.ServerAdmin = true;
		val.Description = "How much score players earn for opening hacked crates";
		val.Variable = true;
		val.GetOveride = () => Clan.scoreForOpeningHackedCrates.ToString();
		val.SetOveride = delegate(string str)
		{
			Clan.scoreForOpeningHackedCrates = StringExtensions.ToInt(str, 0);
		};
		array[439] = val;
		val = new Command();
		val.Name = "scoreforreachingcargoship";
		val.Parent = "clan";
		val.FullName = "clan.scoreforreachingcargoship";
		val.ServerAdmin = true;
		val.Description = "How much score players earn for reaching cargo ship";
		val.Variable = true;
		val.GetOveride = () => Clan.scoreForReachingCargoShip.ToString();
		val.SetOveride = delegate(string str)
		{
			Clan.scoreForReachingCargoShip = StringExtensions.ToInt(str, 0);
		};
		array[440] = val;
		val = new Command();
		val.Name = "scoreforrunningexcavator";
		val.Parent = "clan";
		val.FullName = "clan.scoreforrunningexcavator";
		val.ServerAdmin = true;
		val.Description = "How much score players earn for running the excavator";
		val.Variable = true;
		val.GetOveride = () => Clan.scoreForRunningExcavator.ToString();
		val.SetOveride = delegate(string str)
		{
			Clan.scoreForRunningExcavator = StringExtensions.ToInt(str, 0);
		};
		array[441] = val;
		val = new Command();
		val.Name = "search";
		val.Parent = "console";
		val.FullName = "console.search";
		val.ServerAdmin = true;
		val.Variable = false;
		val.Call = delegate(Arg arg)
		{
			IEnumerable<Output.Entry> enumerable3 = Console.search(arg);
			arg.ReplyWithObject((object)enumerable3);
		};
		array[442] = val;
		val = new Command();
		val.Name = "tail";
		val.Parent = "console";
		val.FullName = "console.tail";
		val.ServerAdmin = true;
		val.Variable = false;
		val.Call = delegate(Arg arg)
		{
			IEnumerable<Output.Entry> enumerable4 = Console.tail(arg);
			arg.ReplyWithObject((object)enumerable4);
		};
		array[443] = val;
		val = new Command();
		val.Name = "frameminutes";
		val.Parent = "construct";
		val.FullName = "construct.frameminutes";
		val.ServerAdmin = true;
		val.Variable = true;
		val.GetOveride = () => Construct.frameminutes.ToString();
		val.SetOveride = delegate(string str)
		{
			Construct.frameminutes = StringExtensions.ToFloat(str, 0f);
		};
		array[444] = val;
		val = new Command();
		val.Name = "copybox_sv";
		val.Parent = "copypaste";
		val.FullName = "copypaste.copybox_sv";
		val.ServerAdmin = true;
		val.Variable = false;
		val.Call = delegate(Arg arg)
		{
			CopyPaste.copybox_sv(arg);
		};
		array[445] = val;
		val = new Command();
		val.Name = "copybuilding_sv";
		val.Parent = "copypaste";
		val.FullName = "copypaste.copybuilding_sv";
		val.ServerAdmin = true;
		val.Variable = false;
		val.Call = delegate(Arg arg)
		{
			CopyPaste.copybuilding_sv(arg);
		};
		array[446] = val;
		val = new Command();
		val.Name = "copyradius_sv";
		val.Parent = "copypaste";
		val.FullName = "copypaste.copyradius_sv";
		val.ServerAdmin = true;
		val.Variable = false;
		val.Call = delegate(Arg arg)
		{
			CopyPaste.copyradius_sv(arg);
		};
		array[447] = val;
		val = new Command();
		val.Name = "download_paste";
		val.Parent = "copypaste";
		val.FullName = "copypaste.download_paste";
		val.ServerAdmin = true;
		val.Variable = false;
		val.Call = delegate(Arg arg)
		{
			CopyPaste.download_paste(arg);
		};
		array[448] = val;
		val = new Command();
		val.Name = "killbox_sv";
		val.Parent = "copypaste";
		val.FullName = "copypaste.killbox_sv";
		val.ServerAdmin = true;
		val.Variable = false;
		val.Call = delegate(Arg arg)
		{
			CopyPaste.killbox_sv(arg);
		};
		array[449] = val;
		val = new Command();
		val.Name = "list_pastes_sv";
		val.Parent = "copypaste";
		val.FullName = "copypaste.list_pastes_sv";
		val.ServerAdmin = true;
		val.Variable = false;
		val.Call = delegate(Arg arg)
		{
			CopyPaste.list_pastes_sv(arg);
		};
		array[450] = val;
		val = new Command();
		val.Name = "printselection_sv";
		val.Parent = "copypaste";
		val.FullName = "copypaste.printselection_sv";
		val.ServerAdmin = true;
		val.Variable = false;
		val.Call = delegate(Arg arg)
		{
			CopyPaste.printselection_sv(arg);
		};
		array[451] = val;
		val = new Command();
		val.Name = "undopaste_sv";
		val.Parent = "copypaste";
		val.FullName = "copypaste.undopaste_sv";
		val.ServerAdmin = true;
		val.Variable = false;
		val.Call = delegate(Arg arg)
		{
			CopyPaste.undopaste_sv(arg);
		};
		array[452] = val;
		val = new Command();
		val.Name = "add";
		val.Parent = "craft";
		val.FullName = "craft.add";
		val.ServerUser = true;
		val.Variable = false;
		val.Call = delegate(Arg arg)
		{
			Craft.add(arg);
		};
		array[453] = val;
		val = new Command();
		val.Name = "cancel";
		val.Parent = "craft";
		val.FullName = "craft.cancel";
		val.ServerUser = true;
		val.Variable = false;
		val.Call = delegate(Arg arg)
		{
			Craft.cancel(arg);
		};
		array[454] = val;
		val = new Command();
		val.Name = "canceltask";
		val.Parent = "craft";
		val.FullName = "craft.canceltask";
		val.ServerUser = true;
		val.Variable = false;
		val.Call = delegate(Arg arg)
		{
			Craft.canceltask(arg);
		};
		array[455] = val;
		val = new Command();
		val.Name = "fasttracktask";
		val.Parent = "craft";
		val.FullName = "craft.fasttracktask";
		val.ServerUser = true;
		val.Variable = false;
		val.Call = delegate(Arg arg)
		{
			Craft.fasttracktask(arg);
		};
		array[456] = val;
		val = new Command();
		val.Name = "instant";
		val.Parent = "craft";
		val.FullName = "craft.instant";
		val.ServerAdmin = true;
		val.Variable = true;
		val.GetOveride = () => Craft.instant.ToString();
		val.SetOveride = delegate(string str)
		{
			Craft.instant = StringExtensions.ToBool(str);
		};
		array[457] = val;
		val = new Command();
		val.Name = "allusers";
		val.Parent = "creative";
		val.FullName = "creative.allusers";
		val.ServerAdmin = true;
		val.ClientAdmin = true;
		val.Client = true;
		val.Saved = true;
		val.Description = "Apply creative mode to the entire server";
		val.Replicated = true;
		val.Variable = true;
		val.GetOveride = () => Creative.allUsers.ToString();
		val.SetOveride = delegate(string str)
		{
			Creative.allUsers = StringExtensions.ToBool(str);
		};
		val.Default = "False";
		array[458] = val;
		val = new Command();
		val.Name = "alwaysonenabled";
		val.Parent = "creative";
		val.FullName = "creative.alwaysonenabled";
		val.ServerAdmin = true;
		val.Saved = true;
		val.Variable = true;
		val.GetOveride = () => Creative.alwaysOnEnabled.ToString();
		val.SetOveride = delegate(string str)
		{
			Creative.alwaysOnEnabled = StringExtensions.ToBool(str);
		};
		array[459] = val;
		val = new Command();
		val.Name = "bypassholdtoplaceduration";
		val.Parent = "creative";
		val.FullName = "creative.bypassholdtoplaceduration";
		val.ServerAdmin = true;
		val.ClientAdmin = true;
		val.Client = true;
		val.Saved = true;
		val.Description = "Bypasses bypassHoldToPlaceDuration when deploying items";
		val.Replicated = true;
		val.Variable = true;
		val.GetOveride = () => Creative.bypassHoldToPlaceDuration.ToString();
		val.SetOveride = delegate(string str)
		{
			Creative.bypassHoldToPlaceDuration = StringExtensions.ToBool(str);
		};
		val.Default = "False";
		array[460] = val;
		val = new Command();
		val.Name = "freebuild";
		val.Parent = "creative";
		val.FullName = "creative.freebuild";
		val.ServerAdmin = true;
		val.ClientAdmin = true;
		val.Client = true;
		val.Saved = true;
		val.Description = "Build blocks for free";
		val.Replicated = true;
		val.Variable = true;
		val.GetOveride = () => Creative.freeBuild.ToString();
		val.SetOveride = delegate(string str)
		{
			Creative.freeBuild = StringExtensions.ToBool(str);
		};
		val.Default = "False";
		array[461] = val;
		val = new Command();
		val.Name = "freeplacement";
		val.Parent = "creative";
		val.FullName = "creative.freeplacement";
		val.ServerAdmin = true;
		val.ClientAdmin = true;
		val.Client = true;
		val.Saved = true;
		val.Description = "Bypasses all placement checks";
		val.Replicated = true;
		val.Variable = true;
		val.GetOveride = () => Creative.freePlacement.ToString();
		val.SetOveride = delegate(string str)
		{
			Creative.freePlacement = StringExtensions.ToBool(str);
		};
		val.Default = "False";
		array[462] = val;
		val = new Command();
		val.Name = "freerepair";
		val.Parent = "creative";
		val.FullName = "creative.freerepair";
		val.ServerAdmin = true;
		val.ClientAdmin = true;
		val.Client = true;
		val.Saved = true;
		val.Description = "Bypass the 30s repair cooldown when repairing objects";
		val.Replicated = true;
		val.Variable = true;
		val.GetOveride = () => Creative.freeRepair.ToString();
		val.SetOveride = delegate(string str)
		{
			Creative.freeRepair = StringExtensions.ToBool(str);
		};
		val.Default = "False";
		array[463] = val;
		val = new Command();
		val.Name = "togglealwayson";
		val.Parent = "creative";
		val.FullName = "creative.togglealwayson";
		val.ServerAdmin = true;
		val.ServerUser = true;
		val.Variable = false;
		val.Call = delegate(Arg arg)
		{
			Creative.toggleAlwaysOn(arg);
		};
		array[464] = val;
		val = new Command();
		val.Name = "togglealwaysonall";
		val.Parent = "creative";
		val.FullName = "creative.togglealwaysonall";
		val.ServerAdmin = true;
		val.Variable = false;
		val.Call = delegate(Arg arg)
		{
			Creative.toggleAlwaysOnAll(arg);
		};
		array[465] = val;
		val = new Command();
		val.Name = "togglealwaysonradius";
		val.Parent = "creative";
		val.FullName = "creative.togglealwaysonradius";
		val.ServerAdmin = true;
		val.ServerUser = true;
		val.Variable = false;
		val.Call = delegate(Arg arg)
		{
			Creative.toggleAlwaysOnRadius(arg);
		};
		array[466] = val;
		val = new Command();
		val.Name = "togglecreativemodeuser";
		val.Parent = "creative";
		val.FullName = "creative.togglecreativemodeuser";
		val.ServerAdmin = true;
		val.Variable = false;
		val.Call = delegate(Arg arg)
		{
			Creative.toggleCreativeModeUser(arg);
		};
		array[467] = val;
		val = new Command();
		val.Name = "unlimitedio";
		val.Parent = "creative";
		val.FullName = "creative.unlimitedio";
		val.ServerAdmin = true;
		val.ClientAdmin = true;
		val.Client = true;
		val.Saved = true;
		val.Description = "Bypasses limits on IO length and points";
		val.Replicated = true;
		val.Variable = true;
		val.GetOveride = () => Creative.unlimitedIo.ToString();
		val.SetOveride = delegate(string str)
		{
			Creative.unlimitedIo = StringExtensions.ToBool(str);
		};
		val.Default = "False";
		array[468] = val;
		val = new Command();
		val.Name = "export";
		val.Parent = "data";
		val.FullName = "data.export";
		val.ServerAdmin = true;
		val.Variable = false;
		val.Call = delegate(Arg arg)
		{
			Data.export(arg);
		};
		array[469] = val;
		val = new Command();
		val.Name = "applybuildingblockrandomisation";
		val.Parent = "debug";
		val.FullName = "debug.applybuildingblockrandomisation";
		val.ServerAdmin = true;
		val.Variable = false;
		val.Call = delegate(Arg arg)
		{
			Debugging.applyBuildingBlockRandomisation(arg);
		};
		array[470] = val;
		val = new Command();
		val.Name = "bench_io";
		val.Parent = "debug";
		val.FullName = "debug.bench_io";
		val.ServerAdmin = true;
		val.Description = "Spawn lots of IO entities to lag the server";
		val.Variable = false;
		val.Call = delegate(Arg arg)
		{
			Debugging.bench_io(arg);
		};
		array[471] = val;
		val = new Command();
		val.Name = "breakheld";
		val.Parent = "debug";
		val.FullName = "debug.breakheld";
		val.ServerAdmin = true;
		val.Description = "Break the current held object";
		val.Variable = false;
		val.Call = delegate(Arg arg)
		{
			Debugging.breakheld(arg);
		};
		array[472] = val;
		val = new Command();
		val.Name = "breakheld_almost";
		val.Parent = "debug";
		val.FullName = "debug.breakheld_almost";
		val.ServerAdmin = true;
		val.Description = "Almost break the current held object";
		val.Variable = false;
		val.Call = delegate(Arg arg)
		{
			Debugging.breakheld_almost(arg);
		};
		array[473] = val;
		val = new Command();
		val.Name = "breakitem";
		val.Parent = "debug";
		val.FullName = "debug.breakitem";
		val.ServerAdmin = true;
		val.Description = "Break all the items in your inventory whose name match the passed string";
		val.Variable = false;
		val.Call = delegate(Arg arg)
		{
			Debugging.breakitem(arg);
		};
		array[474] = val;
		val = new Command();
		val.Name = "breakshield";
		val.Parent = "debug";
		val.FullName = "debug.breakshield";
		val.ServerAdmin = true;
		val.Description = "Breaks the currently held shield";
		val.Variable = false;
		val.Call = delegate(Arg arg)
		{
			Debugging.breakshield(arg);
		};
		array[475] = val;
		val = new Command();
		val.Name = "callbacks";
		val.Parent = "debug";
		val.FullName = "debug.callbacks";
		val.ServerAdmin = true;
		val.Variable = true;
		val.GetOveride = () => Debugging.callbacks.ToString();
		val.SetOveride = delegate(string str)
		{
			Debugging.callbacks = StringExtensions.ToBool(str);
		};
		array[476] = val;
		val = new Command();
		val.Name = "checkparentingtriggers";
		val.Parent = "debug";
		val.FullName = "debug.checkparentingtriggers";
		val.ServerAdmin = true;
		val.Variable = true;
		val.GetOveride = () => Debugging.checkparentingtriggers.ToString();
		val.SetOveride = delegate(string str)
		{
			Debugging.checkparentingtriggers = StringExtensions.ToBool(str);
		};
		array[477] = val;
		val = new Command();
		val.Name = "checktriggers";
		val.Parent = "debug";
		val.FullName = "debug.checktriggers";
		val.ServerAdmin = true;
		val.Variable = true;
		val.GetOveride = () => Debugging.checktriggers.ToString();
		val.SetOveride = delegate(string str)
		{
			Debugging.checktriggers = StringExtensions.ToBool(str);
		};
		array[478] = val;
		val = new Command();
		val.Name = "clearplayermodifiers";
		val.Parent = "debug";
		val.FullName = "debug.clearplayermodifiers";
		val.ServerAdmin = true;
		val.Variable = false;
		val.Call = delegate(Arg arg)
		{
			Debugging.clearPlayerModifiers(arg);
		};
		array[479] = val;
		val = new Command();
		val.Name = "cleartutorialforplayer";
		val.Parent = "debug";
		val.FullName = "debug.cleartutorialforplayer";
		val.ServerAdmin = true;
		val.Description = "If a player ends up stuck on a tutorial for any reason this will clear the island and reset the player (will also kill player)";
		val.Variable = false;
		val.Call = delegate(Arg arg)
		{
			Debugging.clearTutorialForPlayer(arg);
		};
		array[480] = val;
		val = new Command();
		val.Name = "completemission";
		val.Parent = "debug";
		val.FullName = "debug.completemission";
		val.ServerAdmin = true;
		val.Variable = false;
		val.Call = delegate(Arg arg)
		{
			Debugging.completeMission(arg);
		};
		array[481] = val;
		val = new Command();
		val.Name = "completemissionstage";
		val.Parent = "debug";
		val.FullName = "debug.completemissionstage";
		val.ServerAdmin = true;
		val.Variable = false;
		val.Call = delegate(Arg arg)
		{
			Debugging.completeMissionStage(arg);
		};
		array[482] = val;
		val = new Command();
		val.Name = "completetutorial";
		val.Parent = "debug";
		val.FullName = "debug.completetutorial";
		val.ServerAdmin = true;
		val.Variable = false;
		val.Call = delegate(Arg arg)
		{
			Debugging.completeTutorial(arg);
		};
		array[483] = val;
		val = new Command();
		val.Name = "debugdismounts";
		val.Parent = "debug";
		val.FullName = "debug.debugdismounts";
		val.ServerAdmin = true;
		val.Variable = true;
		val.GetOveride = () => Debugging.DebugDismounts.ToString();
		val.SetOveride = delegate(string str)
		{
			Debugging.DebugDismounts = StringExtensions.ToBool(str);
		};
		array[484] = val;
		val = new Command();
		val.Name = "deleteentitiesbyshortname";
		val.Parent = "debug";
		val.FullName = "debug.deleteentitiesbyshortname";
		val.ServerAdmin = true;
		val.Variable = false;
		val.Call = delegate(Arg arg)
		{
			Debugging.deleteEntitiesByShortname(arg);
		};
		array[485] = val;
		val = new Command();
		val.Name = "deleteentitybyid";
		val.Parent = "debug";
		val.FullName = "debug.deleteentitybyid";
		val.ServerAdmin = true;
		val.Variable = false;
		val.Call = delegate(Arg arg)
		{
			Debugging.deleteEntityById(arg);
		};
		array[486] = val;
		val = new Command();
		val.Name = "disablecondition";
		val.Parent = "debug";
		val.FullName = "debug.disablecondition";
		val.ServerAdmin = true;
		val.Description = "Do not damage any items";
		val.Variable = true;
		val.GetOveride = () => Debugging.disablecondition.ToString();
		val.SetOveride = delegate(string str)
		{
			Debugging.disablecondition = StringExtensions.ToBool(str);
		};
		array[487] = val;
		val = new Command();
		val.Name = "drink";
		val.Parent = "debug";
		val.FullName = "debug.drink";
		val.ServerAdmin = true;
		val.Variable = false;
		val.Call = delegate(Arg arg)
		{
			Debugging.drink(arg);
		};
		array[488] = val;
		val = new Command();
		val.Name = "dropworlditems";
		val.Parent = "debug";
		val.FullName = "debug.dropworlditems";
		val.ServerAdmin = true;
		val.Variable = false;
		val.Call = delegate(Arg arg)
		{
			Debugging.dropWorldItems(arg);
		};
		array[489] = val;
		val = new Command();
		val.Name = "eat";
		val.Parent = "debug";
		val.FullName = "debug.eat";
		val.ServerAdmin = true;
		val.Variable = false;
		val.Call = delegate(Arg arg)
		{
			Debugging.eat(arg);
		};
		array[490] = val;
		val = new Command();
		val.Name = "enable_player_movement";
		val.Parent = "debug";
		val.FullName = "debug.enable_player_movement";
		val.ServerAdmin = true;
		val.Variable = false;
		val.Call = delegate(Arg arg)
		{
			Debugging.enable_player_movement(arg);
		};
		array[491] = val;
		val = new Command();
		val.Name = "flushgroup";
		val.Parent = "debug";
		val.FullName = "debug.flushgroup";
		val.ServerAdmin = true;
		val.Description = "Takes you in and out of your current network group, causing you to delete and then download all entities in your PVS again";
		val.Variable = false;
		val.Call = delegate(Arg arg)
		{
			Debugging.flushgroup(arg);
		};
		array[492] = val;
		val = new Command();
		val.Name = "foodspoilingdeducttimehours";
		val.Parent = "debug";
		val.FullName = "debug.foodspoilingdeducttimehours";
		val.ServerAdmin = true;
		val.Description = "Deducts the given number of hours from all spoilable food on the server";
		val.Variable = false;
		val.Call = delegate(Arg arg)
		{
			Debugging.FoodSpoilingDeductTimeHours(arg);
		};
		array[493] = val;
		val = new Command();
		val.Name = "foodspoilinginventoryhours";
		val.Parent = "debug";
		val.FullName = "debug.foodspoilinginventoryhours";
		val.ServerAdmin = true;
		val.Description = "Applies the given number of hours to all food in the players inventory";
		val.Variable = false;
		val.Call = delegate(Arg arg)
		{
			Debugging.FoodSpoilingInventoryHours(arg);
		};
		array[494] = val;
		val = new Command();
		val.Name = "foodspoilingspoilall";
		val.Parent = "debug";
		val.FullName = "debug.foodspoilingspoilall";
		val.ServerAdmin = true;
		val.Description = "Spoils all food on the server";
		val.Variable = false;
		val.Call = delegate
		{
			Debugging.FoodSpoilingSpoilAll();
		};
		array[495] = val;
		val = new Command();
		val.Name = "forcechickensspawnegg";
		val.Parent = "debug";
		val.FullName = "debug.forcechickensspawnegg";
		val.ServerAdmin = true;
		val.Variable = false;
		val.Call = delegate(Arg arg)
		{
			Debugging.ForceChickensSpawnEgg(arg);
		};
		array[496] = val;
		val = new Command();
		val.Name = "heal";
		val.Parent = "debug";
		val.FullName = "debug.heal";
		val.ServerAdmin = true;
		val.Variable = false;
		val.Call = delegate(Arg arg)
		{
			Debugging.heal(arg);
		};
		array[497] = val;
		val = new Command();
		val.Name = "hurt";
		val.Parent = "debug";
		val.FullName = "debug.hurt";
		val.ServerAdmin = true;
		val.Variable = false;
		val.Call = delegate(Arg arg)
		{
			Debugging.hurt(arg);
		};
		array[498] = val;
		val = new Command();
		val.Name = "invis";
		val.Parent = "debug";
		val.FullName = "debug.invis";
		val.ServerAdmin = true;
		val.Description = "Make admin invisibile";
		val.Variable = false;
		val.Call = delegate(Arg arg)
		{
			Debugging.invis(arg);
		};
		array[499] = val;
		val = new Command();
		val.Name = "log";
		val.Parent = "debug";
		val.FullName = "debug.log";
		val.ServerAdmin = true;
		val.Variable = true;
		val.GetOveride = () => Debugging.log.ToString();
		val.SetOveride = delegate(string str)
		{
			Debugging.log = StringExtensions.ToBool(str);
		};
		array[500] = val;
		val = new Command();
		val.Name = "printgroups";
		val.Parent = "debug";
		val.FullName = "debug.printgroups";
		val.ServerAdmin = true;
		val.Variable = false;
		val.Call = delegate(Arg arg)
		{
			Debugging.printgroups(arg);
		};
		array[501] = val;
		val = new Command();
		val.Name = "printmissionspeakinfo";
		val.Parent = "debug";
		val.FullName = "debug.printmissionspeakinfo";
		val.ServerAdmin = true;
		val.Variable = true;
		val.GetOveride = () => Debugging.printMissionSpeakInfo.ToString();
		val.SetOveride = delegate(string str)
		{
			Debugging.printMissionSpeakInfo = StringExtensions.ToBool(str);
		};
		array[502] = val;
		val = new Command();
		val.Name = "puzzlereset";
		val.Parent = "debug";
		val.FullName = "debug.puzzlereset";
		val.ServerAdmin = true;
		val.Description = "reset all puzzles";
		val.Variable = false;
		val.Call = delegate(Arg arg)
		{
			Debugging.puzzlereset(arg);
		};
		array[503] = val;
		val = new Command();
		val.Name = "quittutorial";
		val.Parent = "debug";
		val.FullName = "debug.quittutorial";
		val.ServerUser = true;
		val.Variable = false;
		val.Call = delegate(Arg arg)
		{
			Debugging.quitTutorial(arg);
		};
		array[504] = val;
		val = new Command();
		val.Name = "refillvitals";
		val.Parent = "debug";
		val.FullName = "debug.refillvitals";
		val.ServerAdmin = true;
		val.ClientAdmin = true;
		val.Description = "Refills the vital of a target player. eg. debug.refillsvital jim - leave blank to target yourself, can take multiple players at once";
		val.Variable = false;
		val.Call = delegate(Arg arg)
		{
			Debugging.refillvitals(arg);
		};
		array[505] = val;
		val = new Command();
		val.Name = "refillvitalsall";
		val.Parent = "debug";
		val.FullName = "debug.refillvitalsall";
		val.ServerAdmin = true;
		val.ClientAdmin = true;
		val.Description = "Refills the vitals of all active players on the server";
		val.Variable = false;
		val.Call = delegate(Arg arg)
		{
			Debugging.refillvitalsall(arg);
		};
		array[506] = val;
		val = new Command();
		val.Name = "renderinfo";
		val.Parent = "debug";
		val.FullName = "debug.renderinfo";
		val.ServerAdmin = true;
		val.Variable = false;
		val.Call = delegate(Arg arg)
		{
			Debugging.renderinfo(arg);
		};
		array[507] = val;
		val = new Command();
		val.Name = "repair_inventory";
		val.Parent = "debug";
		val.FullName = "debug.repair_inventory";
		val.ServerAdmin = true;
		val.Description = "Repair all items in inventory";
		val.Variable = false;
		val.Call = delegate(Arg arg)
		{
			Debugging.repair_inventory(arg);
		};
		array[508] = val;
		val = new Command();
		val.Name = "resetsleepingbagtimers";
		val.Parent = "debug";
		val.FullName = "debug.resetsleepingbagtimers";
		val.ServerAdmin = true;
		val.Variable = false;
		val.Call = delegate(Arg arg)
		{
			Debugging.ResetSleepingBagTimers(arg);
		};
		array[509] = val;
		val = new Command();
		val.Name = "respawnvinetreesinradius";
		val.Parent = "debug";
		val.FullName = "debug.respawnvinetreesinradius";
		val.ServerAdmin = true;
		val.Variable = false;
		val.Call = delegate(Arg arg)
		{
			Debugging.respawnVineTreesInRadius(arg);
		};
		array[510] = val;
		val = new Command();
		val.Name = "setdamage";
		val.Parent = "debug";
		val.FullName = "debug.setdamage";
		val.ServerAdmin = true;
		val.Variable = false;
		val.Call = delegate(Arg arg)
		{
			Debugging.setdamage(arg);
		};
		array[511] = val;
		val = new Command();
		val.Name = "setfood";
		val.Parent = "debug";
		val.FullName = "debug.setfood";
		val.ServerAdmin = true;
		val.Variable = false;
		val.Call = delegate(Arg arg)
		{
			Debugging.setfood(arg);
		};
		array[512] = val;
		val = new Command();
		val.Name = "sethealth";
		val.Parent = "debug";
		val.FullName = "debug.sethealth";
		val.ServerAdmin = true;
		val.Variable = false;
		val.Call = delegate(Arg arg)
		{
			Debugging.sethealth(arg);
		};
		array[513] = val;
		val = new Command();
		val.Name = "setradiation";
		val.Parent = "debug";
		val.FullName = "debug.setradiation";
		val.ServerAdmin = true;
		val.Variable = false;
		val.Call = delegate(Arg arg)
		{
			Debugging.setradiation(arg);
		};
		array[514] = val;
		val = new Command();
		val.Name = "setwater";
		val.Parent = "debug";
		val.FullName = "debug.setwater";
		val.ServerAdmin = true;
		val.Variable = false;
		val.Call = delegate(Arg arg)
		{
			Debugging.setwater(arg);
		};
		array[515] = val;
		val = new Command();
		val.Name = "spawnparachutetester";
		val.Parent = "debug";
		val.FullName = "debug.spawnparachutetester";
		val.ServerAdmin = true;
		val.Variable = false;
		val.Call = delegate(Arg arg)
		{
			Debugging.spawnParachuteTester(arg);
		};
		array[516] = val;
		val = new Command();
		val.Name = "stall";
		val.Parent = "debug";
		val.FullName = "debug.stall";
		val.ServerAdmin = true;
		val.Variable = false;
		val.Call = delegate(Arg arg)
		{
			Debugging.stall(arg);
		};
		array[517] = val;
		val = new Command();
		val.Name = "starttutorial";
		val.Parent = "debug";
		val.FullName = "debug.starttutorial";
		val.ServerUser = true;
		val.Variable = false;
		val.Call = delegate(Arg arg)
		{
			Debugging.startTutorial(arg);
		};
		array[518] = val;
		val = new Command();
		val.Name = "testtutorialcinematic";
		val.Parent = "debug";
		val.FullName = "debug.testtutorialcinematic";
		val.ServerAdmin = true;
		val.Variable = false;
		val.Call = delegate(Arg arg)
		{
			string text3 = Debugging.testTutorialCinematic(arg);
			arg.ReplyWithObject((object)text3);
		};
		array[519] = val;
		val = new Command();
		val.Name = "tutorial_start_cooldown";
		val.Parent = "debug";
		val.FullName = "debug.tutorial_start_cooldown";
		val.ServerAdmin = true;
		val.Variable = true;
		val.GetOveride = () => Debugging.tutorial_start_cooldown.ToString();
		val.SetOveride = delegate(string str)
		{
			Debugging.tutorial_start_cooldown = StringExtensions.ToInt(str, 0);
		};
		array[520] = val;
		val = new Command();
		val.Name = "tutorialstatus";
		val.Parent = "debug";
		val.FullName = "debug.tutorialstatus";
		val.ServerAdmin = true;
		val.Variable = false;
		val.Call = delegate(Arg arg)
		{
			Debugging.tutorialStatus(arg);
		};
		array[521] = val;
		val = new Command();
		val.Name = "vineswinginghighlight";
		val.Parent = "debug";
		val.FullName = "debug.vineswinginghighlight";
		val.ServerAdmin = true;
		val.Variable = false;
		val.Call = delegate(Arg arg)
		{
			Debugging.vineSwingingHighlight(arg);
		};
		array[522] = val;
		val = new Command();
		val.Name = "vineswingingreport";
		val.Parent = "debug";
		val.FullName = "debug.vineswingingreport";
		val.ServerAdmin = true;
		val.Variable = false;
		val.Call = delegate(Arg arg)
		{
			Debugging.vineSwingingReport(arg);
		};
		array[523] = val;
		val = new Command();
		val.Name = "bracket_0_blockcount";
		val.Parent = "decay";
		val.FullName = "decay.bracket_0_blockcount";
		val.ServerAdmin = true;
		val.Description = "Between 0 and this value are considered bracket 0 and will cost bracket_0_costfraction per upkeep period to maintain";
		val.Variable = true;
		val.GetOveride = () => ConVar.Decay.bracket_0_blockcount.ToString();
		val.SetOveride = delegate(string str)
		{
			ConVar.Decay.bracket_0_blockcount = StringExtensions.ToInt(str, 0);
		};
		array[524] = val;
		val = new Command();
		val.Name = "bracket_0_costfraction";
		val.Parent = "decay";
		val.FullName = "decay.bracket_0_costfraction";
		val.ServerAdmin = true;
		val.Description = "blocks within bracket 0 will cost this fraction per upkeep period to maintain";
		val.Variable = true;
		val.GetOveride = () => ConVar.Decay.bracket_0_costfraction.ToString();
		val.SetOveride = delegate(string str)
		{
			ConVar.Decay.bracket_0_costfraction = StringExtensions.ToFloat(str, 0f);
		};
		array[525] = val;
		val = new Command();
		val.Name = "bracket_0_doorcount";
		val.Parent = "decay";
		val.FullName = "decay.bracket_0_doorcount";
		val.ServerAdmin = true;
		val.Description = "Between 0 and this value are considered bracket 0 and will cost bracket_0_doorfraction per upkeep period to maintain";
		val.Variable = true;
		val.GetOveride = () => ConVar.Decay.bracket_0_doorcount.ToString();
		val.SetOveride = delegate(string str)
		{
			ConVar.Decay.bracket_0_doorcount = StringExtensions.ToInt(str, 0);
		};
		array[526] = val;
		val = new Command();
		val.Name = "bracket_0_doorfraction";
		val.Parent = "decay";
		val.FullName = "decay.bracket_0_doorfraction";
		val.ServerAdmin = true;
		val.Description = "blocks within bracket 0 will cost this fraction per upkeep period to maintain";
		val.Variable = true;
		val.GetOveride = () => ConVar.Decay.bracket_0_doorfraction.ToString();
		val.SetOveride = delegate(string str)
		{
			ConVar.Decay.bracket_0_doorfraction = StringExtensions.ToFloat(str, 0f);
		};
		array[527] = val;
		val = new Command();
		val.Name = "bracket_1_blockcount";
		val.Parent = "decay";
		val.FullName = "decay.bracket_1_blockcount";
		val.ServerAdmin = true;
		val.Description = "Between bracket_0_blockcount and this value are considered bracket 1 and will cost bracket_1_costfraction per upkeep period to maintain";
		val.Variable = true;
		val.GetOveride = () => ConVar.Decay.bracket_1_blockcount.ToString();
		val.SetOveride = delegate(string str)
		{
			ConVar.Decay.bracket_1_blockcount = StringExtensions.ToInt(str, 0);
		};
		array[528] = val;
		val = new Command();
		val.Name = "bracket_1_costfraction";
		val.Parent = "decay";
		val.FullName = "decay.bracket_1_costfraction";
		val.ServerAdmin = true;
		val.Description = "blocks within bracket 1 will cost this fraction per upkeep period to maintain";
		val.Variable = true;
		val.GetOveride = () => ConVar.Decay.bracket_1_costfraction.ToString();
		val.SetOveride = delegate(string str)
		{
			ConVar.Decay.bracket_1_costfraction = StringExtensions.ToFloat(str, 0f);
		};
		array[529] = val;
		val = new Command();
		val.Name = "bracket_1_doorcount";
		val.Parent = "decay";
		val.FullName = "decay.bracket_1_doorcount";
		val.ServerAdmin = true;
		val.Description = "Between bracket_0_blockcount and this value are considered bracket 1 and will cost bracket_1_doorfraction per upkeep period to maintain";
		val.Variable = true;
		val.GetOveride = () => ConVar.Decay.bracket_1_doorcount.ToString();
		val.SetOveride = delegate(string str)
		{
			ConVar.Decay.bracket_1_doorcount = StringExtensions.ToInt(str, 0);
		};
		array[530] = val;
		val = new Command();
		val.Name = "bracket_1_doorfraction";
		val.Parent = "decay";
		val.FullName = "decay.bracket_1_doorfraction";
		val.ServerAdmin = true;
		val.Description = "blocks within bracket 1 will cost this fraction per upkeep period to maintain";
		val.Variable = true;
		val.GetOveride = () => ConVar.Decay.bracket_1_doorfraction.ToString();
		val.SetOveride = delegate(string str)
		{
			ConVar.Decay.bracket_1_doorfraction = StringExtensions.ToFloat(str, 0f);
		};
		array[531] = val;
		val = new Command();
		val.Name = "bracket_2_blockcount";
		val.Parent = "decay";
		val.FullName = "decay.bracket_2_blockcount";
		val.ServerAdmin = true;
		val.Description = "Between bracket_1_blockcount and this value are considered bracket 2 and will cost bracket_2_costfraction per upkeep period to maintain";
		val.Variable = true;
		val.GetOveride = () => ConVar.Decay.bracket_2_blockcount.ToString();
		val.SetOveride = delegate(string str)
		{
			ConVar.Decay.bracket_2_blockcount = StringExtensions.ToInt(str, 0);
		};
		array[532] = val;
		val = new Command();
		val.Name = "bracket_2_costfraction";
		val.Parent = "decay";
		val.FullName = "decay.bracket_2_costfraction";
		val.ServerAdmin = true;
		val.Description = "blocks within bracket 2 will cost this fraction per upkeep period to maintain";
		val.Variable = true;
		val.GetOveride = () => ConVar.Decay.bracket_2_costfraction.ToString();
		val.SetOveride = delegate(string str)
		{
			ConVar.Decay.bracket_2_costfraction = StringExtensions.ToFloat(str, 0f);
		};
		array[533] = val;
		val = new Command();
		val.Name = "bracket_2_doorcount";
		val.Parent = "decay";
		val.FullName = "decay.bracket_2_doorcount";
		val.ServerAdmin = true;
		val.Description = "Between bracket_1_blockcount and this value are considered bracket 2 and will cost bracket_2_doorfraction per upkeep period to maintain";
		val.Variable = true;
		val.GetOveride = () => ConVar.Decay.bracket_2_doorcount.ToString();
		val.SetOveride = delegate(string str)
		{
			ConVar.Decay.bracket_2_doorcount = StringExtensions.ToInt(str, 0);
		};
		array[534] = val;
		val = new Command();
		val.Name = "bracket_2_doorfraction";
		val.Parent = "decay";
		val.FullName = "decay.bracket_2_doorfraction";
		val.ServerAdmin = true;
		val.Description = "blocks within bracket 2 will cost this fraction per upkeep period to maintain";
		val.Variable = true;
		val.GetOveride = () => ConVar.Decay.bracket_2_doorfraction.ToString();
		val.SetOveride = delegate(string str)
		{
			ConVar.Decay.bracket_2_doorfraction = StringExtensions.ToFloat(str, 0f);
		};
		array[535] = val;
		val = new Command();
		val.Name = "bracket_3_blockcount";
		val.Parent = "decay";
		val.FullName = "decay.bracket_3_blockcount";
		val.ServerAdmin = true;
		val.Description = "Between bracket_2_blockcount and this value (and beyond) are considered bracket 3 and will cost bracket_3_costfraction per upkeep period to maintain";
		val.Variable = true;
		val.GetOveride = () => ConVar.Decay.bracket_3_blockcount.ToString();
		val.SetOveride = delegate(string str)
		{
			ConVar.Decay.bracket_3_blockcount = StringExtensions.ToInt(str, 0);
		};
		array[536] = val;
		val = new Command();
		val.Name = "bracket_3_costfraction";
		val.Parent = "decay";
		val.FullName = "decay.bracket_3_costfraction";
		val.ServerAdmin = true;
		val.Description = "blocks within bracket 3 will cost this fraction per upkeep period to maintain";
		val.Variable = true;
		val.GetOveride = () => ConVar.Decay.bracket_3_costfraction.ToString();
		val.SetOveride = delegate(string str)
		{
			ConVar.Decay.bracket_3_costfraction = StringExtensions.ToFloat(str, 0f);
		};
		array[537] = val;
		val = new Command();
		val.Name = "bracket_3_doorcount";
		val.Parent = "decay";
		val.FullName = "decay.bracket_3_doorcount";
		val.ServerAdmin = true;
		val.Description = "Between bracket_2_blockcount and this value (and beyond) are considered bracket 3 and will cost bracket_3_doorfraction per upkeep period to maintain";
		val.Variable = true;
		val.GetOveride = () => ConVar.Decay.bracket_3_doorcount.ToString();
		val.SetOveride = delegate(string str)
		{
			ConVar.Decay.bracket_3_doorcount = StringExtensions.ToInt(str, 0);
		};
		array[538] = val;
		val = new Command();
		val.Name = "bracket_3_doorfraction";
		val.Parent = "decay";
		val.FullName = "decay.bracket_3_doorfraction";
		val.ServerAdmin = true;
		val.Description = "blocks within bracket 3 will cost this fraction per upkeep period to maintain";
		val.Variable = true;
		val.GetOveride = () => ConVar.Decay.bracket_3_doorfraction.ToString();
		val.SetOveride = delegate(string str)
		{
			ConVar.Decay.bracket_3_doorfraction = StringExtensions.ToFloat(str, 0f);
		};
		array[539] = val;
		val = new Command();
		val.Name = "build_twig_cost_multiplier";
		val.Parent = "decay";
		val.FullName = "decay.build_twig_cost_multiplier";
		val.ServerAdmin = true;
		val.ClientAdmin = true;
		val.Client = true;
		val.Description = "Can players upgrade building blocks to wood";
		val.Replicated = true;
		val.Variable = true;
		val.GetOveride = () => ConVar.Decay.build_twig_cost_multiplier.ToString();
		val.SetOveride = delegate(string str)
		{
			ConVar.Decay.build_twig_cost_multiplier = StringExtensions.ToFloat(str, 0f);
		};
		val.Default = "1";
		array[540] = val;
		val = new Command();
		val.Name = "debug";
		val.Parent = "decay";
		val.FullName = "decay.debug";
		val.ServerAdmin = true;
		val.Variable = true;
		val.GetOveride = () => ConVar.Decay.debug.ToString();
		val.SetOveride = delegate(string str)
		{
			ConVar.Decay.debug = StringExtensions.ToBool(str);
		};
		array[541] = val;
		val = new Command();
		val.Name = "delay_metal";
		val.Parent = "decay";
		val.FullName = "decay.delay_metal";
		val.ServerAdmin = true;
		val.Description = "How long should this building grade decay be delayed when not protected by upkeep, in hours";
		val.Variable = true;
		val.GetOveride = () => ConVar.Decay.delay_metal.ToString();
		val.SetOveride = delegate(string str)
		{
			ConVar.Decay.delay_metal = StringExtensions.ToFloat(str, 0f);
		};
		array[542] = val;
		val = new Command();
		val.Name = "delay_override";
		val.Parent = "decay";
		val.FullName = "decay.delay_override";
		val.ServerAdmin = true;
		val.Description = "When set to a value above 0 everything will decay with this delay";
		val.Variable = true;
		val.GetOveride = () => ConVar.Decay.delay_override.ToString();
		val.SetOveride = delegate(string str)
		{
			ConVar.Decay.delay_override = StringExtensions.ToFloat(str, 0f);
		};
		array[543] = val;
		val = new Command();
		val.Name = "delay_stone";
		val.Parent = "decay";
		val.FullName = "decay.delay_stone";
		val.ServerAdmin = true;
		val.Description = "How long should this building grade decay be delayed when not protected by upkeep, in hours";
		val.Variable = true;
		val.GetOveride = () => ConVar.Decay.delay_stone.ToString();
		val.SetOveride = delegate(string str)
		{
			ConVar.Decay.delay_stone = StringExtensions.ToFloat(str, 0f);
		};
		array[544] = val;
		val = new Command();
		val.Name = "delay_toptier";
		val.Parent = "decay";
		val.FullName = "decay.delay_toptier";
		val.ServerAdmin = true;
		val.Description = "How long should this building grade decay be delayed when not protected by upkeep, in hours";
		val.Variable = true;
		val.GetOveride = () => ConVar.Decay.delay_toptier.ToString();
		val.SetOveride = delegate(string str)
		{
			ConVar.Decay.delay_toptier = StringExtensions.ToFloat(str, 0f);
		};
		array[545] = val;
		val = new Command();
		val.Name = "delay_twig";
		val.Parent = "decay";
		val.FullName = "decay.delay_twig";
		val.ServerAdmin = true;
		val.Description = "How long should this building grade decay be delayed when not protected by upkeep, in hours";
		val.Variable = true;
		val.GetOveride = () => ConVar.Decay.delay_twig.ToString();
		val.SetOveride = delegate(string str)
		{
			ConVar.Decay.delay_twig = StringExtensions.ToFloat(str, 0f);
		};
		array[546] = val;
		val = new Command();
		val.Name = "delay_wood";
		val.Parent = "decay";
		val.FullName = "decay.delay_wood";
		val.ServerAdmin = true;
		val.Description = "How long should this building grade decay be delayed when not protected by upkeep, in hours";
		val.Variable = true;
		val.GetOveride = () => ConVar.Decay.delay_wood.ToString();
		val.SetOveride = delegate(string str)
		{
			ConVar.Decay.delay_wood = StringExtensions.ToFloat(str, 0f);
		};
		array[547] = val;
		val = new Command();
		val.Name = "duration_metal";
		val.Parent = "decay";
		val.FullName = "decay.duration_metal";
		val.ServerAdmin = true;
		val.Description = "How long should this building grade take to decay when not protected by upkeep, in hours";
		val.Variable = true;
		val.GetOveride = () => ConVar.Decay.duration_metal.ToString();
		val.SetOveride = delegate(string str)
		{
			ConVar.Decay.duration_metal = StringExtensions.ToFloat(str, 0f);
		};
		array[548] = val;
		val = new Command();
		val.Name = "duration_override";
		val.Parent = "decay";
		val.FullName = "decay.duration_override";
		val.ServerAdmin = true;
		val.Description = "When set to a value above 0 everything will decay with this duration";
		val.Variable = true;
		val.GetOveride = () => ConVar.Decay.duration_override.ToString();
		val.SetOveride = delegate(string str)
		{
			ConVar.Decay.duration_override = StringExtensions.ToFloat(str, 0f);
		};
		array[549] = val;
		val = new Command();
		val.Name = "duration_stone";
		val.Parent = "decay";
		val.FullName = "decay.duration_stone";
		val.ServerAdmin = true;
		val.Description = "How long should this building grade take to decay when not protected by upkeep, in hours";
		val.Variable = true;
		val.GetOveride = () => ConVar.Decay.duration_stone.ToString();
		val.SetOveride = delegate(string str)
		{
			ConVar.Decay.duration_stone = StringExtensions.ToFloat(str, 0f);
		};
		array[550] = val;
		val = new Command();
		val.Name = "duration_toptier";
		val.Parent = "decay";
		val.FullName = "decay.duration_toptier";
		val.ServerAdmin = true;
		val.Description = "How long should this building grade take to decay when not protected by upkeep, in hours";
		val.Variable = true;
		val.GetOveride = () => ConVar.Decay.duration_toptier.ToString();
		val.SetOveride = delegate(string str)
		{
			ConVar.Decay.duration_toptier = StringExtensions.ToFloat(str, 0f);
		};
		array[551] = val;
		val = new Command();
		val.Name = "duration_twig";
		val.Parent = "decay";
		val.FullName = "decay.duration_twig";
		val.ServerAdmin = true;
		val.Description = "How long should this building grade take to decay when not protected by upkeep, in hours";
		val.Variable = true;
		val.GetOveride = () => ConVar.Decay.duration_twig.ToString();
		val.SetOveride = delegate(string str)
		{
			ConVar.Decay.duration_twig = StringExtensions.ToFloat(str, 0f);
		};
		array[552] = val;
		val = new Command();
		val.Name = "duration_wood";
		val.Parent = "decay";
		val.FullName = "decay.duration_wood";
		val.ServerAdmin = true;
		val.Description = "How long should this building grade take to decay when not protected by upkeep, in hours";
		val.Variable = true;
		val.GetOveride = () => ConVar.Decay.duration_wood.ToString();
		val.SetOveride = delegate(string str)
		{
			ConVar.Decay.duration_wood = StringExtensions.ToFloat(str, 0f);
		};
		array[553] = val;
		val = new Command();
		val.Name = "outside_test_range";
		val.Parent = "decay";
		val.FullName = "decay.outside_test_range";
		val.ServerAdmin = true;
		val.Description = "Maximum distance to test to see if a structure is outside, higher values are slower but accurate for huge buildings";
		val.Variable = true;
		val.GetOveride = () => ConVar.Decay.outside_test_range.ToString();
		val.SetOveride = delegate(string str)
		{
			ConVar.Decay.outside_test_range = StringExtensions.ToFloat(str, 0f);
		};
		array[554] = val;
		val = new Command();
		val.Name = "scale";
		val.Parent = "decay";
		val.FullName = "decay.scale";
		val.ServerAdmin = true;
		val.Variable = true;
		val.GetOveride = () => ConVar.Decay.scale.ToString();
		val.SetOveride = delegate(string str)
		{
			ConVar.Decay.scale = StringExtensions.ToFloat(str, 0f);
		};
		array[555] = val;
		val = new Command();
		val.Name = "tick";
		val.Parent = "decay";
		val.FullName = "decay.tick";
		val.ServerAdmin = true;
		val.Variable = true;
		val.GetOveride = () => ConVar.Decay.tick.ToString();
		val.SetOveride = delegate(string str)
		{
			ConVar.Decay.tick = StringExtensions.ToFloat(str, 0f);
		};
		array[556] = val;
		val = new Command();
		val.Name = "upgrade_hqm_cost_multiplier";
		val.Parent = "decay";
		val.FullName = "decay.upgrade_hqm_cost_multiplier";
		val.ServerAdmin = true;
		val.ClientAdmin = true;
		val.Client = true;
		val.Description = "Can players upgrade building blocks to hqm";
		val.Replicated = true;
		val.Variable = true;
		val.GetOveride = () => ConVar.Decay.upgrade_hqm_cost_multiplier.ToString();
		val.SetOveride = delegate(string str)
		{
			ConVar.Decay.upgrade_hqm_cost_multiplier = StringExtensions.ToFloat(str, 0f);
		};
		val.Default = "1";
		array[557] = val;
		val = new Command();
		val.Name = "upgrade_hqm_enabled";
		val.Parent = "decay";
		val.FullName = "decay.upgrade_hqm_enabled";
		val.ServerAdmin = true;
		val.ClientAdmin = true;
		val.Client = true;
		val.Description = "Can players upgrade building blocks to hqm";
		val.Replicated = true;
		val.Variable = true;
		val.GetOveride = () => ConVar.Decay.upgrade_hqm_enabled.ToString();
		val.SetOveride = delegate(string str)
		{
			ConVar.Decay.upgrade_hqm_enabled = StringExtensions.ToBool(str);
		};
		val.Default = "True";
		array[558] = val;
		val = new Command();
		val.Name = "upgrade_metal_cost_multiplier";
		val.Parent = "decay";
		val.FullName = "decay.upgrade_metal_cost_multiplier";
		val.ServerAdmin = true;
		val.ClientAdmin = true;
		val.Client = true;
		val.Description = "Can players upgrade building blocks to metal";
		val.Replicated = true;
		val.Variable = true;
		val.GetOveride = () => ConVar.Decay.upgrade_metal_cost_multiplier.ToString();
		val.SetOveride = delegate(string str)
		{
			ConVar.Decay.upgrade_metal_cost_multiplier = StringExtensions.ToFloat(str, 0f);
		};
		val.Default = "1";
		array[559] = val;
		val = new Command();
		val.Name = "upgrade_metal_enabled";
		val.Parent = "decay";
		val.FullName = "decay.upgrade_metal_enabled";
		val.ServerAdmin = true;
		val.ClientAdmin = true;
		val.Client = true;
		val.Description = "Can players upgrade building blocks to metal";
		val.Replicated = true;
		val.Variable = true;
		val.GetOveride = () => ConVar.Decay.upgrade_metal_enabled.ToString();
		val.SetOveride = delegate(string str)
		{
			ConVar.Decay.upgrade_metal_enabled = StringExtensions.ToBool(str);
		};
		val.Default = "True";
		array[560] = val;
		val = new Command();
		val.Name = "upgrade_stone_cost_multiplier";
		val.Parent = "decay";
		val.FullName = "decay.upgrade_stone_cost_multiplier";
		val.ServerAdmin = true;
		val.ClientAdmin = true;
		val.Client = true;
		val.Description = "Can players upgrade building blocks to stone";
		val.Replicated = true;
		val.Variable = true;
		val.GetOveride = () => ConVar.Decay.upgrade_stone_cost_multiplier.ToString();
		val.SetOveride = delegate(string str)
		{
			ConVar.Decay.upgrade_stone_cost_multiplier = StringExtensions.ToFloat(str, 0f);
		};
		val.Default = "1";
		array[561] = val;
		val = new Command();
		val.Name = "upgrade_stone_enabled";
		val.Parent = "decay";
		val.FullName = "decay.upgrade_stone_enabled";
		val.ServerAdmin = true;
		val.ClientAdmin = true;
		val.Client = true;
		val.Description = "Can players upgrade building blocks to stone";
		val.Replicated = true;
		val.Variable = true;
		val.GetOveride = () => ConVar.Decay.upgrade_stone_enabled.ToString();
		val.SetOveride = delegate(string str)
		{
			ConVar.Decay.upgrade_stone_enabled = StringExtensions.ToBool(str);
		};
		val.Default = "True";
		array[562] = val;
		val = new Command();
		val.Name = "upgrade_wood_cost_multiplier";
		val.Parent = "decay";
		val.FullName = "decay.upgrade_wood_cost_multiplier";
		val.ServerAdmin = true;
		val.ClientAdmin = true;
		val.Client = true;
		val.Description = "Can players upgrade building blocks to wood";
		val.Replicated = true;
		val.Variable = true;
		val.GetOveride = () => ConVar.Decay.upgrade_wood_cost_multiplier.ToString();
		val.SetOveride = delegate(string str)
		{
			ConVar.Decay.upgrade_wood_cost_multiplier = StringExtensions.ToFloat(str, 0f);
		};
		val.Default = "1";
		array[563] = val;
		val = new Command();
		val.Name = "upgrade_wood_enabled";
		val.Parent = "decay";
		val.FullName = "decay.upgrade_wood_enabled";
		val.ServerAdmin = true;
		val.ClientAdmin = true;
		val.Client = true;
		val.Description = "Can players upgrade building blocks to wood";
		val.Replicated = true;
		val.Variable = true;
		val.GetOveride = () => ConVar.Decay.upgrade_wood_enabled.ToString();
		val.SetOveride = delegate(string str)
		{
			ConVar.Decay.upgrade_wood_enabled = StringExtensions.ToBool(str);
		};
		val.Default = "True";
		array[564] = val;
		val = new Command();
		val.Name = "upkeep";
		val.Parent = "decay";
		val.FullName = "decay.upkeep";
		val.ServerAdmin = true;
		val.Description = "Is upkeep enabled";
		val.Variable = true;
		val.GetOveride = () => ConVar.Decay.upkeep.ToString();
		val.SetOveride = delegate(string str)
		{
			ConVar.Decay.upkeep = StringExtensions.ToBool(str);
		};
		array[565] = val;
		val = new Command();
		val.Name = "upkeep_grief_protection";
		val.Parent = "decay";
		val.FullName = "decay.upkeep_grief_protection";
		val.ServerAdmin = true;
		val.Description = "How many minutes can the upkeep cost last after the cupboard was destroyed? default : 1440 (24 hours)";
		val.Variable = true;
		val.GetOveride = () => ConVar.Decay.upkeep_grief_protection.ToString();
		val.SetOveride = delegate(string str)
		{
			ConVar.Decay.upkeep_grief_protection = StringExtensions.ToFloat(str, 0f);
		};
		array[566] = val;
		val = new Command();
		val.Name = "upkeep_heal_scale";
		val.Parent = "decay";
		val.FullName = "decay.upkeep_heal_scale";
		val.ServerAdmin = true;
		val.Description = "Scale at which objects heal when upkeep conditions are met, default of 1 is same rate at which they decay";
		val.Variable = true;
		val.GetOveride = () => ConVar.Decay.upkeep_heal_scale.ToString();
		val.SetOveride = delegate(string str)
		{
			ConVar.Decay.upkeep_heal_scale = StringExtensions.ToFloat(str, 0f);
		};
		array[567] = val;
		val = new Command();
		val.Name = "upkeep_inside_decay_scale";
		val.Parent = "decay";
		val.FullName = "decay.upkeep_inside_decay_scale";
		val.ServerAdmin = true;
		val.Description = "Scale at which objects decay when they are inside, default of 0.1";
		val.Variable = true;
		val.GetOveride = () => ConVar.Decay.upkeep_inside_decay_scale.ToString();
		val.SetOveride = delegate(string str)
		{
			ConVar.Decay.upkeep_inside_decay_scale = StringExtensions.ToFloat(str, 0f);
		};
		array[568] = val;
		val = new Command();
		val.Name = "upkeep_period_minutes";
		val.Parent = "decay";
		val.FullName = "decay.upkeep_period_minutes";
		val.ServerAdmin = true;
		val.Description = "How many minutes does the upkeep cost last? default : 1440 (24 hours)";
		val.Variable = true;
		val.GetOveride = () => ConVar.Decay.upkeep_period_minutes.ToString();
		val.SetOveride = delegate(string str)
		{
			ConVar.Decay.upkeep_period_minutes = StringExtensions.ToFloat(str, 0f);
		};
		array[569] = val;
		val = new Command();
		val.Name = "use_door_upkeep_brackets";
		val.Parent = "decay";
		val.FullName = "decay.use_door_upkeep_brackets";
		val.ServerAdmin = true;
		val.Variable = true;
		val.GetOveride = () => ConVar.Decay.use_door_upkeep_brackets.ToString();
		val.SetOveride = delegate(string str)
		{
			ConVar.Decay.use_door_upkeep_brackets = StringExtensions.ToBool(str);
		};
		array[570] = val;
		val = new Command();
		val.Name = "benchmark_demo_upload";
		val.Parent = "demo";
		val.FullName = "demo.benchmark_demo_upload";
		val.ServerAdmin = true;
		val.Variable = false;
		val.Call = delegate(Arg arg)
		{
			Demo.BenchmarkDemoUpload(arg);
		};
		array[571] = val;
		val = new Command();
		val.Name = "delete_after_upload";
		val.Parent = "demo";
		val.FullName = "demo.delete_after_upload";
		val.ServerAdmin = true;
		val.Saved = true;
		val.Description = "Should the full server demos be deleted after they are uploaded";
		val.Variable = true;
		val.GetOveride = () => Demo.DeleteDemoAfterUpload.ToString();
		val.SetOveride = delegate(string str)
		{
			Demo.DeleteDemoAfterUpload = StringExtensions.ToBool(str);
		};
		array[572] = val;
		val = new Command();
		val.Name = "server_demo_cleanup_interval";
		val.Parent = "demo";
		val.FullName = "demo.server_demo_cleanup_interval";
		val.ServerAdmin = true;
		val.Saved = true;
		val.Description = "How many minutes between cleaning up demos from the disk";
		val.Variable = true;
		val.GetOveride = () => Demo.DemoDiskCleanupIntervalMinutes.ToString();
		val.SetOveride = delegate(string str)
		{
			Demo.DemoDiskCleanupIntervalMinutes = StringExtensions.ToInt(str, 0);
		};
		array[573] = val;
		val = new Command();
		val.Name = "max_upload_concurrency";
		val.Parent = "demo";
		val.FullName = "demo.max_upload_concurrency";
		val.ServerAdmin = true;
		val.Description = "Max parallel requests when uploading demos";
		val.Variable = true;
		val.GetOveride = () => Demo.DemoUploadConcurrency.ToString();
		val.SetOveride = delegate(string str)
		{
			Demo.DemoUploadConcurrency = StringExtensions.ToInt(str, 0);
		};
		array[574] = val;
		val = new Command();
		val.Name = "server_demo_disk_space_gb";
		val.Parent = "demo";
		val.FullName = "demo.server_demo_disk_space_gb";
		val.ServerAdmin = true;
		val.Saved = true;
		val.Description = "How much disk space full server demos can take before we start to delete them";
		val.Variable = true;
		val.GetOveride = () => Demo.MaxDemoDiskSpaceGB.ToString();
		val.SetOveride = delegate(string str)
		{
			Demo.MaxDemoDiskSpaceGB = StringExtensions.ToInt(str, 0);
		};
		array[575] = val;
		val = new Command();
		val.Name = "record";
		val.Parent = "demo";
		val.FullName = "demo.record";
		val.ServerAdmin = true;
		val.Variable = false;
		val.Call = delegate(Arg arg)
		{
			string text4 = Demo.record(arg);
			arg.ReplyWithObject((object)text4);
		};
		array[576] = val;
		val = new Command();
		val.Name = "recordlist";
		val.Parent = "demo";
		val.FullName = "demo.recordlist";
		val.ServerAdmin = true;
		val.Saved = true;
		val.Variable = true;
		val.GetOveride = () => Demo.recordlist ?? "";
		val.SetOveride = delegate(string str)
		{
			Demo.recordlist = str;
		};
		array[577] = val;
		val = new Command();
		val.Name = "recordlistmode";
		val.Parent = "demo";
		val.FullName = "demo.recordlistmode";
		val.ServerAdmin = true;
		val.Saved = true;
		val.Description = "Controls the behavior of recordlist, 0=whitelist, 1=blacklist";
		val.Variable = true;
		val.GetOveride = () => Demo.recordlistmode.ToString();
		val.SetOveride = delegate(string str)
		{
			Demo.recordlistmode = StringExtensions.ToInt(str, 0);
		};
		array[578] = val;
		val = new Command();
		val.Name = "server_demo_directory";
		val.Parent = "demo";
		val.FullName = "demo.server_demo_directory";
		val.ServerAdmin = true;
		val.Description = "Directory to save full server demos";
		val.Variable = true;
		val.GetOveride = () => Demo.ServerDemoDirectory ?? "";
		val.SetOveride = delegate(string str)
		{
			Demo.ServerDemoDirectory = str;
		};
		array[579] = val;
		val = new Command();
		val.Name = "server_flush_seconds";
		val.Parent = "demo";
		val.FullName = "demo.server_flush_seconds";
		val.ServerAdmin = true;
		val.Saved = true;
		val.Variable = true;
		val.GetOveride = () => Demo.ServerDemoFlushInterval.ToString();
		val.SetOveride = delegate(string str)
		{
			Demo.ServerDemoFlushInterval = StringExtensions.ToInt(str, 0);
		};
		array[580] = val;
		val = new Command();
		val.Name = "full_server_demo";
		val.Parent = "demo";
		val.FullName = "demo.full_server_demo";
		val.ServerAdmin = true;
		val.Saved = true;
		val.Variable = true;
		val.GetOveride = () => Demo.ServerDemosEnabled.ToString();
		val.SetOveride = delegate(string str)
		{
			Demo.ServerDemosEnabled = StringExtensions.ToBool(str);
		};
		array[581] = val;
		val = new Command();
		val.Name = "splitmegabytes";
		val.Parent = "demo";
		val.FullName = "demo.splitmegabytes";
		val.ServerAdmin = true;
		val.Variable = true;
		val.GetOveride = () => Demo.splitmegabytes.ToString();
		val.SetOveride = delegate(string str)
		{
			Demo.splitmegabytes = StringExtensions.ToFloat(str, 0f);
		};
		array[582] = val;
		val = new Command();
		val.Name = "splitseconds";
		val.Parent = "demo";
		val.FullName = "demo.splitseconds";
		val.ServerAdmin = true;
		val.Variable = true;
		val.GetOveride = () => Demo.splitseconds.ToString();
		val.SetOveride = delegate(string str)
		{
			Demo.splitseconds = StringExtensions.ToFloat(str, 0f);
		};
		array[583] = val;
		val = new Command();
		val.Name = "stop";
		val.Parent = "demo";
		val.FullName = "demo.stop";
		val.ServerAdmin = true;
		val.Variable = false;
		val.Call = delegate(Arg arg)
		{
			string text5 = Demo.stop(arg);
			arg.ReplyWithObject((object)text5);
		};
		array[584] = val;
		val = new Command();
		val.Name = "upload_bandwidth_limit_ratio";
		val.Parent = "demo";
		val.FullName = "demo.upload_bandwidth_limit_ratio";
		val.ServerAdmin = true;
		val.Variable = true;
		val.GetOveride = () => Demo.UploadBandwidthLimitRatio.ToString();
		val.SetOveride = delegate(string str)
		{
			Demo.UploadBandwidthLimitRatio = StringExtensions.ToFloat(str, 0f);
		};
		array[585] = val;
		val = new Command();
		val.Name = "upload_demos";
		val.Parent = "demo";
		val.FullName = "demo.upload_demos";
		val.ServerAdmin = true;
		val.Saved = true;
		val.Variable = true;
		val.GetOveride = () => Demo.UploadDemos.ToString();
		val.SetOveride = delegate(string str)
		{
			Demo.UploadDemos = StringExtensions.ToBool(str);
		};
		array[586] = val;
		val = new Command();
		val.Name = "upload_url";
		val.Parent = "demo";
		val.FullName = "demo.upload_url";
		val.ServerAdmin = true;
		val.Saved = true;
		val.Variable = true;
		val.GetOveride = () => Demo.UploadUrl ?? "";
		val.SetOveride = delegate(string str)
		{
			Demo.UploadUrl = str;
		};
		array[587] = val;
		val = new Command();
		val.Name = "zip_demos";
		val.Parent = "demo";
		val.FullName = "demo.zip_demos";
		val.ServerAdmin = true;
		val.Saved = true;
		val.Description = "Should we be zipping the demos before we upload them";
		val.Variable = true;
		val.GetOveride = () => Demo.ZipServerDemos.ToString();
		val.SetOveride = delegate(string str)
		{
			Demo.ZipServerDemos = StringExtensions.ToBool(str);
		};
		array[588] = val;
		val = new Command();
		val.Name = "debug_toggle";
		val.Parent = "entity";
		val.FullName = "entity.debug_toggle";
		val.ServerAdmin = true;
		val.Variable = false;
		val.Call = delegate(Arg arg)
		{
			Entity.debug_toggle(arg);
		};
		array[589] = val;
		val = new Command();
		val.Name = "deleteby";
		val.Parent = "entity";
		val.FullName = "entity.deleteby";
		val.ServerAdmin = true;
		val.Description = "Destroy all entities created by provided users (separate users by space)";
		val.Variable = false;
		val.Call = delegate(Arg arg)
		{
			int num3 = Entity.DeleteBy(arg);
			arg.ReplyWithObject((object)num3);
		};
		array[590] = val;
		val = new Command();
		val.Name = "deletebytextblock";
		val.Parent = "entity";
		val.FullName = "entity.deletebytextblock";
		val.ServerAdmin = true;
		val.Description = "Destroy all entities created by users in the provided text block (can use with copied results from ent auth)";
		val.Variable = false;
		val.Call = delegate(Arg arg)
		{
			Entity.DeleteByTextBlock(arg);
		};
		array[591] = val;
		val = new Command();
		val.Name = "find_entity";
		val.Parent = "entity";
		val.FullName = "entity.find_entity";
		val.ServerAdmin = true;
		val.Variable = false;
		val.Call = delegate(Arg arg)
		{
			Entity.find_entity(arg);
		};
		array[592] = val;
		val = new Command();
		val.Name = "find_group";
		val.Parent = "entity";
		val.FullName = "entity.find_group";
		val.ServerAdmin = true;
		val.Variable = false;
		val.Call = delegate(Arg arg)
		{
			Entity.find_group(arg);
		};
		array[593] = val;
		val = new Command();
		val.Name = "find_id";
		val.Parent = "entity";
		val.FullName = "entity.find_id";
		val.ServerAdmin = true;
		val.Variable = false;
		val.Call = delegate(Arg arg)
		{
			Entity.find_id(arg);
		};
		array[594] = val;
		val = new Command();
		val.Name = "find_parent";
		val.Parent = "entity";
		val.FullName = "entity.find_parent";
		val.ServerAdmin = true;
		val.Variable = false;
		val.Call = delegate(Arg arg)
		{
			Entity.find_parent(arg);
		};
		array[595] = val;
		val = new Command();
		val.Name = "find_radius";
		val.Parent = "entity";
		val.FullName = "entity.find_radius";
		val.ServerAdmin = true;
		val.Variable = false;
		val.Call = delegate(Arg arg)
		{
			Entity.find_radius(arg);
		};
		array[596] = val;
		val = new Command();
		val.Name = "find_self";
		val.Parent = "entity";
		val.FullName = "entity.find_self";
		val.ServerAdmin = true;
		val.Variable = false;
		val.Call = delegate(Arg arg)
		{
			Entity.find_self(arg);
		};
		array[597] = val;
		val = new Command();
		val.Name = "find_status";
		val.Parent = "entity";
		val.FullName = "entity.find_status";
		val.ServerAdmin = true;
		val.Variable = false;
		val.Call = delegate(Arg arg)
		{
			Entity.find_status(arg);
		};
		array[598] = val;
		val = new Command();
		val.Name = "nudge";
		val.Parent = "entity";
		val.FullName = "entity.nudge";
		val.ServerAdmin = true;
		val.Variable = false;
		val.Call = delegate(Arg arg)
		{
			Entity.nudge(arg);
		};
		array[599] = val;
		val = new Command();
		val.Name = "set_battery_charge";
		val.Parent = "entity";
		val.FullName = "entity.set_battery_charge";
		val.ServerAdmin = true;
		val.Variable = false;
		val.Call = delegate(Arg arg)
		{
			Entity.set_battery_charge(arg);
		};
		array[600] = val;
		val = new Command();
		val.Name = "spawnlootfrom";
		val.Parent = "entity";
		val.FullName = "entity.spawnlootfrom";
		val.ServerAdmin = true;
		val.Variable = false;
		val.Call = delegate(Arg arg)
		{
			Entity.spawnlootfrom(arg);
		};
		array[601] = val;
		val = new Command();
		val.Name = "spawn";
		val.Parent = "entity";
		val.FullName = "entity.spawn";
		val.ServerAdmin = true;
		val.Variable = false;
		val.Call = delegate(Arg arg)
		{
			//IL_000e: Unknown result type (might be due to invalid IL or missing references)
			//IL_0013: Unknown result type (might be due to invalid IL or missing references)
			//IL_001a: Unknown result type (might be due to invalid IL or missing references)
			//IL_001f: Unknown result type (might be due to invalid IL or missing references)
			string text6 = Entity.svspawn(arg.GetString(0, ""), arg.GetVector3(1, Vector3.zero), arg.GetVector3(2, Vector3.zero), arg.GetInt(3, 1));
			arg.ReplyWithObject((object)text6);
		};
		array[602] = val;
		val = new Command();
		val.Name = "spawngrid";
		val.Parent = "entity";
		val.FullName = "entity.spawngrid";
		val.ServerAdmin = true;
		val.Variable = false;
		val.Call = delegate(Arg arg)
		{
			string text7 = Entity.svspawngrid(arg.GetString(0, ""), arg.GetInt(1, 5), arg.GetInt(2, 5), arg.GetInt(3, 5));
			arg.ReplyWithObject((object)text7);
		};
		array[603] = val;
		val = new Command();
		val.Name = "spawnitem";
		val.Parent = "entity";
		val.FullName = "entity.spawnitem";
		val.ServerAdmin = true;
		val.Variable = false;
		val.Call = delegate(Arg arg)
		{
			//IL_000e: Unknown result type (might be due to invalid IL or missing references)
			//IL_0013: Unknown result type (might be due to invalid IL or missing references)
			string text8 = Entity.svspawnitem(arg.GetString(0, ""), arg.GetVector3(1, Vector3.zero));
			arg.ReplyWithObject((object)text8);
		};
		array[604] = val;
		val = new Command();
		val.Name = "addtime";
		val.Parent = "env";
		val.FullName = "env.addtime";
		val.ServerAdmin = true;
		val.Variable = false;
		val.Call = delegate(Arg arg)
		{
			Env.addtime(arg);
		};
		array[605] = val;
		val = new Command();
		val.Name = "day";
		val.Parent = "env";
		val.FullName = "env.day";
		val.ServerAdmin = true;
		val.Variable = true;
		val.GetOveride = () => Env.day.ToString();
		val.SetOveride = delegate(string str)
		{
			Env.day = StringExtensions.ToInt(str, 0);
		};
		array[606] = val;
		val = new Command();
		val.Name = "month";
		val.Parent = "env";
		val.FullName = "env.month";
		val.ServerAdmin = true;
		val.Variable = true;
		val.GetOveride = () => Env.month.ToString();
		val.SetOveride = delegate(string str)
		{
			Env.month = StringExtensions.ToInt(str, 0);
		};
		array[607] = val;
		val = new Command();
		val.Name = "nightlight_brightness";
		val.Parent = "env";
		val.FullName = "env.nightlight_brightness";
		val.ServerAdmin = true;
		val.ClientAdmin = true;
		val.Client = true;
		val.Replicated = true;
		val.Variable = true;
		val.GetOveride = () => Env.nightlight_brightness.ToString();
		val.SetOveride = delegate(string str)
		{
			Env.nightlight_brightness = StringExtensions.ToFloat(str, 0f);
		};
		val.Default = "0.0175";
		array[608] = val;
		val = new Command();
		val.Name = "nightlight_distance";
		val.Parent = "env";
		val.FullName = "env.nightlight_distance";
		val.ServerAdmin = true;
		val.ClientAdmin = true;
		val.Client = true;
		val.Replicated = true;
		val.Variable = true;
		val.GetOveride = () => Env.nightlight_distance.ToString();
		val.SetOveride = delegate(string str)
		{
			Env.nightlight_distance = StringExtensions.ToFloat(str, 0f);
		};
		val.Default = "7";
		array[609] = val;
		val = new Command();
		val.Name = "nightlight_fadefraction";
		val.Parent = "env";
		val.FullName = "env.nightlight_fadefraction";
		val.ServerAdmin = true;
		val.ClientAdmin = true;
		val.Client = true;
		val.Replicated = true;
		val.Variable = true;
		val.GetOveride = () => Env.nightlight_fadefraction.ToString();
		val.SetOveride = delegate(string str)
		{
			Env.nightlight_fadefraction = StringExtensions.ToFloat(str, 0f);
		};
		val.Default = "0.65";
		array[610] = val;
		val = new Command();
		val.Name = "oceanlevel";
		val.Parent = "env";
		val.FullName = "env.oceanlevel";
		val.ServerAdmin = true;
		val.ClientAdmin = true;
		val.Client = true;
		val.Replicated = true;
		val.Variable = true;
		val.GetOveride = () => Env.oceanlevel.ToString();
		val.SetOveride = delegate(string str)
		{
			Env.oceanlevel = StringExtensions.ToFloat(str, 0f);
		};
		val.Default = "0";
		array[611] = val;
		val = new Command();
		val.Name = "progresstime";
		val.Parent = "env";
		val.FullName = "env.progresstime";
		val.ServerAdmin = true;
		val.Variable = true;
		val.GetOveride = () => Env.progresstime.ToString();
		val.SetOveride = delegate(string str)
		{
			Env.progresstime = StringExtensions.ToBool(str);
		};
		array[612] = val;
		val = new Command();
		val.Name = "redmoon";
		val.Parent = "env";
		val.FullName = "env.redmoon";
		val.ServerAdmin = true;
		val.ClientAdmin = true;
		val.Client = true;
		val.Replicated = true;
		val.Variable = true;
		val.GetOveride = () => Env.redMoon.ToString();
		val.SetOveride = delegate(string str)
		{
			Env.redMoon = StringExtensions.ToBool(str);
		};
		val.Default = "0";
		array[613] = val;
		val = new Command();
		val.Name = "time";
		val.Parent = "env";
		val.FullName = "env.time";
		val.ServerAdmin = true;
		val.ShowInAdminUI = true;
		val.Variable = true;
		val.GetOveride = () => Env.time.ToString();
		val.SetOveride = delegate(string str)
		{
			Env.time = StringExtensions.ToFloat(str, 0f);
		};
		array[614] = val;
		val = new Command();
		val.Name = "year";
		val.Parent = "env";
		val.FullName = "env.year";
		val.ServerAdmin = true;
		val.Variable = true;
		val.GetOveride = () => Env.year.ToString();
		val.SetOveride = delegate(string str)
		{
			Env.year = StringExtensions.ToInt(str, 0);
		};
		array[615] = val;
		val = new Command();
		val.Name = "print_server_events";
		val.Parent = "events";
		val.FullName = "events.print_server_events";
		val.ServerAdmin = true;
		val.Variable = false;
		val.Call = delegate(Arg arg)
		{
			Events.print_server_events(arg);
		};
		array[616] = val;
		val = new Command();
		val.Name = "set_event_enabled";
		val.Parent = "events";
		val.FullName = "events.set_event_enabled";
		val.ServerAdmin = true;
		val.Variable = false;
		val.Call = delegate(Arg arg)
		{
			Events.set_event_enabled(arg);
		};
		array[617] = val;
		val = new Command();
		val.Name = "set_event_max_delay";
		val.Parent = "events";
		val.FullName = "events.set_event_max_delay";
		val.ServerAdmin = true;
		val.Variable = false;
		val.Call = delegate(Arg arg)
		{
			Events.set_event_max_delay(arg);
		};
		array[618] = val;
		val = new Command();
		val.Name = "set_event_min_delay";
		val.Parent = "events";
		val.FullName = "events.set_event_min_delay";
		val.ServerAdmin = true;
		val.Variable = false;
		val.Call = delegate(Arg arg)
		{
			Events.set_event_min_delay(arg);
		};
		array[619] = val;
		val = new Command();
		val.Name = "limit";
		val.Parent = "fps";
		val.FullName = "fps.limit";
		val.ServerAdmin = true;
		val.Saved = true;
		val.Variable = true;
		val.GetOveride = () => FPS.limit.ToString();
		val.SetOveride = delegate(string str)
		{
			FPS.limit = StringExtensions.ToInt(str, 0);
		};
		array[620] = val;
		val = new Command();
		val.Name = "set";
		val.Parent = "gamemode";
		val.FullName = "gamemode.set";
		val.ServerAdmin = true;
		val.Variable = false;
		val.Call = delegate(Arg arg)
		{
			gamemode.set(arg);
		};
		array[621] = val;
		val = new Command();
		val.Name = "setteam";
		val.Parent = "gamemode";
		val.FullName = "gamemode.setteam";
		val.ServerUser = true;
		val.Variable = false;
		val.Call = delegate(Arg arg)
		{
			gamemode.setteam(arg);
		};
		array[622] = val;
		val = new Command();
		val.Name = "alloc";
		val.Parent = "gc";
		val.FullName = "gc.alloc";
		val.ServerAdmin = true;
		val.Variable = false;
		val.Call = delegate(Arg arg)
		{
			GC.alloc(arg);
		};
		array[623] = val;
		val = new Command();
		val.Name = "collect";
		val.Parent = "gc";
		val.FullName = "gc.collect";
		val.ServerAdmin = true;
		val.Variable = false;
		val.Call = delegate
		{
			GC.collect();
		};
		array[624] = val;
		val = new Command();
		val.Name = "enabled";
		val.Parent = "gc";
		val.FullName = "gc.enabled";
		val.ServerAdmin = true;
		val.Variable = true;
		val.GetOveride = () => GC.enabled.ToString();
		val.SetOveride = delegate(string str)
		{
			GC.enabled = StringExtensions.ToBool(str);
		};
		array[625] = val;
		val = new Command();
		val.Name = "incremental_enabled";
		val.Parent = "gc";
		val.FullName = "gc.incremental_enabled";
		val.ServerAdmin = true;
		val.Variable = true;
		val.GetOveride = () => GC.incremental_enabled.ToString();
		val.SetOveride = delegate(string str)
		{
			GC.incremental_enabled = StringExtensions.ToBool(str);
		};
		array[626] = val;
		val = new Command();
		val.Name = "incremental_milliseconds";
		val.Parent = "gc";
		val.FullName = "gc.incremental_milliseconds";
		val.ServerAdmin = true;
		val.Variable = true;
		val.GetOveride = () => GC.incremental_milliseconds.ToString();
		val.SetOveride = delegate(string str)
		{
			GC.incremental_milliseconds = StringExtensions.ToInt(str, 0);
		};
		array[627] = val;
		val = new Command();
		val.Name = "unload";
		val.Parent = "gc";
		val.FullName = "gc.unload";
		val.ServerAdmin = true;
		val.Variable = false;
		val.Call = delegate
		{
			GC.unload();
		};
		array[628] = val;
		val = new Command();
		val.Name = "asyncwarmup";
		val.Parent = "global";
		val.FullName = "global.asyncwarmup";
		val.ServerAdmin = true;
		val.Variable = true;
		val.GetOveride = () => Global.asyncWarmup.ToString();
		val.SetOveride = delegate(string str)
		{
			Global.asyncWarmup = StringExtensions.ToBool(str);
		};
		array[629] = val;
		val = new Command();
		val.Name = "breakclothing";
		val.Parent = "global";
		val.FullName = "global.breakclothing";
		val.ServerAdmin = true;
		val.Variable = false;
		val.Call = delegate(Arg arg)
		{
			Global.breakclothing(arg);
		};
		array[630] = val;
		val = new Command();
		val.Name = "breakitem";
		val.Parent = "global";
		val.FullName = "global.breakitem";
		val.ServerAdmin = true;
		val.Variable = false;
		val.Call = delegate(Arg arg)
		{
			Global.breakitem(arg);
		};
		array[631] = val;
		val = new Command();
		val.Name = "cinematicgingerbreadcorpses";
		val.Parent = "global";
		val.FullName = "global.cinematicgingerbreadcorpses";
		val.ServerAdmin = true;
		val.ClientAdmin = true;
		val.Description = "When enabled a player wearing a gingerbread suit will gib like the gingerbread NPC's";
		val.Variable = true;
		val.GetOveride = () => Global.cinematicGingerbreadCorpses.ToString();
		val.SetOveride = delegate(string str)
		{
			Global.cinematicGingerbreadCorpses = StringExtensions.ToBool(str);
		};
		val.Default = "False";
		array[632] = val;
		val = new Command();
		val.Name = "clearallsprays";
		val.Parent = "global";
		val.FullName = "global.clearallsprays";
		val.ServerAdmin = true;
		val.Variable = false;
		val.Call = delegate
		{
			Global.ClearAllSprays();
		};
		array[633] = val;
		val = new Command();
		val.Name = "clearallspraysbyplayer";
		val.Parent = "global";
		val.FullName = "global.clearallspraysbyplayer";
		val.ServerAdmin = true;
		val.Variable = false;
		val.Call = delegate(Arg arg)
		{
			Global.ClearAllSpraysByPlayer(arg);
		};
		array[634] = val;
		val = new Command();
		val.Name = "cleardroppeditems";
		val.Parent = "global";
		val.FullName = "global.cleardroppeditems";
		val.ServerAdmin = true;
		val.Variable = false;
		val.Call = delegate
		{
			Global.ClearDroppedItems();
		};
		array[635] = val;
		val = new Command();
		val.Name = "clearspraysatpositioninradius";
		val.Parent = "global";
		val.FullName = "global.clearspraysatpositioninradius";
		val.ServerAdmin = true;
		val.Variable = false;
		val.Call = delegate(Arg arg)
		{
			Global.ClearSpraysAtPositionInRadius(arg);
		};
		array[636] = val;
		val = new Command();
		val.Name = "clearspraysinradius";
		val.Parent = "global";
		val.FullName = "global.clearspraysinradius";
		val.ServerAdmin = true;
		val.Variable = false;
		val.Call = delegate(Arg arg)
		{
			Global.ClearSpraysInRadius(arg);
		};
		array[637] = val;
		val = new Command();
		val.Name = "colliders";
		val.Parent = "global";
		val.FullName = "global.colliders";
		val.ServerAdmin = true;
		val.Variable = false;
		val.Call = delegate(Arg arg)
		{
			Global.colliders(arg);
		};
		array[638] = val;
		val = new Command();
		val.Name = "developer";
		val.Parent = "global";
		val.FullName = "global.developer";
		val.ServerAdmin = true;
		val.Variable = true;
		val.GetOveride = () => Global.developer.ToString();
		val.SetOveride = delegate(string str)
		{
			Global.developer = StringExtensions.ToInt(str, 0);
		};
		array[639] = val;
		val = new Command();
		val.Name = "disablebagdropping";
		val.Parent = "global";
		val.FullName = "global.disablebagdropping";
		val.ServerAdmin = true;
		val.Description = "Disables the backpacks that appear after a corpse times out";
		val.Variable = true;
		val.GetOveride = () => Global.disableBagDropping.ToString();
		val.SetOveride = delegate(string str)
		{
			Global.disableBagDropping = StringExtensions.ToBool(str);
		};
		array[640] = val;
		val = new Command();
		val.Name = "error";
		val.Parent = "global";
		val.FullName = "global.error";
		val.ServerAdmin = true;
		val.Variable = false;
		val.Call = delegate(Arg arg)
		{
			Global.error(arg);
		};
		array[641] = val;
		val = new Command();
		val.Name = "forceunloadbundles";
		val.Parent = "global";
		val.FullName = "global.forceunloadbundles";
		val.ServerAdmin = true;
		val.Variable = true;
		val.GetOveride = () => Global.forceUnloadBundles.ToString();
		val.SetOveride = delegate(string str)
		{
			Global.forceUnloadBundles = StringExtensions.ToBool(str);
		};
		array[642] = val;
		val = new Command();
		val.Name = "free";
		val.Parent = "global";
		val.FullName = "global.free";
		val.ServerAdmin = true;
		val.Variable = false;
		val.Call = delegate(Arg arg)
		{
			Global.free(arg);
		};
		array[643] = val;
		val = new Command();
		val.Name = "injure";
		val.Parent = "global";
		val.FullName = "global.injure";
		val.ServerAdmin = true;
		val.Variable = false;
		val.Call = delegate(Arg arg)
		{
			Global.injure(arg);
		};
		array[644] = val;
		val = new Command();
		val.Name = "job_system_threads";
		val.Parent = "global";
		val.FullName = "global.job_system_threads";
		val.ServerAdmin = true;
		val.Variable = true;
		val.GetOveride = () => Global.job_system_threads.ToString();
		val.SetOveride = delegate(string str)
		{
			Global.job_system_threads = StringExtensions.ToInt(str, 0);
		};
		array[645] = val;
		val = new Command();
		val.Name = "kill";
		val.Parent = "global";
		val.FullName = "global.kill";
		val.ServerUser = true;
		val.Variable = false;
		val.Call = delegate(Arg arg)
		{
			Global.kill(arg);
		};
		array[646] = val;
		val = new Command();
		val.Name = "maxspraysperplayer";
		val.Parent = "global";
		val.FullName = "global.maxspraysperplayer";
		val.ServerAdmin = true;
		val.Saved = true;
		val.Description = "If a player sprays more than this, the oldest spray will be destroyed. 0 will disable";
		val.ShowInAdminUI = true;
		val.Variable = true;
		val.GetOveride = () => Global.MaxSpraysPerPlayer.ToString();
		val.SetOveride = delegate(string str)
		{
			Global.MaxSpraysPerPlayer = StringExtensions.ToInt(str, 0);
		};
		array[647] = val;
		val = new Command();
		val.Name = "maxthreads";
		val.Parent = "global";
		val.FullName = "global.maxthreads";
		val.ServerAdmin = true;
		val.Variable = true;
		val.GetOveride = () => Global.maxthreads.ToString();
		val.SetOveride = delegate(string str)
		{
			Global.maxthreads = StringExtensions.ToInt(str, 0);
		};
		array[648] = val;
		val = new Command();
		val.Name = "objects";
		val.Parent = "global";
		val.FullName = "global.objects";
		val.ServerAdmin = true;
		val.Variable = false;
		val.Call = delegate(Arg arg)
		{
			Global.objects(arg);
		};
		array[649] = val;
		val = new Command();
		val.Name = "perf";
		val.Parent = "global";
		val.FullName = "global.perf";
		val.ServerAdmin = true;
		val.Saved = true;
		val.Variable = true;
		val.GetOveride = () => Global.perf.ToString();
		val.SetOveride = delegate(string str)
		{
			Global.perf = StringExtensions.ToInt(str, 0);
		};
		array[650] = val;
		val = new Command();
		val.Name = "preloadconcurrency";
		val.Parent = "global";
		val.FullName = "global.preloadconcurrency";
		val.ServerAdmin = true;
		val.Variable = true;
		val.GetOveride = () => Global.preloadConcurrency.ToString();
		val.SetOveride = delegate(string str)
		{
			Global.preloadConcurrency = StringExtensions.ToInt(str, 0);
		};
		array[651] = val;
		val = new Command();
		val.Name = "printallscenesinbuild";
		val.Parent = "global";
		val.FullName = "global.printallscenesinbuild";
		val.ServerAdmin = true;
		val.Variable = false;
		val.Call = delegate(Arg arg)
		{
			string text9 = Global.printAllScenesInBuild(arg);
			arg.ReplyWithObject((object)text9);
		};
		array[652] = val;
		val = new Command();
		val.Name = "queue";
		val.Parent = "global";
		val.FullName = "global.queue";
		val.ServerAdmin = true;
		val.Variable = false;
		val.Call = delegate(Arg arg)
		{
			Global.queue(arg);
		};
		array[653] = val;
		val = new Command();
		val.Name = "quit";
		val.Parent = "global";
		val.FullName = "global.quit";
		val.ServerAdmin = true;
		val.Variable = false;
		val.Call = delegate(Arg arg)
		{
			Global.quit(arg);
		};
		array[654] = val;
		val = new Command();
		val.Name = "recover";
		val.Parent = "global";
		val.FullName = "global.recover";
		val.ServerAdmin = true;
		val.Variable = false;
		val.Call = delegate(Arg arg)
		{
			Global.recover(arg);
		};
		array[655] = val;
		val = new Command();
		val.Name = "report";
		val.Parent = "global";
		val.FullName = "global.report";
		val.ServerAdmin = true;
		val.Variable = false;
		val.Call = delegate(Arg arg)
		{
			Global.report(arg);
		};
		array[656] = val;
		val = new Command();
		val.Name = "respawn";
		val.Parent = "global";
		val.FullName = "global.respawn";
		val.ServerUser = true;
		val.Variable = false;
		val.Call = delegate(Arg arg)
		{
			Global.respawn(arg);
		};
		array[657] = val;
		val = new Command();
		val.Name = "respawn_sleepingbag";
		val.Parent = "global";
		val.FullName = "global.respawn_sleepingbag";
		val.ServerUser = true;
		val.Variable = false;
		val.Call = delegate(Arg arg)
		{
			Global.respawn_sleepingbag(arg);
		};
		array[658] = val;
		val = new Command();
		val.Name = "respawn_sleepingbag_remove";
		val.Parent = "global";
		val.FullName = "global.respawn_sleepingbag_remove";
		val.ServerUser = true;
		val.Variable = false;
		val.Call = delegate(Arg arg)
		{
			Global.respawn_sleepingbag_remove(arg);
		};
		array[659] = val;
		val = new Command();
		val.Name = "restart";
		val.Parent = "global";
		val.FullName = "global.restart";
		val.ServerAdmin = true;
		val.Variable = false;
		val.Call = delegate(Arg arg)
		{
			Global.restart(arg);
		};
		array[660] = val;
		val = new Command();
		val.Name = "setinfo";
		val.Parent = "global";
		val.FullName = "global.setinfo";
		val.ServerUser = true;
		val.Variable = false;
		val.Call = delegate(Arg arg)
		{
			Global.setinfo(arg);
		};
		array[661] = val;
		val = new Command();
		val.Name = "skipassetwarmup_crashes";
		val.Parent = "global";
		val.FullName = "global.skipassetwarmup_crashes";
		val.ServerAdmin = true;
		val.Variable = true;
		val.GetOveride = () => Global.skipAssetWarmup_crashes.ToString();
		val.SetOveride = delegate(string str)
		{
			Global.skipAssetWarmup_crashes = StringExtensions.ToBool(str);
		};
		array[662] = val;
		val = new Command();
		val.Name = "sleep";
		val.Parent = "global";
		val.FullName = "global.sleep";
		val.ServerAdmin = true;
		val.Variable = false;
		val.Call = delegate(Arg arg)
		{
			Global.sleep(arg);
		};
		array[663] = val;
		val = new Command();
		val.Name = "sleeptarget";
		val.Parent = "global";
		val.FullName = "global.sleeptarget";
		val.ServerAdmin = true;
		val.Variable = false;
		val.Call = delegate(Arg arg)
		{
			Global.sleeptarget(arg);
		};
		array[664] = val;
		val = new Command();
		val.Name = "spectate";
		val.Parent = "global";
		val.FullName = "global.spectate";
		val.ServerAdmin = true;
		val.Variable = false;
		val.Call = delegate(Arg arg)
		{
			Global.spectate(arg);
		};
		array[665] = val;
		val = new Command();
		val.Name = "spectateid";
		val.Parent = "global";
		val.FullName = "global.spectateid";
		val.ServerAdmin = true;
		val.Variable = false;
		val.Call = delegate(Arg arg)
		{
			Global.spectateid(arg);
		};
		array[666] = val;
		val = new Command();
		val.Name = "sprayduration";
		val.Parent = "global";
		val.FullName = "global.sprayduration";
		val.ServerAdmin = true;
		val.Saved = true;
		val.Description = "Base time (in seconds) that sprays last";
		val.ShowInAdminUI = true;
		val.Variable = true;
		val.GetOveride = () => Global.SprayDuration.ToString();
		val.SetOveride = delegate(string str)
		{
			Global.SprayDuration = StringExtensions.ToFloat(str, 0f);
		};
		array[667] = val;
		val = new Command();
		val.Name = "sprayoutofauthmultiplier";
		val.Parent = "global";
		val.FullName = "global.sprayoutofauthmultiplier";
		val.ServerAdmin = true;
		val.Saved = true;
		val.Description = "Multiplier applied to SprayDuration if a spray isn't in the sprayers auth (cannot go above 1f)";
		val.ShowInAdminUI = true;
		val.Variable = true;
		val.GetOveride = () => Global.SprayOutOfAuthMultiplier.ToString();
		val.SetOveride = delegate(string str)
		{
			Global.SprayOutOfAuthMultiplier = StringExtensions.ToFloat(str, 0f);
		};
		array[668] = val;
		val = new Command();
		val.Name = "status_sv";
		val.Parent = "global";
		val.FullName = "global.status_sv";
		val.ServerUser = true;
		val.Variable = false;
		val.Call = delegate(Arg arg)
		{
			Global.status_sv(arg);
		};
		array[669] = val;
		val = new Command();
		val.Name = "subscriptions";
		val.Parent = "global";
		val.FullName = "global.subscriptions";
		val.ServerAdmin = true;
		val.Variable = false;
		val.Call = delegate(Arg arg)
		{
			Global.subscriptions(arg);
		};
		array[670] = val;
		val = new Command();
		val.Name = "sysinfo";
		val.Parent = "global";
		val.FullName = "global.sysinfo";
		val.ServerAdmin = true;
		val.Variable = false;
		val.Call = delegate(Arg arg)
		{
			Global.sysinfo(arg);
		};
		array[671] = val;
		val = new Command();
		val.Name = "sysuid";
		val.Parent = "global";
		val.FullName = "global.sysuid";
		val.ServerAdmin = true;
		val.Variable = false;
		val.Call = delegate(Arg arg)
		{
			Global.sysuid(arg);
		};
		array[672] = val;
		val = new Command();
		val.Name = "teleport";
		val.Parent = "global";
		val.FullName = "global.teleport";
		val.ServerAdmin = true;
		val.Variable = false;
		val.Call = delegate(Arg arg)
		{
			Global.teleport(arg);
		};
		array[673] = val;
		val = new Command();
		val.Name = "teleport2autheditem";
		val.Parent = "global";
		val.FullName = "global.teleport2autheditem";
		val.ServerAdmin = true;
		val.Variable = false;
		val.Call = delegate(Arg arg)
		{
			Global.teleport2autheditem(arg);
		};
		array[674] = val;
		val = new Command();
		val.Name = "teleport2death";
		val.Parent = "global";
		val.FullName = "global.teleport2death";
		val.ServerAdmin = true;
		val.Variable = false;
		val.Call = delegate(Arg arg)
		{
			Global.teleport2death(arg);
		};
		array[675] = val;
		val = new Command();
		val.Name = "teleport2grid";
		val.Parent = "global";
		val.FullName = "global.teleport2grid";
		val.ServerAdmin = true;
		val.Variable = false;
		val.Call = delegate(Arg arg)
		{
			Global.teleport2grid(arg);
		};
		array[676] = val;
		val = new Command();
		val.Name = "teleport2marker";
		val.Parent = "global";
		val.FullName = "global.teleport2marker";
		val.ServerAdmin = true;
		val.Variable = false;
		val.Call = delegate(Arg arg)
		{
			Global.teleport2marker(arg);
		};
		array[677] = val;
		val = new Command();
		val.Name = "teleport2me";
		val.Parent = "global";
		val.FullName = "global.teleport2me";
		val.ServerAdmin = true;
		val.Variable = false;
		val.Call = delegate(Arg arg)
		{
			Global.teleport2me(arg);
		};
		array[678] = val;
		val = new Command();
		val.Name = "teleport2owneditem";
		val.Parent = "global";
		val.FullName = "global.teleport2owneditem";
		val.ServerAdmin = true;
		val.Variable = false;
		val.Call = delegate(Arg arg)
		{
			Global.teleport2owneditem(arg);
		};
		array[679] = val;
		val = new Command();
		val.Name = "teleportany";
		val.Parent = "global";
		val.FullName = "global.teleportany";
		val.ServerAdmin = true;
		val.Variable = false;
		val.Call = delegate(Arg arg)
		{
			Global.teleportany(arg);
		};
		array[680] = val;
		val = new Command();
		val.Name = "teleporteveryone2me";
		val.Parent = "global";
		val.FullName = "global.teleporteveryone2me";
		val.ServerAdmin = true;
		val.Variable = false;
		val.Call = delegate(Arg arg)
		{
			Global.teleporteveryone2me(arg);
		};
		array[681] = val;
		val = new Command();
		val.Name = "teleportlos";
		val.Parent = "global";
		val.FullName = "global.teleportlos";
		val.ServerAdmin = true;
		val.Variable = false;
		val.Call = delegate(Arg arg)
		{
			Global.teleportlos(arg);
		};
		array[682] = val;
		val = new Command();
		val.Name = "teleportnonsleepers2me";
		val.Parent = "global";
		val.FullName = "global.teleportnonsleepers2me";
		val.ServerAdmin = true;
		val.Variable = false;
		val.Call = delegate(Arg arg)
		{
			Global.teleportnonsleepers2me(arg);
		};
		array[683] = val;
		val = new Command();
		val.Name = "teleportpos";
		val.Parent = "global";
		val.FullName = "global.teleportpos";
		val.ServerAdmin = true;
		val.Variable = false;
		val.Call = delegate(Arg arg)
		{
			Global.teleportpos(arg);
		};
		array[684] = val;
		val = new Command();
		val.Name = "teleportsleepers2me";
		val.Parent = "global";
		val.FullName = "global.teleportsleepers2me";
		val.ServerAdmin = true;
		val.Variable = false;
		val.Call = delegate(Arg arg)
		{
			Global.teleportsleepers2me(arg);
		};
		array[685] = val;
		val = new Command();
		val.Name = "teleporttargetteam2me";
		val.Parent = "global";
		val.FullName = "global.teleporttargetteam2me";
		val.ServerAdmin = true;
		val.Variable = false;
		val.Call = delegate(Arg arg)
		{
			Global.teleporttargetteam2me(arg);
		};
		array[686] = val;
		val = new Command();
		val.Name = "teleportteam2me";
		val.Parent = "global";
		val.FullName = "global.teleportteam2me";
		val.ServerAdmin = true;
		val.Variable = false;
		val.Call = delegate(Arg arg)
		{
			Global.teleportteam2me(arg);
		};
		array[687] = val;
		val = new Command();
		val.Name = "textures";
		val.Parent = "global";
		val.FullName = "global.textures";
		val.ServerAdmin = true;
		val.Variable = false;
		val.Call = delegate(Arg arg)
		{
			Global.textures(arg);
		};
		array[688] = val;
		val = new Command();
		val.Name = "togglespectateteaminfo";
		val.Parent = "global";
		val.FullName = "global.togglespectateteaminfo";
		val.ServerAdmin = true;
		val.Variable = false;
		val.Call = delegate(Arg arg)
		{
			Global.toggleSpectateTeamInfo(arg);
		};
		array[689] = val;
		val = new Command();
		val.Name = "updatemanifest";
		val.Parent = "global";
		val.FullName = "global.updatemanifest";
		val.ServerAdmin = true;
		val.Client = true;
		val.Description = "Immediately update the manifest";
		val.Variable = false;
		val.Call = delegate(Arg arg)
		{
			Global.UpdateManifest(arg);
		};
		array[690] = val;
		val = new Command();
		val.Name = "updatenetworkpositionwithdebugcamerawhilespectating";
		val.Parent = "global";
		val.FullName = "global.updatenetworkpositionwithdebugcamerawhilespectating";
		val.ServerAdmin = true;
		val.Variable = true;
		val.GetOveride = () => Global.updateNetworkPositionWithDebugCameraWhileSpectating.ToString();
		val.SetOveride = delegate(string str)
		{
			Global.updateNetworkPositionWithDebugCameraWhileSpectating = StringExtensions.ToBool(str);
		};
		array[691] = val;
		val = new Command();
		val.Name = "version";
		val.Parent = "global";
		val.FullName = "global.version";
		val.ServerAdmin = true;
		val.ServerUser = true;
		val.Variable = false;
		val.Call = delegate(Arg arg)
		{
			Global.version(arg);
		};
		array[692] = val;
		val = new Command();
		val.Name = "warmupconcurrency";
		val.Parent = "global";
		val.FullName = "global.warmupconcurrency";
		val.ServerAdmin = true;
		val.Variable = true;
		val.GetOveride = () => Global.warmupConcurrency.ToString();
		val.SetOveride = delegate(string str)
		{
			Global.warmupConcurrency = StringExtensions.ToInt(str, 0);
		};
		array[693] = val;
		val = new Command();
		val.Name = "enabled";
		val.Parent = "halloween";
		val.FullName = "halloween.enabled";
		val.ServerAdmin = true;
		val.Variable = true;
		val.GetOveride = () => Halloween.enabled.ToString();
		val.SetOveride = delegate(string str)
		{
			Halloween.enabled = StringExtensions.ToBool(str);
		};
		array[694] = val;
		val = new Command();
		val.Name = "murdererpopulation";
		val.Parent = "halloween";
		val.FullName = "halloween.murdererpopulation";
		val.ServerAdmin = true;
		val.Description = "Population active on the server, per square km";
		val.Variable = true;
		val.GetOveride = () => Halloween.murdererpopulation.ToString();
		val.SetOveride = delegate(string str)
		{
			Halloween.murdererpopulation = StringExtensions.ToFloat(str, 0f);
		};
		array[695] = val;
		val = new Command();
		val.Name = "scarecrow_beancan_vs_player_dmg_modifier";
		val.Parent = "halloween";
		val.FullName = "halloween.scarecrow_beancan_vs_player_dmg_modifier";
		val.ServerAdmin = true;
		val.Description = "Modified damage from beancan explosion vs players (Default: 0.1).";
		val.Variable = true;
		val.GetOveride = () => Halloween.scarecrow_beancan_vs_player_dmg_modifier.ToString();
		val.SetOveride = delegate(string str)
		{
			Halloween.scarecrow_beancan_vs_player_dmg_modifier = StringExtensions.ToFloat(str, 0f);
		};
		array[696] = val;
		val = new Command();
		val.Name = "scarecrow_body_dmg_modifier";
		val.Parent = "halloween";
		val.FullName = "halloween.scarecrow_body_dmg_modifier";
		val.ServerAdmin = true;
		val.Description = "Modifier to how much damage scarecrows take to the body. (Default: 0.25)";
		val.Variable = true;
		val.GetOveride = () => Halloween.scarecrow_body_dmg_modifier.ToString();
		val.SetOveride = delegate(string str)
		{
			Halloween.scarecrow_body_dmg_modifier = StringExtensions.ToFloat(str, 0f);
		};
		array[697] = val;
		val = new Command();
		val.Name = "scarecrow_chase_stopping_distance";
		val.Parent = "halloween";
		val.FullName = "halloween.scarecrow_chase_stopping_distance";
		val.ServerAdmin = true;
		val.Description = "Stopping distance for destinations set while chasing a target (Default: 0.5)";
		val.Variable = true;
		val.GetOveride = () => Halloween.scarecrow_chase_stopping_distance.ToString();
		val.SetOveride = delegate(string str)
		{
			Halloween.scarecrow_chase_stopping_distance = StringExtensions.ToFloat(str, 0f);
		};
		array[698] = val;
		val = new Command();
		val.Name = "scarecrow_throw_beancan_global_delay";
		val.Parent = "halloween";
		val.FullName = "halloween.scarecrow_throw_beancan_global_delay";
		val.ServerAdmin = true;
		val.Description = "The delay globally on a server between each time a scarecrow throws a beancan (Default: 8 seconds).";
		val.Variable = true;
		val.GetOveride = () => Halloween.scarecrow_throw_beancan_global_delay.ToString();
		val.SetOveride = delegate(string str)
		{
			Halloween.scarecrow_throw_beancan_global_delay = StringExtensions.ToFloat(str, 0f);
		};
		array[699] = val;
		val = new Command();
		val.Name = "scarecrowpopulation";
		val.Parent = "halloween";
		val.FullName = "halloween.scarecrowpopulation";
		val.ServerAdmin = true;
		val.Description = "Population active on the server, per square km";
		val.Variable = true;
		val.GetOveride = () => Halloween.scarecrowpopulation.ToString();
		val.SetOveride = delegate(string str)
		{
			Halloween.scarecrowpopulation = StringExtensions.ToFloat(str, 0f);
		};
		array[700] = val;
		val = new Command();
		val.Name = "scarecrows_throw_beancans";
		val.Parent = "halloween";
		val.FullName = "halloween.scarecrows_throw_beancans";
		val.ServerAdmin = true;
		val.Description = "Scarecrows can throw beancans (Default: true).";
		val.Variable = true;
		val.GetOveride = () => Halloween.scarecrows_throw_beancans.ToString();
		val.SetOveride = delegate(string str)
		{
			Halloween.scarecrows_throw_beancans = StringExtensions.ToBool(str);
		};
		array[701] = val;
		val = new Command();
		val.Name = "load";
		val.Parent = "harmony";
		val.FullName = "harmony.load";
		val.ServerAdmin = true;
		val.Variable = false;
		val.Call = delegate(Arg arg)
		{
			Harmony.Load(arg);
		};
		array[702] = val;
		val = new Command();
		val.Name = "unload";
		val.Parent = "harmony";
		val.FullName = "harmony.unload";
		val.ServerAdmin = true;
		val.Variable = false;
		val.Call = delegate(Arg arg)
		{
			Harmony.Unload(arg);
		};
		array[703] = val;
		val = new Command();
		val.Name = "cd";
		val.Parent = "hierarchy";
		val.FullName = "hierarchy.cd";
		val.ServerAdmin = true;
		val.Variable = false;
		val.Call = delegate(Arg arg)
		{
			Hierarchy.cd(arg);
		};
		array[704] = val;
		val = new Command();
		val.Name = "del";
		val.Parent = "hierarchy";
		val.FullName = "hierarchy.del";
		val.ServerAdmin = true;
		val.Variable = false;
		val.Call = delegate(Arg arg)
		{
			Hierarchy.del(arg);
		};
		array[705] = val;
		val = new Command();
		val.Name = "ls";
		val.Parent = "hierarchy";
		val.FullName = "hierarchy.ls";
		val.ServerAdmin = true;
		val.Variable = false;
		val.Call = delegate(Arg arg)
		{
			Hierarchy.ls(arg);
		};
		array[706] = val;
		val = new Command();
		val.Name = "addownership";
		val.Parent = "inventory";
		val.FullName = "inventory.addownership";
		val.ServerAdmin = true;
		val.Description = "Add ownership to item";
		val.Variable = false;
		val.Call = delegate(Arg arg)
		{
			Inventory.addownership(arg);
		};
		array[707] = val;
		val = new Command();
		val.Name = "clearinventory";
		val.Parent = "inventory";
		val.FullName = "inventory.clearinventory";
		val.ServerAdmin = true;
		val.Description = "Clears the inventory of a target player. eg. inventory.clearInventory jim. Can take container names as arguments: --belt --wear --backpack";
		val.Variable = false;
		val.Call = delegate(Arg arg)
		{
			Inventory.clearInventory(arg);
		};
		array[708] = val;
		val = new Command();
		val.Name = "convertownership";
		val.Parent = "inventory";
		val.FullName = "inventory.convertownership";
		val.ServerAdmin = true;
		val.Description = "Reduce ownership to item to allow new ownership to be added";
		val.Variable = false;
		val.Call = delegate(Arg arg)
		{
			Inventory.convertownership(arg);
		};
		array[709] = val;
		val = new Command();
		val.Name = "copyto";
		val.Parent = "inventory";
		val.FullName = "inventory.copyto";
		val.ServerAdmin = true;
		val.Description = "Copies the players inventory to the player in front of them";
		val.Variable = false;
		val.Call = delegate(Arg arg)
		{
			Inventory.copyTo(arg);
		};
		array[710] = val;
		val = new Command();
		val.Name = "defs";
		val.Parent = "inventory";
		val.FullName = "inventory.defs";
		val.ServerAdmin = true;
		val.Variable = false;
		val.Call = delegate(Arg arg)
		{
			Inventory.defs(arg);
		};
		array[711] = val;
		val = new Command();
		val.Name = "deployloadout";
		val.Parent = "inventory";
		val.FullName = "inventory.deployloadout";
		val.ServerAdmin = true;
		val.Description = "Deploys the given loadout to a target player. eg. inventory.deployLoadout testloadout jim";
		val.Variable = false;
		val.Call = delegate(Arg arg)
		{
			Inventory.deployLoadout(arg);
		};
		array[712] = val;
		val = new Command();
		val.Name = "deployloadoutinrange";
		val.Parent = "inventory";
		val.FullName = "inventory.deployloadoutinrange";
		val.ServerAdmin = true;
		val.Description = "Deploys a loadout to players in a radius eg. inventory.deployLoadoutInRange testloadout 30";
		val.Variable = false;
		val.Call = delegate(Arg arg)
		{
			Inventory.deployLoadoutInRange(arg);
		};
		array[713] = val;
		val = new Command();
		val.Name = "disableattirelimitations";
		val.Parent = "inventory";
		val.FullName = "inventory.disableattirelimitations";
		val.ServerAdmin = true;
		val.ClientAdmin = true;
		val.Client = true;
		val.Description = "Disables all attire limitations, so NPC clothing and invalid overlaps can be equipped";
		val.Replicated = true;
		val.Variable = true;
		val.GetOveride = () => Inventory.disableAttireLimitations.ToString();
		val.SetOveride = delegate(string str)
		{
			Inventory.disableAttireLimitations = StringExtensions.ToBool(str);
		};
		val.Default = "False";
		array[714] = val;
		val = new Command();
		val.Name = "endloot";
		val.Parent = "inventory";
		val.FullName = "inventory.endloot";
		val.ServerUser = true;
		val.Variable = false;
		val.Call = delegate(Arg arg)
		{
			Inventory.endloot(arg);
		};
		array[715] = val;
		val = new Command();
		val.Name = "equipslot";
		val.Parent = "inventory";
		val.FullName = "inventory.equipslot";
		val.ServerAdmin = true;
		val.Variable = false;
		val.Call = delegate(Arg arg)
		{
			Inventory.equipslot(arg);
		};
		array[716] = val;
		val = new Command();
		val.Name = "equipslottarget";
		val.Parent = "inventory";
		val.FullName = "inventory.equipslottarget";
		val.ServerAdmin = true;
		val.Variable = false;
		val.Call = delegate(Arg arg)
		{
			Inventory.equipslottarget(arg);
		};
		array[717] = val;
		val = new Command();
		val.Name = "give";
		val.Parent = "inventory";
		val.FullName = "inventory.give";
		val.ServerAdmin = true;
		val.Description = "{item} {amount} {condition} {skin} {container} {slot}";
		val.Variable = false;
		val.Call = delegate(Arg arg)
		{
			Inventory.give(arg);
		};
		array[718] = val;
		val = new Command();
		val.Name = "giveall";
		val.Parent = "inventory";
		val.FullName = "inventory.giveall";
		val.ServerAdmin = true;
		val.Variable = false;
		val.Call = delegate(Arg arg)
		{
			Inventory.giveall(arg);
		};
		array[719] = val;
		val = new Command();
		val.Name = "givearm";
		val.Parent = "inventory";
		val.FullName = "inventory.givearm";
		val.ServerAdmin = true;
		val.Description = "{itemid} {amount}";
		val.Variable = false;
		val.Call = delegate(Arg arg)
		{
			Inventory.givearm(arg);
		};
		array[720] = val;
		val = new Command();
		val.Name = "givebp";
		val.Parent = "inventory";
		val.FullName = "inventory.givebp";
		val.ServerAdmin = true;
		val.Variable = false;
		val.Call = delegate(Arg arg)
		{
			Inventory.giveBp(arg);
		};
		array[721] = val;
		val = new Command();
		val.Name = "giveid";
		val.Parent = "inventory";
		val.FullName = "inventory.giveid";
		val.ServerAdmin = true;
		val.Description = "{itemid} {amount}";
		val.Variable = false;
		val.Call = delegate(Arg arg)
		{
			Inventory.giveid(arg);
		};
		array[722] = val;
		val = new Command();
		val.Name = "giveto";
		val.Parent = "inventory";
		val.FullName = "inventory.giveto";
		val.ServerAdmin = true;
		val.Description = "{item} {player} {amount} {skin}";
		val.Variable = false;
		val.Call = delegate(Arg arg)
		{
			Inventory.giveto(arg);
		};
		array[723] = val;
		val = new Command();
		val.Name = "lighttoggle";
		val.Parent = "inventory";
		val.FullName = "inventory.lighttoggle";
		val.ServerUser = true;
		val.Variable = false;
		val.Call = delegate(Arg arg)
		{
			Inventory.lighttoggle_sv(arg);
		};
		array[724] = val;
		val = new Command();
		val.Name = "listloadouts";
		val.Parent = "inventory";
		val.FullName = "inventory.listloadouts";
		val.ServerAdmin = true;
		val.Description = "Prints all saved inventory loadouts";
		val.Variable = false;
		val.Call = delegate(Arg arg)
		{
			Inventory.listloadouts(arg);
		};
		array[725] = val;
		val = new Command();
		val.Name = "pipetteid";
		val.Parent = "inventory";
		val.FullName = "inventory.pipetteid";
		val.ServerAdmin = true;
		val.Variable = false;
		val.Call = delegate(Arg arg)
		{
			Inventory.pipetteid(arg);
		};
		array[726] = val;
		val = new Command();
		val.Name = "reduceownership";
		val.Parent = "inventory";
		val.FullName = "inventory.reduceownership";
		val.ServerAdmin = true;
		val.Description = "Reduce ownership to item to allow new ownership to be added";
		val.Variable = false;
		val.Call = delegate(Arg arg)
		{
			Inventory.reduceownership(arg);
		};
		array[727] = val;
		val = new Command();
		val.Name = "reloaddefs";
		val.Parent = "inventory";
		val.FullName = "inventory.reloaddefs";
		val.ServerAdmin = true;
		val.Variable = false;
		val.Call = delegate(Arg arg)
		{
			Inventory.reloaddefs(arg);
		};
		array[728] = val;
		val = new Command();
		val.Name = "resetbp";
		val.Parent = "inventory";
		val.FullName = "inventory.resetbp";
		val.ServerAdmin = true;
		val.Variable = false;
		val.Call = delegate(Arg arg)
		{
			Inventory.resetbp(arg);
		};
		array[729] = val;
		val = new Command();
		val.Name = "saveloadout";
		val.Parent = "inventory";
		val.FullName = "inventory.saveloadout";
		val.ServerAdmin = true;
		val.Description = "Saves the current equipped loadout of the calling player. eg. inventory.saveLoadout loaduoutname";
		val.Variable = false;
		val.Call = delegate(Arg arg)
		{
			Inventory.saveloadout(arg);
		};
		array[730] = val;
		val = new Command();
		val.Name = "setwornarmorslots";
		val.Parent = "inventory";
		val.FullName = "inventory.setwornarmorslots";
		val.ServerAdmin = true;
		val.Description = "Set worn items to have maximum armor slots supported";
		val.Variable = false;
		val.Call = delegate(Arg arg)
		{
			Inventory.setwornarmorslots(arg);
		};
		array[731] = val;
		val = new Command();
		val.Name = "stackable_item_ownership";
		val.Parent = "inventory";
		val.FullName = "inventory.stackable_item_ownership";
		val.ServerAdmin = true;
		val.Variable = true;
		val.GetOveride = () => Inventory.stackable_item_ownership.ToString();
		val.SetOveride = delegate(string str)
		{
			Inventory.stackable_item_ownership = StringExtensions.ToBool(str);
		};
		array[732] = val;
		val = new Command();
		val.Name = "unlockall";
		val.Parent = "inventory";
		val.FullName = "inventory.unlockall";
		val.ServerAdmin = true;
		val.Variable = false;
		val.Call = delegate(Arg arg)
		{
			Inventory.unlockall(arg);
		};
		array[733] = val;
		val = new Command();
		val.Name = "printmanifest";
		val.Parent = "manifest";
		val.FullName = "manifest.printmanifest";
		val.ServerAdmin = true;
		val.Variable = false;
		val.Call = delegate(Arg arg)
		{
			object obj = Manifest.PrintManifest();
			arg.ReplyWithObject(obj);
		};
		array[734] = val;
		val = new Command();
		val.Name = "printmanifestraw";
		val.Parent = "manifest";
		val.FullName = "manifest.printmanifestraw";
		val.ServerAdmin = true;
		val.Variable = false;
		val.Call = delegate(Arg arg)
		{
			object obj2 = Manifest.PrintManifestRaw();
			arg.ReplyWithObject(obj2);
		};
		array[735] = val;
		val = new Command();
		val.Name = "full";
		val.Parent = "memsnap";
		val.FullName = "memsnap.full";
		val.ServerAdmin = true;
		val.Variable = false;
		val.Call = delegate(Arg arg)
		{
			MemSnap.full(arg);
		};
		array[736] = val;
		val = new Command();
		val.Name = "managed";
		val.Parent = "memsnap";
		val.FullName = "memsnap.managed";
		val.ServerAdmin = true;
		val.Variable = false;
		val.Call = delegate(Arg arg)
		{
			MemSnap.managed(arg);
		};
		array[737] = val;
		val = new Command();
		val.Name = "native";
		val.Parent = "memsnap";
		val.FullName = "memsnap.native";
		val.ServerAdmin = true;
		val.Variable = false;
		val.Call = delegate(Arg arg)
		{
			MemSnap.native(arg);
		};
		array[738] = val;
		val = new Command();
		val.Name = "global_network_debug";
		val.Parent = "net";
		val.FullName = "net.global_network_debug";
		val.ServerAdmin = true;
		val.Description = "Toggle printing time taken to send all global entities to client when they connect";
		val.Variable = true;
		val.GetOveride = () => Net.global_network_debug.ToString();
		val.SetOveride = delegate(string str)
		{
			Net.global_network_debug = StringExtensions.ToBool(str);
		};
		array[739] = val;
		val = new Command();
		val.Name = "global_networked_bases";
		val.Parent = "net";
		val.FullName = "net.global_networked_bases";
		val.ServerAdmin = true;
		val.Variable = true;
		val.GetOveride = () => Net.globalNetworkedBases.ToString();
		val.SetOveride = delegate(string str)
		{
			Net.globalNetworkedBases = StringExtensions.ToBool(str);
		};
		array[740] = val;
		val = new Command();
		val.Name = "limit_global_update_broadcast";
		val.Parent = "net";
		val.FullName = "net.limit_global_update_broadcast";
		val.ServerAdmin = true;
		val.Description = "(default) true = only broadcast to clients with global networking enabled, false = broadcast to every client regardless";
		val.Variable = true;
		val.GetOveride = () => Net.limit_global_update_broadcast.ToString();
		val.SetOveride = delegate(string str)
		{
			Net.limit_global_update_broadcast = StringExtensions.ToBool(str);
		};
		array[741] = val;
		val = new Command();
		val.Name = "network_group_debug";
		val.Parent = "net";
		val.FullName = "net.network_group_debug";
		val.ServerAdmin = true;
		val.Description = "Toggle checking network group bounds whenever an entity changes its network group";
		val.Variable = true;
		val.GetOveride = () => Net.network_group_debug.ToString();
		val.SetOveride = delegate(string str)
		{
			Net.network_group_debug = StringExtensions.ToBool(str);
		};
		array[742] = val;
		val = new Command();
		val.Name = "visdebug";
		val.Parent = "net";
		val.FullName = "net.visdebug";
		val.ServerAdmin = true;
		val.Variable = true;
		val.GetOveride = () => Net.visdebug.ToString();
		val.SetOveride = delegate(string str)
		{
			Net.visdebug = StringExtensions.ToBool(str);
		};
		array[743] = val;
		val = new Command();
		val.Name = "visibilityradiusfaroverride";
		val.Parent = "net";
		val.FullName = "net.visibilityradiusfaroverride";
		val.ServerAdmin = true;
		val.Variable = true;
		val.GetOveride = () => Net.visibilityRadiusFarOverride.ToString();
		val.SetOveride = delegate(string str)
		{
			Net.visibilityRadiusFarOverride = StringExtensions.ToInt(str, 0);
		};
		array[744] = val;
		val = new Command();
		val.Name = "visibilityradiusnearoverride";
		val.Parent = "net";
		val.FullName = "net.visibilityradiusnearoverride";
		val.ServerAdmin = true;
		val.Variable = true;
		val.GetOveride = () => Net.visibilityRadiusNearOverride.ToString();
		val.SetOveride = delegate(string str)
		{
			Net.visibilityRadiusNearOverride = StringExtensions.ToInt(str, 0);
		};
		array[745] = val;
		val = new Command();
		val.Name = "broadcast_ping";
		val.Parent = "nexus";
		val.FullName = "nexus.broadcast_ping";
		val.ServerAdmin = true;
		val.Variable = false;
		val.Call = delegate(Arg arg)
		{
			Nexus.broadcast_ping(arg);
		};
		array[746] = val;
		val = new Command();
		val.Name = "clanclatbatchduration";
		val.Parent = "nexus";
		val.FullName = "nexus.clanclatbatchduration";
		val.ServerAdmin = true;
		val.Description = "Maximum duration in seconds to batch clan chat messages to send to other servers on the nexus";
		val.Variable = true;
		val.GetOveride = () => Nexus.clanClatBatchDuration.ToString();
		val.SetOveride = delegate(string str)
		{
			Nexus.clanClatBatchDuration = StringExtensions.ToFloat(str, 0f);
		};
		array[747] = val;
		val = new Command();
		val.Name = "defaultzonecontactradius";
		val.Parent = "nexus";
		val.FullName = "nexus.defaultzonecontactradius";
		val.ServerAdmin = true;
		val.Description = "Default distance between zones to allow boat travel, if map.contactRadius isn't set in the nexus (uses normalized coordinates)";
		val.Variable = true;
		val.GetOveride = () => Nexus.defaultZoneContactRadius.ToString();
		val.SetOveride = delegate(string str)
		{
			Nexus.defaultZoneContactRadius = StringExtensions.ToFloat(str, 0f);
		};
		array[748] = val;
		val = new Command();
		val.Name = "endpoint";
		val.Parent = "nexus";
		val.FullName = "nexus.endpoint";
		val.ServerAdmin = true;
		val.ClientAdmin = true;
		val.Client = true;
		val.Description = "URL endpoint to use for the Nexus API";
		val.Replicated = true;
		val.Variable = true;
		val.GetOveride = () => Nexus.endpoint ?? "";
		val.SetOveride = delegate(string str)
		{
			Nexus.endpoint = str;
		};
		val.Default = "https://api.facepunch.com/api/nexus/";
		array[749] = val;
		val = new Command();
		val.Name = "islandspawndistance";
		val.Parent = "nexus";
		val.FullName = "nexus.islandspawndistance";
		val.ServerAdmin = true;
		val.Description = "How far away islands should be spawned, as a factor of the map size";
		val.Variable = true;
		val.GetOveride = () => Nexus.islandSpawnDistance.ToString();
		val.SetOveride = delegate(string str)
		{
			Nexus.islandSpawnDistance = StringExtensions.ToFloat(str, 0f);
		};
		array[750] = val;
		val = new Command();
		val.Name = "loadingtimeout";
		val.Parent = "nexus";
		val.FullName = "nexus.loadingtimeout";
		val.ServerAdmin = true;
		val.Description = "Time in seconds to keep players in the loading state before going to sleep";
		val.Variable = true;
		val.GetOveride = () => Nexus.loadingTimeout.ToString();
		val.SetOveride = delegate(string str)
		{
			Nexus.loadingTimeout = StringExtensions.ToFloat(str, 0f);
		};
		array[751] = val;
		val = new Command();
		val.Name = "logging";
		val.Parent = "nexus";
		val.FullName = "nexus.logging";
		val.ServerAdmin = true;
		val.Client = true;
		val.Variable = true;
		val.GetOveride = () => Nexus.logging.ToString();
		val.SetOveride = delegate(string str)
		{
			Nexus.logging = StringExtensions.ToBool(str);
		};
		array[752] = val;
		val = new Command();
		val.Name = "mapimagescale";
		val.Parent = "nexus";
		val.FullName = "nexus.mapimagescale";
		val.ServerAdmin = true;
		val.Description = "Scale of the map to render and upload to the nexus";
		val.Variable = true;
		val.GetOveride = () => Nexus.mapImageScale.ToString();
		val.SetOveride = delegate(string str)
		{
			Nexus.mapImageScale = StringExtensions.ToFloat(str, 0f);
		};
		array[753] = val;
		val = new Command();
		val.Name = "messagelockduration";
		val.Parent = "nexus";
		val.FullName = "nexus.messagelockduration";
		val.ServerAdmin = true;
		val.Description = "Time in seconds to allow the server to process nexus messages before re-sending (requires restart)";
		val.Variable = true;
		val.GetOveride = () => Nexus.messageLockDuration.ToString();
		val.SetOveride = delegate(string str)
		{
			Nexus.messageLockDuration = StringExtensions.ToInt(str, 0);
		};
		array[754] = val;
		val = new Command();
		val.Name = "ping";
		val.Parent = "nexus";
		val.FullName = "nexus.ping";
		val.ServerAdmin = true;
		val.Variable = false;
		val.Call = delegate(Arg arg)
		{
			Nexus.ping(arg);
		};
		array[755] = val;
		val = new Command();
		val.Name = "pinginterval";
		val.Parent = "nexus";
		val.FullName = "nexus.pinginterval";
		val.ServerAdmin = true;
		val.Description = "Time in seconds to wait between server status pings";
		val.Variable = true;
		val.GetOveride = () => Nexus.pingInterval.ToString();
		val.SetOveride = delegate(string str)
		{
			Nexus.pingInterval = StringExtensions.ToFloat(str, 0f);
		};
		array[756] = val;
		val = new Command();
		val.Name = "playermanifestinterval";
		val.Parent = "nexus";
		val.FullName = "nexus.playermanifestinterval";
		val.ServerAdmin = true;
		val.Description = "Interval in seconds to broadcast the player manifest to other servers on the nexus";
		val.Variable = true;
		val.GetOveride = () => Nexus.playerManifestInterval.ToString();
		val.SetOveride = delegate(string str)
		{
			Nexus.playerManifestInterval = StringExtensions.ToFloat(str, 0f);
		};
		array[757] = val;
		val = new Command();
		val.Name = "playeronline";
		val.Parent = "nexus";
		val.FullName = "nexus.playeronline";
		val.ServerAdmin = true;
		val.Variable = false;
		val.Call = delegate(Arg arg)
		{
			Nexus.playeronline(arg);
		};
		array[758] = val;
		val = new Command();
		val.Name = "protectionduration";
		val.Parent = "nexus";
		val.FullName = "nexus.protectionduration";
		val.ServerAdmin = true;
		val.Description = "Maximum time in seconds to keep transfer protection enabled on entities";
		val.Variable = true;
		val.GetOveride = () => Nexus.protectionDuration.ToString();
		val.SetOveride = delegate(string str)
		{
			Nexus.protectionDuration = StringExtensions.ToFloat(str, 0f);
		};
		array[759] = val;
		val = new Command();
		val.Name = "refreshislands";
		val.Parent = "nexus";
		val.FullName = "nexus.refreshislands";
		val.ServerAdmin = true;
		val.Variable = false;
		val.Call = delegate(Arg arg)
		{
			Nexus.refreshislands(arg);
		};
		array[760] = val;
		val = new Command();
		val.Name = "rpctimeoutmultiplier";
		val.Parent = "nexus";
		val.FullName = "nexus.rpctimeoutmultiplier";
		val.ServerAdmin = true;
		val.Description = "Multiplier for nexus RPC timeout durations in case we expect different latencies";
		val.Variable = true;
		val.GetOveride = () => Nexus.rpcTimeoutMultiplier.ToString();
		val.SetOveride = delegate(string str)
		{
			Nexus.rpcTimeoutMultiplier = StringExtensions.ToFloat(str, 0f);
		};
		array[761] = val;
		val = new Command();
		val.Name = "secretkey";
		val.Parent = "nexus";
		val.FullName = "nexus.secretkey";
		val.ServerAdmin = true;
		val.Variable = true;
		val.GetOveride = () => Nexus.secretKey ?? "";
		val.SetOveride = delegate(string str)
		{
			Nexus.secretKey = str;
		};
		array[762] = val;
		val = new Command();
		val.Name = "timeoffset";
		val.Parent = "nexus";
		val.FullName = "nexus.timeoffset";
		val.ServerAdmin = true;
		val.Description = "Time offset in hours from the nexus clock";
		val.Variable = true;
		val.GetOveride = () => Nexus.timeOffset.ToString();
		val.SetOveride = delegate(string str)
		{
			Nexus.timeOffset = StringExtensions.ToFloat(str, 0f);
		};
		array[763] = val;
		val = new Command();
		val.Name = "transfer";
		val.Parent = "nexus";
		val.FullName = "nexus.transfer";
		val.ServerAdmin = true;
		val.Variable = false;
		val.Call = delegate(Arg arg)
		{
			Nexus.transfer(arg);
		};
		array[764] = val;
		val = new Command();
		val.Name = "transferflushtime";
		val.Parent = "nexus";
		val.FullName = "nexus.transferflushtime";
		val.ServerAdmin = true;
		val.Description = "Maximum amount of time in seconds that transfers should be cached before auto-saving";
		val.Variable = true;
		val.GetOveride = () => Nexus.transferFlushTime.ToString();
		val.SetOveride = delegate(string str)
		{
			Nexus.transferFlushTime = StringExtensions.ToInt(str, 0);
		};
		array[765] = val;
		val = new Command();
		val.Name = "uploadmap";
		val.Parent = "nexus";
		val.FullName = "nexus.uploadmap";
		val.ServerAdmin = true;
		val.Description = "Reupload the map image to the nexus. Normally happens automatically at server boot. WARNING: This will lag the server!";
		val.Variable = false;
		val.Call = delegate(Arg arg)
		{
			Nexus.uploadmap(arg);
		};
		array[766] = val;
		val = new Command();
		val.Name = "zonecontroller";
		val.Parent = "nexus";
		val.FullName = "nexus.zonecontroller";
		val.ServerAdmin = true;
		val.Variable = true;
		val.GetOveride = () => Nexus.zoneController ?? "";
		val.SetOveride = delegate(string str)
		{
			Nexus.zoneController = str;
		};
		array[767] = val;
		val = new Command();
		val.Name = "vendor_attack_heli_enabled";
		val.Parent = "npc";
		val.FullName = "npc.vendor_attack_heli_enabled";
		val.ServerAdmin = true;
		val.ClientAdmin = true;
		val.Client = true;
		val.Replicated = true;
		val.Variable = true;
		val.GetOveride = () => NPC_ConVars.vendor_attack_heli_enabled.ToString();
		val.SetOveride = delegate(string str)
		{
			NPC_ConVars.vendor_attack_heli_enabled = StringExtensions.ToBool(str);
		};
		val.Default = "True";
		array[768] = val;
		val = new Command();
		val.Name = "vendor_hab_enabled";
		val.Parent = "npc";
		val.FullName = "npc.vendor_hab_enabled";
		val.ServerAdmin = true;
		val.ClientAdmin = true;
		val.Client = true;
		val.Replicated = true;
		val.Variable = true;
		val.GetOveride = () => NPC_ConVars.vendor_hab_enabled.ToString();
		val.SetOveride = delegate(string str)
		{
			NPC_ConVars.vendor_hab_enabled = StringExtensions.ToBool(str);
		};
		val.Default = "True";
		array[769] = val;
		val = new Command();
		val.Name = "vendor_minicopter_enabled";
		val.Parent = "npc";
		val.FullName = "npc.vendor_minicopter_enabled";
		val.ServerAdmin = true;
		val.ClientAdmin = true;
		val.Client = true;
		val.Replicated = true;
		val.Variable = true;
		val.GetOveride = () => NPC_ConVars.vendor_minicopter_enabled.ToString();
		val.SetOveride = delegate(string str)
		{
			NPC_ConVars.vendor_minicopter_enabled = StringExtensions.ToBool(str);
		};
		val.Default = "True";
		array[770] = val;
		val = new Command();
		val.Name = "vendor_rhib_enabled";
		val.Parent = "npc";
		val.FullName = "npc.vendor_rhib_enabled";
		val.ServerAdmin = true;
		val.ClientAdmin = true;
		val.Client = true;
		val.Replicated = true;
		val.Variable = true;
		val.GetOveride = () => NPC_ConVars.vendor_rhib_enabled.ToString();
		val.SetOveride = delegate(string str)
		{
			NPC_ConVars.vendor_rhib_enabled = StringExtensions.ToBool(str);
		};
		val.Default = "True";
		array[771] = val;
		val = new Command();
		val.Name = "vendor_rowboat_enabled";
		val.Parent = "npc";
		val.FullName = "npc.vendor_rowboat_enabled";
		val.ServerAdmin = true;
		val.ClientAdmin = true;
		val.Client = true;
		val.Replicated = true;
		val.Variable = true;
		val.GetOveride = () => NPC_ConVars.vendor_rowboat_enabled.ToString();
		val.SetOveride = delegate(string str)
		{
			NPC_ConVars.vendor_rowboat_enabled = StringExtensions.ToBool(str);
		};
		val.Default = "True";
		array[772] = val;
		val = new Command();
		val.Name = "vendor_scrap_heli_enabled";
		val.Parent = "npc";
		val.FullName = "npc.vendor_scrap_heli_enabled";
		val.ServerAdmin = true;
		val.ClientAdmin = true;
		val.Client = true;
		val.Replicated = true;
		val.Variable = true;
		val.GetOveride = () => NPC_ConVars.vendor_scrap_heli_enabled.ToString();
		val.SetOveride = delegate(string str)
		{
			NPC_ConVars.vendor_scrap_heli_enabled = StringExtensions.ToBool(str);
		};
		val.Default = "True";
		array[773] = val;
		val = new Command();
		val.Name = "vendor_sub_duo_enabled";
		val.Parent = "npc";
		val.FullName = "npc.vendor_sub_duo_enabled";
		val.ServerAdmin = true;
		val.ClientAdmin = true;
		val.Client = true;
		val.Replicated = true;
		val.Variable = true;
		val.GetOveride = () => NPC_ConVars.vendor_sub_duo_enabled.ToString();
		val.SetOveride = delegate(string str)
		{
			NPC_ConVars.vendor_sub_duo_enabled = StringExtensions.ToBool(str);
		};
		val.Default = "True";
		array[774] = val;
		val = new Command();
		val.Name = "vendor_sub_solo_enabled";
		val.Parent = "npc";
		val.FullName = "npc.vendor_sub_solo_enabled";
		val.ServerAdmin = true;
		val.ClientAdmin = true;
		val.Client = true;
		val.Replicated = true;
		val.Variable = true;
		val.GetOveride = () => NPC_ConVars.vendor_sub_solo_enabled.ToString();
		val.SetOveride = delegate(string str)
		{
			NPC_ConVars.vendor_sub_solo_enabled = StringExtensions.ToBool(str);
		};
		val.Default = "True";
		array[775] = val;
		val = new Command();
		val.Name = "bulletaccuracy";
		val.Parent = "heli";
		val.FullName = "heli.bulletaccuracy";
		val.ServerAdmin = true;
		val.Variable = true;
		val.GetOveride = () => ConVar.PatrolHelicopter.bulletAccuracy.ToString();
		val.SetOveride = delegate(string str)
		{
			ConVar.PatrolHelicopter.bulletAccuracy = StringExtensions.ToFloat(str, 0f);
		};
		array[776] = val;
		val = new Command();
		val.Name = "bulletdamagescale";
		val.Parent = "heli";
		val.FullName = "heli.bulletdamagescale";
		val.ServerAdmin = true;
		val.Variable = true;
		val.GetOveride = () => ConVar.PatrolHelicopter.bulletDamageScale.ToString();
		val.SetOveride = delegate(string str)
		{
			ConVar.PatrolHelicopter.bulletDamageScale = StringExtensions.ToFloat(str, 0f);
		};
		array[777] = val;
		val = new Command();
		val.Name = "call";
		val.Parent = "heli";
		val.FullName = "heli.call";
		val.ServerAdmin = true;
		val.Variable = false;
		val.Call = delegate(Arg arg)
		{
			ConVar.PatrolHelicopter.call(arg);
		};
		array[778] = val;
		val = new Command();
		val.Name = "calltome";
		val.Parent = "heli";
		val.FullName = "heli.calltome";
		val.ServerAdmin = true;
		val.Variable = false;
		val.Call = delegate(Arg arg)
		{
			ConVar.PatrolHelicopter.calltome(arg);
		};
		array[779] = val;
		val = new Command();
		val.Name = "death";
		val.Parent = "heli";
		val.FullName = "heli.death";
		val.ServerAdmin = true;
		val.Variable = false;
		val.Call = delegate(Arg arg)
		{
			ConVar.PatrolHelicopter.death(arg);
		};
		array[780] = val;
		val = new Command();
		val.Name = "drop";
		val.Parent = "heli";
		val.FullName = "heli.drop";
		val.ServerAdmin = true;
		val.Variable = false;
		val.Call = delegate(Arg arg)
		{
			ConVar.PatrolHelicopter.drop(arg);
		};
		array[781] = val;
		val = new Command();
		val.Name = "flee";
		val.Parent = "heli";
		val.FullName = "heli.flee";
		val.ServerAdmin = true;
		val.Variable = false;
		val.Call = delegate(Arg arg)
		{
			ConVar.PatrolHelicopter.flee(arg);
		};
		array[782] = val;
		val = new Command();
		val.Name = "guns";
		val.Parent = "heli";
		val.FullName = "heli.guns";
		val.ServerAdmin = true;
		val.Variable = true;
		val.GetOveride = () => ConVar.PatrolHelicopter.guns.ToString();
		val.SetOveride = delegate(string str)
		{
			ConVar.PatrolHelicopter.guns = StringExtensions.ToInt(str, 0);
		};
		array[783] = val;
		val = new Command();
		val.Name = "lifetimeminutes";
		val.Parent = "heli";
		val.FullName = "heli.lifetimeminutes";
		val.ServerAdmin = true;
		val.Variable = true;
		val.GetOveride = () => ConVar.PatrolHelicopter.lifetimeMinutes.ToString();
		val.SetOveride = delegate(string str)
		{
			ConVar.PatrolHelicopter.lifetimeMinutes = StringExtensions.ToFloat(str, 0f);
		};
		array[784] = val;
		val = new Command();
		val.Name = "move";
		val.Parent = "heli";
		val.FullName = "heli.move";
		val.ServerAdmin = true;
		val.Variable = false;
		val.Call = delegate(Arg arg)
		{
			ConVar.PatrolHelicopter.move(arg);
		};
		array[785] = val;
		val = new Command();
		val.Name = "orbit";
		val.Parent = "heli";
		val.FullName = "heli.orbit";
		val.ServerAdmin = true;
		val.Variable = false;
		val.Call = delegate(Arg arg)
		{
			ConVar.PatrolHelicopter.orbit(arg);
		};
		array[786] = val;
		val = new Command();
		val.Name = "orbitstrafe";
		val.Parent = "heli";
		val.FullName = "heli.orbitstrafe";
		val.ServerAdmin = true;
		val.Variable = false;
		val.Call = delegate(Arg arg)
		{
			ConVar.PatrolHelicopter.orbitstrafe(arg);
		};
		array[787] = val;
		val = new Command();
		val.Name = "patrol";
		val.Parent = "heli";
		val.FullName = "heli.patrol";
		val.ServerAdmin = true;
		val.Variable = false;
		val.Call = delegate(Arg arg)
		{
			ConVar.PatrolHelicopter.patrol(arg);
		};
		array[788] = val;
		val = new Command();
		val.Name = "strafe";
		val.Parent = "heli";
		val.FullName = "heli.strafe";
		val.ServerAdmin = true;
		val.Variable = false;
		val.Call = delegate(Arg arg)
		{
			ConVar.PatrolHelicopter.strafe(arg);
		};
		array[789] = val;
		val = new Command();
		val.Name = "testpuzzle";
		val.Parent = "heli";
		val.FullName = "heli.testpuzzle";
		val.ServerAdmin = true;
		val.Variable = false;
		val.Call = delegate(Arg arg)
		{
			ConVar.PatrolHelicopter.testpuzzle(arg);
		};
		array[790] = val;
		val = new Command();
		val.Name = "allowhorsetempragdoll";
		val.Parent = "physics";
		val.FullName = "physics.allowhorsetempragdoll";
		val.ServerAdmin = true;
		val.Variable = true;
		val.GetOveride = () => Physics.allowhorsetempragdoll.ToString();
		val.SetOveride = delegate(string str)
		{
			Physics.allowhorsetempragdoll = StringExtensions.ToBool(str);
		};
		array[791] = val;
		val = new Command();
		val.Name = "allowplayertempragdoll";
		val.Parent = "physics";
		val.FullName = "physics.allowplayertempragdoll";
		val.ServerAdmin = true;
		val.Variable = true;
		val.GetOveride = () => Physics.allowplayertempragdoll.ToString();
		val.SetOveride = delegate(string str)
		{
			Physics.allowplayertempragdoll = StringExtensions.ToBool(str);
		};
		array[792] = val;
		val = new Command();
		val.Name = "autosynctransforms";
		val.Parent = "physics";
		val.FullName = "physics.autosynctransforms";
		val.ServerAdmin = true;
		val.Variable = true;
		val.GetOveride = () => Physics.autosynctransforms.ToString();
		val.SetOveride = delegate(string str)
		{
			Physics.autosynctransforms = StringExtensions.ToBool(str);
		};
		array[793] = val;
		val = new Command();
		val.Name = "batchsynctransforms";
		val.Parent = "physics";
		val.FullName = "physics.batchsynctransforms";
		val.ServerAdmin = true;
		val.Variable = true;
		val.GetOveride = () => Physics.batchsynctransforms.ToString();
		val.SetOveride = delegate(string str)
		{
			Physics.batchsynctransforms = StringExtensions.ToBool(str);
		};
		array[794] = val;
		val = new Command();
		val.Name = "bouncethreshold";
		val.Parent = "physics";
		val.FullName = "physics.bouncethreshold";
		val.ServerAdmin = true;
		val.Variable = true;
		val.GetOveride = () => Physics.bouncethreshold.ToString();
		val.SetOveride = delegate(string str)
		{
			Physics.bouncethreshold = StringExtensions.ToFloat(str, 0f);
		};
		array[795] = val;
		val = new Command();
		val.Name = "droppedmode";
		val.Parent = "physics";
		val.FullName = "physics.droppedmode";
		val.ServerAdmin = true;
		val.Description = "The collision detection mode that dropped items and corpses should use";
		val.Variable = true;
		val.GetOveride = () => Physics.droppedmode.ToString();
		val.SetOveride = delegate(string str)
		{
			Physics.droppedmode = StringExtensions.ToInt(str, 0);
		};
		array[796] = val;
		val = new Command();
		val.Name = "gravity";
		val.Parent = "physics";
		val.FullName = "physics.gravity";
		val.ServerAdmin = true;
		val.ClientAdmin = true;
		val.Client = true;
		val.Description = "Gravity multiplier";
		val.Replicated = true;
		val.Variable = true;
		val.GetOveride = () => Physics.gravity.ToString();
		val.SetOveride = delegate(string str)
		{
			Physics.gravity = StringExtensions.ToFloat(str, 0f);
		};
		val.Default = "1.0";
		array[797] = val;
		val = new Command();
		val.Name = "groundwatchdebug";
		val.Parent = "physics";
		val.FullName = "physics.groundwatchdebug";
		val.ServerAdmin = true;
		val.Variable = true;
		val.GetOveride = () => Physics.groundwatchdebug.ToString();
		val.SetOveride = delegate(string str)
		{
			Physics.groundwatchdebug = StringExtensions.ToBool(str);
		};
		array[798] = val;
		val = new Command();
		val.Name = "groundwatchdelay";
		val.Parent = "physics";
		val.FullName = "physics.groundwatchdelay";
		val.ServerAdmin = true;
		val.Variable = true;
		val.GetOveride = () => Physics.groundwatchdelay.ToString();
		val.SetOveride = delegate(string str)
		{
			Physics.groundwatchdelay = StringExtensions.ToFloat(str, 0f);
		};
		array[799] = val;
		val = new Command();
		val.Name = "groundwatchfails";
		val.Parent = "physics";
		val.FullName = "physics.groundwatchfails";
		val.ServerAdmin = true;
		val.Variable = true;
		val.GetOveride = () => Physics.groundwatchfails.ToString();
		val.SetOveride = delegate(string str)
		{
			Physics.groundwatchfails = StringExtensions.ToInt(str, 0);
		};
		array[800] = val;
		val = new Command();
		val.Name = "sendeffects";
		val.Parent = "physics";
		val.FullName = "physics.sendeffects";
		val.ServerAdmin = true;
		val.Description = "Send effects to clients when physics objects collide";
		val.Variable = true;
		val.GetOveride = () => Physics.sendeffects.ToString();
		val.SetOveride = delegate(string str)
		{
			Physics.sendeffects = StringExtensions.ToBool(str);
		};
		array[801] = val;
		val = new Command();
		val.Name = "serverragdollmode";
		val.Parent = "physics";
		val.FullName = "physics.serverragdollmode";
		val.ServerAdmin = true;
		val.Description = "The collision detection mode that server-side ragdolls should use";
		val.Variable = true;
		val.GetOveride = () => Physics.serverragdollmode.ToString();
		val.SetOveride = delegate(string str)
		{
			Physics.serverragdollmode = StringExtensions.ToInt(str, 0);
		};
		array[802] = val;
		val = new Command();
		val.Name = "serversideragdolls";
		val.Parent = "physics";
		val.FullName = "physics.serversideragdolls";
		val.ServerAdmin = true;
		val.ClientAdmin = true;
		val.Client = true;
		val.Saved = true;
		val.Description = "Do ragdoll physics calculations on the server, or use the old client-side system";
		val.Replicated = true;
		val.ShowInAdminUI = true;
		val.Variable = true;
		val.GetOveride = () => Physics.serversideragdolls.ToString();
		val.SetOveride = delegate(string str)
		{
			Physics.serversideragdolls = StringExtensions.ToBool(str);
		};
		val.Default = "False";
		array[803] = val;
		val = new Command();
		val.Name = "sleepthreshold";
		val.Parent = "physics";
		val.FullName = "physics.sleepthreshold";
		val.ServerAdmin = true;
		val.Variable = true;
		val.GetOveride = () => Physics.sleepthreshold.ToString();
		val.SetOveride = delegate(string str)
		{
			Physics.sleepthreshold = StringExtensions.ToFloat(str, 0f);
		};
		array[804] = val;
		val = new Command();
		val.Name = "solveriterationcount";
		val.Parent = "physics";
		val.FullName = "physics.solveriterationcount";
		val.ServerAdmin = true;
		val.Description = "The default solver iteration count permitted for any rigid bodies (default 7). Must be positive";
		val.Variable = true;
		val.GetOveride = () => Physics.solveriterationcount.ToString();
		val.SetOveride = delegate(string str)
		{
			Physics.solveriterationcount = StringExtensions.ToInt(str, 0);
		};
		array[805] = val;
		val = new Command();
		val.Name = "towingmaxlinearaccelfromjoint";
		val.Parent = "physics";
		val.FullName = "physics.towingmaxlinearaccelfromjoint";
		val.ServerAdmin = true;
		val.Variable = true;
		val.GetOveride = () => Physics.towingmaxlinearaccelfromjoint.ToString();
		val.SetOveride = delegate(string str)
		{
			Physics.towingmaxlinearaccelfromjoint = StringExtensions.ToFloat(str, 0f);
		};
		array[806] = val;
		val = new Command();
		val.Name = "treecollision";
		val.Parent = "physics";
		val.FullName = "physics.treecollision";
		val.ServerAdmin = true;
		val.ClientAdmin = true;
		val.Client = true;
		val.Saved = true;
		val.Description = "Do players and vehicles collide with trees?";
		val.Replicated = true;
		val.ShowInAdminUI = true;
		val.Variable = true;
		val.GetOveride = () => Physics.treecollision.ToString();
		val.SetOveride = delegate(string str)
		{
			Physics.treecollision = StringExtensions.ToBool(str);
		};
		val.Default = "True";
		array[807] = val;
		val = new Command();
		val.Name = "auto_refresh_region";
		val.Parent = "ping";
		val.FullName = "ping.auto_refresh_region";
		val.ServerAdmin = true;
		val.Variable = true;
		val.GetOveride = () => Ping.auto_refresh_region.ToString();
		val.SetOveride = delegate(string str)
		{
			Ping.auto_refresh_region = StringExtensions.ToBool(str);
		};
		array[808] = val;
		val = new Command();
		val.Name = "ping_estimate_logging";
		val.Parent = "ping";
		val.FullName = "ping.ping_estimate_logging";
		val.ServerAdmin = true;
		val.Variable = true;
		val.GetOveride = () => Ping.ping_estimate_logging.ToString();
		val.SetOveride = delegate(string str)
		{
			Ping.ping_estimate_logging = StringExtensions.ToBool(str);
		};
		array[809] = val;
		val = new Command();
		val.Name = "ping_estimation";
		val.Parent = "ping";
		val.FullName = "ping.ping_estimation";
		val.ServerAdmin = true;
		val.Variable = true;
		val.GetOveride = () => Ping.ping_estimation.ToString();
		val.SetOveride = delegate(string str)
		{
			Ping.ping_estimation = StringExtensions.ToBool(str);
		};
		array[810] = val;
		val = new Command();
		val.Name = "ping_parallel";
		val.Parent = "ping";
		val.FullName = "ping.ping_parallel";
		val.ServerAdmin = true;
		val.Variable = true;
		val.GetOveride = () => Ping.ping_parallel.ToString();
		val.SetOveride = delegate(string str)
		{
			Ping.ping_parallel = StringExtensions.ToBool(str);
		};
		array[811] = val;
		val = new Command();
		val.Name = "ping_refresh_interval";
		val.Parent = "ping";
		val.FullName = "ping.ping_refresh_interval";
		val.ServerAdmin = true;
		val.Variable = true;
		val.GetOveride = () => Ping.ping_refresh_interval.ToString();
		val.SetOveride = delegate(string str)
		{
			Ping.ping_refresh_interval = StringExtensions.ToInt(str, 0);
		};
		array[812] = val;
		val = new Command();
		val.Name = "ping_samples";
		val.Parent = "ping";
		val.FullName = "ping.ping_samples";
		val.ServerAdmin = true;
		val.Variable = true;
		val.GetOveride = () => Ping.ping_samples.ToString();
		val.SetOveride = delegate(string str)
		{
			Ping.ping_samples = StringExtensions.ToInt(str, 0);
		};
		array[813] = val;
		val = new Command();
		val.Name = "abandonmission";
		val.Parent = "player";
		val.FullName = "player.abandonmission";
		val.ServerUser = true;
		val.Variable = false;
		val.Call = delegate(Arg arg)
		{
			Player.abandonmission(arg);
		};
		array[814] = val;
		val = new Command();
		val.Name = "cinematic_gesture";
		val.Parent = "player";
		val.FullName = "player.cinematic_gesture";
		val.ServerUser = true;
		val.Variable = false;
		val.Call = delegate(Arg arg)
		{
			Player.cinematic_gesture(arg);
		};
		array[815] = val;
		val = new Command();
		val.Name = "cinematic_play";
		val.Parent = "player";
		val.FullName = "player.cinematic_play";
		val.ServerUser = true;
		val.Variable = false;
		val.Call = delegate(Arg arg)
		{
			Player.cinematic_play(arg);
		};
		array[816] = val;
		val = new Command();
		val.Name = "cinematic_stop";
		val.Parent = "player";
		val.FullName = "player.cinematic_stop";
		val.ServerUser = true;
		val.Variable = false;
		val.Call = delegate(Arg arg)
		{
			Player.cinematic_stop(arg);
		};
		array[817] = val;
		val = new Command();
		val.Name = "copyrotation";
		val.Parent = "player";
		val.FullName = "player.copyrotation";
		val.ServerUser = true;
		val.Variable = false;
		val.Call = delegate(Arg arg)
		{
			Player.copyrotation(arg);
		};
		array[818] = val;
		val = new Command();
		val.Name = "createskull";
		val.Parent = "player";
		val.FullName = "player.createskull";
		val.ServerAdmin = true;
		val.Variable = false;
		val.Call = delegate(Arg arg)
		{
			Player.createskull(arg);
		};
		array[819] = val;
		val = new Command();
		val.Name = "createtrophy";
		val.Parent = "player";
		val.FullName = "player.createtrophy";
		val.ServerAdmin = true;
		val.Variable = false;
		val.Call = delegate(Arg arg)
		{
			string text10 = Player.createTrophy(arg);
			arg.ReplyWithObject((object)text10);
		};
		array[820] = val;
		val = new Command();
		val.Name = "dismount";
		val.Parent = "player";
		val.FullName = "player.dismount";
		val.ServerAdmin = true;
		val.Variable = false;
		val.Call = delegate(Arg arg)
		{
			Player.dismount(arg);
		};
		array[821] = val;
		val = new Command();
		val.Name = "dropbackpackondeath";
		val.Parent = "player";
		val.FullName = "player.dropbackpackondeath";
		val.ServerAdmin = true;
		val.Variable = true;
		val.GetOveride = () => Player.dropbackpackondeath.ToString();
		val.SetOveride = delegate(string str)
		{
			Player.dropbackpackondeath = StringExtensions.ToBool(str);
		};
		array[822] = val;
		val = new Command();
		val.Name = "dropbackpackondowned";
		val.Parent = "player";
		val.FullName = "player.dropbackpackondowned";
		val.ServerAdmin = true;
		val.Variable = true;
		val.GetOveride = () => Player.dropbackpackondowned.ToString();
		val.SetOveride = delegate(string str)
		{
			Player.dropbackpackondowned = StringExtensions.ToBool(str);
		};
		array[823] = val;
		val = new Command();
		val.Name = "fillwater";
		val.Parent = "player";
		val.FullName = "player.fillwater";
		val.ServerAdmin = true;
		val.Variable = false;
		val.Call = delegate(Arg arg)
		{
			Player.fillwater(arg);
		};
		array[824] = val;
		val = new Command();
		val.Name = "gesture_radius";
		val.Parent = "player";
		val.FullName = "player.gesture_radius";
		val.ServerAdmin = true;
		val.Variable = false;
		val.Call = delegate(Arg arg)
		{
			Player.gesture_radius(arg);
		};
		array[825] = val;
		val = new Command();
		val.Name = "gesture_radius_notme";
		val.Parent = "player";
		val.FullName = "player.gesture_radius_notme";
		val.ServerAdmin = true;
		val.Variable = false;
		val.Call = delegate(Arg arg)
		{
			Player.gesture_radius_notme(arg);
		};
		array[826] = val;
		val = new Command();
		val.Name = "gotosleep";
		val.Parent = "player";
		val.FullName = "player.gotosleep";
		val.ServerAdmin = true;
		val.Variable = false;
		val.Call = delegate(Arg arg)
		{
			Player.gotosleep(arg);
		};
		array[827] = val;
		val = new Command();
		val.Name = "keepteaondeath";
		val.Parent = "player";
		val.FullName = "player.keepteaondeath";
		val.ServerAdmin = true;
		val.Variable = true;
		val.GetOveride = () => Player.keepteaondeath.ToString();
		val.SetOveride = delegate(string str)
		{
			Player.keepteaondeath = StringExtensions.ToBool(str);
		};
		array[828] = val;
		val = new Command();
		val.Name = "markhostile";
		val.Parent = "player";
		val.FullName = "player.markhostile";
		val.ServerAdmin = true;
		val.Variable = false;
		val.Call = delegate(Arg arg)
		{
			Player.markhostile(arg);
		};
		array[829] = val;
		val = new Command();
		val.Name = "mount";
		val.Parent = "player";
		val.FullName = "player.mount";
		val.ServerUser = true;
		val.Variable = false;
		val.Call = delegate(Arg arg)
		{
			Player.mount(arg);
		};
		array[830] = val;
		val = new Command();
		val.Name = "printpresence";
		val.Parent = "player";
		val.FullName = "player.printpresence";
		val.ServerAdmin = true;
		val.Variable = false;
		val.Call = delegate(Arg arg)
		{
			Player.printpresence(arg);
		};
		array[831] = val;
		val = new Command();
		val.Name = "printstats";
		val.Parent = "player";
		val.FullName = "player.printstats";
		val.ServerAdmin = true;
		val.Variable = false;
		val.Call = delegate(Arg arg)
		{
			Player.printstats(arg);
		};
		array[832] = val;
		val = new Command();
		val.Name = "ragdoll";
		val.Parent = "player";
		val.FullName = "player.ragdoll";
		val.ServerAdmin = true;
		val.ClientAdmin = true;
		val.Description = "optional param {player}";
		val.Variable = false;
		val.Call = delegate(Arg arg)
		{
			Player.ragdoll(arg);
		};
		array[833] = val;
		val = new Command();
		val.Name = "ragdollall";
		val.Parent = "player";
		val.FullName = "player.ragdollall";
		val.ServerAdmin = true;
		val.Description = "ragdolls";
		val.Variable = false;
		val.Call = delegate(Arg arg)
		{
			Player.ragdollall(arg);
		};
		array[834] = val;
		val = new Command();
		val.Name = "ragdollallbutme";
		val.Parent = "player";
		val.FullName = "player.ragdollallbutme";
		val.ServerAdmin = true;
		val.Description = "ragdolls everyone except player";
		val.Variable = false;
		val.Call = delegate(Arg arg)
		{
			Player.ragdollallbutme(arg);
		};
		array[835] = val;
		val = new Command();
		val.Name = "ragdollother";
		val.Parent = "player";
		val.FullName = "player.ragdollother";
		val.ServerAdmin = true;
		val.ClientAdmin = true;
		val.Description = "Ragdolls a player you're looking at";
		val.Variable = false;
		val.Call = delegate(Arg arg)
		{
			Player.ragdollother(arg);
		};
		array[836] = val;
		val = new Command();
		val.Name = "reloadweapons";
		val.Parent = "player";
		val.FullName = "player.reloadweapons";
		val.ServerAdmin = true;
		val.Variable = false;
		val.Call = delegate(Arg arg)
		{
			Player.reloadweapons(arg);
		};
		array[837] = val;
		val = new Command();
		val.Name = "resetstate";
		val.Parent = "player";
		val.FullName = "player.resetstate";
		val.ServerAdmin = true;
		val.Description = "Resets the PlayerState of the given player";
		val.Variable = false;
		val.Call = delegate(Arg arg)
		{
			Player.resetstate(arg);
		};
		array[838] = val;
		val = new Command();
		val.Name = "stopgesture_radius";
		val.Parent = "player";
		val.FullName = "player.stopgesture_radius";
		val.ServerAdmin = true;
		val.Variable = false;
		val.Call = delegate(Arg arg)
		{
			Player.stopgesture_radius(arg);
		};
		array[839] = val;
		val = new Command();
		val.Name = "swapseat";
		val.Parent = "player";
		val.FullName = "player.swapseat";
		val.ServerAdmin = true;
		val.Variable = false;
		val.Call = delegate(Arg arg)
		{
			Player.swapseat(arg);
		};
		array[840] = val;
		val = new Command();
		val.Name = "tickrate_cl";
		val.Parent = "player";
		val.FullName = "player.tickrate_cl";
		val.ServerAdmin = true;
		val.ClientAdmin = true;
		val.Client = true;
		val.Replicated = true;
		val.Variable = true;
		val.GetOveride = () => Player.tickrate_cl.ToString();
		val.SetOveride = delegate(string str)
		{
			Player.tickrate_cl = StringExtensions.ToInt(str, 0);
		};
		val.Default = "32";
		array[841] = val;
		val = new Command();
		val.Name = "tickrate_sv";
		val.Parent = "player";
		val.FullName = "player.tickrate_sv";
		val.ServerAdmin = true;
		val.ClientAdmin = true;
		val.Client = true;
		val.Replicated = true;
		val.Variable = true;
		val.GetOveride = () => Player.tickrate_sv.ToString();
		val.SetOveride = delegate(string str)
		{
			Player.tickrate_sv = StringExtensions.ToInt(str, 0);
		};
		val.Default = "16";
		array[842] = val;
		val = new Command();
		val.Name = "trigger_wildlife_trap";
		val.Parent = "player";
		val.FullName = "player.trigger_wildlife_trap";
		val.ServerAdmin = true;
		val.Variable = false;
		val.Call = delegate(Arg arg)
		{
			Player.trigger_wildlife_trap(arg);
		};
		array[843] = val;
		val = new Command();
		val.Name = "wakeup";
		val.Parent = "player";
		val.FullName = "player.wakeup";
		val.ServerAdmin = true;
		val.Variable = false;
		val.Call = delegate(Arg arg)
		{
			Player.wakeup(arg);
		};
		array[844] = val;
		val = new Command();
		val.Name = "wakeupall";
		val.Parent = "player";
		val.FullName = "player.wakeupall";
		val.ServerAdmin = true;
		val.Variable = false;
		val.Call = delegate(Arg arg)
		{
			Player.wakeupall(arg);
		};
		array[845] = val;
		val = new Command();
		val.Name = "woundforever";
		val.Parent = "player";
		val.FullName = "player.woundforever";
		val.ServerAdmin = true;
		val.Saved = true;
		val.Description = "Whether the crawling state expires";
		val.ShowInAdminUI = true;
		val.Variable = true;
		val.GetOveride = () => Player.woundforever.ToString();
		val.SetOveride = delegate(string str)
		{
			Player.woundforever = StringExtensions.ToBool(str);
		};
		array[846] = val;
		val = new Command();
		val.Name = "clear_assets";
		val.Parent = "pool";
		val.FullName = "pool.clear_assets";
		val.ServerAdmin = true;
		val.Variable = false;
		val.Call = delegate(Arg arg)
		{
			Pool.clear_assets(arg);
		};
		array[847] = val;
		val = new Command();
		val.Name = "clear_memory";
		val.Parent = "pool";
		val.FullName = "pool.clear_memory";
		val.ServerAdmin = true;
		val.Variable = false;
		val.Call = delegate(Arg arg)
		{
			Pool.clear_memory(arg);
		};
		array[848] = val;
		val = new Command();
		val.Name = "clear_prefabs";
		val.Parent = "pool";
		val.FullName = "pool.clear_prefabs";
		val.ServerAdmin = true;
		val.Variable = false;
		val.Call = delegate(Arg arg)
		{
			Pool.clear_prefabs(arg);
		};
		array[849] = val;
		val = new Command();
		val.Name = "debug";
		val.Parent = "pool";
		val.FullName = "pool.debug";
		val.ServerAdmin = true;
		val.Variable = true;
		val.GetOveride = () => Pool.debug.ToString();
		val.SetOveride = delegate(string str)
		{
			Pool.debug = StringExtensions.ToBool(str);
		};
		array[850] = val;
		val = new Command();
		val.Name = "enabled";
		val.Parent = "pool";
		val.FullName = "pool.enabled";
		val.ServerAdmin = true;
		val.Variable = true;
		val.GetOveride = () => Pool.enabled.ToString();
		val.SetOveride = delegate(string str)
		{
			Pool.enabled = StringExtensions.ToBool(str);
		};
		array[851] = val;
		val = new Command();
		val.Name = "export_prefabs";
		val.Parent = "pool";
		val.FullName = "pool.export_prefabs";
		val.ServerAdmin = true;
		val.Variable = false;
		val.Call = delegate(Arg arg)
		{
			Pool.export_prefabs(arg);
		};
		array[852] = val;
		val = new Command();
		val.Name = "fill_prefabs";
		val.Parent = "pool";
		val.FullName = "pool.fill_prefabs";
		val.ServerAdmin = true;
		val.Variable = false;
		val.Call = delegate(Arg arg)
		{
			Pool.fill_prefabs(arg);
		};
		array[853] = val;
		val = new Command();
		val.Name = "mode";
		val.Parent = "pool";
		val.FullName = "pool.mode";
		val.ServerAdmin = true;
		val.Variable = true;
		val.GetOveride = () => Pool.mode.ToString();
		val.SetOveride = delegate(string str)
		{
			Pool.mode = StringExtensions.ToInt(str, 0);
		};
		array[854] = val;
		val = new Command();
		val.Name = "prewarm";
		val.Parent = "pool";
		val.FullName = "pool.prewarm";
		val.ServerAdmin = true;
		val.Variable = true;
		val.GetOveride = () => Pool.prewarm.ToString();
		val.SetOveride = delegate(string str)
		{
			Pool.prewarm = StringExtensions.ToBool(str);
		};
		array[855] = val;
		val = new Command();
		val.Name = "print_arraypool";
		val.Parent = "pool";
		val.FullName = "pool.print_arraypool";
		val.ServerAdmin = true;
		val.Variable = false;
		val.Call = delegate(Arg arg)
		{
			Pool.print_arraypool(arg);
		};
		array[856] = val;
		val = new Command();
		val.Name = "print_assets";
		val.Parent = "pool";
		val.FullName = "pool.print_assets";
		val.ServerAdmin = true;
		val.Variable = false;
		val.Call = delegate(Arg arg)
		{
			Pool.print_assets(arg);
		};
		array[857] = val;
		val = new Command();
		val.Name = "print_memory";
		val.Parent = "pool";
		val.FullName = "pool.print_memory";
		val.ServerAdmin = true;
		val.Variable = false;
		val.Call = delegate(Arg arg)
		{
			Pool.print_memory(arg);
		};
		array[858] = val;
		val = new Command();
		val.Name = "print_prefabs";
		val.Parent = "pool";
		val.FullName = "pool.print_prefabs";
		val.ServerAdmin = true;
		val.Variable = false;
		val.Call = delegate(Arg arg)
		{
			Pool.print_prefabs(arg);
		};
		array[859] = val;
		val = new Command();
		val.Name = "reset_max_pool_counter";
		val.Parent = "pool";
		val.FullName = "pool.reset_max_pool_counter";
		val.ServerAdmin = true;
		val.Variable = false;
		val.Call = delegate(Arg arg)
		{
			Pool.reset_max_pool_counter(arg);
		};
		array[860] = val;
		val = new Command();
		val.Name = "flush_analytics";
		val.Parent = "profile";
		val.FullName = "profile.flush_analytics";
		val.ServerAdmin = true;
		val.Variable = false;
		val.Call = delegate(Arg arg)
		{
			Profile.flush_analytics(arg);
		};
		array[861] = val;
		val = new Command();
		val.Name = "perfsnapshot";
		val.Parent = "profile";
		val.FullName = "profile.perfsnapshot";
		val.ServerAdmin = true;
		val.Description = "profile.perfsnapshot [delay=15, int] [name='Profile', str, no extension, max 32chars] [frames=10, int, max 10] [debug=false, dumps a binary snapshot as well]\nWill produce a JSON perf snapshot of <frames> that can be viewed in Perfetto or similar tools";
		val.Variable = false;
		val.Call = delegate(Arg arg)
		{
			Profile.PerfSnapshot(arg);
		};
		array[862] = val;
		val = new Command();
		val.Name = "perfsnapshot_stream";
		val.Parent = "profile";
		val.FullName = "profile.perfsnapshot_stream";
		val.ServerAdmin = true;
		val.Description = "profile.perfsnapshot_stream [name='Profile', str, no extension, max 32chars] [MainCap=32, int, max 256, buffer size for Main thread in Megabytes] [WorkerCap=8, int, max 256, buffer size for each Worker thread in Megabytes] [debug=false, dumps a binary snapshot as well]\nWill stream <mainCap>MB worth of data and generate a JSON snapshot that can be viewed in Perfetto or similar tools";
		val.Variable = false;
		val.Call = delegate(Arg arg)
		{
			Profile.PerfSnapshot_Stream(arg);
		};
		array[863] = val;
		val = new Command();
		val.Name = "quiet";
		val.Parent = "profile";
		val.FullName = "profile.quiet";
		val.ServerAdmin = true;
		val.Saved = true;
		val.Description = "Controls whether perfsnapshot commands emit chat messages";
		val.Variable = true;
		val.GetOveride = () => Profile.Quiet.ToString();
		val.SetOveride = delegate(string str)
		{
			Profile.Quiet = StringExtensions.ToBool(str);
		};
		array[864] = val;
		val = new Command();
		val.Name = "start";
		val.Parent = "profile";
		val.FullName = "profile.start";
		val.ServerAdmin = true;
		val.Variable = false;
		val.Call = delegate(Arg arg)
		{
			Profile.start(arg);
		};
		array[865] = val;
		val = new Command();
		val.Name = "stop";
		val.Parent = "profile";
		val.FullName = "profile.stop";
		val.ServerAdmin = true;
		val.Variable = false;
		val.Call = delegate(Arg arg)
		{
			Profile.stop(arg);
		};
		array[866] = val;
		val = new Command();
		val.Name = "print_global_entities";
		val.Parent = "render";
		val.FullName = "render.print_global_entities";
		val.ServerAdmin = true;
		val.Description = "Print off count of global building entities on the server";
		val.Variable = false;
		val.Call = delegate(Arg arg)
		{
			Render.print_global_entities(arg);
		};
		array[867] = val;
		val = new Command();
		val.Name = "show_building_blocked_server";
		val.Parent = "render";
		val.FullName = "render.show_building_blocked_server";
		val.ServerAdmin = true;
		val.ClientAdmin = true;
		val.Client = true;
		val.Replicated = true;
		val.Variable = true;
		val.GetOveride = () => Render.show_building_blocked_server.ToString();
		val.SetOveride = delegate(string str)
		{
			Render.show_building_blocked_server = StringExtensions.ToBool(str);
		};
		val.Default = "True";
		array[868] = val;
		val = new Command();
		val.Name = "tree_entities";
		val.Parent = "render";
		val.FullName = "render.tree_entities";
		val.ServerAdmin = true;
		val.Variable = false;
		val.Call = delegate(Arg arg)
		{
			Render.tree_entities(arg);
		};
		array[869] = val;
		val = new Command();
		val.Name = "exceptionreportmaxlength";
		val.Parent = "reports";
		val.FullName = "reports.exceptionreportmaxlength";
		val.ServerAdmin = true;
		val.Variable = true;
		val.GetOveride = () => reports.ExceptionReportMaxLength.ToString();
		val.SetOveride = delegate(string str)
		{
			reports.ExceptionReportMaxLength = StringExtensions.ToInt(str, 0);
		};
		val.Default = "600";
		array[870] = val;
		val = new Command();
		val.Name = "debugpreventduplicates";
		val.Parent = "sentry";
		val.FullName = "sentry.debugpreventduplicates";
		val.ServerAdmin = true;
		val.Description = "Prevents auto turrets getting added more than once to the IO queue";
		val.Variable = true;
		val.GetOveride = () => Sentry.debugPreventDuplicates.ToString();
		val.SetOveride = delegate(string str)
		{
			Sentry.debugPreventDuplicates = StringExtensions.ToBool(str);
		};
		array[871] = val;
		val = new Command();
		val.Name = "hostileduration";
		val.Parent = "sentry";
		val.FullName = "sentry.hostileduration";
		val.ServerAdmin = true;
		val.Description = "how long until something is considered hostile after it attacked";
		val.Variable = true;
		val.GetOveride = () => Sentry.hostileduration.ToString();
		val.SetOveride = delegate(string str)
		{
			Sentry.hostileduration = StringExtensions.ToFloat(str, 0f);
		};
		array[872] = val;
		val = new Command();
		val.Name = "interferenceradius";
		val.Parent = "sentry";
		val.FullName = "sentry.interferenceradius";
		val.ServerAdmin = true;
		val.ClientAdmin = true;
		val.Client = true;
		val.Description = "radius to check for other turrets";
		val.Replicated = true;
		val.Variable = true;
		val.GetOveride = () => Sentry.interferenceradius.ToString();
		val.SetOveride = delegate(string str)
		{
			Sentry.interferenceradius = StringExtensions.ToFloat(str, 0f);
		};
		val.Default = "40";
		array[873] = val;
		val = new Command();
		val.Name = "maxinterference";
		val.Parent = "sentry";
		val.FullName = "sentry.maxinterference";
		val.ServerAdmin = true;
		val.ClientAdmin = true;
		val.Client = true;
		val.Description = "max interference from other turrets";
		val.Replicated = true;
		val.Variable = true;
		val.GetOveride = () => Sentry.maxinterference.ToString();
		val.SetOveride = delegate(string str)
		{
			Sentry.maxinterference = StringExtensions.ToInt(str, 0);
		};
		val.Default = "12";
		array[874] = val;
		val = new Command();
		val.Name = "targetall";
		val.Parent = "sentry";
		val.FullName = "sentry.targetall";
		val.ServerAdmin = true;
		val.Description = "target everyone regardless of authorization";
		val.Variable = true;
		val.GetOveride = () => Sentry.targetall.ToString();
		val.SetOveride = delegate(string str)
		{
			Sentry.targetall = StringExtensions.ToBool(str);
		};
		array[875] = val;
		val = new Command();
		val.Name = "allowvineswinging";
		val.Parent = "server";
		val.FullName = "server.allowvineswinging";
		val.ServerAdmin = true;
		val.Saved = true;
		val.Variable = true;
		val.GetOveride = () => ConVar.Server.allowVineSwinging.ToString();
		val.SetOveride = delegate(string str)
		{
			ConVar.Server.allowVineSwinging = StringExtensions.ToBool(str);
		};
		array[876] = val;
		val = new Command();
		val.Name = "anticheatid";
		val.Parent = "server";
		val.FullName = "server.anticheatid";
		val.ServerAdmin = true;
		val.Variable = true;
		val.GetOveride = () => ConVar.Server.anticheatid ?? "";
		val.SetOveride = delegate(string str)
		{
			ConVar.Server.anticheatid = str;
		};
		array[877] = val;
		val = new Command();
		val.Name = "anticheatkey";
		val.Parent = "server";
		val.FullName = "server.anticheatkey";
		val.ServerAdmin = true;
		val.Variable = true;
		val.GetOveride = () => ConVar.Server.anticheatkey ?? "";
		val.SetOveride = delegate(string str)
		{
			ConVar.Server.anticheatkey = str;
		};
		array[878] = val;
		val = new Command();
		val.Name = "anticheatlog";
		val.Parent = "server";
		val.FullName = "server.anticheatlog";
		val.ServerAdmin = true;
		val.Variable = true;
		val.GetOveride = () => ConVar.Server.anticheatlog.ToString();
		val.SetOveride = delegate(string str)
		{
			ConVar.Server.anticheatlog = StringExtensions.ToInt(str, 0);
		};
		array[879] = val;
		val = new Command();
		val.Name = "anticheattoken";
		val.Parent = "server";
		val.FullName = "server.anticheattoken";
		val.ServerAdmin = true;
		val.Variable = true;
		val.GetOveride = () => ConVar.Server.anticheattoken.ToString();
		val.SetOveride = delegate(string str)
		{
			ConVar.Server.anticheattoken = StringExtensions.ToBool(str);
		};
		array[880] = val;
		val = new Command();
		val.Name = "arrowarmor";
		val.Parent = "server";
		val.FullName = "server.arrowarmor";
		val.ServerAdmin = true;
		val.Saved = true;
		val.Variable = true;
		val.GetOveride = () => ConVar.Server.arrowarmor.ToString();
		val.SetOveride = delegate(string str)
		{
			ConVar.Server.arrowarmor = StringExtensions.ToFloat(str, 0f);
		};
		array[881] = val;
		val = new Command();
		val.Name = "arrowdamage";
		val.Parent = "server";
		val.FullName = "server.arrowdamage";
		val.ServerAdmin = true;
		val.Saved = true;
		val.Variable = true;
		val.GetOveride = () => ConVar.Server.arrowdamage.ToString();
		val.SetOveride = delegate(string str)
		{
			ConVar.Server.arrowdamage = StringExtensions.ToFloat(str, 0f);
		};
		array[882] = val;
		val = new Command();
		val.Name = "artificialtemperaturegrowablerange";
		val.Parent = "server";
		val.FullName = "server.artificialtemperaturegrowablerange";
		val.ServerAdmin = true;
		val.ClientAdmin = true;
		val.Client = true;
		val.Saved = true;
		val.Replicated = true;
		val.Variable = true;
		val.GetOveride = () => ConVar.Server.artificialTemperatureGrowableRange.ToString();
		val.SetOveride = delegate(string str)
		{
			ConVar.Server.artificialTemperatureGrowableRange = StringExtensions.ToFloat(str, 0f);
		};
		val.Default = "4";
		array[883] = val;
		val = new Command();
		val.Name = "authtimeout";
		val.Parent = "server";
		val.FullName = "server.authtimeout";
		val.ServerAdmin = true;
		val.Variable = true;
		val.GetOveride = () => ConVar.Server.authtimeout.ToString();
		val.SetOveride = delegate(string str)
		{
			ConVar.Server.authtimeout = StringExtensions.ToInt(str, 0);
		};
		array[884] = val;
		val = new Command();
		val.Name = "autouploadmap";
		val.Parent = "server";
		val.FullName = "server.autouploadmap";
		val.ServerAdmin = true;
		val.Saved = true;
		val.Description = "Automatically upload procedurally generated maps so that players download them (faster) instead of re-generating them";
		val.ShowInAdminUI = true;
		val.Variable = true;
		val.GetOveride = () => ConVar.Server.autoUploadMap.ToString();
		val.SetOveride = delegate(string str)
		{
			ConVar.Server.autoUploadMap = StringExtensions.ToBool(str);
		};
		array[885] = val;
		val = new Command();
		val.Name = "backup";
		val.Parent = "server";
		val.FullName = "server.backup";
		val.ServerAdmin = true;
		val.Description = "Backup server folder";
		val.Variable = false;
		val.Call = delegate
		{
			ConVar.Server.backup();
		};
		array[886] = val;
		val = new Command();
		val.Name = "bag_quota_item_amount";
		val.Parent = "server";
		val.FullName = "server.bag_quota_item_amount";
		val.ServerAdmin = true;
		val.ClientAdmin = true;
		val.Client = true;
		val.Replicated = true;
		val.Variable = true;
		val.GetOveride = () => ConVar.Server.bag_quota_item_amount.ToString();
		val.SetOveride = delegate(string str)
		{
			ConVar.Server.bag_quota_item_amount = StringExtensions.ToBool(str);
		};
		val.Default = "True";
		array[887] = val;
		val = new Command();
		val.Name = "bansserverendpoint";
		val.Parent = "server";
		val.FullName = "server.bansserverendpoint";
		val.ServerAdmin = true;
		val.Description = "HTTP API endpoint for centralized banning (see wiki)";
		val.Variable = true;
		val.GetOveride = () => ConVar.Server.bansServerEndpoint ?? "";
		val.SetOveride = delegate(string str)
		{
			ConVar.Server.bansServerEndpoint = str;
		};
		array[888] = val;
		val = new Command();
		val.Name = "bansserverfailuremode";
		val.Parent = "server";
		val.FullName = "server.bansserverfailuremode";
		val.ServerAdmin = true;
		val.Description = "Failure mode for centralized banning, set to 1 to reject players from joining if it's down (see wiki)";
		val.Variable = true;
		val.GetOveride = () => ConVar.Server.bansServerFailureMode.ToString();
		val.SetOveride = delegate(string str)
		{
			ConVar.Server.bansServerFailureMode = StringExtensions.ToInt(str, 0);
		};
		array[889] = val;
		val = new Command();
		val.Name = "bansservertimeout";
		val.Parent = "server";
		val.FullName = "server.bansservertimeout";
		val.ServerAdmin = true;
		val.Description = "Timeout (in seconds) for centralized banning web server requests";
		val.Variable = true;
		val.GetOveride = () => ConVar.Server.bansServerTimeout.ToString();
		val.SetOveride = delegate(string str)
		{
			ConVar.Server.bansServerTimeout = StringExtensions.ToInt(str, 0);
		};
		array[890] = val;
		val = new Command();
		val.Name = "bleedingarmor";
		val.Parent = "server";
		val.FullName = "server.bleedingarmor";
		val.ServerAdmin = true;
		val.Saved = true;
		val.Variable = true;
		val.GetOveride = () => ConVar.Server.bleedingarmor.ToString();
		val.SetOveride = delegate(string str)
		{
			ConVar.Server.bleedingarmor = StringExtensions.ToFloat(str, 0f);
		};
		array[891] = val;
		val = new Command();
		val.Name = "bleedingdamage";
		val.Parent = "server";
		val.FullName = "server.bleedingdamage";
		val.ServerAdmin = true;
		val.Saved = true;
		val.Variable = true;
		val.GetOveride = () => ConVar.Server.bleedingdamage.ToString();
		val.SetOveride = delegate(string str)
		{
			ConVar.Server.bleedingdamage = StringExtensions.ToFloat(str, 0f);
		};
		array[892] = val;
		val = new Command();
		val.Name = "botcount";
		val.Parent = "server";
		val.FullName = "server.botcount";
		val.ServerAdmin = true;
		val.Variable = false;
		val.Call = delegate(Arg arg)
		{
			string text11 = ConVar.Server.BotCount();
			arg.ReplyWithObject((object)text11);
		};
		array[893] = val;
		val = new Command();
		val.Name = "branch";
		val.Parent = "server";
		val.FullName = "server.branch";
		val.ServerAdmin = true;
		val.Variable = true;
		val.GetOveride = () => ConVar.Server.branch ?? "";
		val.SetOveride = delegate(string str)
		{
			ConVar.Server.branch = str;
		};
		array[894] = val;
		val = new Command();
		val.Name = "broadcastplayvideo";
		val.Parent = "server";
		val.FullName = "server.broadcastplayvideo";
		val.ServerAdmin = true;
		val.Variable = false;
		val.Call = delegate(Arg arg)
		{
			ConVar.Server.BroadcastPlayVideo(arg);
		};
		array[895] = val;
		val = new Command();
		val.Name = "bulletarmor";
		val.Parent = "server";
		val.FullName = "server.bulletarmor";
		val.ServerAdmin = true;
		val.Saved = true;
		val.Variable = true;
		val.GetOveride = () => ConVar.Server.bulletarmor.ToString();
		val.SetOveride = delegate(string str)
		{
			ConVar.Server.bulletarmor = StringExtensions.ToFloat(str, 0f);
		};
		array[896] = val;
		val = new Command();
		val.Name = "bulletdamage";
		val.Parent = "server";
		val.FullName = "server.bulletdamage";
		val.ServerAdmin = true;
		val.Saved = true;
		val.Variable = true;
		val.GetOveride = () => ConVar.Server.bulletdamage.ToString();
		val.SetOveride = delegate(string str)
		{
			ConVar.Server.bulletdamage = StringExtensions.ToFloat(str, 0f);
		};
		array[897] = val;
		val = new Command();
		val.Name = "canequipbackpacksinair";
		val.Parent = "server";
		val.FullName = "server.canequipbackpacksinair";
		val.ServerAdmin = true;
		val.Saved = true;
		val.Description = "Allows backpack equipping while not grounded";
		val.ShowInAdminUI = true;
		val.Variable = true;
		val.GetOveride = () => ConVar.Server.canEquipBackpacksInAir.ToString();
		val.SetOveride = delegate(string str)
		{
			ConVar.Server.canEquipBackpacksInAir = StringExtensions.ToBool(str);
		};
		array[898] = val;
		val = new Command();
		val.Name = "ceilinglightgrowablerange";
		val.Parent = "server";
		val.FullName = "server.ceilinglightgrowablerange";
		val.ServerAdmin = true;
		val.Saved = true;
		val.Variable = true;
		val.GetOveride = () => ConVar.Server.ceilingLightGrowableRange.ToString();
		val.SetOveride = delegate(string str)
		{
			ConVar.Server.ceilingLightGrowableRange = StringExtensions.ToFloat(str, 0f);
		};
		array[899] = val;
		val = new Command();
		val.Name = "ceilinglightheightoffset";
		val.Parent = "server";
		val.FullName = "server.ceilinglightheightoffset";
		val.ServerAdmin = true;
		val.Saved = true;
		val.Variable = true;
		val.GetOveride = () => ConVar.Server.ceilingLightHeightOffset.ToString();
		val.SetOveride = delegate(string str)
		{
			ConVar.Server.ceilingLightHeightOffset = StringExtensions.ToFloat(str, 0f);
		};
		array[900] = val;
		val = new Command();
		val.Name = "censorplayerlist";
		val.Parent = "server";
		val.FullName = "server.censorplayerlist";
		val.ServerAdmin = true;
		val.Description = "Censors the Steam player list to make player tracking more difficult";
		val.Variable = true;
		val.GetOveride = () => ConVar.Server.censorplayerlist.ToString();
		val.SetOveride = delegate(string str)
		{
			ConVar.Server.censorplayerlist = StringExtensions.ToBool(str);
		};
		array[901] = val;
		val = new Command();
		val.Name = "cheatreport";
		val.Parent = "server";
		val.FullName = "server.cheatreport";
		val.ServerUser = true;
		val.Variable = false;
		val.Call = delegate(Arg arg)
		{
			ConVar.Server.cheatreport(arg);
		};
		array[902] = val;
		val = new Command();
		val.Name = "cinematic";
		val.Parent = "server";
		val.FullName = "server.cinematic";
		val.ServerAdmin = true;
		val.ClientAdmin = true;
		val.Client = true;
		val.Replicated = true;
		val.Variable = true;
		val.GetOveride = () => ConVar.Server.cinematic.ToString();
		val.SetOveride = delegate(string str)
		{
			ConVar.Server.cinematic = StringExtensions.ToBool(str);
		};
		val.Default = "False";
		array[903] = val;
		val = new Command();
		val.Name = "clear_bushes_radius";
		val.Parent = "server";
		val.FullName = "server.clear_bushes_radius";
		val.ServerAdmin = true;
		val.Variable = false;
		val.Call = delegate(Arg arg)
		{
			ConVar.Server.clear_bushes_radius(arg);
		};
		array[904] = val;
		val = new Command();
		val.Name = "clear_loot_spawn_cache";
		val.Parent = "server";
		val.FullName = "server.clear_loot_spawn_cache";
		val.ServerAdmin = true;
		val.Description = "Clears the loot spawn cache used to restrict loot into each era";
		val.Variable = false;
		val.Call = delegate(Arg arg)
		{
			ConVar.Server.clear_loot_spawn_cache(arg);
		};
		array[905] = val;
		val = new Command();
		val.Name = "clear_trees_radius";
		val.Parent = "server";
		val.FullName = "server.clear_trees_radius";
		val.ServerAdmin = true;
		val.Variable = false;
		val.Call = delegate(Arg arg)
		{
			ConVar.Server.clear_trees_radius(arg);
		};
		array[906] = val;
		val = new Command();
		val.Name = "combatlog";
		val.Parent = "server";
		val.FullName = "server.combatlog";
		val.ServerAdmin = true;
		val.ServerUser = true;
		val.Description = "Get the player combat log";
		val.Variable = false;
		val.Call = delegate(Arg arg)
		{
			string text12 = ConVar.Server.combatlog(arg);
			arg.ReplyWithObject((object)text12);
		};
		array[907] = val;
		val = new Command();
		val.Name = "combatlog_outgoing";
		val.Parent = "server";
		val.FullName = "server.combatlog_outgoing";
		val.ServerAdmin = true;
		val.ServerUser = true;
		val.Description = "Get the player combat log, only showing outgoing damage";
		val.Variable = false;
		val.Call = delegate(Arg arg)
		{
			string text13 = ConVar.Server.combatlog_outgoing(arg);
			arg.ReplyWithObject((object)text13);
		};
		array[908] = val;
		val = new Command();
		val.Name = "combatlogdelay";
		val.Parent = "server";
		val.FullName = "server.combatlogdelay";
		val.ServerAdmin = true;
		val.Variable = true;
		val.GetOveride = () => ConVar.Server.combatlogdelay.ToString();
		val.SetOveride = delegate(string str)
		{
			ConVar.Server.combatlogdelay = StringExtensions.ToInt(str, 0);
		};
		array[909] = val;
		val = new Command();
		val.Name = "combatlogsize";
		val.Parent = "server";
		val.FullName = "server.combatlogsize";
		val.ServerAdmin = true;
		val.Variable = true;
		val.GetOveride = () => ConVar.Server.combatlogsize.ToString();
		val.SetOveride = delegate(string str)
		{
			ConVar.Server.combatlogsize = StringExtensions.ToInt(str, 0);
		};
		array[910] = val;
		val = new Command();
		val.Name = "composterupdateinterval";
		val.Parent = "server";
		val.FullName = "server.composterupdateinterval";
		val.ServerAdmin = true;
		val.Variable = true;
		val.GetOveride = () => ConVar.Server.composterUpdateInterval.ToString();
		val.SetOveride = delegate(string str)
		{
			ConVar.Server.composterUpdateInterval = StringExtensions.ToFloat(str, 0f);
		};
		array[911] = val;
		val = new Command();
		val.Name = "compression";
		val.Parent = "server";
		val.FullName = "server.compression";
		val.ServerAdmin = true;
		val.Variable = true;
		val.GetOveride = () => ConVar.Server.compression.ToString();
		val.SetOveride = delegate(string str)
		{
			ConVar.Server.compression = StringExtensions.ToBool(str);
		};
		array[912] = val;
		val = new Command();
		val.Name = "conveyormovefrequency";
		val.Parent = "server";
		val.FullName = "server.conveyormovefrequency";
		val.ServerAdmin = true;
		val.Saved = true;
		val.Description = "How often industrial conveyors attempt to move items (value is an interval measured in seconds). Setting to 0 will disable all movement";
		val.ShowInAdminUI = true;
		val.Variable = true;
		val.GetOveride = () => ConVar.Server.conveyorMoveFrequency.ToString();
		val.SetOveride = delegate(string str)
		{
			ConVar.Server.conveyorMoveFrequency = StringExtensions.ToFloat(str, 0f);
		};
		array[913] = val;
		val = new Command();
		val.Name = "corpsedespawn";
		val.Parent = "server";
		val.FullName = "server.corpsedespawn";
		val.ServerAdmin = true;
		val.Variable = true;
		val.GetOveride = () => ConVar.Server.corpsedespawn.ToString();
		val.SetOveride = delegate(string str)
		{
			ConVar.Server.corpsedespawn = StringExtensions.ToFloat(str, 0f);
		};
		array[914] = val;
		val = new Command();
		val.Name = "corpseinfo";
		val.Parent = "server";
		val.FullName = "server.corpseinfo";
		val.ServerAdmin = true;
		val.Description = "Get info on player corpses on the server";
		val.Variable = false;
		val.Call = delegate(Arg arg)
		{
			ConVar.Server.corpseinfo(arg);
		};
		array[915] = val;
		val = new Command();
		val.Name = "corpses";
		val.Parent = "server";
		val.FullName = "server.corpses";
		val.ServerAdmin = true;
		val.Variable = true;
		val.GetOveride = () => ConVar.Server.corpses.ToString();
		val.SetOveride = delegate(string str)
		{
			ConVar.Server.corpses = StringExtensions.ToBool(str);
		};
		array[916] = val;
		val = new Command();
		val.Name = "crawlingenabled";
		val.Parent = "server";
		val.FullName = "server.crawlingenabled";
		val.ServerAdmin = true;
		val.Saved = true;
		val.Description = "Do players go into the crawling wounded state";
		val.Variable = true;
		val.GetOveride = () => ConVar.Server.crawlingenabled.ToString();
		val.SetOveride = delegate(string str)
		{
			ConVar.Server.crawlingenabled = StringExtensions.ToBool(str);
		};
		array[917] = val;
		val = new Command();
		val.Name = "crawlingmaximumhealth";
		val.Parent = "server";
		val.FullName = "server.crawlingmaximumhealth";
		val.ServerAdmin = true;
		val.Description = "Maximum initial health given when a player dies and moves to crawling wounded state";
		val.Variable = true;
		val.GetOveride = () => ConVar.Server.crawlingmaximumhealth.ToString();
		val.SetOveride = delegate(string str)
		{
			ConVar.Server.crawlingmaximumhealth = StringExtensions.ToInt(str, 0);
		};
		array[918] = val;
		val = new Command();
		val.Name = "crawlingminimumhealth";
		val.Parent = "server";
		val.FullName = "server.crawlingminimumhealth";
		val.ServerAdmin = true;
		val.Description = "Minimum initial health given when a player dies and moves to crawling wounded state";
		val.Variable = true;
		val.GetOveride = () => ConVar.Server.crawlingminimumhealth.ToString();
		val.SetOveride = delegate(string str)
		{
			ConVar.Server.crawlingminimumhealth = StringExtensions.ToInt(str, 0);
		};
		array[919] = val;
		val = new Command();
		val.Name = "cycletime";
		val.Parent = "server";
		val.FullName = "server.cycletime";
		val.ServerAdmin = true;
		val.Variable = true;
		val.GetOveride = () => ConVar.Server.cycletime.ToString();
		val.SetOveride = delegate(string str)
		{
			ConVar.Server.cycletime = StringExtensions.ToFloat(str, 0f);
		};
		array[920] = val;
		val = new Command();
		val.Name = "debrisdespawn";
		val.Parent = "server";
		val.FullName = "server.debrisdespawn";
		val.ServerAdmin = true;
		val.Variable = true;
		val.GetOveride = () => ConVar.Server.debrisdespawn.ToString();
		val.SetOveride = delegate(string str)
		{
			ConVar.Server.debrisdespawn = StringExtensions.ToFloat(str, 0f);
		};
		array[921] = val;
		val = new Command();
		val.Name = "defaultblueprintresearchcost";
		val.Parent = "server";
		val.FullName = "server.defaultblueprintresearchcost";
		val.ServerAdmin = true;
		val.ClientAdmin = true;
		val.Client = true;
		val.Saved = true;
		val.Description = "How much scrap is required to research default blueprints";
		val.Replicated = true;
		val.ShowInAdminUI = true;
		val.Variable = true;
		val.GetOveride = () => ConVar.Server.defaultBlueprintResearchCost.ToString();
		val.SetOveride = delegate(string str)
		{
			ConVar.Server.defaultBlueprintResearchCost = StringExtensions.ToInt(str, 0);
		};
		val.Default = "10";
		array[922] = val;
		val = new Command();
		val.Name = "description";
		val.Parent = "server";
		val.FullName = "server.description";
		val.ServerAdmin = true;
		val.ShowInAdminUI = true;
		val.Variable = true;
		val.GetOveride = () => ConVar.Server.description ?? "";
		val.SetOveride = delegate(string str)
		{
			ConVar.Server.description = str;
		};
		array[923] = val;
		val = new Command();
		val.Name = "dropitems";
		val.Parent = "server";
		val.FullName = "server.dropitems";
		val.ServerAdmin = true;
		val.Variable = true;
		val.GetOveride = () => ConVar.Server.dropitems.ToString();
		val.SetOveride = delegate(string str)
		{
			ConVar.Server.dropitems = StringExtensions.ToBool(str);
		};
		array[924] = val;
		val = new Command();
		val.Name = "emojiownershipcheck";
		val.Parent = "server";
		val.FullName = "server.emojiownershipcheck";
		val.ServerAdmin = true;
		val.Description = "Whether emoji ownership is checked server side. Could be performance draining in high chat volumes";
		val.Variable = true;
		val.GetOveride = () => ConVar.Server.emojiOwnershipCheck.ToString();
		val.SetOveride = delegate(string str)
		{
			ConVar.Server.emojiOwnershipCheck = StringExtensions.ToBool(str);
		};
		array[925] = val;
		val = new Command();
		val.Name = "encryption";
		val.Parent = "server";
		val.FullName = "server.encryption";
		val.ServerAdmin = true;
		val.Variable = true;
		val.GetOveride = () => ConVar.Server.encryption.ToString();
		val.SetOveride = delegate(string str)
		{
			ConVar.Server.encryption = StringExtensions.ToInt(str, 0);
		};
		array[926] = val;
		val = new Command();
		val.Name = "enforce_era_restrictions";
		val.Parent = "server";
		val.FullName = "server.enforce_era_restrictions";
		val.ServerAdmin = true;
		val.Description = "Deletes items on the server that are not allowed in the era";
		val.Variable = false;
		val.Call = delegate(Arg arg)
		{
			ConVar.Server.enforce_era_restrictions(arg);
		};
		array[927] = val;
		val = new Command();
		val.Name = "enforcepipechecksonbuildingblockchanges";
		val.Parent = "server";
		val.FullName = "server.enforcepipechecksonbuildingblockchanges";
		val.ServerAdmin = true;
		val.Saved = true;
		val.Description = "Whether to check for illegal industrial pipes when changing building block states (roof bunkers)";
		val.ShowInAdminUI = true;
		val.Variable = true;
		val.GetOveride = () => ConVar.Server.enforcePipeChecksOnBuildingBlockChanges.ToString();
		val.SetOveride = delegate(string str)
		{
			ConVar.Server.enforcePipeChecksOnBuildingBlockChanges = StringExtensions.ToBool(str);
		};
		array[928] = val;
		val = new Command();
		val.Name = "entitybatchsize";
		val.Parent = "server";
		val.FullName = "server.entitybatchsize";
		val.ServerAdmin = true;
		val.Variable = true;
		val.GetOveride = () => ConVar.Server.entitybatchsize.ToString();
		val.SetOveride = delegate(string str)
		{
			ConVar.Server.entitybatchsize = StringExtensions.ToInt(str, 0);
		};
		array[929] = val;
		val = new Command();
		val.Name = "entitybatchtime";
		val.Parent = "server";
		val.FullName = "server.entitybatchtime";
		val.ServerAdmin = true;
		val.Variable = true;
		val.GetOveride = () => ConVar.Server.entitybatchtime.ToString();
		val.SetOveride = delegate(string str)
		{
			ConVar.Server.entitybatchtime = StringExtensions.ToFloat(str, 0f);
		};
		array[930] = val;
		val = new Command();
		val.Name = "entityrate";
		val.Parent = "server";
		val.FullName = "server.entityrate";
		val.ServerAdmin = true;
		val.Variable = true;
		val.GetOveride = () => ConVar.Server.entityrate.ToString();
		val.SetOveride = delegate(string str)
		{
			ConVar.Server.entityrate = StringExtensions.ToInt(str, 0);
		};
		array[931] = val;
		val = new Command();
		val.Name = "era";
		val.Parent = "server";
		val.FullName = "server.era";
		val.ServerAdmin = true;
		val.ClientAdmin = true;
		val.Client = true;
		val.Description = "none,primitive,medieval,frontier,rust";
		val.Replicated = true;
		val.Variable = true;
		val.GetOveride = () => ConVar.Server.era ?? "";
		val.SetOveride = delegate(string str)
		{
			ConVar.Server.era = str;
		};
		val.Default = "None";
		array[932] = val;
		val = new Command();
		val.Name = "events";
		val.Parent = "server";
		val.FullName = "server.events";
		val.ServerAdmin = true;
		val.Variable = true;
		val.GetOveride = () => ConVar.Server.events.ToString();
		val.SetOveride = delegate(string str)
		{
			ConVar.Server.events = StringExtensions.ToBool(str);
		};
		array[933] = val;
		val = new Command();
		val.Name = "farmchickenlocalavoidance";
		val.Parent = "server";
		val.FullName = "server.farmchickenlocalavoidance";
		val.ServerAdmin = true;
		val.Saved = true;
		val.Description = "Whether to run local avoidance for chickens, disabling might get a slight performance improvement but chickens will clip";
		val.ShowInAdminUI = true;
		val.Variable = true;
		val.GetOveride = () => ConVar.Server.farmChickenLocalAvoidance.ToString();
		val.SetOveride = delegate(string str)
		{
			ConVar.Server.farmChickenLocalAvoidance = StringExtensions.ToBool(str);
		};
		array[934] = val;
		val = new Command();
		val.Name = "favoritesendpoint";
		val.Parent = "server";
		val.FullName = "server.favoritesendpoint";
		val.ServerAdmin = true;
		val.Saved = true;
		val.Description = "Domain name to save when players favorite your server. The port can be omitted if using the default port or a SRV DNS record is created.";
		val.ShowInAdminUI = true;
		val.Variable = true;
		val.GetOveride = () => ConVar.Server.favoritesEndpoint ?? "";
		val.SetOveride = delegate(string str)
		{
			ConVar.Server.favoritesEndpoint = str;
		};
		array[935] = val;
		val = new Command();
		val.Name = "filefolderoverride";
		val.Parent = "server";
		val.FullName = "server.filefolderoverride";
		val.ServerAdmin = true;
		val.Variable = true;
		val.GetOveride = () => ConVar.Server.filefolderoverride ?? "";
		val.SetOveride = delegate(string str)
		{
			ConVar.Server.filefolderoverride = str;
		};
		array[936] = val;
		val = new Command();
		val.Name = "fillchickencoop";
		val.Parent = "server";
		val.FullName = "server.fillchickencoop";
		val.ServerAdmin = true;
		val.Variable = false;
		val.Call = delegate(Arg arg)
		{
			ConVar.Server.fillChickenCoop(arg);
		};
		array[937] = val;
		val = new Command();
		val.Name = "foodspoiling";
		val.Parent = "server";
		val.FullName = "server.foodspoiling";
		val.ServerAdmin = true;
		val.ClientAdmin = true;
		val.Client = true;
		val.Description = "Whether to run the food spoiling system";
		val.Replicated = true;
		val.Variable = true;
		val.GetOveride = () => ConVar.Server.foodSpoiling.ToString();
		val.SetOveride = delegate(string str)
		{
			ConVar.Server.foodSpoiling = StringExtensions.ToBool(str);
		};
		val.Default = "True";
		array[938] = val;
		val = new Command();
		val.Name = "foodspoilingbudgetms";
		val.Parent = "server";
		val.FullName = "server.foodspoilingbudgetms";
		val.ServerAdmin = true;
		val.Variable = true;
		val.GetOveride = () => ConVar.Server.foodSpoilingBudgetMs.ToString();
		val.SetOveride = delegate(string str)
		{
			ConVar.Server.foodSpoilingBudgetMs = StringExtensions.ToFloat(str, 0f);
		};
		array[939] = val;
		val = new Command();
		val.Name = "fps";
		val.Parent = "server";
		val.FullName = "server.fps";
		val.ServerAdmin = true;
		val.Variable = false;
		val.Call = delegate(Arg arg)
		{
			ConVar.Server.fps(arg);
		};
		array[940] = val;
		val = new Command();
		val.Name = "funwaterdamagethreshold";
		val.Parent = "server";
		val.FullName = "server.funwaterdamagethreshold";
		val.ServerAdmin = true;
		val.ClientAdmin = true;
		val.Client = true;
		val.Saved = true;
		val.Replicated = true;
		val.Variable = true;
		val.GetOveride = () => ConVar.Server.funWaterDamageThreshold.ToString();
		val.SetOveride = delegate(string str)
		{
			ConVar.Server.funWaterDamageThreshold = StringExtensions.ToFloat(str, 0f);
		};
		val.Default = "0.8";
		array[941] = val;
		val = new Command();
		val.Name = "funwaterwetnessgain";
		val.Parent = "server";
		val.FullName = "server.funwaterwetnessgain";
		val.ServerAdmin = true;
		val.ClientAdmin = true;
		val.Client = true;
		val.Saved = true;
		val.Replicated = true;
		val.Variable = true;
		val.GetOveride = () => ConVar.Server.funWaterWetnessGain.ToString();
		val.SetOveride = delegate(string str)
		{
			ConVar.Server.funWaterWetnessGain = StringExtensions.ToFloat(str, 0f);
		};
		val.Default = "0.05";
		array[942] = val;
		val = new Command();
		val.Name = "gamemode";
		val.Parent = "server";
		val.FullName = "server.gamemode";
		val.ServerAdmin = true;
		val.Variable = true;
		val.GetOveride = () => ConVar.Server.gamemode ?? "";
		val.SetOveride = delegate(string str)
		{
			ConVar.Server.gamemode = str;
		};
		array[943] = val;
		val = new Command();
		val.Name = "headerimage";
		val.Parent = "server";
		val.FullName = "server.headerimage";
		val.ServerAdmin = true;
		val.Saved = true;
		val.ShowInAdminUI = true;
		val.Variable = true;
		val.GetOveride = () => ConVar.Server.headerimage ?? "";
		val.SetOveride = delegate(string str)
		{
			ConVar.Server.headerimage = str;
		};
		array[944] = val;
		val = new Command();
		val.Name = "homingmissiletargetshab";
		val.Parent = "server";
		val.FullName = "server.homingmissiletargetshab";
		val.ServerAdmin = true;
		val.Description = "If true hot air balloons can be shot down with homing missiles";
		val.Variable = true;
		val.GetOveride = () => ConVar.Server.homingMissileTargetsHab.ToString();
		val.SetOveride = delegate(string str)
		{
			ConVar.Server.homingMissileTargetsHab = StringExtensions.ToBool(str);
		};
		array[945] = val;
		val = new Command();
		val.Name = "hopperanimationbudgetms";
		val.Parent = "server";
		val.FullName = "server.hopperanimationbudgetms";
		val.ServerAdmin = true;
		val.Saved = true;
		val.Description = "How long per frame to spend animating items moving into the hopper (will be instant if <= 0)";
		val.ShowInAdminUI = true;
		val.Variable = true;
		val.GetOveride = () => ConVar.Server.hopperAnimationBudgetMs.ToString();
		val.SetOveride = delegate(string str)
		{
			ConVar.Server.hopperAnimationBudgetMs = StringExtensions.ToFloat(str, 0f);
		};
		array[946] = val;
		val = new Command();
		val.Name = "hostname";
		val.Parent = "server";
		val.FullName = "server.hostname";
		val.ServerAdmin = true;
		val.ShowInAdminUI = true;
		val.Variable = true;
		val.GetOveride = () => ConVar.Server.hostname ?? "";
		val.SetOveride = delegate(string str)
		{
			ConVar.Server.hostname = str;
		};
		array[947] = val;
		val = new Command();
		val.Name = "http_connection_limit";
		val.Parent = "server";
		val.FullName = "server.http_connection_limit";
		val.ServerAdmin = true;
		val.Variable = true;
		val.GetOveride = () => ConVar.Server.http_connection_limit.ToString();
		val.SetOveride = delegate(string str)
		{
			ConVar.Server.http_connection_limit = StringExtensions.ToInt(str, 0);
		};
		array[948] = val;
		val = new Command();
		val.Name = "identity";
		val.Parent = "server";
		val.FullName = "server.identity";
		val.ServerAdmin = true;
		val.Variable = true;
		val.GetOveride = () => ConVar.Server.identity ?? "";
		val.SetOveride = delegate(string str)
		{
			ConVar.Server.identity = str;
		};
		array[949] = val;
		val = new Command();
		val.Name = "idlekick";
		val.Parent = "server";
		val.FullName = "server.idlekick";
		val.ServerAdmin = true;
		val.ShowInAdminUI = true;
		val.Variable = true;
		val.GetOveride = () => ConVar.Server.idlekick.ToString();
		val.SetOveride = delegate(string str)
		{
			ConVar.Server.idlekick = StringExtensions.ToInt(str, 0);
		};
		array[950] = val;
		val = new Command();
		val.Name = "idlekickadmins";
		val.Parent = "server";
		val.FullName = "server.idlekickadmins";
		val.ServerAdmin = true;
		val.Variable = true;
		val.GetOveride = () => ConVar.Server.idlekickadmins.ToString();
		val.SetOveride = delegate(string str)
		{
			ConVar.Server.idlekickadmins = StringExtensions.ToInt(str, 0);
		};
		array[951] = val;
		val = new Command();
		val.Name = "idlekickmode";
		val.Parent = "server";
		val.FullName = "server.idlekickmode";
		val.ServerAdmin = true;
		val.Variable = true;
		val.GetOveride = () => ConVar.Server.idlekickmode.ToString();
		val.SetOveride = delegate(string str)
		{
			ConVar.Server.idlekickmode = StringExtensions.ToInt(str, 0);
		};
		array[952] = val;
		val = new Command();
		val.Name = "incapacitatedrecoverchance";
		val.Parent = "server";
		val.FullName = "server.incapacitatedrecoverchance";
		val.ServerAdmin = true;
		val.Saved = true;
		val.Description = "Base chance of recovery after incapacitated wounded state";
		val.Variable = true;
		val.GetOveride = () => ConVar.Server.incapacitatedrecoverchance.ToString();
		val.SetOveride = delegate(string str)
		{
			ConVar.Server.incapacitatedrecoverchance = StringExtensions.ToFloat(str, 0f);
		};
		array[953] = val;
		val = new Command();
		val.Name = "industrialallowquickmove";
		val.Parent = "server";
		val.FullName = "server.industrialallowquickmove";
		val.ServerAdmin = true;
		val.Description = "Enables a faster way to move items around during conveyor transfers. Should be on unless there's a issue";
		val.Variable = true;
		val.GetOveride = () => ConVar.Server.industrialAllowQuickMove.ToString();
		val.SetOveride = delegate(string str)
		{
			ConVar.Server.industrialAllowQuickMove = StringExtensions.ToBool(str);
		};
		array[954] = val;
		val = new Command();
		val.Name = "industrialcrafterfrequency";
		val.Parent = "server";
		val.FullName = "server.industrialcrafterfrequency";
		val.ServerAdmin = true;
		val.Saved = true;
		val.Description = "How often industrial crafters attempt to craft items (value is an interval measured in seconds). Setting to 0 will disable all crafting";
		val.ShowInAdminUI = true;
		val.Variable = true;
		val.GetOveride = () => ConVar.Server.industrialCrafterFrequency.ToString();
		val.SetOveride = delegate(string str)
		{
			ConVar.Server.industrialCrafterFrequency = StringExtensions.ToFloat(str, 0f);
		};
		array[955] = val;
		val = new Command();
		val.Name = "industrialframebudgetms";
		val.Parent = "server";
		val.FullName = "server.industrialframebudgetms";
		val.ServerAdmin = true;
		val.Saved = true;
		val.Description = "How long per frame to spend on industrial jobs";
		val.ShowInAdminUI = true;
		val.Variable = true;
		val.GetOveride = () => ConVar.Server.industrialFrameBudgetMs.ToString();
		val.SetOveride = delegate(string str)
		{
			ConVar.Server.industrialFrameBudgetMs = StringExtensions.ToFloat(str, 0f);
		};
		array[956] = val;
		val = new Command();
		val.Name = "industrialtransferstricttimelimits";
		val.Parent = "server";
		val.FullName = "server.industrialtransferstricttimelimits";
		val.ServerAdmin = true;
		val.Saved = true;
		val.Description = "When enabled industrial transfers will abort if they start to take too long. Will lead to inconsistent splitting but should retain performance";
		val.Variable = true;
		val.GetOveride = () => ConVar.Server.industrialTransferStrictTimeLimits.ToString();
		val.SetOveride = delegate(string str)
		{
			ConVar.Server.industrialTransferStrictTimeLimits = StringExtensions.ToBool(str);
		};
		array[957] = val;
		val = new Command();
		val.Name = "ip";
		val.Parent = "server";
		val.FullName = "server.ip";
		val.ServerAdmin = true;
		val.Variable = true;
		val.GetOveride = () => ConVar.Server.ip ?? "";
		val.SetOveride = delegate(string str)
		{
			ConVar.Server.ip = str;
		};
		array[958] = val;
		val = new Command();
		val.Name = "ipqueriespermin";
		val.Parent = "server";
		val.FullName = "server.ipqueriespermin";
		val.ServerAdmin = true;
		val.Variable = true;
		val.GetOveride = () => ConVar.Server.ipQueriesPerMin.ToString();
		val.SetOveride = delegate(string str)
		{
			ConVar.Server.ipQueriesPerMin = StringExtensions.ToInt(str, 0);
		};
		array[959] = val;
		val = new Command();
		val.Name = "itemdespawn";
		val.Parent = "server";
		val.FullName = "server.itemdespawn";
		val.ServerAdmin = true;
		val.Variable = true;
		val.GetOveride = () => ConVar.Server.itemdespawn.ToString();
		val.SetOveride = delegate(string str)
		{
			ConVar.Server.itemdespawn = StringExtensions.ToFloat(str, 0f);
		};
		array[960] = val;
		val = new Command();
		val.Name = "itemdespawn_container_max_multiplier";
		val.Parent = "server";
		val.FullName = "server.itemdespawn_container_max_multiplier";
		val.ServerAdmin = true;
		val.Variable = true;
		val.GetOveride = () => ConVar.Server.itemdespawn_container_max_multiplier.ToString();
		val.SetOveride = delegate(string str)
		{
			ConVar.Server.itemdespawn_container_max_multiplier = StringExtensions.ToInt(str, 0);
		};
		array[961] = val;
		val = new Command();
		val.Name = "itemdespawn_container_scale";
		val.Parent = "server";
		val.FullName = "server.itemdespawn_container_scale";
		val.ServerAdmin = true;
		val.Variable = true;
		val.GetOveride = () => ConVar.Server.itemdespawn_container_scale.ToString();
		val.SetOveride = delegate(string str)
		{
			ConVar.Server.itemdespawn_container_scale = StringExtensions.ToFloat(str, 0f);
		};
		array[962] = val;
		val = new Command();
		val.Name = "itemdespawn_quick";
		val.Parent = "server";
		val.FullName = "server.itemdespawn_quick";
		val.ServerAdmin = true;
		val.Variable = true;
		val.GetOveride = () => ConVar.Server.itemdespawn_quick.ToString();
		val.SetOveride = delegate(string str)
		{
			ConVar.Server.itemdespawn_quick = StringExtensions.ToFloat(str, 0f);
		};
		array[963] = val;
		val = new Command();
		val.Name = "level";
		val.Parent = "server";
		val.FullName = "server.level";
		val.ServerAdmin = true;
		val.Variable = true;
		val.GetOveride = () => ConVar.Server.level ?? "";
		val.SetOveride = delegate(string str)
		{
			ConVar.Server.level = str;
		};
		array[964] = val;
		val = new Command();
		val.Name = "leveltransfer";
		val.Parent = "server";
		val.FullName = "server.leveltransfer";
		val.ServerAdmin = true;
		val.Variable = true;
		val.GetOveride = () => ConVar.Server.leveltransfer.ToString();
		val.SetOveride = delegate(string str)
		{
			ConVar.Server.leveltransfer = StringExtensions.ToBool(str);
		};
		array[965] = val;
		val = new Command();
		val.Name = "levelurl";
		val.Parent = "server";
		val.FullName = "server.levelurl";
		val.ServerAdmin = true;
		val.Variable = true;
		val.GetOveride = () => ConVar.Server.levelurl ?? "";
		val.SetOveride = delegate(string str)
		{
			ConVar.Server.levelurl = str;
		};
		array[966] = val;
		val = new Command();
		val.Name = "listtoolcupboards";
		val.Parent = "server";
		val.FullName = "server.listtoolcupboards";
		val.ServerAdmin = true;
		val.Description = "Prints all the Tool Cupboards on the server";
		val.Variable = false;
		val.Call = delegate(Arg arg)
		{
			ConVar.Server.listtoolcupboards(arg);
		};
		array[967] = val;
		val = new Command();
		val.Name = "listvendingmachines";
		val.Parent = "server";
		val.FullName = "server.listvendingmachines";
		val.ServerAdmin = true;
		val.Description = "Prints all the vending machines on the server";
		val.Variable = false;
		val.Call = delegate(Arg arg)
		{
			ConVar.Server.listvendingmachines(arg);
		};
		array[968] = val;
		val = new Command();
		val.Name = "logoimage";
		val.Parent = "server";
		val.FullName = "server.logoimage";
		val.ServerAdmin = true;
		val.Saved = true;
		val.ShowInAdminUI = true;
		val.Variable = true;
		val.GetOveride = () => ConVar.Server.logoimage ?? "";
		val.SetOveride = delegate(string str)
		{
			ConVar.Server.logoimage = str;
		};
		array[969] = val;
		val = new Command();
		val.Name = "lowprioritybuoyancyrange";
		val.Parent = "server";
		val.FullName = "server.lowprioritybuoyancyrange";
		val.ServerAdmin = true;
		val.Description = "If no players are in this range kayaks, boogie boards and inner tubes will switch to a cheaper buoyancy system";
		val.Variable = true;
		val.GetOveride = () => ConVar.Server.lowPriorityBuoyancyRange.ToString();
		val.SetOveride = delegate(string str)
		{
			ConVar.Server.lowPriorityBuoyancyRange = StringExtensions.ToFloat(str, 0f);
		};
		array[970] = val;
		val = new Command();
		val.Name = "max_explosive_protection";
		val.Parent = "server";
		val.FullName = "server.max_explosive_protection";
		val.ServerAdmin = true;
		val.ClientAdmin = true;
		val.Client = true;
		val.Replicated = true;
		val.Variable = true;
		val.GetOveride = () => ConVar.Server.max_explosive_protection.ToString();
		val.SetOveride = delegate(string str)
		{
			ConVar.Server.max_explosive_protection = StringExtensions.ToFloat(str, 0f);
		};
		val.Default = "0.75";
		array[971] = val;
		val = new Command();
		val.Name = "max_sleeping_bags";
		val.Parent = "server";
		val.FullName = "server.max_sleeping_bags";
		val.ServerAdmin = true;
		val.ClientAdmin = true;
		val.Client = true;
		val.Replicated = true;
		val.Variable = true;
		val.GetOveride = () => ConVar.Server.max_sleeping_bags.ToString();
		val.SetOveride = delegate(string str)
		{
			ConVar.Server.max_sleeping_bags = StringExtensions.ToInt(str, 0);
		};
		val.Default = "15";
		array[972] = val;
		val = new Command();
		val.Name = "maxclientinfosize";
		val.Parent = "server";
		val.FullName = "server.maxclientinfosize";
		val.ServerAdmin = true;
		val.Variable = true;
		val.GetOveride = () => ConVar.Server.maxclientinfosize.ToString();
		val.SetOveride = delegate(string str)
		{
			ConVar.Server.maxclientinfosize = StringExtensions.ToInt(str, 0);
		};
		array[973] = val;
		val = new Command();
		val.Name = "maxconnectionsperip";
		val.Parent = "server";
		val.FullName = "server.maxconnectionsperip";
		val.ServerAdmin = true;
		val.Variable = true;
		val.GetOveride = () => ConVar.Server.maxconnectionsperip.ToString();
		val.SetOveride = delegate(string str)
		{
			ConVar.Server.maxconnectionsperip = StringExtensions.ToInt(str, 0);
		};
		array[974] = val;
		val = new Command();
		val.Name = "maxdecryptqueuebytes";
		val.Parent = "server";
		val.FullName = "server.maxdecryptqueuebytes";
		val.ServerAdmin = true;
		val.Variable = true;
		val.GetOveride = () => ConVar.Server.maxdecryptqueuebytes.ToString();
		val.SetOveride = delegate(string str)
		{
			ConVar.Server.maxdecryptqueuebytes = StringExtensions.ToInt(str, 0);
		};
		array[975] = val;
		val = new Command();
		val.Name = "maxdecryptqueuelength";
		val.Parent = "server";
		val.FullName = "server.maxdecryptqueuelength";
		val.ServerAdmin = true;
		val.Variable = true;
		val.GetOveride = () => ConVar.Server.maxdecryptqueuelength.ToString();
		val.SetOveride = delegate(string str)
		{
			ConVar.Server.maxdecryptqueuelength = StringExtensions.ToInt(str, 0);
		};
		array[976] = val;
		val = new Command();
		val.Name = "maxdecryptthreadwait";
		val.Parent = "server";
		val.FullName = "server.maxdecryptthreadwait";
		val.ServerAdmin = true;
		val.Variable = true;
		val.GetOveride = () => ConVar.Server.maxdecryptthreadwait.ToString();
		val.SetOveride = delegate(string str)
		{
			ConVar.Server.maxdecryptthreadwait = StringExtensions.ToInt(str, 0);
		};
		array[977] = val;
		val = new Command();
		val.Name = "maxfoodspoiltimediffforitemstack";
		val.Parent = "server";
		val.FullName = "server.maxfoodspoiltimediffforitemstack";
		val.ServerAdmin = true;
		val.Description = "Maximum difference (in seconds) that two items with spoil timers can have and still be stackable";
		val.Variable = true;
		val.GetOveride = () => ConVar.Server.maxFoodSpoilTimeDiffForItemStack.ToString();
		val.SetOveride = delegate(string str)
		{
			ConVar.Server.maxFoodSpoilTimeDiffForItemStack = StringExtensions.ToFloat(str, 0f);
		};
		array[978] = val;
		val = new Command();
		val.Name = "maximummapmarkers";
		val.Parent = "server";
		val.FullName = "server.maximummapmarkers";
		val.ServerAdmin = true;
		val.ClientAdmin = true;
		val.Client = true;
		val.Saved = true;
		val.Description = "How many markers each player can place";
		val.Replicated = true;
		val.ShowInAdminUI = true;
		val.Variable = true;
		val.GetOveride = () => ConVar.Server.maximumMapMarkers.ToString();
		val.SetOveride = delegate(string str)
		{
			ConVar.Server.maximumMapMarkers = StringExtensions.ToInt(str, 0);
		};
		val.Default = "5";
		array[979] = val;
		val = new Command();
		val.Name = "maximumpings";
		val.Parent = "server";
		val.FullName = "server.maximumpings";
		val.ServerAdmin = true;
		val.Saved = true;
		val.Description = "How many pings can be placed by each player";
		val.ShowInAdminUI = true;
		val.Variable = true;
		val.GetOveride = () => ConVar.Server.maximumPings.ToString();
		val.SetOveride = delegate(string str)
		{
			ConVar.Server.maximumPings = StringExtensions.ToInt(str, 0);
		};
		array[980] = val;
		val = new Command();
		val.Name = "maxitemstacksmovedpertickindustrial";
		val.Parent = "server";
		val.FullName = "server.maxitemstacksmovedpertickindustrial";
		val.ServerAdmin = true;
		val.Saved = true;
		val.Description = "How many stacks a single conveyor can move in a single tick";
		val.ShowInAdminUI = true;
		val.Variable = true;
		val.GetOveride = () => ConVar.Server.maxItemStacksMovedPerTickIndustrial.ToString();
		val.SetOveride = delegate(string str)
		{
			ConVar.Server.maxItemStacksMovedPerTickIndustrial = StringExtensions.ToInt(str, 0);
		};
		array[981] = val;
		val = new Command();
		val.Name = "maxmainthreadwait";
		val.Parent = "server";
		val.FullName = "server.maxmainthreadwait";
		val.ServerAdmin = true;
		val.Variable = true;
		val.GetOveride = () => ConVar.Server.maxmainthreadwait.ToString();
		val.SetOveride = delegate(string str)
		{
			ConVar.Server.maxmainthreadwait = StringExtensions.ToInt(str, 0);
		};
		array[982] = val;
		val = new Command();
		val.Name = "maxpacketsize_command";
		val.Parent = "server";
		val.FullName = "server.maxpacketsize_command";
		val.ServerAdmin = true;
		val.Variable = true;
		val.GetOveride = () => ConVar.Server.maxpacketsize_command.ToString();
		val.SetOveride = delegate(string str)
		{
			ConVar.Server.maxpacketsize_command = StringExtensions.ToInt(str, 0);
		};
		array[983] = val;
		val = new Command();
		val.Name = "maxpacketsize_globalentities";
		val.Parent = "server";
		val.FullName = "server.maxpacketsize_globalentities";
		val.ServerAdmin = true;
		val.Variable = true;
		val.GetOveride = () => ConVar.Server.maxpacketsize_globalentities.ToString();
		val.SetOveride = delegate(string str)
		{
			ConVar.Server.maxpacketsize_globalentities = StringExtensions.ToInt(str, 0);
		};
		array[984] = val;
		val = new Command();
		val.Name = "maxpacketsize_globaltrees";
		val.Parent = "server";
		val.FullName = "server.maxpacketsize_globaltrees";
		val.ServerAdmin = true;
		val.Variable = true;
		val.GetOveride = () => ConVar.Server.maxpacketsize_globaltrees.ToString();
		val.SetOveride = delegate(string str)
		{
			ConVar.Server.maxpacketsize_globaltrees = StringExtensions.ToInt(str, 0);
		};
		array[985] = val;
		val = new Command();
		val.Name = "maxpacketspersecond";
		val.Parent = "server";
		val.FullName = "server.maxpacketspersecond";
		val.ServerAdmin = true;
		val.Variable = true;
		val.GetOveride = () => ConVar.Server.maxpacketspersecond.ToString();
		val.SetOveride = delegate(string str)
		{
			ConVar.Server.maxpacketspersecond = StringExtensions.ToInt(str, 0);
		};
		array[986] = val;
		val = new Command();
		val.Name = "maxpacketspersecond_command";
		val.Parent = "server";
		val.FullName = "server.maxpacketspersecond_command";
		val.ServerAdmin = true;
		val.Variable = true;
		val.GetOveride = () => ConVar.Server.maxpacketspersecond_command.ToString();
		val.SetOveride = delegate(string str)
		{
			ConVar.Server.maxpacketspersecond_command = StringExtensions.ToInt(str, 0);
		};
		array[987] = val;
		val = new Command();
		val.Name = "maxpacketspersecond_rpc";
		val.Parent = "server";
		val.FullName = "server.maxpacketspersecond_rpc";
		val.ServerAdmin = true;
		val.Variable = true;
		val.GetOveride = () => ConVar.Server.maxpacketspersecond_rpc.ToString();
		val.SetOveride = delegate(string str)
		{
			ConVar.Server.maxpacketspersecond_rpc = StringExtensions.ToInt(str, 0);
		};
		array[988] = val;
		val = new Command();
		val.Name = "maxpacketspersecond_rpc_signal";
		val.Parent = "server";
		val.FullName = "server.maxpacketspersecond_rpc_signal";
		val.ServerAdmin = true;
		val.Variable = true;
		val.GetOveride = () => ConVar.Server.maxpacketspersecond_rpc_signal.ToString();
		val.SetOveride = delegate(string str)
		{
			ConVar.Server.maxpacketspersecond_rpc_signal = StringExtensions.ToInt(str, 0);
		};
		array[989] = val;
		val = new Command();
		val.Name = "maxpacketspersecond_tick";
		val.Parent = "server";
		val.FullName = "server.maxpacketspersecond_tick";
		val.ServerAdmin = true;
		val.Variable = true;
		val.GetOveride = () => ConVar.Server.maxpacketspersecond_tick.ToString();
		val.SetOveride = delegate(string str)
		{
			ConVar.Server.maxpacketspersecond_tick = StringExtensions.ToInt(str, 0);
		};
		array[990] = val;
		val = new Command();
		val.Name = "maxpacketspersecond_voice";
		val.Parent = "server";
		val.FullName = "server.maxpacketspersecond_voice";
		val.ServerAdmin = true;
		val.Variable = true;
		val.GetOveride = () => ConVar.Server.maxpacketspersecond_voice.ToString();
		val.SetOveride = delegate(string str)
		{
			ConVar.Server.maxpacketspersecond_voice = StringExtensions.ToInt(str, 0);
		};
		array[991] = val;
		val = new Command();
		val.Name = "maxpacketspersecond_world";
		val.Parent = "server";
		val.FullName = "server.maxpacketspersecond_world";
		val.ServerAdmin = true;
		val.Variable = true;
		val.GetOveride = () => ConVar.Server.maxpacketspersecond_world.ToString();
		val.SetOveride = delegate(string str)
		{
			ConVar.Server.maxpacketspersecond_world = StringExtensions.ToInt(str, 0);
		};
		array[992] = val;
		val = new Command();
		val.Name = "maxplayers";
		val.Parent = "server";
		val.FullName = "server.maxplayers";
		val.ServerAdmin = true;
		val.ShowInAdminUI = true;
		val.Variable = true;
		val.GetOveride = () => ConVar.Server.maxplayers.ToString();
		val.SetOveride = delegate(string str)
		{
			ConVar.Server.maxplayers = StringExtensions.ToInt(str, 0);
		};
		array[993] = val;
		val = new Command();
		val.Name = "maxreadqueuebytes";
		val.Parent = "server";
		val.FullName = "server.maxreadqueuebytes";
		val.ServerAdmin = true;
		val.Variable = true;
		val.GetOveride = () => ConVar.Server.maxreadqueuebytes.ToString();
		val.SetOveride = delegate(string str)
		{
			ConVar.Server.maxreadqueuebytes = StringExtensions.ToInt(str, 0);
		};
		array[994] = val;
		val = new Command();
		val.Name = "maxreadqueuelength";
		val.Parent = "server";
		val.FullName = "server.maxreadqueuelength";
		val.ServerAdmin = true;
		val.Variable = true;
		val.GetOveride = () => ConVar.Server.maxreadqueuelength.ToString();
		val.SetOveride = delegate(string str)
		{
			ConVar.Server.maxreadqueuelength = StringExtensions.ToInt(str, 0);
		};
		array[995] = val;
		val = new Command();
		val.Name = "maxreadthreadwait";
		val.Parent = "server";
		val.FullName = "server.maxreadthreadwait";
		val.ServerAdmin = true;
		val.Variable = true;
		val.GetOveride = () => ConVar.Server.maxreadthreadwait.ToString();
		val.SetOveride = delegate(string str)
		{
			ConVar.Server.maxreadthreadwait = StringExtensions.ToInt(str, 0);
		};
		array[996] = val;
		val = new Command();
		val.Name = "maxreceivetime";
		val.Parent = "server";
		val.FullName = "server.maxreceivetime";
		val.ServerAdmin = true;
		val.Variable = true;
		val.GetOveride = () => ConVar.Server.maxreceivetime.ToString();
		val.SetOveride = delegate(string str)
		{
			ConVar.Server.maxreceivetime = StringExtensions.ToInt(str, 0);
		};
		array[997] = val;
		val = new Command();
		val.Name = "maxunack";
		val.Parent = "server";
		val.FullName = "server.maxunack";
		val.ServerAdmin = true;
		val.Variable = true;
		val.GetOveride = () => ConVar.Server.maxunack.ToString();
		val.SetOveride = delegate(string str)
		{
			ConVar.Server.maxunack = StringExtensions.ToInt(str, 0);
		};
		array[998] = val;
		val = new Command();
		val.Name = "maxwritequeuebytes";
		val.Parent = "server";
		val.FullName = "server.maxwritequeuebytes";
		val.ServerAdmin = true;
		val.Variable = true;
		val.GetOveride = () => ConVar.Server.maxwritequeuebytes.ToString();
		val.SetOveride = delegate(string str)
		{
			ConVar.Server.maxwritequeuebytes = StringExtensions.ToInt(str, 0);
		};
		array[999] = val;
		val = new Command();
		val.Name = "maxwritequeuelength";
		val.Parent = "server";
		val.FullName = "server.maxwritequeuelength";
		val.ServerAdmin = true;
		val.Variable = true;
		val.GetOveride = () => ConVar.Server.maxwritequeuelength.ToString();
		val.SetOveride = delegate(string str)
		{
			ConVar.Server.maxwritequeuelength = StringExtensions.ToInt(str, 0);
		};
		array[1000] = val;
		val = new Command();
		val.Name = "maxwritethreadwait";
		val.Parent = "server";
		val.FullName = "server.maxwritethreadwait";
		val.ServerAdmin = true;
		val.Variable = true;
		val.GetOveride = () => ConVar.Server.maxwritethreadwait.ToString();
		val.SetOveride = delegate(string str)
		{
			ConVar.Server.maxwritethreadwait = StringExtensions.ToInt(str, 0);
		};
		array[1001] = val;
		val = new Command();
		val.Name = "meleearmor";
		val.Parent = "server";
		val.FullName = "server.meleearmor";
		val.ServerAdmin = true;
		val.Saved = true;
		val.Variable = true;
		val.GetOveride = () => ConVar.Server.meleearmor.ToString();
		val.SetOveride = delegate(string str)
		{
			ConVar.Server.meleearmor = StringExtensions.ToFloat(str, 0f);
		};
		array[1002] = val;
		val = new Command();
		val.Name = "meleedamage";
		val.Parent = "server";
		val.FullName = "server.meleedamage";
		val.ServerAdmin = true;
		val.Saved = true;
		val.Variable = true;
		val.GetOveride = () => ConVar.Server.meleedamage.ToString();
		val.SetOveride = delegate(string str)
		{
			ConVar.Server.meleedamage = StringExtensions.ToFloat(str, 0f);
		};
		array[1003] = val;
		val = new Command();
		val.Name = "metabolismtick";
		val.Parent = "server";
		val.FullName = "server.metabolismtick";
		val.ServerAdmin = true;
		val.Variable = true;
		val.GetOveride = () => ConVar.Server.metabolismtick.ToString();
		val.SetOveride = delegate(string str)
		{
			ConVar.Server.metabolismtick = StringExtensions.ToFloat(str, 0f);
		};
		array[1004] = val;
		val = new Command();
		val.Name = "modifiertickrate";
		val.Parent = "server";
		val.FullName = "server.modifiertickrate";
		val.ServerAdmin = true;
		val.Variable = true;
		val.GetOveride = () => ConVar.Server.modifierTickRate.ToString();
		val.SetOveride = delegate(string str)
		{
			ConVar.Server.modifierTickRate = StringExtensions.ToFloat(str, 0f);
		};
		array[1005] = val;
		val = new Command();
		val.Name = "motd";
		val.Parent = "server";
		val.FullName = "server.motd";
		val.ServerAdmin = true;
		val.ClientAdmin = true;
		val.Client = true;
		val.Saved = true;
		val.Replicated = true;
		val.ShowInAdminUI = true;
		val.Variable = true;
		val.GetOveride = () => ConVar.Server.motd ?? "";
		val.SetOveride = delegate(string str)
		{
			ConVar.Server.motd = str;
		};
		val.Default = "";
		array[1006] = val;
		val = new Command();
		val.Name = "netcache";
		val.Parent = "server";
		val.FullName = "server.netcache";
		val.ServerAdmin = true;
		val.Variable = true;
		val.GetOveride = () => ConVar.Server.netcache.ToString();
		val.SetOveride = delegate(string str)
		{
			ConVar.Server.netcache = StringExtensions.ToBool(str);
		};
		array[1007] = val;
		val = new Command();
		val.Name = "netcachesize";
		val.Parent = "server";
		val.FullName = "server.netcachesize";
		val.ServerAdmin = true;
		val.Variable = true;
		val.GetOveride = () => ConVar.Server.netcachesize.ToString();
		val.SetOveride = delegate(string str)
		{
			ConVar.Server.netcachesize = StringExtensions.ToInt(str, 0);
		};
		array[1008] = val;
		val = new Command();
		val.Name = "netlog";
		val.Parent = "server";
		val.FullName = "server.netlog";
		val.ServerAdmin = true;
		val.Variable = true;
		val.GetOveride = () => ConVar.Server.netlog.ToString();
		val.SetOveride = delegate(string str)
		{
			ConVar.Server.netlog = StringExtensions.ToBool(str);
		};
		array[1009] = val;
		val = new Command();
		val.Name = "netprotocol";
		val.Parent = "server";
		val.FullName = "server.netprotocol";
		val.ServerAdmin = true;
		val.Variable = false;
		val.Call = delegate(Arg arg)
		{
			string text14 = ConVar.Server.netprotocol(arg);
			arg.ReplyWithObject((object)text14);
		};
		array[1010] = val;
		val = new Command();
		val.Name = "nonplanterdeathchancepertick";
		val.Parent = "server";
		val.FullName = "server.nonplanterdeathchancepertick";
		val.ServerAdmin = true;
		val.Saved = true;
		val.Variable = true;
		val.GetOveride = () => ConVar.Server.nonPlanterDeathChancePerTick.ToString();
		val.SetOveride = delegate(string str)
		{
			ConVar.Server.nonPlanterDeathChancePerTick = StringExtensions.ToFloat(str, 0f);
		};
		array[1011] = val;
		val = new Command();
		val.Name = "normalisedfoodspoiltimestackthreshold";
		val.Parent = "server";
		val.FullName = "server.normalisedfoodspoiltimestackthreshold";
		val.ServerAdmin = true;
		val.Description = "If two spoiled food items are both above this threshold then we will allow them to be stacked";
		val.Variable = true;
		val.GetOveride = () => ConVar.Server.normalisedFoodSpoilTimeStackThreshold.ToString();
		val.SetOveride = delegate(string str)
		{
			ConVar.Server.normalisedFoodSpoilTimeStackThreshold = StringExtensions.ToFloat(str, 0f);
		};
		array[1012] = val;
		val = new Command();
		val.Name = "official";
		val.Parent = "server";
		val.FullName = "server.official";
		val.ServerAdmin = true;
		val.Variable = true;
		val.GetOveride = () => ConVar.Server.official.ToString();
		val.SetOveride = delegate(string str)
		{
			ConVar.Server.official = StringExtensions.ToBool(str);
		};
		array[1013] = val;
		val = new Command();
		val.Name = "oilrig_radiation_alarm_threshold";
		val.Parent = "server";
		val.FullName = "server.oilrig_radiation_alarm_threshold";
		val.ServerAdmin = true;
		val.Variable = true;
		val.GetOveride = () => ConVar.Server.oilrig_radiation_alarm_threshold.ToString();
		val.SetOveride = delegate(string str)
		{
			ConVar.Server.oilrig_radiation_alarm_threshold = StringExtensions.ToFloat(str, 0f);
		};
		array[1014] = val;
		val = new Command();
		val.Name = "oilrig_radiation_amount_scale";
		val.Parent = "server";
		val.FullName = "server.oilrig_radiation_amount_scale";
		val.ServerAdmin = true;
		val.Saved = true;
		val.Variable = true;
		val.GetOveride = () => ConVar.Server.oilrig_radiation_amount_scale.ToString();
		val.SetOveride = delegate(string str)
		{
			ConVar.Server.oilrig_radiation_amount_scale = StringExtensions.ToFloat(str, 0f);
		};
		array[1015] = val;
		val = new Command();
		val.Name = "oilrig_radiation_time_scale";
		val.Parent = "server";
		val.FullName = "server.oilrig_radiation_time_scale";
		val.ServerAdmin = true;
		val.Saved = true;
		val.Variable = true;
		val.GetOveride = () => ConVar.Server.oilrig_radiation_time_scale.ToString();
		val.SetOveride = delegate(string str)
		{
			ConVar.Server.oilrig_radiation_time_scale = StringExtensions.ToFloat(str, 0f);
		};
		array[1016] = val;
		val = new Command();
		val.Name = "optimalplanterqualitysaturation";
		val.Parent = "server";
		val.FullName = "server.optimalplanterqualitysaturation";
		val.ServerAdmin = true;
		val.Saved = true;
		val.Variable = true;
		val.GetOveride = () => ConVar.Server.optimalPlanterQualitySaturation.ToString();
		val.SetOveride = delegate(string str)
		{
			ConVar.Server.optimalPlanterQualitySaturation = StringExtensions.ToFloat(str, 0f);
		};
		array[1017] = val;
		val = new Command();
		val.Name = "packetlog";
		val.Parent = "server";
		val.FullName = "server.packetlog";
		val.ServerAdmin = true;
		val.Variable = false;
		val.Call = delegate(Arg arg)
		{
			string text15 = ConVar.Server.packetlog(arg);
			arg.ReplyWithObject((object)text15);
		};
		array[1018] = val;
		val = new Command();
		val.Name = "packetlog_enabled";
		val.Parent = "server";
		val.FullName = "server.packetlog_enabled";
		val.ServerAdmin = true;
		val.Variable = true;
		val.GetOveride = () => ConVar.Server.packetlog_enabled.ToString();
		val.SetOveride = delegate(string str)
		{
			ConVar.Server.packetlog_enabled = StringExtensions.ToBool(str);
		};
		array[1019] = val;
		val = new Command();
		val.Name = "parachuterepacktime";
		val.Parent = "server";
		val.FullName = "server.parachuterepacktime";
		val.ServerAdmin = true;
		val.ClientAdmin = true;
		val.Client = true;
		val.Saved = true;
		val.Description = "How long it takes to pick up a used parachute in seconds";
		val.Replicated = true;
		val.ShowInAdminUI = true;
		val.Variable = true;
		val.GetOveride = () => ConVar.Server.parachuteRepackTime.ToString();
		val.SetOveride = delegate(string str)
		{
			ConVar.Server.parachuteRepackTime = StringExtensions.ToFloat(str, 0f);
		};
		val.Default = "8";
		array[1020] = val;
		val = new Command();
		val.Name = "ping_region_code_override";
		val.Parent = "server";
		val.FullName = "server.ping_region_code_override";
		val.ServerAdmin = true;
		val.Variable = true;
		val.GetOveride = () => ConVar.Server.ping_region_code_override ?? "";
		val.SetOveride = delegate(string str)
		{
			ConVar.Server.ping_region_code_override = str;
		};
		array[1021] = val;
		val = new Command();
		val.Name = "pingduration";
		val.Parent = "server";
		val.FullName = "server.pingduration";
		val.ServerAdmin = true;
		val.Saved = true;
		val.Description = "How long a ping should last";
		val.ShowInAdminUI = true;
		val.Variable = true;
		val.GetOveride = () => ConVar.Server.pingDuration.ToString();
		val.SetOveride = delegate(string str)
		{
			ConVar.Server.pingDuration = StringExtensions.ToFloat(str, 0f);
		};
		array[1022] = val;
		val = new Command();
		val.Name = "plantlightdetection";
		val.Parent = "server";
		val.FullName = "server.plantlightdetection";
		val.ServerAdmin = true;
		val.Variable = true;
		val.GetOveride = () => ConVar.Server.plantlightdetection.ToString();
		val.SetOveride = delegate(string str)
		{
			ConVar.Server.plantlightdetection = StringExtensions.ToBool(str);
		};
		array[1023] = val;
		val = new Command();
		val.Name = "planttick";
		val.Parent = "server";
		val.FullName = "server.planttick";
		val.ServerAdmin = true;
		val.ClientAdmin = true;
		val.Client = true;
		val.Replicated = true;
		val.Variable = true;
		val.GetOveride = () => ConVar.Server.planttick.ToString();
		val.SetOveride = delegate(string str)
		{
			ConVar.Server.planttick = StringExtensions.ToFloat(str, 0f);
		};
		val.Default = "60";
		array[1024] = val;
		val = new Command();
		val.Name = "planttickscale";
		val.Parent = "server";
		val.FullName = "server.planttickscale";
		val.ServerAdmin = true;
		val.Variable = true;
		val.GetOveride = () => ConVar.Server.planttickscale.ToString();
		val.SetOveride = delegate(string str)
		{
			ConVar.Server.planttickscale = StringExtensions.ToFloat(str, 0f);
		};
		array[1025] = val;
		val = new Command();
		val.Name = "player_state_cache_count";
		val.Parent = "server";
		val.FullName = "server.player_state_cache_count";
		val.ServerAdmin = true;
		val.Variable = false;
		val.Call = delegate(Arg arg)
		{
			ConVar.Server.player_state_cache_count(arg);
		};
		array[1026] = val;
		val = new Command();
		val.Name = "player_state_cache_evictions";
		val.Parent = "server";
		val.FullName = "server.player_state_cache_evictions";
		val.ServerAdmin = true;
		val.Variable = false;
		val.Call = delegate(Arg arg)
		{
			ConVar.Server.player_state_cache_evictions(arg);
		};
		array[1027] = val;
		val = new Command();
		val.Name = "player_state_cache_size";
		val.Parent = "server";
		val.FullName = "server.player_state_cache_size";
		val.ServerAdmin = true;
		val.Variable = true;
		val.GetOveride = () => ConVar.Server.player_state_cache_size.ToString();
		val.SetOveride = delegate(string str)
		{
			ConVar.Server.player_state_cache_size = StringExtensions.ToInt(str, 0);
		};
		array[1028] = val;
		val = new Command();
		val.Name = "playerlistpos";
		val.Parent = "server";
		val.FullName = "server.playerlistpos";
		val.ServerAdmin = true;
		val.Description = "Prints the position of all players on the server";
		val.Variable = false;
		val.Call = delegate(Arg arg)
		{
			ConVar.Server.playerlistpos(arg);
		};
		array[1029] = val;
		val = new Command();
		val.Name = "playerserverfall";
		val.Parent = "server";
		val.FullName = "server.playerserverfall";
		val.ServerAdmin = true;
		val.Saved = true;
		val.Variable = true;
		val.GetOveride = () => ConVar.Server.playerserverfall.ToString();
		val.SetOveride = delegate(string str)
		{
			ConVar.Server.playerserverfall = StringExtensions.ToBool(str);
		};
		array[1030] = val;
		val = new Command();
		val.Name = "playertimeout";
		val.Parent = "server";
		val.FullName = "server.playertimeout";
		val.ServerAdmin = true;
		val.Variable = true;
		val.GetOveride = () => ConVar.Server.playertimeout.ToString();
		val.SetOveride = delegate(string str)
		{
			ConVar.Server.playertimeout = StringExtensions.ToInt(str, 0);
		};
		array[1031] = val;
		val = new Command();
		val.Name = "port";
		val.Parent = "server";
		val.FullName = "server.port";
		val.ServerAdmin = true;
		val.Variable = true;
		val.GetOveride = () => ConVar.Server.port.ToString();
		val.SetOveride = delegate(string str)
		{
			ConVar.Server.port = StringExtensions.ToInt(str, 0);
		};
		array[1032] = val;
		val = new Command();
		val.Name = "premium";
		val.Parent = "server";
		val.FullName = "server.premium";
		val.ServerAdmin = true;
		val.Description = "Require a premium status account to connect to this server";
		val.Variable = true;
		val.GetOveride = () => ConVar.Server.premium.ToString();
		val.SetOveride = delegate(string str)
		{
			ConVar.Server.premium = StringExtensions.ToBool(str);
		};
		array[1033] = val;
		val = new Command();
		val.Name = "premiumrecheckinterval";
		val.Parent = "server";
		val.FullName = "server.premiumrecheckinterval";
		val.ServerAdmin = true;
		val.Description = "How often to do premium status rechecks";
		val.Variable = true;
		val.GetOveride = () => ConVar.Server.premiumRecheckInterval.ToString();
		val.SetOveride = delegate(string str)
		{
			ConVar.Server.premiumRecheckInterval = StringExtensions.ToFloat(str, 0f);
		};
		array[1034] = val;
		val = new Command();
		val.Name = "premiumrecheckmaxbatchsize";
		val.Parent = "server";
		val.FullName = "server.premiumrecheckmaxbatchsize";
		val.ServerAdmin = true;
		val.Description = "Maximum number of players to recheck at a time";
		val.Variable = true;
		val.GetOveride = () => ConVar.Server.premiumRecheckMaxBatchSize.ToString();
		val.SetOveride = delegate(string str)
		{
			ConVar.Server.premiumRecheckMaxBatchSize = StringExtensions.ToInt(str, 0);
		};
		array[1035] = val;
		val = new Command();
		val.Name = "premiumrecheckminseconds";
		val.Parent = "server";
		val.FullName = "server.premiumrecheckminseconds";
		val.ServerAdmin = true;
		val.Description = "Minimum time to recheck premium status for already connected players (in seconds)";
		val.Variable = true;
		val.GetOveride = () => ConVar.Server.premiumRecheckMinSeconds.ToString();
		val.SetOveride = delegate(string str)
		{
			ConVar.Server.premiumRecheckMinSeconds = StringExtensions.ToFloat(str, 0f);
		};
		array[1036] = val;
		val = new Command();
		val.Name = "premiumverifyendpoint";
		val.Parent = "server";
		val.FullName = "server.premiumverifyendpoint";
		val.ServerAdmin = true;
		val.Description = "Endpoint to use to check if players have premium status";
		val.Variable = true;
		val.GetOveride = () => ConVar.Server.premiumVerifyEndpoint ?? "";
		val.SetOveride = delegate(string str)
		{
			ConVar.Server.premiumVerifyEndpoint = str;
		};
		array[1037] = val;
		val = new Command();
		val.Name = "printdecryptqueue";
		val.Parent = "server";
		val.FullName = "server.printdecryptqueue";
		val.ServerAdmin = true;
		val.Variable = false;
		val.Call = delegate(Arg arg)
		{
			string text16 = ConVar.Server.printdecryptqueue(arg);
			arg.ReplyWithObject((object)text16);
		};
		array[1038] = val;
		val = new Command();
		val.Name = "printeyes";
		val.Parent = "server";
		val.FullName = "server.printeyes";
		val.ServerAdmin = true;
		val.Description = "Print the current player eyes.";
		val.Variable = false;
		val.Call = delegate(Arg arg)
		{
			string text17 = ConVar.Server.printeyes(arg);
			arg.ReplyWithObject((object)text17);
		};
		array[1039] = val;
		val = new Command();
		val.Name = "printpos";
		val.Parent = "server";
		val.FullName = "server.printpos";
		val.ServerAdmin = true;
		val.Description = "Print the current player position.";
		val.Variable = false;
		val.Call = delegate(Arg arg)
		{
			string text18 = ConVar.Server.printpos(arg);
			arg.ReplyWithObject((object)text18);
		};
		array[1040] = val;
		val = new Command();
		val.Name = "printposcenter";
		val.Parent = "server";
		val.FullName = "server.printposcenter";
		val.ServerAdmin = true;
		val.Description = "Print the current player center position.";
		val.Variable = false;
		val.Call = delegate(Arg arg)
		{
			string text19 = ConVar.Server.printposcenter(arg);
			arg.ReplyWithObject((object)text19);
		};
		array[1041] = val;
		val = new Command();
		val.Name = "printreadqueue";
		val.Parent = "server";
		val.FullName = "server.printreadqueue";
		val.ServerAdmin = true;
		val.Variable = false;
		val.Call = delegate(Arg arg)
		{
			string text20 = ConVar.Server.printreadqueue(arg);
			arg.ReplyWithObject((object)text20);
		};
		array[1042] = val;
		val = new Command();
		val.Name = "printreportstoconsole";
		val.Parent = "server";
		val.FullName = "server.printreportstoconsole";
		val.ServerAdmin = true;
		val.Saved = true;
		val.Description = "Should F7 reports from players be printed to console";
		val.Variable = true;
		val.GetOveride = () => ConVar.Server.printReportsToConsole.ToString();
		val.SetOveride = delegate(string str)
		{
			ConVar.Server.printReportsToConsole = StringExtensions.ToBool(str);
		};
		array[1043] = val;
		val = new Command();
		val.Name = "printrot";
		val.Parent = "server";
		val.FullName = "server.printrot";
		val.ServerAdmin = true;
		val.Description = "Print the current player rotation.";
		val.Variable = false;
		val.Call = delegate(Arg arg)
		{
			string text21 = ConVar.Server.printrot(arg);
			arg.ReplyWithObject((object)text21);
		};
		array[1044] = val;
		val = new Command();
		val.Name = "printwipeid";
		val.Parent = "server";
		val.FullName = "server.printwipeid";
		val.ServerAdmin = true;
		val.Description = "Prints the current wipe id of the sav";
		val.Variable = false;
		val.Call = delegate(Arg arg)
		{
			ConVar.Server.printwipeid(arg);
		};
		array[1045] = val;
		val = new Command();
		val.Name = "printwritequeue";
		val.Parent = "server";
		val.FullName = "server.printwritequeue";
		val.ServerAdmin = true;
		val.Variable = false;
		val.Call = delegate(Arg arg)
		{
			string text22 = ConVar.Server.printwritequeue(arg);
			arg.ReplyWithObject((object)text22);
		};
		array[1046] = val;
		val = new Command();
		val.Name = "pve";
		val.Parent = "server";
		val.FullName = "server.pve";
		val.ServerAdmin = true;
		val.Variable = true;
		val.GetOveride = () => ConVar.Server.pve.ToString();
		val.SetOveride = delegate(string str)
		{
			ConVar.Server.pve = StringExtensions.ToBool(str);
		};
		array[1047] = val;
		val = new Command();
		val.Name = "pvpbulletdamagemultiplier";
		val.Parent = "server";
		val.FullName = "server.pvpbulletdamagemultiplier";
		val.ServerAdmin = true;
		val.Saved = true;
		val.Variable = true;
		val.GetOveride = () => ConVar.Server.pvpBulletDamageMultiplier.ToString();
		val.SetOveride = delegate(string str)
		{
			ConVar.Server.pvpBulletDamageMultiplier = StringExtensions.ToFloat(str, 0f);
		};
		array[1048] = val;
		val = new Command();
		val.Name = "queriespersecond";
		val.Parent = "server";
		val.FullName = "server.queriespersecond";
		val.ServerAdmin = true;
		val.Variable = true;
		val.GetOveride = () => ConVar.Server.queriesPerSecond.ToString();
		val.SetOveride = delegate(string str)
		{
			ConVar.Server.queriesPerSecond = StringExtensions.ToInt(str, 0);
		};
		array[1049] = val;
		val = new Command();
		val.Name = "queryport";
		val.Parent = "server";
		val.FullName = "server.queryport";
		val.ServerAdmin = true;
		val.Variable = true;
		val.GetOveride = () => ConVar.Server.queryport.ToString();
		val.SetOveride = delegate(string str)
		{
			ConVar.Server.queryport = StringExtensions.ToInt(str, 0);
		};
		array[1050] = val;
		val = new Command();
		val.Name = "radiation";
		val.Parent = "server";
		val.FullName = "server.radiation";
		val.ServerAdmin = true;
		val.ShowInAdminUI = true;
		val.Variable = true;
		val.GetOveride = () => ConVar.Server.radiation.ToString();
		val.SetOveride = delegate(string str)
		{
			ConVar.Server.radiation = StringExtensions.ToBool(str);
		};
		array[1051] = val;
		val = new Command();
		val.Name = "readcfg";
		val.Parent = "server";
		val.FullName = "server.readcfg";
		val.ServerAdmin = true;
		val.Variable = false;
		val.Call = delegate(Arg arg)
		{
			string text23 = ConVar.Server.readcfg(arg);
			arg.ReplyWithObject((object)text23);
		};
		array[1052] = val;
		val = new Command();
		val.Name = "rejoin_delay";
		val.Parent = "server";
		val.FullName = "server.rejoin_delay";
		val.ServerAdmin = true;
		val.Variable = true;
		val.GetOveride = () => ConVar.Server.rejoin_delay.ToString();
		val.SetOveride = delegate(string str)
		{
			ConVar.Server.rejoin_delay = StringExtensions.ToInt(str, 0);
		};
		array[1053] = val;
		val = new Command();
		val.Name = "reportsserverendpoint";
		val.Parent = "server";
		val.FullName = "server.reportsserverendpoint";
		val.ServerAdmin = true;
		val.Saved = true;
		val.Description = "HTTP API endpoint for receiving F7 reports";
		val.Variable = true;
		val.GetOveride = () => ConVar.Server.reportsServerEndpoint ?? "";
		val.SetOveride = delegate(string str)
		{
			ConVar.Server.reportsServerEndpoint = str;
		};
		array[1054] = val;
		val = new Command();
		val.Name = "reportsserverendpointkey";
		val.Parent = "server";
		val.FullName = "server.reportsserverendpointkey";
		val.ServerAdmin = true;
		val.Saved = true;
		val.Description = "If set, this key will be included with any reports sent via reportsServerEndpoint (for validation)";
		val.Variable = true;
		val.GetOveride = () => ConVar.Server.reportsServerEndpointKey ?? "";
		val.SetOveride = delegate(string str)
		{
			ConVar.Server.reportsServerEndpointKey = str;
		};
		array[1055] = val;
		val = new Command();
		val.Name = "resetserveremoji";
		val.Parent = "server";
		val.FullName = "server.resetserveremoji";
		val.ServerAdmin = true;
		val.Description = "Rescans the serveremoji folder, note that clients will need to reconnect to get the latest emoji";
		val.Variable = false;
		val.Call = delegate
		{
			ConVar.Server.ResetServerEmoji();
		};
		array[1056] = val;
		val = new Command();
		val.Name = "respawnatdeathposition";
		val.Parent = "server";
		val.FullName = "server.respawnatdeathposition";
		val.ServerAdmin = true;
		val.Description = "If a player presses the respawn button, respawn at their death location (for trailer filming)";
		val.Variable = true;
		val.GetOveride = () => ConVar.Server.respawnAtDeathPosition.ToString();
		val.SetOveride = delegate(string str)
		{
			ConVar.Server.respawnAtDeathPosition = StringExtensions.ToBool(str);
		};
		array[1057] = val;
		val = new Command();
		val.Name = "respawnresetrange";
		val.Parent = "server";
		val.FullName = "server.respawnresetrange";
		val.ServerAdmin = true;
		val.Variable = true;
		val.GetOveride = () => ConVar.Server.respawnresetrange.ToString();
		val.SetOveride = delegate(string str)
		{
			ConVar.Server.respawnresetrange = StringExtensions.ToFloat(str, 0f);
		};
		array[1058] = val;
		val = new Command();
		val.Name = "respawnwithloadout";
		val.Parent = "server";
		val.FullName = "server.respawnwithloadout";
		val.ServerAdmin = true;
		val.Description = "When a player respawns give them the loadout assigned to client.RespawnLoadout (created with inventory.saveloadout)";
		val.Variable = true;
		val.GetOveride = () => ConVar.Server.respawnWithLoadout.ToString();
		val.SetOveride = delegate(string str)
		{
			ConVar.Server.respawnWithLoadout = StringExtensions.ToBool(str);
		};
		array[1059] = val;
		val = new Command();
		val.Name = "rewounddelay";
		val.Parent = "server";
		val.FullName = "server.rewounddelay";
		val.ServerAdmin = true;
		val.Saved = true;
		val.Variable = true;
		val.GetOveride = () => ConVar.Server.rewounddelay.ToString();
		val.SetOveride = delegate(string str)
		{
			ConVar.Server.rewounddelay = StringExtensions.ToFloat(str, 0f);
		};
		array[1060] = val;
		val = new Command();
		val.Name = "rpclog";
		val.Parent = "server";
		val.FullName = "server.rpclog";
		val.ServerAdmin = true;
		val.Variable = false;
		val.Call = delegate(Arg arg)
		{
			string text24 = ConVar.Server.rpclog(arg);
			arg.ReplyWithObject((object)text24);
		};
		array[1061] = val;
		val = new Command();
		val.Name = "rpclog_enabled";
		val.Parent = "server";
		val.FullName = "server.rpclog_enabled";
		val.ServerAdmin = true;
		val.Variable = true;
		val.GetOveride = () => ConVar.Server.rpclog_enabled.ToString();
		val.SetOveride = delegate(string str)
		{
			ConVar.Server.rpclog_enabled = StringExtensions.ToBool(str);
		};
		array[1062] = val;
		val = new Command();
		val.Name = "salt";
		val.Parent = "server";
		val.FullName = "server.salt";
		val.ServerAdmin = true;
		val.Variable = true;
		val.GetOveride = () => ConVar.Server.salt.ToString();
		val.SetOveride = delegate(string str)
		{
			ConVar.Server.salt = StringExtensions.ToInt(str, 0);
		};
		array[1063] = val;
		val = new Command();
		val.Name = "save";
		val.Parent = "server";
		val.FullName = "server.save";
		val.ServerAdmin = true;
		val.Description = "Force save the current game";
		val.Variable = false;
		val.Call = delegate(Arg arg)
		{
			ConVar.Server.save(arg);
		};
		array[1064] = val;
		val = new Command();
		val.Name = "savebackupcount";
		val.Parent = "server";
		val.FullName = "server.savebackupcount";
		val.ServerAdmin = true;
		val.Saved = true;
		val.ShowInAdminUI = true;
		val.Variable = true;
		val.GetOveride = () => ConVar.Server.saveBackupCount.ToString();
		val.SetOveride = delegate(string str)
		{
			ConVar.Server.saveBackupCount = StringExtensions.ToInt(str, 0);
		};
		array[1065] = val;
		val = new Command();
		val.Name = "savecachesize";
		val.Parent = "server";
		val.FullName = "server.savecachesize";
		val.ServerAdmin = true;
		val.Variable = true;
		val.GetOveride = () => ConVar.Server.savecachesize.ToString();
		val.SetOveride = delegate(string str)
		{
			ConVar.Server.savecachesize = StringExtensions.ToInt(str, 0);
		};
		array[1066] = val;
		val = new Command();
		val.Name = "saveinterval";
		val.Parent = "server";
		val.FullName = "server.saveinterval";
		val.ServerAdmin = true;
		val.Variable = true;
		val.GetOveride = () => ConVar.Server.saveinterval.ToString();
		val.SetOveride = delegate(string str)
		{
			ConVar.Server.saveinterval = StringExtensions.ToInt(str, 0);
		};
		array[1067] = val;
		val = new Command();
		val.Name = "schematime";
		val.Parent = "server";
		val.FullName = "server.schematime";
		val.ServerAdmin = true;
		val.Variable = true;
		val.GetOveride = () => ConVar.Server.schematime.ToString();
		val.SetOveride = delegate(string str)
		{
			ConVar.Server.schematime = StringExtensions.ToFloat(str, 0f);
		};
		array[1068] = val;
		val = new Command();
		val.Name = "secure";
		val.Parent = "server";
		val.FullName = "server.secure";
		val.ServerAdmin = true;
		val.Variable = true;
		val.GetOveride = () => ConVar.Server.secure.ToString();
		val.SetOveride = delegate(string str)
		{
			ConVar.Server.secure = StringExtensions.ToBool(str);
		};
		array[1069] = val;
		val = new Command();
		val.Name = "seed";
		val.Parent = "server";
		val.FullName = "server.seed";
		val.ServerAdmin = true;
		val.Variable = true;
		val.GetOveride = () => ConVar.Server.seed.ToString();
		val.SetOveride = delegate(string str)
		{
			ConVar.Server.seed = StringExtensions.ToInt(str, 0);
		};
		array[1070] = val;
		val = new Command();
		val.Name = "sendnetworkupdate";
		val.Parent = "server";
		val.FullName = "server.sendnetworkupdate";
		val.ServerAdmin = true;
		val.Description = "Send network update for all players";
		val.Variable = false;
		val.Call = delegate(Arg arg)
		{
			ConVar.Server.sendnetworkupdate(arg);
		};
		array[1071] = val;
		val = new Command();
		val.Name = "server_id";
		val.Parent = "server";
		val.FullName = "server.server_id";
		val.ServerAdmin = true;
		val.Saved = true;
		val.Variable = true;
		val.GetOveride = () => ConVar.Server.server_id ?? "";
		val.SetOveride = delegate(string str)
		{
			ConVar.Server.server_id = str;
		};
		array[1072] = val;
		val = new Command();
		val.Name = "setshowholstereditems";
		val.Parent = "server";
		val.FullName = "server.setshowholstereditems";
		val.ServerAdmin = true;
		val.Description = "Show holstered items on player bodies";
		val.Variable = false;
		val.Call = delegate(Arg arg)
		{
			ConVar.Server.setshowholstereditems(arg);
		};
		array[1073] = val;
		val = new Command();
		val.Name = "showholstereditems";
		val.Parent = "server";
		val.FullName = "server.showholstereditems";
		val.ServerAdmin = true;
		val.Saved = true;
		val.Variable = true;
		val.GetOveride = () => ConVar.Server.showHolsteredItems.ToString();
		val.SetOveride = delegate(string str)
		{
			ConVar.Server.showHolsteredItems = StringExtensions.ToBool(str);
		};
		array[1074] = val;
		val = new Command();
		val.Name = "skipdeathscreenfade";
		val.Parent = "server";
		val.FullName = "server.skipdeathscreenfade";
		val.ServerAdmin = true;
		val.ClientAdmin = true;
		val.Client = true;
		val.Description = "Skip death screen fade";
		val.Replicated = true;
		val.Variable = true;
		val.GetOveride = () => ConVar.Server.skipDeathScreenFade.ToString();
		val.SetOveride = delegate(string str)
		{
			ConVar.Server.skipDeathScreenFade = StringExtensions.ToBool(str);
		};
		val.Default = "False";
		array[1075] = val;
		val = new Command();
		val.Name = "snapshot";
		val.Parent = "server";
		val.FullName = "server.snapshot";
		val.ServerAdmin = true;
		val.Description = "This sends a snapshot of all the entities in the client's pvs. This is mostly redundant, but we request this when the client starts recording a demo.. so they get all the information.";
		val.Variable = false;
		val.Call = delegate(Arg arg)
		{
			ConVar.Server.snapshot(arg);
		};
		array[1076] = val;
		val = new Command();
		val.Name = "spawnvinetrees";
		val.Parent = "server";
		val.FullName = "server.spawnvinetrees";
		val.ServerAdmin = true;
		val.Saved = true;
		val.Variable = true;
		val.GetOveride = () => ConVar.Server.spawnVineTrees.ToString();
		val.SetOveride = delegate(string str)
		{
			ConVar.Server.spawnVineTrees = StringExtensions.ToBool(str);
		};
		array[1077] = val;
		val = new Command();
		val.Name = "sprinklereyeheightoffset";
		val.Parent = "server";
		val.FullName = "server.sprinklereyeheightoffset";
		val.ServerAdmin = true;
		val.Saved = true;
		val.Variable = true;
		val.GetOveride = () => ConVar.Server.sprinklerEyeHeightOffset.ToString();
		val.SetOveride = delegate(string str)
		{
			ConVar.Server.sprinklerEyeHeightOffset = StringExtensions.ToFloat(str, 0f);
		};
		array[1078] = val;
		val = new Command();
		val.Name = "sprinklerradius";
		val.Parent = "server";
		val.FullName = "server.sprinklerradius";
		val.ServerAdmin = true;
		val.ClientAdmin = true;
		val.Client = true;
		val.Saved = true;
		val.Replicated = true;
		val.Variable = true;
		val.GetOveride = () => ConVar.Server.sprinklerRadius.ToString();
		val.SetOveride = delegate(string str)
		{
			ConVar.Server.sprinklerRadius = StringExtensions.ToFloat(str, 0f);
		};
		val.Default = "3";
		array[1079] = val;
		val = new Command();
		val.Name = "stability";
		val.Parent = "server";
		val.FullName = "server.stability";
		val.ServerAdmin = true;
		val.Variable = true;
		val.GetOveride = () => ConVar.Server.stability.ToString();
		val.SetOveride = delegate(string str)
		{
			ConVar.Server.stability = StringExtensions.ToBool(str);
		};
		array[1080] = val;
		val = new Command();
		val.Name = "start";
		val.Parent = "server";
		val.FullName = "server.start";
		val.ServerAdmin = true;
		val.Description = "Starts a server";
		val.Variable = false;
		val.Call = delegate(Arg arg)
		{
			ConVar.Server.start(arg);
		};
		array[1081] = val;
		val = new Command();
		val.Name = "statbackup";
		val.Parent = "server";
		val.FullName = "server.statbackup";
		val.ServerAdmin = true;
		val.Variable = true;
		val.GetOveride = () => ConVar.Server.statBackup.ToString();
		val.SetOveride = delegate(string str)
		{
			ConVar.Server.statBackup = StringExtensions.ToBool(str);
		};
		array[1082] = val;
		val = new Command();
		val.Name = "stats";
		val.Parent = "server";
		val.FullName = "server.stats";
		val.ServerAdmin = true;
		val.Variable = true;
		val.GetOveride = () => ConVar.Server.stats.ToString();
		val.SetOveride = delegate(string str)
		{
			ConVar.Server.stats = StringExtensions.ToBool(str);
		};
		array[1083] = val;
		val = new Command();
		val.Name = "stop";
		val.Parent = "server";
		val.FullName = "server.stop";
		val.ServerAdmin = true;
		val.Description = "Stops a server";
		val.Variable = false;
		val.Call = delegate(Arg arg)
		{
			ConVar.Server.stop(arg);
		};
		array[1084] = val;
		val = new Command();
		val.Name = "strictauth_eac";
		val.Parent = "server";
		val.FullName = "server.strictauth_eac";
		val.ServerAdmin = true;
		val.Variable = true;
		val.GetOveride = () => ConVar.Server.strictauth_eac.ToString();
		val.SetOveride = delegate(string str)
		{
			ConVar.Server.strictauth_eac = StringExtensions.ToBool(str);
		};
		array[1085] = val;
		val = new Command();
		val.Name = "strictauth_steam";
		val.Parent = "server";
		val.FullName = "server.strictauth_steam";
		val.ServerAdmin = true;
		val.Variable = true;
		val.GetOveride = () => ConVar.Server.strictauth_steam.ToString();
		val.SetOveride = delegate(string str)
		{
			ConVar.Server.strictauth_steam = StringExtensions.ToBool(str);
		};
		array[1086] = val;
		val = new Command();
		val.Name = "tags";
		val.Parent = "server";
		val.FullName = "server.tags";
		val.ServerAdmin = true;
		val.Saved = true;
		val.Description = "Comma-separated server browser tag values (see wiki)";
		val.ShowInAdminUI = true;
		val.Variable = true;
		val.GetOveride = () => ConVar.Server.tags ?? "";
		val.SetOveride = delegate(string str)
		{
			ConVar.Server.tags = str;
		};
		array[1087] = val;
		val = new Command();
		val.Name = "tickrate";
		val.Parent = "server";
		val.FullName = "server.tickrate";
		val.ServerAdmin = true;
		val.Variable = true;
		val.GetOveride = () => ConVar.Server.tickrate.ToString();
		val.SetOveride = delegate(string str)
		{
			ConVar.Server.tickrate = StringExtensions.ToInt(str, 0);
		};
		array[1088] = val;
		val = new Command();
		val.Name = "tutorialenabled";
		val.Parent = "server";
		val.FullName = "server.tutorialenabled";
		val.ServerAdmin = true;
		val.ClientAdmin = true;
		val.Client = true;
		val.Saved = true;
		val.Description = "Controls whether the tutorial is enabled on this server";
		val.Replicated = true;
		val.ShowInAdminUI = true;
		val.Variable = true;
		val.GetOveride = () => ConVar.Server.tutorialEnabled.ToString();
		val.SetOveride = delegate(string str)
		{
			ConVar.Server.tutorialEnabled = StringExtensions.ToBool(str);
		};
		val.Default = "false";
		array[1089] = val;
		val = new Command();
		val.Name = "updatebatch";
		val.Parent = "server";
		val.FullName = "server.updatebatch";
		val.ServerAdmin = true;
		val.Variable = true;
		val.GetOveride = () => ConVar.Server.updatebatch.ToString();
		val.SetOveride = delegate(string str)
		{
			ConVar.Server.updatebatch = StringExtensions.ToInt(str, 0);
		};
		array[1090] = val;
		val = new Command();
		val.Name = "updatebatchspawn";
		val.Parent = "server";
		val.FullName = "server.updatebatchspawn";
		val.ServerAdmin = true;
		val.Variable = true;
		val.GetOveride = () => ConVar.Server.updatebatchspawn.ToString();
		val.SetOveride = delegate(string str)
		{
			ConVar.Server.updatebatchspawn = StringExtensions.ToInt(str, 0);
		};
		array[1091] = val;
		val = new Command();
		val.Name = "url";
		val.Parent = "server";
		val.FullName = "server.url";
		val.ServerAdmin = true;
		val.ShowInAdminUI = true;
		val.Variable = true;
		val.GetOveride = () => ConVar.Server.url ?? "";
		val.SetOveride = delegate(string str)
		{
			ConVar.Server.url = str;
		};
		array[1092] = val;
		val = new Command();
		val.Name = "uselegacysprinklerloadprocess";
		val.Parent = "server";
		val.FullName = "server.uselegacysprinklerloadprocess";
		val.ServerAdmin = true;
		val.Saved = true;
		val.Variable = true;
		val.GetOveride = () => ConVar.Server.useLegacySprinklerLoadProcess.ToString();
		val.SetOveride = delegate(string str)
		{
			ConVar.Server.useLegacySprinklerLoadProcess = StringExtensions.ToBool(str);
		};
		array[1093] = val;
		val = new Command();
		val.Name = "uselegacyworkbenchinteraction";
		val.Parent = "server";
		val.FullName = "server.uselegacyworkbenchinteraction";
		val.ServerAdmin = true;
		val.ClientAdmin = true;
		val.Client = true;
		val.Description = "Opens a loot panel when interacting with a workbench instead of going straight into the tech tree. Designed for backwards compatibility with mods.";
		val.Replicated = true;
		val.Variable = true;
		val.GetOveride = () => ConVar.Server.useLegacyWorkbenchInteraction.ToString();
		val.SetOveride = delegate(string str)
		{
			ConVar.Server.useLegacyWorkbenchInteraction = StringExtensions.ToBool(str);
		};
		val.Default = "False";
		array[1094] = val;
		val = new Command();
		val.Name = "useminimumplantcondition";
		val.Parent = "server";
		val.FullName = "server.useminimumplantcondition";
		val.ServerAdmin = true;
		val.Variable = true;
		val.GetOveride = () => ConVar.Server.useMinimumPlantCondition.ToString();
		val.SetOveride = delegate(string str)
		{
			ConVar.Server.useMinimumPlantCondition = StringExtensions.ToBool(str);
		};
		array[1095] = val;
		val = new Command();
		val.Name = "useplayerupdatejobs";
		val.Parent = "server";
		val.FullName = "server.useplayerupdatejobs";
		val.ServerAdmin = true;
		val.Variable = true;
		val.GetOveride = () => ConVar.Server.UsePlayerUpdateJobs.ToString();
		val.SetOveride = delegate(string str)
		{
			ConVar.Server.UsePlayerUpdateJobs = StringExtensions.ToBool(str);
		};
		array[1096] = val;
		val = new Command();
		val.Name = "watercontainersleavewaterbehind";
		val.Parent = "server";
		val.FullName = "server.watercontainersleavewaterbehind";
		val.ServerAdmin = true;
		val.Saved = true;
		val.Description = "When transferring water, should containers keep 1 water behind. Enabling this should help performance if water IO is causing performance loss";
		val.Variable = true;
		val.GetOveride = () => ConVar.Server.waterContainersLeaveWaterBehind.ToString();
		val.SetOveride = delegate(string str)
		{
			ConVar.Server.waterContainersLeaveWaterBehind = StringExtensions.ToBool(str);
		};
		array[1097] = val;
		val = new Command();
		val.Name = "waterwellnpcsalesrefreshfrequency";
		val.Parent = "server";
		val.FullName = "server.waterwellnpcsalesrefreshfrequency";
		val.ServerAdmin = true;
		val.Description = "How often (in hours) the water well NPC's update their sell orders";
		val.Variable = true;
		val.GetOveride = () => ConVar.Server.waterWellNpcSalesRefreshFrequency.ToString();
		val.SetOveride = delegate(string str)
		{
			ConVar.Server.waterWellNpcSalesRefreshFrequency = StringExtensions.ToFloat(str, 0f);
		};
		array[1098] = val;
		val = new Command();
		val.Name = "workbench1taxrate";
		val.Parent = "server";
		val.FullName = "server.workbench1taxrate";
		val.ServerAdmin = true;
		val.ClientAdmin = true;
		val.Client = true;
		val.Saved = true;
		val.Description = "How much of a tax to apply to workbench T1 tech unlocks. 10 = additional 10% scrap cost";
		val.Replicated = true;
		val.Variable = true;
		val.GetOveride = () => ConVar.Server.workbench1TaxRate.ToString();
		val.SetOveride = delegate(string str)
		{
			ConVar.Server.workbench1TaxRate = StringExtensions.ToFloat(str, 0f);
		};
		val.Default = "0";
		array[1099] = val;
		val = new Command();
		val.Name = "workbench2taxrate";
		val.Parent = "server";
		val.FullName = "server.workbench2taxrate";
		val.ServerAdmin = true;
		val.ClientAdmin = true;
		val.Client = true;
		val.Saved = true;
		val.Description = "How much of a tax to apply to workbench T2 tech unlocks. 10 = additional 10% scrap cost";
		val.Replicated = true;
		val.Variable = true;
		val.GetOveride = () => ConVar.Server.workbench2TaxRate.ToString();
		val.SetOveride = delegate(string str)
		{
			ConVar.Server.workbench2TaxRate = StringExtensions.ToFloat(str, 0f);
		};
		val.Default = "10";
		array[1100] = val;
		val = new Command();
		val.Name = "workbench3taxrate";
		val.Parent = "server";
		val.FullName = "server.workbench3taxrate";
		val.ServerAdmin = true;
		val.ClientAdmin = true;
		val.Client = true;
		val.Saved = true;
		val.Description = "How much of a tax to apply to workbench  T3tech unlocks. 10 = additional 10% scrap cost";
		val.Replicated = true;
		val.Variable = true;
		val.GetOveride = () => ConVar.Server.workbench3TaxRate.ToString();
		val.SetOveride = delegate(string str)
		{
			ConVar.Server.workbench3TaxRate = StringExtensions.ToFloat(str, 0f);
		};
		val.Default = "20";
		array[1101] = val;
		val = new Command();
		val.Name = "worldsize";
		val.Parent = "server";
		val.FullName = "server.worldsize";
		val.ServerAdmin = true;
		val.Variable = true;
		val.GetOveride = () => ConVar.Server.worldsize.ToString();
		val.SetOveride = delegate(string str)
		{
			ConVar.Server.worldsize = StringExtensions.ToInt(str, 0);
		};
		array[1102] = val;
		val = new Command();
		val.Name = "woundedmaxfoodandwaterbonus";
		val.Parent = "server";
		val.FullName = "server.woundedmaxfoodandwaterbonus";
		val.ServerAdmin = true;
		val.Saved = true;
		val.Description = "Maximum percent chance added to base wounded/incapacitated recovery chance, based on the player's food and water level";
		val.Variable = true;
		val.GetOveride = () => ConVar.Server.woundedmaxfoodandwaterbonus.ToString();
		val.SetOveride = delegate(string str)
		{
			ConVar.Server.woundedmaxfoodandwaterbonus = StringExtensions.ToFloat(str, 0f);
		};
		array[1103] = val;
		val = new Command();
		val.Name = "woundedrecoverchance";
		val.Parent = "server";
		val.FullName = "server.woundedrecoverchance";
		val.ServerAdmin = true;
		val.Saved = true;
		val.Description = "Base chance of recovery after crawling wounded state";
		val.Variable = true;
		val.GetOveride = () => ConVar.Server.woundedrecoverchance.ToString();
		val.SetOveride = delegate(string str)
		{
			ConVar.Server.woundedrecoverchance = StringExtensions.ToFloat(str, 0f);
		};
		array[1104] = val;
		val = new Command();
		val.Name = "woundingenabled";
		val.Parent = "server";
		val.FullName = "server.woundingenabled";
		val.ServerAdmin = true;
		val.Saved = true;
		val.Description = "Can players be wounded after receiving fatal damage";
		val.Variable = true;
		val.GetOveride = () => ConVar.Server.woundingenabled.ToString();
		val.SetOveride = delegate(string str)
		{
			ConVar.Server.woundingenabled = StringExtensions.ToBool(str);
		};
		array[1105] = val;
		val = new Command();
		val.Name = "writecfg";
		val.Parent = "server";
		val.FullName = "server.writecfg";
		val.ServerAdmin = true;
		val.Description = "Writes config files";
		val.Variable = false;
		val.Call = delegate(Arg arg)
		{
			ConVar.Server.writecfg(arg);
		};
		array[1106] = val;
		val = new Command();
		val.Name = "cargoshipdockingtest";
		val.Parent = "spawn";
		val.FullName = "spawn.cargoshipdockingtest";
		val.ServerAdmin = true;
		val.Variable = false;
		val.Call = delegate(Arg arg)
		{
			Spawn.cargoshipdockingtest(arg);
		};
		array[1107] = val;
		val = new Command();
		val.Name = "cargoshipevent";
		val.Parent = "spawn";
		val.FullName = "spawn.cargoshipevent";
		val.ServerAdmin = true;
		val.Variable = false;
		val.Call = delegate(Arg arg)
		{
			Spawn.cargoshipevent(arg);
		};
		array[1108] = val;
		val = new Command();
		val.Name = "ch47event";
		val.Parent = "spawn";
		val.FullName = "spawn.ch47event";
		val.ServerAdmin = true;
		val.Variable = false;
		val.Call = delegate(Arg arg)
		{
			Spawn.ch47event(arg);
		};
		array[1109] = val;
		val = new Command();
		val.Name = "delete_all_populations";
		val.Parent = "spawn";
		val.FullName = "spawn.delete_all_populations";
		val.ServerAdmin = true;
		val.Variable = false;
		val.Call = delegate(Arg arg)
		{
			Spawn.delete_all_populations(arg);
		};
		array[1110] = val;
		val = new Command();
		val.Name = "delete_populations";
		val.Parent = "spawn";
		val.FullName = "spawn.delete_populations";
		val.ServerAdmin = true;
		val.Variable = false;
		val.Call = delegate(Arg arg)
		{
			Spawn.delete_populations(arg);
		};
		array[1111] = val;
		val = new Command();
		val.Name = "fill_groups";
		val.Parent = "spawn";
		val.FullName = "spawn.fill_groups";
		val.ServerAdmin = true;
		val.Variable = false;
		val.Call = delegate(Arg arg)
		{
			Spawn.fill_groups(arg);
		};
		array[1112] = val;
		val = new Command();
		val.Name = "fill_individuals";
		val.Parent = "spawn";
		val.FullName = "spawn.fill_individuals";
		val.ServerAdmin = true;
		val.Variable = false;
		val.Call = delegate(Arg arg)
		{
			Spawn.fill_individuals(arg);
		};
		array[1113] = val;
		val = new Command();
		val.Name = "fill_populations";
		val.Parent = "spawn";
		val.FullName = "spawn.fill_populations";
		val.ServerAdmin = true;
		val.Variable = false;
		val.Call = delegate(Arg arg)
		{
			Spawn.fill_populations(arg);
		};
		array[1114] = val;
		val = new Command();
		val.Name = "max_density";
		val.Parent = "spawn";
		val.FullName = "spawn.max_density";
		val.ServerAdmin = true;
		val.Variable = true;
		val.GetOveride = () => Spawn.max_density.ToString();
		val.SetOveride = delegate(string str)
		{
			Spawn.max_density = StringExtensions.ToFloat(str, 0f);
		};
		array[1115] = val;
		val = new Command();
		val.Name = "max_rate";
		val.Parent = "spawn";
		val.FullName = "spawn.max_rate";
		val.ServerAdmin = true;
		val.Variable = true;
		val.GetOveride = () => Spawn.max_rate.ToString();
		val.SetOveride = delegate(string str)
		{
			Spawn.max_rate = StringExtensions.ToFloat(str, 0f);
		};
		array[1116] = val;
		val = new Command();
		val.Name = "min_density";
		val.Parent = "spawn";
		val.FullName = "spawn.min_density";
		val.ServerAdmin = true;
		val.Variable = true;
		val.GetOveride = () => Spawn.min_density.ToString();
		val.SetOveride = delegate(string str)
		{
			Spawn.min_density = StringExtensions.ToFloat(str, 0f);
		};
		array[1117] = val;
		val = new Command();
		val.Name = "min_rate";
		val.Parent = "spawn";
		val.FullName = "spawn.min_rate";
		val.ServerAdmin = true;
		val.Variable = true;
		val.GetOveride = () => Spawn.min_rate.ToString();
		val.SetOveride = delegate(string str)
		{
			Spawn.min_rate = StringExtensions.ToFloat(str, 0f);
		};
		array[1118] = val;
		val = new Command();
		val.Name = "player_base";
		val.Parent = "spawn";
		val.FullName = "spawn.player_base";
		val.ServerAdmin = true;
		val.Variable = true;
		val.GetOveride = () => Spawn.player_base.ToString();
		val.SetOveride = delegate(string str)
		{
			Spawn.player_base = StringExtensions.ToFloat(str, 0f);
		};
		array[1119] = val;
		val = new Command();
		val.Name = "player_scale";
		val.Parent = "spawn";
		val.FullName = "spawn.player_scale";
		val.ServerAdmin = true;
		val.Variable = true;
		val.GetOveride = () => Spawn.player_scale.ToString();
		val.SetOveride = delegate(string str)
		{
			Spawn.player_scale = StringExtensions.ToFloat(str, 0f);
		};
		array[1120] = val;
		val = new Command();
		val.Name = "report";
		val.Parent = "spawn";
		val.FullName = "spawn.report";
		val.ServerAdmin = true;
		val.Variable = false;
		val.Call = delegate(Arg arg)
		{
			Spawn.report(arg);
		};
		array[1121] = val;
		val = new Command();
		val.Name = "respawn_groups";
		val.Parent = "spawn";
		val.FullName = "spawn.respawn_groups";
		val.ServerAdmin = true;
		val.Variable = true;
		val.GetOveride = () => Spawn.respawn_groups.ToString();
		val.SetOveride = delegate(string str)
		{
			Spawn.respawn_groups = StringExtensions.ToBool(str);
		};
		array[1122] = val;
		val = new Command();
		val.Name = "respawn_individuals";
		val.Parent = "spawn";
		val.FullName = "spawn.respawn_individuals";
		val.ServerAdmin = true;
		val.Variable = true;
		val.GetOveride = () => Spawn.respawn_individuals.ToString();
		val.SetOveride = delegate(string str)
		{
			Spawn.respawn_individuals = StringExtensions.ToBool(str);
		};
		array[1123] = val;
		val = new Command();
		val.Name = "respawn_populations";
		val.Parent = "spawn";
		val.FullName = "spawn.respawn_populations";
		val.ServerAdmin = true;
		val.Variable = true;
		val.GetOveride = () => Spawn.respawn_populations.ToString();
		val.SetOveride = delegate(string str)
		{
			Spawn.respawn_populations = StringExtensions.ToBool(str);
		};
		array[1124] = val;
		val = new Command();
		val.Name = "scalars";
		val.Parent = "spawn";
		val.FullName = "spawn.scalars";
		val.ServerAdmin = true;
		val.Variable = false;
		val.Call = delegate(Arg arg)
		{
			Spawn.scalars(arg);
		};
		array[1125] = val;
		val = new Command();
		val.Name = "simulate_loot";
		val.Parent = "spawn";
		val.FullName = "spawn.simulate_loot";
		val.ServerAdmin = true;
		val.Variable = false;
		val.Call = delegate(Arg arg)
		{
			Spawn.simulate_loot(arg);
		};
		array[1126] = val;
		val = new Command();
		val.Name = "svshielddummy";
		val.Parent = "spawn";
		val.FullName = "spawn.svshielddummy";
		val.ServerAdmin = true;
		val.Variable = false;
		val.Call = delegate(Arg arg)
		{
			Spawn.svShieldDummy(arg);
		};
		array[1127] = val;
		val = new Command();
		val.Name = "tick_individuals";
		val.Parent = "spawn";
		val.FullName = "spawn.tick_individuals";
		val.ServerAdmin = true;
		val.Variable = true;
		val.GetOveride = () => Spawn.tick_individuals.ToString();
		val.SetOveride = delegate(string str)
		{
			Spawn.tick_individuals = StringExtensions.ToFloat(str, 0f);
		};
		array[1128] = val;
		val = new Command();
		val.Name = "tick_populations";
		val.Parent = "spawn";
		val.FullName = "spawn.tick_populations";
		val.ServerAdmin = true;
		val.Variable = true;
		val.GetOveride = () => Spawn.tick_populations.ToString();
		val.SetOveride = delegate(string str)
		{
			Spawn.tick_populations = StringExtensions.ToFloat(str, 0f);
		};
		array[1129] = val;
		val = new Command();
		val.Name = "accuracy";
		val.Parent = "stability";
		val.FullName = "stability.accuracy";
		val.ServerAdmin = true;
		val.Variable = true;
		val.GetOveride = () => Stability.accuracy.ToString();
		val.SetOveride = delegate(string str)
		{
			Stability.accuracy = StringExtensions.ToFloat(str, 0f);
		};
		array[1130] = val;
		val = new Command();
		val.Name = "collapse";
		val.Parent = "stability";
		val.FullName = "stability.collapse";
		val.ServerAdmin = true;
		val.Variable = true;
		val.GetOveride = () => Stability.collapse.ToString();
		val.SetOveride = delegate(string str)
		{
			Stability.collapse = StringExtensions.ToFloat(str, 0f);
		};
		array[1131] = val;
		val = new Command();
		val.Name = "refresh_stability";
		val.Parent = "stability";
		val.FullName = "stability.refresh_stability";
		val.ServerAdmin = true;
		val.Variable = false;
		val.Call = delegate(Arg arg)
		{
			Stability.refresh_stability(arg);
		};
		array[1132] = val;
		val = new Command();
		val.Name = "stabilityqueue";
		val.Parent = "stability";
		val.FullName = "stability.stabilityqueue";
		val.ServerAdmin = true;
		val.Variable = true;
		val.GetOveride = () => Stability.stabilityqueue.ToString();
		val.SetOveride = delegate(string str)
		{
			Stability.stabilityqueue = StringExtensions.ToFloat(str, 0f);
		};
		array[1133] = val;
		val = new Command();
		val.Name = "strikes";
		val.Parent = "stability";
		val.FullName = "stability.strikes";
		val.ServerAdmin = true;
		val.Variable = true;
		val.GetOveride = () => Stability.strikes.ToString();
		val.SetOveride = delegate(string str)
		{
			Stability.strikes = StringExtensions.ToInt(str, 0);
		};
		array[1134] = val;
		val = new Command();
		val.Name = "surroundingsqueue";
		val.Parent = "stability";
		val.FullName = "stability.surroundingsqueue";
		val.ServerAdmin = true;
		val.Variable = true;
		val.GetOveride = () => Stability.surroundingsqueue.ToString();
		val.SetOveride = delegate(string str)
		{
			Stability.surroundingsqueue = StringExtensions.ToFloat(str, 0f);
		};
		array[1135] = val;
		val = new Command();
		val.Name = "verbose";
		val.Parent = "stability";
		val.FullName = "stability.verbose";
		val.ServerAdmin = true;
		val.Variable = true;
		val.GetOveride = () => Stability.verbose.ToString();
		val.SetOveride = delegate(string str)
		{
			Stability.verbose = StringExtensions.ToInt(str, 0);
		};
		array[1136] = val;
		val = new Command();
		val.Name = "server_allow_steam_nicknames";
		val.Parent = "steam";
		val.FullName = "steam.server_allow_steam_nicknames";
		val.ServerAdmin = true;
		val.ClientAdmin = true;
		val.Client = true;
		val.Saved = true;
		val.Replicated = true;
		val.ShowInAdminUI = true;
		val.Variable = true;
		val.GetOveride = () => Steam.server_allow_steam_nicknames.ToString();
		val.SetOveride = delegate(string str)
		{
			Steam.server_allow_steam_nicknames = StringExtensions.ToBool(str);
		};
		val.Default = "True";
		array[1137] = val;
		val = new Command();
		val.Name = "call";
		val.Parent = "supply";
		val.FullName = "supply.call";
		val.ServerAdmin = true;
		val.Variable = false;
		val.Call = delegate(Arg arg)
		{
			Supply.call(arg);
		};
		array[1138] = val;
		val = new Command();
		val.Name = "drop";
		val.Parent = "supply";
		val.FullName = "supply.drop";
		val.ServerAdmin = true;
		val.Variable = false;
		val.Call = delegate(Arg arg)
		{
			Supply.drop(arg);
		};
		array[1139] = val;
		val = new Command();
		val.Name = "cpu_affinity";
		val.Parent = "system";
		val.FullName = "system.cpu_affinity";
		val.ServerAdmin = true;
		val.Variable = false;
		val.Call = delegate(Arg arg)
		{
			SystemCommands.cpu_affinity(arg);
		};
		array[1140] = val;
		val = new Command();
		val.Name = "cpu_priority";
		val.Parent = "system";
		val.FullName = "system.cpu_priority";
		val.ServerAdmin = true;
		val.Variable = false;
		val.Call = delegate(Arg arg)
		{
			SystemCommands.cpu_priority(arg);
		};
		array[1141] = val;
		val = new Command();
		val.Name = "cl_maxstepsperframe";
		val.Parent = "time";
		val.FullName = "time.cl_maxstepsperframe";
		val.ServerAdmin = true;
		val.ClientAdmin = true;
		val.Client = true;
		val.Description = "The maximum amount physics ticks per frame on clients. If things are taking too long, time slows down";
		val.Replicated = true;
		val.Variable = true;
		val.GetOveride = () => Time.cl_maxstepsperframe.ToString();
		val.SetOveride = delegate(string str)
		{
			Time.cl_maxstepsperframe = StringExtensions.ToInt(str, 0);
		};
		val.Default = "2";
		array[1142] = val;
		val = new Command();
		val.Name = "cl_steps";
		val.Parent = "time";
		val.FullName = "time.cl_steps";
		val.ServerAdmin = true;
		val.ClientAdmin = true;
		val.Client = true;
		val.Description = "Desired physics ticks per second on clients";
		val.Replicated = true;
		val.Variable = true;
		val.GetOveride = () => Time.cl_steps.ToString();
		val.SetOveride = delegate(string str)
		{
			Time.cl_steps = StringExtensions.ToInt(str, 0);
		};
		val.Default = "32";
		array[1143] = val;
		val = new Command();
		val.Name = "pausewhileloading";
		val.Parent = "time";
		val.FullName = "time.pausewhileloading";
		val.ServerAdmin = true;
		val.Variable = true;
		val.GetOveride = () => Time.pausewhileloading.ToString();
		val.SetOveride = delegate(string str)
		{
			Time.pausewhileloading = StringExtensions.ToBool(str);
		};
		array[1144] = val;
		val = new Command();
		val.Name = "sv_maxstepsperframe";
		val.Parent = "time";
		val.FullName = "time.sv_maxstepsperframe";
		val.ServerAdmin = true;
		val.Description = "The maximum amount physics ticks per frame on the server. If things are taking too long, time slows down";
		val.Variable = true;
		val.GetOveride = () => Time.sv_maxstepsperframe.ToString();
		val.SetOveride = delegate(string str)
		{
			Time.sv_maxstepsperframe = StringExtensions.ToInt(str, 0);
		};
		array[1145] = val;
		val = new Command();
		val.Name = "sv_steps";
		val.Parent = "time";
		val.FullName = "time.sv_steps";
		val.ServerAdmin = true;
		val.Description = "Desired physics ticks per second on the server";
		val.Variable = true;
		val.GetOveride = () => Time.sv_steps.ToString();
		val.SetOveride = delegate(string str)
		{
			Time.sv_steps = StringExtensions.ToInt(str, 0);
		};
		array[1146] = val;
		val = new Command();
		val.Name = "timescale";
		val.Parent = "time";
		val.FullName = "time.timescale";
		val.ServerAdmin = true;
		val.Variable = true;
		val.GetOveride = () => Time.timescale.ToString();
		val.SetOveride = delegate(string str)
		{
			Time.timescale = StringExtensions.ToFloat(str, 0f);
		};
		array[1147] = val;
		val = new Command();
		val.Name = "global_broadcast";
		val.Parent = "tree";
		val.FullName = "tree.global_broadcast";
		val.ServerAdmin = true;
		val.Variable = true;
		val.GetOveride = () => Tree.global_broadcast.ToString();
		val.SetOveride = delegate(string str)
		{
			Tree.global_broadcast = StringExtensions.ToBool(str);
		};
		array[1148] = val;
		val = new Command();
		val.Name = "simplified_collider";
		val.Parent = "tree";
		val.FullName = "tree.simplified_collider";
		val.ServerAdmin = true;
		val.Variable = true;
		val.GetOveride = () => Tree.simplified_collider.ToString();
		val.SetOveride = delegate(string str)
		{
			Tree.simplified_collider = StringExtensions.ToBool(str);
		};
		array[1149] = val;
		val = new Command();
		val.Name = "autohover";
		val.Parent = "vehicle";
		val.FullName = "vehicle.autohover";
		val.ServerAdmin = true;
		val.Variable = false;
		val.Call = delegate(Arg arg)
		{
			vehicle.autohover(arg);
		};
		array[1150] = val;
		val = new Command();
		val.Name = "boat_corpse_seconds";
		val.Parent = "vehicle";
		val.FullName = "vehicle.boat_corpse_seconds";
		val.ServerAdmin = true;
		val.Variable = true;
		val.GetOveride = () => vehicle.boat_corpse_seconds.ToString();
		val.SetOveride = delegate(string str)
		{
			vehicle.boat_corpse_seconds = StringExtensions.ToFloat(str, 0f);
		};
		array[1151] = val;
		val = new Command();
		val.Name = "boatdriftinfo";
		val.Parent = "vehicle";
		val.FullName = "vehicle.boatdriftinfo";
		val.ServerAdmin = true;
		val.Description = "Print out boat drift status for all boats";
		val.Variable = false;
		val.Call = delegate(Arg arg)
		{
			vehicle.boatdriftinfo(arg);
		};
		array[1152] = val;
		val = new Command();
		val.Name = "carwrecks";
		val.Parent = "vehicle";
		val.FullName = "vehicle.carwrecks";
		val.ServerAdmin = true;
		val.Description = "Determines whether modular cars turn into wrecks when destroyed, or just immediately gib. Default: true";
		val.Variable = true;
		val.GetOveride = () => vehicle.carwrecks.ToString();
		val.SetOveride = delegate(string str)
		{
			vehicle.carwrecks = StringExtensions.ToBool(str);
		};
		array[1153] = val;
		val = new Command();
		val.Name = "cinematictrains";
		val.Parent = "vehicle";
		val.FullName = "vehicle.cinematictrains";
		val.ServerAdmin = true;
		val.Description = "If true, trains always explode when destroyed, and hitting a barrier always destroys the train immediately. Default: false";
		val.Variable = true;
		val.GetOveride = () => vehicle.cinematictrains.ToString();
		val.SetOveride = delegate(string str)
		{
			vehicle.cinematictrains = StringExtensions.ToBool(str);
		};
		array[1154] = val;
		val = new Command();
		val.Name = "disable_wheels_when_sleeping";
		val.Parent = "vehicle";
		val.FullName = "vehicle.disable_wheels_when_sleeping";
		val.ServerAdmin = true;
		val.Variable = true;
		val.GetOveride = () => vehicle.disable_wheels_when_sleeping.ToString();
		val.SetOveride = delegate(string str)
		{
			vehicle.disable_wheels_when_sleeping = StringExtensions.ToBool(str);
		};
		array[1155] = val;
		val = new Command();
		val.Name = "fixcars";
		val.Parent = "vehicle";
		val.FullName = "vehicle.fixcars";
		val.ServerAdmin = true;
		val.Variable = false;
		val.Call = delegate(Arg arg)
		{
			vehicle.fixcars(arg);
		};
		array[1156] = val;
		val = new Command();
		val.Name = "killboats";
		val.Parent = "vehicle";
		val.FullName = "vehicle.killboats";
		val.ServerAdmin = true;
		val.Variable = false;
		val.Call = delegate(Arg arg)
		{
			vehicle.killboats(arg);
		};
		array[1157] = val;
		val = new Command();
		val.Name = "killcars";
		val.Parent = "vehicle";
		val.FullName = "vehicle.killcars";
		val.ServerAdmin = true;
		val.Variable = false;
		val.Call = delegate(Arg arg)
		{
			vehicle.killcars(arg);
		};
		array[1158] = val;
		val = new Command();
		val.Name = "killdrones";
		val.Parent = "vehicle";
		val.FullName = "vehicle.killdrones";
		val.ServerAdmin = true;
		val.Variable = false;
		val.Call = delegate(Arg arg)
		{
			vehicle.killdrones(arg);
		};
		array[1159] = val;
		val = new Command();
		val.Name = "killminis";
		val.Parent = "vehicle";
		val.FullName = "vehicle.killminis";
		val.ServerAdmin = true;
		val.Variable = false;
		val.Call = delegate(Arg arg)
		{
			vehicle.killminis(arg);
		};
		array[1160] = val;
		val = new Command();
		val.Name = "killmotorbikes";
		val.Parent = "vehicle";
		val.FullName = "vehicle.killmotorbikes";
		val.ServerAdmin = true;
		val.Variable = false;
		val.Call = delegate(Arg arg)
		{
			vehicle.killmotorbikes(arg);
		};
		array[1161] = val;
		val = new Command();
		val.Name = "killpushbikes";
		val.Parent = "vehicle";
		val.FullName = "vehicle.killpushbikes";
		val.ServerAdmin = true;
		val.Variable = false;
		val.Call = delegate(Arg arg)
		{
			vehicle.killpushbikes(arg);
		};
		array[1162] = val;
		val = new Command();
		val.Name = "killscraphelis";
		val.Parent = "vehicle";
		val.FullName = "vehicle.killscraphelis";
		val.ServerAdmin = true;
		val.Variable = false;
		val.Call = delegate(Arg arg)
		{
			vehicle.killscraphelis(arg);
		};
		array[1163] = val;
		val = new Command();
		val.Name = "killtrains";
		val.Parent = "vehicle";
		val.FullName = "vehicle.killtrains";
		val.ServerAdmin = true;
		val.Variable = false;
		val.Call = delegate(Arg arg)
		{
			vehicle.killtrains(arg);
		};
		array[1164] = val;
		val = new Command();
		val.Name = "stop_all_trains";
		val.Parent = "vehicle";
		val.FullName = "vehicle.stop_all_trains";
		val.ServerAdmin = true;
		val.Variable = false;
		val.Call = delegate(Arg arg)
		{
			vehicle.stop_all_trains(arg);
		};
		array[1165] = val;
		val = new Command();
		val.Name = "swapseats";
		val.Parent = "vehicle";
		val.FullName = "vehicle.swapseats";
		val.ServerUser = true;
		val.Variable = false;
		val.Call = delegate(Arg arg)
		{
			vehicle.swapseats(arg);
		};
		array[1166] = val;
		val = new Command();
		val.Name = "trainskeeprunning";
		val.Parent = "vehicle";
		val.FullName = "vehicle.trainskeeprunning";
		val.ServerAdmin = true;
		val.Description = "Determines whether trains stop automatically when there's no-one on them. Default: false";
		val.Variable = true;
		val.GetOveride = () => vehicle.trainskeeprunning.ToString();
		val.SetOveride = delegate(string str)
		{
			vehicle.trainskeeprunning = StringExtensions.ToBool(str);
		};
		array[1167] = val;
		val = new Command();
		val.Name = "vehiclesdroploot";
		val.Parent = "vehicle";
		val.FullName = "vehicle.vehiclesdroploot";
		val.ServerAdmin = true;
		val.Description = "Determines whether vehicles drop storage items when destroyed. Default: true";
		val.Variable = true;
		val.GetOveride = () => vehicle.vehiclesdroploot.ToString();
		val.SetOveride = delegate(string str)
		{
			vehicle.vehiclesdroploot = StringExtensions.ToBool(str);
		};
		array[1168] = val;
		val = new Command();
		val.Name = "attack";
		val.Parent = "vis";
		val.FullName = "vis.attack";
		val.ServerAdmin = true;
		val.Variable = true;
		val.GetOveride = () => ConVar.Vis.attack.ToString();
		val.SetOveride = delegate(string str)
		{
			ConVar.Vis.attack = StringExtensions.ToBool(str);
		};
		array[1169] = val;
		val = new Command();
		val.Name = "damage";
		val.Parent = "vis";
		val.FullName = "vis.damage";
		val.ServerAdmin = true;
		val.Variable = true;
		val.GetOveride = () => ConVar.Vis.damage.ToString();
		val.SetOveride = delegate(string str)
		{
			ConVar.Vis.damage = StringExtensions.ToBool(str);
		};
		array[1170] = val;
		val = new Command();
		val.Name = "hitboxes";
		val.Parent = "vis";
		val.FullName = "vis.hitboxes";
		val.ServerAdmin = true;
		val.Variable = true;
		val.GetOveride = () => ConVar.Vis.hitboxes.ToString();
		val.SetOveride = delegate(string str)
		{
			ConVar.Vis.hitboxes = StringExtensions.ToBool(str);
		};
		array[1171] = val;
		val = new Command();
		val.Name = "lineofsight";
		val.Parent = "vis";
		val.FullName = "vis.lineofsight";
		val.ServerAdmin = true;
		val.Variable = true;
		val.GetOveride = () => ConVar.Vis.lineofsight.ToString();
		val.SetOveride = delegate(string str)
		{
			ConVar.Vis.lineofsight = StringExtensions.ToBool(str);
		};
		array[1172] = val;
		val = new Command();
		val.Name = "protection";
		val.Parent = "vis";
		val.FullName = "vis.protection";
		val.ServerAdmin = true;
		val.Variable = true;
		val.GetOveride = () => ConVar.Vis.protection.ToString();
		val.SetOveride = delegate(string str)
		{
			ConVar.Vis.protection = StringExtensions.ToBool(str);
		};
		array[1173] = val;
		val = new Command();
		val.Name = "sense";
		val.Parent = "vis";
		val.FullName = "vis.sense";
		val.ServerAdmin = true;
		val.Variable = true;
		val.GetOveride = () => ConVar.Vis.sense.ToString();
		val.SetOveride = delegate(string str)
		{
			ConVar.Vis.sense = StringExtensions.ToBool(str);
		};
		array[1174] = val;
		val = new Command();
		val.Name = "triggers";
		val.Parent = "vis";
		val.FullName = "vis.triggers";
		val.ServerAdmin = true;
		val.Variable = true;
		val.GetOveride = () => ConVar.Vis.triggers.ToString();
		val.SetOveride = delegate(string str)
		{
			ConVar.Vis.triggers = StringExtensions.ToBool(str);
		};
		array[1175] = val;
		val = new Command();
		val.Name = "weakspots";
		val.Parent = "vis";
		val.FullName = "vis.weakspots";
		val.ServerAdmin = true;
		val.Variable = true;
		val.GetOveride = () => ConVar.Vis.weakspots.ToString();
		val.SetOveride = delegate(string str)
		{
			ConVar.Vis.weakspots = StringExtensions.ToBool(str);
		};
		array[1176] = val;
		val = new Command();
		val.Name = "togglevoicerangeboost";
		val.Parent = "voice";
		val.FullName = "voice.togglevoicerangeboost";
		val.ServerAdmin = true;
		val.Description = "Enabled/disables voice range boost for a player eg. ToggleVoiceRangeBoost sam 1";
		val.Variable = false;
		val.Call = delegate(Arg arg)
		{
			Voice.ToggleVoiceRangeBoost(arg);
		};
		array[1177] = val;
		val = new Command();
		val.Name = "voicerangeboostamount";
		val.Parent = "voice";
		val.FullName = "voice.voicerangeboostamount";
		val.ServerAdmin = true;
		val.ClientAdmin = true;
		val.Client = true;
		val.Replicated = true;
		val.Variable = true;
		val.GetOveride = () => Voice.voiceRangeBoostAmount.ToString();
		val.SetOveride = delegate(string str)
		{
			Voice.voiceRangeBoostAmount = StringExtensions.ToFloat(str, 0f);
		};
		val.Default = "50";
		array[1178] = val;
		val = new Command();
		val.Name = "atmosphere_brightness";
		val.Parent = "weather";
		val.FullName = "weather.atmosphere_brightness";
		val.ServerAdmin = true;
		val.ClientAdmin = true;
		val.Client = true;
		val.Replicated = true;
		val.Variable = true;
		val.GetOveride = () => Weather.atmosphere_brightness.ToString();
		val.SetOveride = delegate(string str)
		{
			Weather.atmosphere_brightness = StringExtensions.ToFloat(str, 0f);
		};
		val.Default = "-1";
		array[1179] = val;
		val = new Command();
		val.Name = "atmosphere_contrast";
		val.Parent = "weather";
		val.FullName = "weather.atmosphere_contrast";
		val.ServerAdmin = true;
		val.ClientAdmin = true;
		val.Client = true;
		val.Replicated = true;
		val.Variable = true;
		val.GetOveride = () => Weather.atmosphere_contrast.ToString();
		val.SetOveride = delegate(string str)
		{
			Weather.atmosphere_contrast = StringExtensions.ToFloat(str, 0f);
		};
		val.Default = "-1";
		array[1180] = val;
		val = new Command();
		val.Name = "atmosphere_directionality";
		val.Parent = "weather";
		val.FullName = "weather.atmosphere_directionality";
		val.ServerAdmin = true;
		val.ClientAdmin = true;
		val.Client = true;
		val.Replicated = true;
		val.Variable = true;
		val.GetOveride = () => Weather.atmosphere_directionality.ToString();
		val.SetOveride = delegate(string str)
		{
			Weather.atmosphere_directionality = StringExtensions.ToFloat(str, 0f);
		};
		val.Default = "-1";
		array[1181] = val;
		val = new Command();
		val.Name = "atmosphere_mie";
		val.Parent = "weather";
		val.FullName = "weather.atmosphere_mie";
		val.ServerAdmin = true;
		val.ClientAdmin = true;
		val.Client = true;
		val.Replicated = true;
		val.Variable = true;
		val.GetOveride = () => Weather.atmosphere_mie.ToString();
		val.SetOveride = delegate(string str)
		{
			Weather.atmosphere_mie = StringExtensions.ToFloat(str, 0f);
		};
		val.Default = "-1";
		array[1182] = val;
		val = new Command();
		val.Name = "atmosphere_rayleigh";
		val.Parent = "weather";
		val.FullName = "weather.atmosphere_rayleigh";
		val.ServerAdmin = true;
		val.ClientAdmin = true;
		val.Client = true;
		val.Replicated = true;
		val.Variable = true;
		val.GetOveride = () => Weather.atmosphere_rayleigh.ToString();
		val.SetOveride = delegate(string str)
		{
			Weather.atmosphere_rayleigh = StringExtensions.ToFloat(str, 0f);
		};
		val.Default = "-1";
		array[1183] = val;
		val = new Command();
		val.Name = "clear_chance";
		val.Parent = "weather";
		val.FullName = "weather.clear_chance";
		val.ServerAdmin = true;
		val.ClientAdmin = true;
		val.Client = true;
		val.Replicated = true;
		val.Variable = true;
		val.GetOveride = () => Weather.clear_chance.ToString();
		val.SetOveride = delegate(string str)
		{
			Weather.clear_chance = StringExtensions.ToFloat(str, 0f);
		};
		val.Default = "1";
		array[1184] = val;
		val = new Command();
		val.Name = "cloud_attenuation";
		val.Parent = "weather";
		val.FullName = "weather.cloud_attenuation";
		val.ServerAdmin = true;
		val.ClientAdmin = true;
		val.Client = true;
		val.Replicated = true;
		val.Variable = true;
		val.GetOveride = () => Weather.cloud_attenuation.ToString();
		val.SetOveride = delegate(string str)
		{
			Weather.cloud_attenuation = StringExtensions.ToFloat(str, 0f);
		};
		val.Default = "-1";
		array[1185] = val;
		val = new Command();
		val.Name = "cloud_brightness";
		val.Parent = "weather";
		val.FullName = "weather.cloud_brightness";
		val.ServerAdmin = true;
		val.ClientAdmin = true;
		val.Client = true;
		val.Replicated = true;
		val.Variable = true;
		val.GetOveride = () => Weather.cloud_brightness.ToString();
		val.SetOveride = delegate(string str)
		{
			Weather.cloud_brightness = StringExtensions.ToFloat(str, 0f);
		};
		val.Default = "-1";
		array[1186] = val;
		val = new Command();
		val.Name = "cloud_coloring";
		val.Parent = "weather";
		val.FullName = "weather.cloud_coloring";
		val.ServerAdmin = true;
		val.ClientAdmin = true;
		val.Client = true;
		val.Replicated = true;
		val.Variable = true;
		val.GetOveride = () => Weather.cloud_coloring.ToString();
		val.SetOveride = delegate(string str)
		{
			Weather.cloud_coloring = StringExtensions.ToFloat(str, 0f);
		};
		val.Default = "-1";
		array[1187] = val;
		val = new Command();
		val.Name = "cloud_coverage";
		val.Parent = "weather";
		val.FullName = "weather.cloud_coverage";
		val.ServerAdmin = true;
		val.ClientAdmin = true;
		val.Client = true;
		val.Replicated = true;
		val.Variable = true;
		val.GetOveride = () => Weather.cloud_coverage.ToString();
		val.SetOveride = delegate(string str)
		{
			Weather.cloud_coverage = StringExtensions.ToFloat(str, 0f);
		};
		val.Default = "-1";
		array[1188] = val;
		val = new Command();
		val.Name = "cloud_opacity";
		val.Parent = "weather";
		val.FullName = "weather.cloud_opacity";
		val.ServerAdmin = true;
		val.ClientAdmin = true;
		val.Client = true;
		val.Replicated = true;
		val.Variable = true;
		val.GetOveride = () => Weather.cloud_opacity.ToString();
		val.SetOveride = delegate(string str)
		{
			Weather.cloud_opacity = StringExtensions.ToFloat(str, 0f);
		};
		val.Default = "-1";
		array[1189] = val;
		val = new Command();
		val.Name = "cloud_saturation";
		val.Parent = "weather";
		val.FullName = "weather.cloud_saturation";
		val.ServerAdmin = true;
		val.ClientAdmin = true;
		val.Client = true;
		val.Replicated = true;
		val.Variable = true;
		val.GetOveride = () => Weather.cloud_saturation.ToString();
		val.SetOveride = delegate(string str)
		{
			Weather.cloud_saturation = StringExtensions.ToFloat(str, 0f);
		};
		val.Default = "-1";
		array[1190] = val;
		val = new Command();
		val.Name = "cloud_scattering";
		val.Parent = "weather";
		val.FullName = "weather.cloud_scattering";
		val.ServerAdmin = true;
		val.ClientAdmin = true;
		val.Client = true;
		val.Replicated = true;
		val.Variable = true;
		val.GetOveride = () => Weather.cloud_scattering.ToString();
		val.SetOveride = delegate(string str)
		{
			Weather.cloud_scattering = StringExtensions.ToFloat(str, 0f);
		};
		val.Default = "-1";
		array[1191] = val;
		val = new Command();
		val.Name = "cloud_sharpness";
		val.Parent = "weather";
		val.FullName = "weather.cloud_sharpness";
		val.ServerAdmin = true;
		val.ClientAdmin = true;
		val.Client = true;
		val.Replicated = true;
		val.Variable = true;
		val.GetOveride = () => Weather.cloud_sharpness.ToString();
		val.SetOveride = delegate(string str)
		{
			Weather.cloud_sharpness = StringExtensions.ToFloat(str, 0f);
		};
		val.Default = "-1";
		array[1192] = val;
		val = new Command();
		val.Name = "cloud_size";
		val.Parent = "weather";
		val.FullName = "weather.cloud_size";
		val.ServerAdmin = true;
		val.ClientAdmin = true;
		val.Client = true;
		val.Replicated = true;
		val.Variable = true;
		val.GetOveride = () => Weather.cloud_size.ToString();
		val.SetOveride = delegate(string str)
		{
			Weather.cloud_size = StringExtensions.ToFloat(str, 0f);
		};
		val.Default = "-1";
		array[1193] = val;
		val = new Command();
		val.Name = "dust_chance";
		val.Parent = "weather";
		val.FullName = "weather.dust_chance";
		val.ServerAdmin = true;
		val.ClientAdmin = true;
		val.Client = true;
		val.Replicated = true;
		val.Variable = true;
		val.GetOveride = () => Weather.dust_chance.ToString();
		val.SetOveride = delegate(string str)
		{
			Weather.dust_chance = StringExtensions.ToFloat(str, 0f);
		};
		val.Default = "0";
		array[1194] = val;
		val = new Command();
		val.Name = "fog";
		val.Parent = "weather";
		val.FullName = "weather.fog";
		val.ServerAdmin = true;
		val.ClientAdmin = true;
		val.Client = true;
		val.Replicated = true;
		val.Variable = true;
		val.GetOveride = () => Weather.fog.ToString();
		val.SetOveride = delegate(string str)
		{
			Weather.fog = StringExtensions.ToFloat(str, 0f);
		};
		val.Default = "-1";
		array[1195] = val;
		val = new Command();
		val.Name = "fog_chance";
		val.Parent = "weather";
		val.FullName = "weather.fog_chance";
		val.ServerAdmin = true;
		val.ClientAdmin = true;
		val.Client = true;
		val.Replicated = true;
		val.Variable = true;
		val.GetOveride = () => Weather.fog_chance.ToString();
		val.SetOveride = delegate(string str)
		{
			Weather.fog_chance = StringExtensions.ToFloat(str, 0f);
		};
		val.Default = "0";
		array[1196] = val;
		val = new Command();
		val.Name = "load";
		val.Parent = "weather";
		val.FullName = "weather.load";
		val.ServerAdmin = true;
		val.Variable = false;
		val.Call = delegate(Arg arg)
		{
			Weather.load(arg);
		};
		array[1197] = val;
		val = new Command();
		val.Name = "ocean_scale";
		val.Parent = "weather";
		val.FullName = "weather.ocean_scale";
		val.ServerAdmin = true;
		val.ClientAdmin = true;
		val.Client = true;
		val.Replicated = true;
		val.Variable = true;
		val.GetOveride = () => Weather.ocean_scale.ToString();
		val.SetOveride = delegate(string str)
		{
			Weather.ocean_scale = StringExtensions.ToFloat(str, 0f);
		};
		val.Default = "-1";
		array[1198] = val;
		val = new Command();
		val.Name = "ocean_time";
		val.Parent = "weather";
		val.FullName = "weather.ocean_time";
		val.ServerAdmin = true;
		val.ClientAdmin = true;
		val.Client = true;
		val.Replicated = true;
		val.Variable = true;
		val.GetOveride = () => Weather.ocean_time.ToString();
		val.SetOveride = delegate(string str)
		{
			Weather.ocean_time = StringExtensions.ToFloat(str, 0f);
		};
		val.Default = "-1";
		array[1199] = val;
		val = new Command();
		val.Name = "overcast_chance";
		val.Parent = "weather";
		val.FullName = "weather.overcast_chance";
		val.ServerAdmin = true;
		val.ClientAdmin = true;
		val.Client = true;
		val.Replicated = true;
		val.Variable = true;
		val.GetOveride = () => Weather.overcast_chance.ToString();
		val.SetOveride = delegate(string str)
		{
			Weather.overcast_chance = StringExtensions.ToFloat(str, 0f);
		};
		val.Default = "0";
		array[1200] = val;
		val = new Command();
		val.Name = "rain";
		val.Parent = "weather";
		val.FullName = "weather.rain";
		val.ServerAdmin = true;
		val.ClientAdmin = true;
		val.Client = true;
		val.Replicated = true;
		val.Variable = true;
		val.GetOveride = () => Weather.rain.ToString();
		val.SetOveride = delegate(string str)
		{
			Weather.rain = StringExtensions.ToFloat(str, 0f);
		};
		val.Default = "-1";
		array[1201] = val;
		val = new Command();
		val.Name = "rain_chance";
		val.Parent = "weather";
		val.FullName = "weather.rain_chance";
		val.ServerAdmin = true;
		val.ClientAdmin = true;
		val.Client = true;
		val.Replicated = true;
		val.Variable = true;
		val.GetOveride = () => Weather.rain_chance.ToString();
		val.SetOveride = delegate(string str)
		{
			Weather.rain_chance = StringExtensions.ToFloat(str, 0f);
		};
		val.Default = "0";
		array[1202] = val;
		val = new Command();
		val.Name = "rainbow";
		val.Parent = "weather";
		val.FullName = "weather.rainbow";
		val.ServerAdmin = true;
		val.ClientAdmin = true;
		val.Client = true;
		val.Replicated = true;
		val.Variable = true;
		val.GetOveride = () => Weather.rainbow.ToString();
		val.SetOveride = delegate(string str)
		{
			Weather.rainbow = StringExtensions.ToFloat(str, 0f);
		};
		val.Default = "-1";
		array[1203] = val;
		val = new Command();
		val.Name = "report";
		val.Parent = "weather";
		val.FullName = "weather.report";
		val.ServerAdmin = true;
		val.Variable = false;
		val.Call = delegate(Arg arg)
		{
			Weather.report(arg);
		};
		array[1204] = val;
		val = new Command();
		val.Name = "reset";
		val.Parent = "weather";
		val.FullName = "weather.reset";
		val.ServerAdmin = true;
		val.Variable = false;
		val.Call = delegate(Arg arg)
		{
			Weather.reset(arg);
		};
		array[1205] = val;
		val = new Command();
		val.Name = "storm_chance";
		val.Parent = "weather";
		val.FullName = "weather.storm_chance";
		val.ServerAdmin = true;
		val.ClientAdmin = true;
		val.Client = true;
		val.Replicated = true;
		val.Variable = true;
		val.GetOveride = () => Weather.storm_chance.ToString();
		val.SetOveride = delegate(string str)
		{
			Weather.storm_chance = StringExtensions.ToFloat(str, 0f);
		};
		val.Default = "0";
		array[1206] = val;
		val = new Command();
		val.Name = "thunder";
		val.Parent = "weather";
		val.FullName = "weather.thunder";
		val.ServerAdmin = true;
		val.ClientAdmin = true;
		val.Client = true;
		val.Replicated = true;
		val.Variable = true;
		val.GetOveride = () => Weather.thunder.ToString();
		val.SetOveride = delegate(string str)
		{
			Weather.thunder = StringExtensions.ToFloat(str, 0f);
		};
		val.Default = "-1";
		array[1207] = val;
		val = new Command();
		val.Name = "wetness_rain";
		val.Parent = "weather";
		val.FullName = "weather.wetness_rain";
		val.ServerAdmin = true;
		val.Variable = true;
		val.GetOveride = () => Weather.wetness_rain.ToString();
		val.SetOveride = delegate(string str)
		{
			Weather.wetness_rain = StringExtensions.ToFloat(str, 0f);
		};
		array[1208] = val;
		val = new Command();
		val.Name = "wetness_snow";
		val.Parent = "weather";
		val.FullName = "weather.wetness_snow";
		val.ServerAdmin = true;
		val.Variable = true;
		val.GetOveride = () => Weather.wetness_snow.ToString();
		val.SetOveride = delegate(string str)
		{
			Weather.wetness_snow = StringExtensions.ToFloat(str, 0f);
		};
		array[1209] = val;
		val = new Command();
		val.Name = "wind";
		val.Parent = "weather";
		val.FullName = "weather.wind";
		val.ServerAdmin = true;
		val.ClientAdmin = true;
		val.Client = true;
		val.Replicated = true;
		val.Variable = true;
		val.GetOveride = () => Weather.wind.ToString();
		val.SetOveride = delegate(string str)
		{
			Weather.wind = StringExtensions.ToFloat(str, 0f);
		};
		val.Default = "-1";
		array[1210] = val;
		val = new Command();
		val.Name = "print_approved_skins";
		val.Parent = "workshop";
		val.FullName = "workshop.print_approved_skins";
		val.ServerAdmin = true;
		val.Variable = false;
		val.Call = delegate(Arg arg)
		{
			Workshop.print_approved_skins(arg);
		};
		array[1211] = val;
		val = new Command();
		val.Name = "cache";
		val.Parent = "world";
		val.FullName = "world.cache";
		val.ServerAdmin = true;
		val.Variable = true;
		val.GetOveride = () => ConVar.World.cache.ToString();
		val.SetOveride = delegate(string str)
		{
			ConVar.World.cache = StringExtensions.ToBool(str);
		};
		array[1212] = val;
		val = new Command();
		val.Name = "configfile";
		val.Parent = "world";
		val.FullName = "world.configfile";
		val.ServerAdmin = true;
		val.Variable = true;
		val.GetOveride = () => ConVar.World.configFile ?? "";
		val.SetOveride = delegate(string str)
		{
			ConVar.World.configFile = str;
		};
		array[1213] = val;
		val = new Command();
		val.Name = "configstring";
		val.Parent = "world";
		val.FullName = "world.configstring";
		val.ServerAdmin = true;
		val.Variable = true;
		val.GetOveride = () => ConVar.World.configString ?? "";
		val.SetOveride = delegate(string str)
		{
			ConVar.World.configString = str;
		};
		array[1214] = val;
		val = new Command();
		val.Name = "monuments";
		val.Parent = "world";
		val.FullName = "world.monuments";
		val.ServerAdmin = true;
		val.Variable = false;
		val.Call = delegate(Arg arg)
		{
			ConVar.World.monuments(arg);
		};
		array[1215] = val;
		val = new Command();
		val.Name = "renderlabs";
		val.Parent = "world";
		val.FullName = "world.renderlabs";
		val.ServerAdmin = true;
		val.Client = true;
		val.Description = "Renders a PNG of the current map's underwater labs, for a specific floor";
		val.Variable = false;
		val.Call = delegate(Arg arg)
		{
			ConVar.World.renderlabs(arg);
		};
		array[1216] = val;
		val = new Command();
		val.Name = "rendermap";
		val.Parent = "world";
		val.FullName = "world.rendermap";
		val.ServerAdmin = true;
		val.Client = true;
		val.Description = "Renders a high resolution PNG of the current map";
		val.Variable = false;
		val.Call = delegate(Arg arg)
		{
			ConVar.World.rendermap(arg);
		};
		array[1217] = val;
		val = new Command();
		val.Name = "rendertunnels";
		val.Parent = "world";
		val.FullName = "world.rendertunnels";
		val.ServerAdmin = true;
		val.Client = true;
		val.Description = "Renders a PNG of the current map's tunnel network";
		val.Variable = false;
		val.Call = delegate(Arg arg)
		{
			ConVar.World.rendertunnels(arg);
		};
		array[1218] = val;
		val = new Command();
		val.Name = "enabled";
		val.Parent = "xmas";
		val.FullName = "xmas.enabled";
		val.ServerAdmin = true;
		val.Variable = true;
		val.GetOveride = () => XMas.enabled.ToString();
		val.SetOveride = delegate(string str)
		{
			XMas.enabled = StringExtensions.ToBool(str);
		};
		array[1219] = val;
		val = new Command();
		val.Name = "giftsperplayer";
		val.Parent = "xmas";
		val.FullName = "xmas.giftsperplayer";
		val.ServerAdmin = true;
		val.Variable = true;
		val.GetOveride = () => XMas.giftsPerPlayer.ToString();
		val.SetOveride = delegate(string str)
		{
			XMas.giftsPerPlayer = StringExtensions.ToInt(str, 0);
		};
		array[1220] = val;
		val = new Command();
		val.Name = "refill";
		val.Parent = "xmas";
		val.FullName = "xmas.refill";
		val.ServerAdmin = true;
		val.Variable = false;
		val.Call = delegate(Arg arg)
		{
			XMas.refill(arg);
		};
		array[1221] = val;
		val = new Command();
		val.Name = "spawnattempts";
		val.Parent = "xmas";
		val.FullName = "xmas.spawnattempts";
		val.ServerAdmin = true;
		val.Variable = true;
		val.GetOveride = () => XMas.spawnAttempts.ToString();
		val.SetOveride = delegate(string str)
		{
			XMas.spawnAttempts = StringExtensions.ToInt(str, 0);
		};
		array[1222] = val;
		val = new Command();
		val.Name = "spawnrange";
		val.Parent = "xmas";
		val.FullName = "xmas.spawnrange";
		val.ServerAdmin = true;
		val.Variable = true;
		val.GetOveride = () => XMas.spawnRange.ToString();
		val.SetOveride = delegate(string str)
		{
			XMas.spawnRange = StringExtensions.ToFloat(str, 0f);
		};
		array[1223] = val;
		val = new Command();
		val.Name = "cui_test";
		val.Parent = "cui";
		val.FullName = "cui.cui_test";
		val.ServerUser = true;
		val.Variable = false;
		val.Call = delegate(Arg arg)
		{
			cui.cui_test(arg);
		};
		array[1224] = val;
		val = new Command();
		val.Name = "cui_test_update";
		val.Parent = "cui";
		val.FullName = "cui.cui_test_update";
		val.ServerUser = true;
		val.Variable = false;
		val.Call = delegate(Arg arg)
		{
			cui.cui_test_update(arg);
		};
		array[1225] = val;
		val = new Command();
		val.Name = "endtest";
		val.Parent = "cui";
		val.FullName = "cui.endtest";
		val.ServerUser = true;
		val.Variable = false;
		val.Call = delegate(Arg arg)
		{
			cui.endtest(arg);
		};
		array[1226] = val;
		val = new Command();
		val.Name = "dump";
		val.Parent = "global";
		val.FullName = "global.dump";
		val.ServerAdmin = true;
		val.Variable = false;
		val.Call = delegate(Arg arg)
		{
			DiagnosticsConSys.dump(arg);
		};
		array[1227] = val;
		val = new Command();
		val.Name = "altitudespeedoverride";
		val.Parent = "drone";
		val.FullName = "drone.altitudespeedoverride";
		val.ServerAdmin = true;
		val.Description = "If greater than zero, overrides the drone's vertical movement speed";
		val.Variable = true;
		val.GetOveride = () => Drone.altitudeSpeedOverride.ToString();
		val.SetOveride = delegate(string str)
		{
			Drone.altitudeSpeedOverride = StringExtensions.ToFloat(str, 0f);
		};
		array[1228] = val;
		val = new Command();
		val.Name = "maxcontrolrange";
		val.Parent = "drone";
		val.FullName = "drone.maxcontrolrange";
		val.ServerAdmin = true;
		val.ClientAdmin = true;
		val.Client = true;
		val.Description = "How far drones can be flown away from the controlling computer station";
		val.Replicated = true;
		val.ShowInAdminUI = true;
		val.Variable = true;
		val.GetOveride = () => Drone.maxControlRange.ToString();
		val.SetOveride = delegate(string str)
		{
			Drone.maxControlRange = StringExtensions.ToFloat(str, 0f);
		};
		val.Default = "600";
		array[1229] = val;
		val = new Command();
		val.Name = "movementspeedoverride";
		val.Parent = "drone";
		val.FullName = "drone.movementspeedoverride";
		val.ServerAdmin = true;
		val.Description = "If greater than zero, overrides the drone's planar movement speed";
		val.Variable = true;
		val.GetOveride = () => Drone.movementSpeedOverride.ToString();
		val.SetOveride = delegate(string str)
		{
			Drone.movementSpeedOverride = StringExtensions.ToFloat(str, 0f);
		};
		array[1230] = val;
		val = new Command();
		val.Name = "underwater_drag_budget_ms";
		val.Parent = "droppeditem";
		val.FullName = "droppeditem.underwater_drag_budget_ms";
		val.ServerAdmin = true;
		val.Description = "How many milliseconds to spend on updating underwater drag levels";
		val.Variable = true;
		val.GetOveride = () => DroppedItem.underwater_drag_budget_ms.ToString();
		val.SetOveride = delegate(string str)
		{
			DroppedItem.underwater_drag_budget_ms = StringExtensions.ToFloat(str, 0f);
		};
		array[1231] = val;
		val = new Command();
		val.Name = "use_baked_terrain_mesh";
		val.Parent = "dungeonnavmesh";
		val.FullName = "dungeonnavmesh.use_baked_terrain_mesh";
		val.ServerAdmin = true;
		val.Variable = true;
		val.GetOveride = () => DungeonNavmesh.use_baked_terrain_mesh.ToString();
		val.SetOveride = delegate(string str)
		{
			DungeonNavmesh.use_baked_terrain_mesh = StringExtensions.ToBool(str);
		};
		array[1232] = val;
		val = new Command();
		val.Name = "use_baked_terrain_mesh";
		val.Parent = "dynamicnavmesh";
		val.FullName = "dynamicnavmesh.use_baked_terrain_mesh";
		val.ServerAdmin = true;
		val.Variable = true;
		val.GetOveride = () => DynamicNavMesh.use_baked_terrain_mesh.ToString();
		val.SetOveride = delegate(string str)
		{
			DynamicNavMesh.use_baked_terrain_mesh = StringExtensions.ToBool(str);
		};
		array[1233] = val;
		val = new Command();
		val.Name = "includebots";
		val.Parent = "egghuntevent";
		val.FullName = "egghuntevent.includebots";
		val.ServerAdmin = true;
		val.Description = "Will spawn eggs for bots, only for debug purposes - don't enable it!";
		val.Variable = true;
		val.GetOveride = () => EggHuntEvent.includeBots.ToString();
		val.SetOveride = delegate(string str)
		{
			EggHuntEvent.includeBots = StringExtensions.ToBool(str);
		};
		array[1234] = val;
		val = new Command();
		val.Name = "batteryid";
		val.Parent = "electricbattery";
		val.FullName = "electricbattery.batteryid";
		val.ServerAdmin = true;
		val.Variable = false;
		val.Call = delegate(Arg arg)
		{
			ElectricBattery.batteryid(arg);
		};
		array[1235] = val;
		val = new Command();
		val.Name = "killallevents";
		val.Parent = "eventschedule";
		val.FullName = "eventschedule.killallevents";
		val.ServerAdmin = true;
		val.Variable = false;
		val.Call = delegate
		{
			EventSchedule.KillAllEvents();
		};
		array[1236] = val;
		val = new Command();
		val.Name = "triggerevent";
		val.Parent = "eventschedule";
		val.FullName = "eventschedule.triggerevent";
		val.ServerAdmin = true;
		val.Variable = false;
		val.Call = delegate(Arg arg)
		{
			EventSchedule.TriggerEvent(arg);
		};
		array[1237] = val;
		val = new Command();
		val.Name = "event_hours_before_wipe";
		val.Parent = "eventschedulewipeoffset";
		val.FullName = "eventschedulewipeoffset.event_hours_before_wipe";
		val.ServerAdmin = true;
		val.Variable = true;
		val.GetOveride = () => EventScheduleWipeOffset.hoursBeforeWipeRealtime.ToString();
		val.SetOveride = delegate(string str)
		{
			EventScheduleWipeOffset.hoursBeforeWipeRealtime = StringExtensions.ToFloat(str, 0f);
		};
		array[1238] = val;
		val = new Command();
		val.Name = "chargeneededforsupplies";
		val.Parent = "excavatorsignalcomputer";
		val.FullName = "excavatorsignalcomputer.chargeneededforsupplies";
		val.ServerAdmin = true;
		val.Variable = true;
		val.GetOveride = () => ExcavatorSignalComputer.chargeNeededForSupplies.ToString();
		val.SetOveride = delegate(string str)
		{
			ExcavatorSignalComputer.chargeNeededForSupplies = StringExtensions.ToFloat(str, 0f);
		};
		array[1239] = val;
		val = new Command();
		val.Name = "steamconnectiontimeout";
		val.Parent = "global";
		val.FullName = "global.steamconnectiontimeout";
		val.ServerAdmin = true;
		val.Variable = true;
		val.GetOveride = () => SteamNetworking.steamconnectiontimeout.ToString();
		val.SetOveride = delegate(string str)
		{
			SteamNetworking.steamconnectiontimeout = StringExtensions.ToInt(str, 0);
		};
		array[1240] = val;
		val = new Command();
		val.Name = "steamnagleflush";
		val.Parent = "global";
		val.FullName = "global.steamnagleflush";
		val.ServerAdmin = true;
		val.Variable = true;
		val.GetOveride = () => SteamNetworking.steamnagleflush.ToString();
		val.SetOveride = delegate(string str)
		{
			SteamNetworking.steamnagleflush = StringExtensions.ToBool(str);
		};
		array[1241] = val;
		val = new Command();
		val.Name = "steamnagletime";
		val.Parent = "global";
		val.FullName = "global.steamnagletime";
		val.ServerAdmin = true;
		val.Description = "Nagle time, in microseconds";
		val.Variable = true;
		val.GetOveride = () => SteamNetworking.steamnagletime.ToString();
		val.SetOveride = delegate(string str)
		{
			SteamNetworking.steamnagletime = StringExtensions.ToInt(str, 0);
		};
		array[1242] = val;
		val = new Command();
		val.Name = "steamnetdebug";
		val.Parent = "global";
		val.FullName = "global.steamnetdebug";
		val.ServerAdmin = true;
		val.Description = "Turns on varying levels of debug output for the Steam Networking. This will affect performance. (0 = off, 1 = bug, 2 = error, 3 = important, 4 = warning, 5 = message, 6 = verbose, 7 = debug, 8 = everything)";
		val.Variable = true;
		val.GetOveride = () => SteamNetworking.steamnetdebug.ToString();
		val.SetOveride = delegate(string str)
		{
			SteamNetworking.steamnetdebug = StringExtensions.ToInt(str, 0);
		};
		array[1243] = val;
		val = new Command();
		val.Name = "steamnetdebug_ackrtt";
		val.Parent = "global";
		val.FullName = "global.steamnetdebug_ackrtt";
		val.ServerAdmin = true;
		val.Variable = true;
		val.GetOveride = () => SteamNetworking.steamnetdebug_ackrtt.ToString();
		val.SetOveride = delegate(string str)
		{
			SteamNetworking.steamnetdebug_ackrtt = StringExtensions.ToInt(str, 0);
		};
		array[1244] = val;
		val = new Command();
		val.Name = "steamnetdebug_message";
		val.Parent = "global";
		val.FullName = "global.steamnetdebug_message";
		val.ServerAdmin = true;
		val.Variable = true;
		val.GetOveride = () => SteamNetworking.steamnetdebug_message.ToString();
		val.SetOveride = delegate(string str)
		{
			SteamNetworking.steamnetdebug_message = StringExtensions.ToInt(str, 0);
		};
		array[1245] = val;
		val = new Command();
		val.Name = "steamnetdebug_p2prendezvous";
		val.Parent = "global";
		val.FullName = "global.steamnetdebug_p2prendezvous";
		val.ServerAdmin = true;
		val.Variable = true;
		val.GetOveride = () => SteamNetworking.steamnetdebug_p2prendezvous.ToString();
		val.SetOveride = delegate(string str)
		{
			SteamNetworking.steamnetdebug_p2prendezvous = StringExtensions.ToInt(str, 0);
		};
		array[1246] = val;
		val = new Command();
		val.Name = "steamnetdebug_packetdecode";
		val.Parent = "global";
		val.FullName = "global.steamnetdebug_packetdecode";
		val.ServerAdmin = true;
		val.Variable = true;
		val.GetOveride = () => SteamNetworking.steamnetdebug_packetdecode.ToString();
		val.SetOveride = delegate(string str)
		{
			SteamNetworking.steamnetdebug_packetdecode = StringExtensions.ToInt(str, 0);
		};
		array[1247] = val;
		val = new Command();
		val.Name = "steamnetdebug_packetgaps";
		val.Parent = "global";
		val.FullName = "global.steamnetdebug_packetgaps";
		val.ServerAdmin = true;
		val.Variable = true;
		val.GetOveride = () => SteamNetworking.steamnetdebug_packetgaps.ToString();
		val.SetOveride = delegate(string str)
		{
			SteamNetworking.steamnetdebug_packetgaps = StringExtensions.ToInt(str, 0);
		};
		array[1248] = val;
		val = new Command();
		val.Name = "steamnetdebug_sdrrelaypings";
		val.Parent = "global";
		val.FullName = "global.steamnetdebug_sdrrelaypings";
		val.ServerAdmin = true;
		val.Variable = true;
		val.GetOveride = () => SteamNetworking.steamnetdebug_sdrrelaypings.ToString();
		val.SetOveride = delegate(string str)
		{
			SteamNetworking.steamnetdebug_sdrrelaypings = StringExtensions.ToInt(str, 0);
		};
		array[1249] = val;
		val = new Command();
		val.Name = "steamrelayinit";
		val.Parent = "global";
		val.FullName = "global.steamrelayinit";
		val.ServerAdmin = true;
		val.Variable = false;
		val.Call = delegate
		{
			SteamNetworking.steamrelayinit();
		};
		array[1250] = val;
		val = new Command();
		val.Name = "steamsendbuffer";
		val.Parent = "global";
		val.FullName = "global.steamsendbuffer";
		val.ServerAdmin = true;
		val.Description = "Upper limit of buffered pending bytes to be sent";
		val.Variable = true;
		val.GetOveride = () => SteamNetworking.steamsendbuffer.ToString();
		val.SetOveride = delegate(string str)
		{
			SteamNetworking.steamsendbuffer = StringExtensions.ToInt(str, 0);
		};
		array[1251] = val;
		val = new Command();
		val.Name = "steamsendratemax";
		val.Parent = "global";
		val.FullName = "global.steamsendratemax";
		val.ServerAdmin = true;
		val.Description = "Maxminum send rate clamp, 0 is no limit";
		val.Variable = true;
		val.GetOveride = () => SteamNetworking.steamsendratemax.ToString();
		val.SetOveride = delegate(string str)
		{
			SteamNetworking.steamsendratemax = StringExtensions.ToInt(str, 0);
		};
		array[1252] = val;
		val = new Command();
		val.Name = "steamsendratemin";
		val.Parent = "global";
		val.FullName = "global.steamsendratemin";
		val.ServerAdmin = true;
		val.Description = "Minimum send rate clamp, 0 is no limit";
		val.Variable = true;
		val.GetOveride = () => SteamNetworking.steamsendratemin.ToString();
		val.SetOveride = delegate(string str)
		{
			SteamNetworking.steamsendratemin = StringExtensions.ToInt(str, 0);
		};
		array[1253] = val;
		val = new Command();
		val.Name = "steamstatus";
		val.Parent = "global";
		val.FullName = "global.steamstatus";
		val.ServerAdmin = true;
		val.Variable = false;
		val.Call = delegate(Arg arg)
		{
			string text25 = SteamNetworking.steamstatus();
			arg.ReplyWithObject((object)text25);
		};
		array[1254] = val;
		val = new Command();
		val.Name = "ban_ip";
		val.Parent = "rcon";
		val.FullName = "rcon.ban_ip";
		val.ServerAdmin = true;
		val.Description = "Ban an IP address from RCON, preventing it from connecting and kick any clients from this IP, this is permanent and persistent";
		val.Variable = false;
		val.Call = delegate(Arg arg)
		{
			RCon.ban_ip(arg);
		};
		array[1255] = val;
		val = new Command();
		val.Name = "clear_rcon_failed_logins";
		val.Parent = "rcon";
		val.FullName = "rcon.clear_rcon_failed_logins";
		val.ServerAdmin = true;
		val.Description = "Clear all failed login attempts";
		val.Variable = false;
		val.Call = delegate(Arg arg)
		{
			RCon.clear_rcon_failed_logins(arg);
		};
		array[1256] = val;
		val = new Command();
		val.Name = "clear_subscribers";
		val.Parent = "rcon";
		val.FullName = "rcon.clear_subscribers";
		val.ServerAdmin = true;
		val.Description = "Clears all subscribers from the server.";
		val.Variable = false;
		val.Call = delegate(Arg arg)
		{
			RCon.clear_subscribers(arg);
		};
		array[1257] = val;
		val = new Command();
		val.Name = "enablesubscriptions";
		val.Parent = "rcon";
		val.FullName = "rcon.enablesubscriptions";
		val.ServerAdmin = true;
		val.Saved = true;
		val.Description = "If true, allow RCON connections to subscribe to server events. This could be a performance hit and should only be used if you need it.";
		val.ShowInAdminUI = true;
		val.Variable = true;
		val.GetOveride = () => RCon.EnableSubscriptions.ToString();
		val.SetOveride = delegate(string str)
		{
			RCon.EnableSubscriptions = StringExtensions.ToBool(str);
		};
		array[1258] = val;
		val = new Command();
		val.Name = "ip";
		val.Parent = "rcon";
		val.FullName = "rcon.ip";
		val.ServerAdmin = true;
		val.Description = "IP Address to listen for RCON connections";
		val.Variable = true;
		val.GetOveride = () => RCon.Ip ?? "";
		val.SetOveride = delegate(string str)
		{
			RCon.Ip = str;
		};
		array[1259] = val;
		val = new Command();
		val.Name = "port";
		val.Parent = "rcon";
		val.FullName = "rcon.port";
		val.ServerAdmin = true;
		val.Description = "Port to listen for RCON connections";
		val.Variable = true;
		val.GetOveride = () => RCon.Port.ToString();
		val.SetOveride = delegate(string str)
		{
			RCon.Port = StringExtensions.ToInt(str, 0);
		};
		array[1260] = val;
		val = new Command();
		val.Name = "print";
		val.Parent = "rcon";
		val.FullName = "rcon.print";
		val.ServerAdmin = true;
		val.Description = "If true, RCON commands will be printed in the console";
		val.Variable = true;
		val.GetOveride = () => RCon.Print.ToString();
		val.SetOveride = delegate(string str)
		{
			RCon.Print = StringExtensions.ToBool(str);
		};
		array[1261] = val;
		val = new Command();
		val.Name = "print_rcon_bans";
		val.Parent = "rcon";
		val.FullName = "rcon.print_rcon_bans";
		val.ServerAdmin = true;
		val.Description = "Print a table of permanently banned IPs and networks. Use '--json' to return a JSON object";
		val.Variable = false;
		val.Call = delegate(Arg arg)
		{
			RCon.print_rcon_bans(arg);
		};
		array[1262] = val;
		val = new Command();
		val.Name = "print_rcon_clients";
		val.Parent = "rcon";
		val.FullName = "rcon.print_rcon_clients";
		val.ServerAdmin = true;
		val.Description = "Print a table of connected RCON clients. Use '--json' to return a JSON object";
		val.Variable = false;
		val.Call = delegate(Arg arg)
		{
			RCon.print_rcon_clients(arg);
		};
		array[1263] = val;
		val = new Command();
		val.Name = "print_rcon_failed_logins";
		val.Parent = "rcon";
		val.FullName = "rcon.print_rcon_failed_logins";
		val.ServerAdmin = true;
		val.Description = "Print a table of clients with failed passwords.  Use '--json' to return a JSON object";
		val.Variable = false;
		val.Call = delegate(Arg arg)
		{
			RCon.print_rcon_failed_logins(arg);
		};
		array[1264] = val;
		val = new Command();
		val.Name = "subscribe";
		val.Parent = "rcon";
		val.FullName = "rcon.subscribe";
		val.ServerAdmin = true;
		val.Description = "Un/Subscribes the current RCON connection to changes in server state. This could be a performance hit and should only be used if you need it.";
		val.Variable = false;
		val.Call = delegate(Arg arg)
		{
			RCon.subscribe(arg);
		};
		array[1265] = val;
		val = new Command();
		val.Name = "unban_ip";
		val.Parent = "rcon";
		val.FullName = "rcon.unban_ip";
		val.ServerAdmin = true;
		val.Description = "Unban an IP address from connecting to RCON, will also remove all attempt history";
		val.Variable = false;
		val.Call = delegate(Arg arg)
		{
			RCon.unban_ip(arg);
		};
		array[1266] = val;
		val = new Command();
		val.Name = "web";
		val.Parent = "rcon";
		val.FullName = "rcon.web";
		val.ServerAdmin = true;
		val.Description = "If set to true, use websocket RCON. If set to false use legacy, source engine RCON. Source engine RCON is DEPRECATED";
		val.Variable = true;
		val.GetOveride = () => RCon.Web.ToString();
		val.SetOveride = delegate(string str)
		{
			RCon.Web = StringExtensions.ToBool(str);
		};
		array[1267] = val;
		val = new Command();
		val.Name = "banduration";
		val.Parent = "rcon";
		val.FullName = "rcon.banduration";
		val.ServerAdmin = true;
		val.Description = "How long in seconds to ban an IP that has exceeded the maximum password failures (default: 300 seconds)";
		val.Variable = true;
		val.GetOveride = () => Listener.BanDuration.ToString();
		val.SetOveride = delegate(string str)
		{
			Listener.BanDuration = StringExtensions.ToFloat(str, 0f);
		};
		array[1268] = val;
		val = new Command();
		val.Name = "logfailedattempts";
		val.Parent = "rcon";
		val.FullName = "rcon.logfailedattempts";
		val.ServerAdmin = true;
		val.Description = "Log failed attempts and attempts from banned IP addresses (default: true)";
		val.Variable = true;
		val.GetOveride = () => Listener.LogFailedAttempts.ToString();
		val.SetOveride = delegate(string str)
		{
			Listener.LogFailedAttempts = StringExtensions.ToBool(str);
		};
		array[1269] = val;
		val = new Command();
		val.Name = "maxpasswordfailures";
		val.Parent = "rcon";
		val.FullName = "rcon.maxpasswordfailures";
		val.ServerAdmin = true;
		val.Description = "How many password failures before banning an RCON client's IP (default: 5)";
		val.Variable = true;
		val.GetOveride = () => Listener.MaxPasswordFailures.ToString();
		val.SetOveride = delegate(string str)
		{
			Listener.MaxPasswordFailures = StringExtensions.ToInt(str, 0);
		};
		array[1270] = val;
		val = new Command();
		val.Name = "permanentbanfailedips";
		val.Parent = "rcon";
		val.FullName = "rcon.permanentbanfailedips";
		val.ServerAdmin = true;
		val.Description = "Permanently ban IPs that trigger too many failed attempts (default: false)";
		val.Variable = true;
		val.GetOveride = () => Listener.PermanentBanFailedIPs.ToString();
		val.SetOveride = delegate(string str)
		{
			Listener.PermanentBanFailedIPs = StringExtensions.ToBool(str);
		};
		array[1271] = val;
		val = new Command();
		val.Name = "analytics_header";
		val.Parent = "analytics";
		val.FullName = "analytics.analytics_header";
		val.ServerAdmin = true;
		val.Saved = true;
		val.Description = "Header key of secret when uploading analytics";
		val.Variable = true;
		val.GetOveride = () => Analytics.AnalyticsHeader ?? "";
		val.SetOveride = delegate(string str)
		{
			Analytics.AnalyticsHeader = str;
		};
		array[1272] = val;
		val = new Command();
		val.Name = "analytics_secret";
		val.Parent = "analytics";
		val.FullName = "analytics.analytics_secret";
		val.ServerAdmin = true;
		val.Saved = true;
		val.Description = "Header secret value when uploading analytics";
		val.Variable = true;
		val.GetOveride = () => Analytics.AnalyticsSecret ?? "";
		val.SetOveride = delegate(string str)
		{
			Analytics.AnalyticsSecret = str;
		};
		array[1273] = val;
		val = new Command();
		val.Name = "azure_client_id";
		val.Parent = "analytics";
		val.FullName = "analytics.azure_client_id";
		val.ServerAdmin = true;
		val.Saved = true;
		val.Description = "Azure client id for authentication";
		val.Variable = true;
		val.GetOveride = () => Analytics.AzureClientId ?? "";
		val.SetOveride = delegate(string str)
		{
			Analytics.AzureClientId = str;
		};
		array[1274] = val;
		val = new Command();
		val.Name = "azure_client_secret";
		val.Parent = "analytics";
		val.FullName = "analytics.azure_client_secret";
		val.ServerAdmin = true;
		val.Saved = true;
		val.Description = "Azure client secret for authentication";
		val.Variable = true;
		val.GetOveride = () => Analytics.AzureClientSecret ?? "";
		val.SetOveride = delegate(string str)
		{
			Analytics.AzureClientSecret = str;
		};
		array[1275] = val;
		val = new Command();
		val.Name = "azure_tenant_id";
		val.Parent = "analytics";
		val.FullName = "analytics.azure_tenant_id";
		val.ServerAdmin = true;
		val.Saved = true;
		val.Description = "Azure tenant id for authentication";
		val.Variable = true;
		val.GetOveride = () => Analytics.AzureTenantId ?? "";
		val.SetOveride = delegate(string str)
		{
			Analytics.AzureTenantId = str;
		};
		array[1276] = val;
		val = new Command();
		val.Name = "analytics_bulk_container_url";
		val.Parent = "analytics";
		val.FullName = "analytics.analytics_bulk_container_url";
		val.ServerAdmin = true;
		val.Saved = true;
		val.Description = "Azure blob container url for use with client secret authentication";
		val.Variable = true;
		val.GetOveride = () => Analytics.BulkContainerUrl ?? "";
		val.SetOveride = delegate(string str)
		{
			Analytics.BulkContainerUrl = str;
		};
		array[1277] = val;
		val = new Command();
		val.Name = "analytics_bulk_upload_url";
		val.Parent = "analytics";
		val.FullName = "analytics.analytics_bulk_upload_url";
		val.ServerAdmin = true;
		val.Saved = true;
		val.Description = "Azure blob container url + SAS token, enables a more efficient upload method";
		val.Variable = true;
		val.GetOveride = () => Analytics.BulkUploadConnectionString ?? "";
		val.SetOveride = delegate(string str)
		{
			Analytics.BulkUploadConnectionString = str;
		};
		array[1278] = val;
		val = new Command();
		val.Name = "gameplay_analytics";
		val.Parent = "analytics";
		val.FullName = "analytics.gameplay_analytics";
		val.ServerAdmin = true;
		val.Saved = true;
		val.Description = "Toggle whether gameplay analytics is collected";
		val.Variable = true;
		val.GetOveride = () => Analytics.GameplayAnalyticsConVar.ToString();
		val.SetOveride = delegate(string str)
		{
			Analytics.GameplayAnalyticsConVar = StringExtensions.ToBool(str);
		};
		array[1279] = val;
		val = new Command();
		val.Name = "gameplay_tick_analytics";
		val.Parent = "analytics";
		val.FullName = "analytics.gameplay_tick_analytics";
		val.ServerAdmin = true;
		val.Saved = true;
		val.Description = "Toggle whether gameplay tick analytics is collected";
		val.Variable = true;
		val.GetOveride = () => Analytics.GameplayTickAnalyticsConVar.ToString();
		val.SetOveride = delegate(string str)
		{
			Analytics.GameplayTickAnalyticsConVar = StringExtensions.ToBool(str);
		};
		array[1280] = val;
		val = new Command();
		val.Name = "pending_analytics";
		val.Parent = "analytics";
		val.FullName = "analytics.pending_analytics";
		val.ServerAdmin = true;
		val.Description = "Shows how many analytics events are pending upload";
		val.Variable = false;
		val.Call = delegate(Arg arg)
		{
			Analytics.GetPendingAnalytics(arg);
		};
		array[1281] = val;
		val = new Command();
		val.Name = "server_analytics_url";
		val.Parent = "analytics";
		val.FullName = "analytics.server_analytics_url";
		val.ServerAdmin = true;
		val.Variable = true;
		val.GetOveride = () => Analytics.ServerAnalyticsUrl ?? "";
		val.SetOveride = delegate(string str)
		{
			Analytics.ServerAnalyticsUrl = str;
		};
		array[1282] = val;
		val = new Command();
		val.Name = "performance_analytics";
		val.Parent = "analytics";
		val.FullName = "analytics.performance_analytics";
		val.ServerAdmin = true;
		val.Saved = true;
		val.Description = "Toggle to turn off server performance collection";
		val.Variable = true;
		val.GetOveride = () => Analytics.ServerPerformanceConVar.ToString();
		val.SetOveride = delegate(string str)
		{
			Analytics.ServerPerformanceConVar = StringExtensions.ToBool(str);
		};
		array[1283] = val;
		val = new Command();
		val.Name = "small_buffer_send_limit";
		val.Parent = "analytics";
		val.FullName = "analytics.small_buffer_send_limit";
		val.ServerAdmin = true;
		val.Saved = true;
		val.Description = "Size of analytics events, in bytes, that we try to send off using the same task thread. To disable, set to -1";
		val.Variable = true;
		val.GetOveride = () => Analytics.SmallBufferSendLimit.ToString();
		val.SetOveride = delegate(string str)
		{
			Analytics.SmallBufferSendLimit = StringExtensions.ToInt(str, 0);
		};
		array[1284] = val;
		val = new Command();
		val.Name = "command_lagspike_threshold";
		val.Parent = "profile";
		val.FullName = "profile.command_lagspike_threshold";
		val.ServerAdmin = true;
		val.Variable = true;
		val.GetOveride = () => RuntimeProfiler.command_lagspike_threshold.ToString();
		val.SetOveride = delegate(string str)
		{
			RuntimeProfiler.command_lagspike_threshold = StringExtensions.ToInt(str, 0);
		};
		array[1285] = val;
		val = new Command();
		val.Name = "dump_profile_recorders";
		val.Parent = "profile";
		val.FullName = "profile.dump_profile_recorders";
		val.ServerAdmin = true;
		val.Variable = false;
		val.Call = delegate(Arg arg)
		{
			RuntimeProfiler.dump_profile_recorders(arg);
		};
		array[1286] = val;
		val = new Command();
		val.Name = "profiling_entities";
		val.Parent = "profile";
		val.FullName = "profile.profiling_entities";
		val.ServerAdmin = true;
		val.Description = "0 = off, 1 = spawn/kill, 2 = spawn/kill per entity, 3 = count every '5 min'";
		val.Variable = true;
		val.GetOveride = () => RuntimeProfiler.profiling_entities.ToString();
		val.SetOveride = delegate(string str)
		{
			RuntimeProfiler.profiling_entities = StringExtensions.ToInt(str, 0);
		};
		array[1287] = val;
		val = new Command();
		val.Name = "profiling_entity_count_interval";
		val.Parent = "profile";
		val.FullName = "profile.profiling_entity_count_interval";
		val.ServerAdmin = true;
		val.Description = "How frequently to count all entities across the server";
		val.Variable = true;
		val.GetOveride = () => RuntimeProfiler.profiling_entity_count_interval.ToString();
		val.SetOveride = delegate(string str)
		{
			RuntimeProfiler.profiling_entity_count_interval = StringExtensions.ToInt(str, 0);
		};
		array[1288] = val;
		val = new Command();
		val.Name = "profiling_fixed_invokes";
		val.Parent = "profile";
		val.FullName = "profile.profiling_fixed_invokes";
		val.ServerAdmin = true;
		val.Description = "0 = off, 1 = stats per frame, 2 = stats per method";
		val.Variable = true;
		val.GetOveride = () => RuntimeProfiler.profiling_fixed_invokes.ToString();
		val.SetOveride = delegate(string str)
		{
			RuntimeProfiler.profiling_fixed_invokes = StringExtensions.ToInt(str, 0);
		};
		array[1289] = val;
		val = new Command();
		val.Name = "profiling_invokes";
		val.Parent = "profile";
		val.FullName = "profile.profiling_invokes";
		val.ServerAdmin = true;
		val.Description = "0 = off, 1 = stats per frame, 2 = stats per method";
		val.Variable = true;
		val.GetOveride = () => RuntimeProfiler.profiling_invokes.ToString();
		val.SetOveride = delegate(string str)
		{
			RuntimeProfiler.profiling_invokes = StringExtensions.ToInt(str, 0);
		};
		array[1290] = val;
		val = new Command();
		val.Name = "profiling_lagspikes";
		val.Parent = "profile";
		val.FullName = "profile.profiling_lagspikes";
		val.ServerAdmin = true;
		val.Description = "Record inbound RPC & ConsoleCommands that cause lag spikes";
		val.Variable = true;
		val.GetOveride = () => RuntimeProfiler.profiling_lagspikes.ToString();
		val.SetOveride = delegate(string str)
		{
			RuntimeProfiler.profiling_lagspikes = StringExtensions.ToBool(str);
		};
		array[1291] = val;
		val = new Command();
		val.Name = "profiling_packets";
		val.Parent = "profile";
		val.FullName = "profile.profiling_packets";
		val.ServerAdmin = true;
		val.Description = "Record type of packets inbound/outbound per frame";
		val.Variable = true;
		val.GetOveride = () => RuntimeProfiler.profiling_packets.ToString();
		val.SetOveride = delegate(string str)
		{
			RuntimeProfiler.profiling_packets = StringExtensions.ToBool(str);
		};
		array[1292] = val;
		val = new Command();
		val.Name = "profiling_ping";
		val.Parent = "profile";
		val.FullName = "profile.profiling_ping";
		val.ServerAdmin = true;
		val.Description = "Raknet statistics, 0 = off, 2 = per connection";
		val.Variable = true;
		val.GetOveride = () => RuntimeProfiler.profiling_ping.ToString();
		val.SetOveride = delegate(string str)
		{
			RuntimeProfiler.profiling_ping = StringExtensions.ToInt(str, 0);
		};
		array[1293] = val;
		val = new Command();
		val.Name = "profiling_ping_interval";
		val.Parent = "profile";
		val.FullName = "profile.profiling_ping_interval";
		val.ServerAdmin = true;
		val.Description = "How often to flush raknet stats per second";
		val.Variable = true;
		val.GetOveride = () => RuntimeProfiler.profiling_ping_interval.ToString();
		val.SetOveride = delegate(string str)
		{
			RuntimeProfiler.profiling_ping_interval = StringExtensions.ToFloat(str, 0f);
		};
		array[1294] = val;
		val = new Command();
		val.Name = "profiling_ping_per_frame";
		val.Parent = "profile";
		val.FullName = "profile.profiling_ping_per_frame";
		val.ServerAdmin = true;
		val.Variable = true;
		val.GetOveride = () => RuntimeProfiler.profiling_ping_per_frame.ToString();
		val.SetOveride = delegate(string str)
		{
			RuntimeProfiler.profiling_ping_per_frame = StringExtensions.ToInt(str, 0);
		};
		array[1295] = val;
		val = new Command();
		val.Name = "profiling_rcon";
		val.Parent = "profile";
		val.FullName = "profile.profiling_rcon";
		val.ServerAdmin = true;
		val.Description = "0 = off, 1 = count per frame, 2 = connection attempts, 3 = messages";
		val.Variable = true;
		val.GetOveride = () => RuntimeProfiler.profiling_rcon.ToString();
		val.SetOveride = delegate(string str)
		{
			RuntimeProfiler.profiling_rcon = StringExtensions.ToInt(str, 0);
		};
		array[1296] = val;
		val = new Command();
		val.Name = "profiling_rcon_message_length";
		val.Parent = "profile";
		val.FullName = "profile.profiling_rcon_message_length";
		val.ServerAdmin = true;
		val.Description = "Clamp the length of logged RCON messages to prevent the profiler from being flooded with large messages";
		val.Variable = true;
		val.GetOveride = () => RuntimeProfiler.profiling_rcon_message_length.ToString();
		val.SetOveride = delegate(string str)
		{
			RuntimeProfiler.profiling_rcon_message_length = StringExtensions.ToInt(str, 0);
		};
		array[1297] = val;
		val = new Command();
		val.Name = "profiling_work_queue";
		val.Parent = "profile";
		val.FullName = "profile.profiling_work_queue";
		val.ServerAdmin = true;
		val.Description = "Record execution time of ObjectWorkQueues per frame";
		val.Variable = true;
		val.GetOveride = () => RuntimeProfiler.profiling_work_queue.ToString();
		val.SetOveride = delegate(string str)
		{
			RuntimeProfiler.profiling_work_queue = StringExtensions.ToBool(str);
		};
		array[1298] = val;
		val = new Command();
		val.Name = "rcon_lagspike_threshold";
		val.Parent = "profile";
		val.FullName = "profile.rcon_lagspike_threshold";
		val.ServerAdmin = true;
		val.Variable = true;
		val.GetOveride = () => RuntimeProfiler.rcon_lagspike_threshold.ToString();
		val.SetOveride = delegate(string str)
		{
			RuntimeProfiler.rcon_lagspike_threshold = StringExtensions.ToInt(str, 0);
		};
		array[1299] = val;
		val = new Command();
		val.Name = "rpc_lagspike_threshold";
		val.Parent = "profile";
		val.FullName = "profile.rpc_lagspike_threshold";
		val.ServerAdmin = true;
		val.Variable = true;
		val.GetOveride = () => RuntimeProfiler.rpc_lagspike_threshold.ToString();
		val.SetOveride = delegate(string str)
		{
			RuntimeProfiler.rpc_lagspike_threshold = StringExtensions.ToInt(str, 0);
		};
		array[1300] = val;
		val = new Command();
		val.Name = "runtime_profiling";
		val.Parent = "profile";
		val.FullName = "profile.runtime_profiling";
		val.ServerAdmin = true;
		val.Saved = true;
		val.Description = "0 = off, 1 = basic, 2 = everything. This will reset all profiling convars, however they can be modified afterwards";
		val.Variable = true;
		val.GetOveride = () => RuntimeProfiler.runtime_profiling.ToString();
		val.SetOveride = delegate(string str)
		{
			RuntimeProfiler.runtime_profiling = StringExtensions.ToInt(str, 0);
		};
		array[1301] = val;
		val = new Command();
		val.Name = "runtime_profiling_interval";
		val.Parent = "profile";
		val.FullName = "profile.runtime_profiling_interval";
		val.ServerAdmin = true;
		val.Variable = true;
		val.GetOveride = () => RuntimeProfiler.runtime_profiling_interval.ToString();
		val.SetOveride = delegate(string str)
		{
			RuntimeProfiler.runtime_profiling_interval = StringExtensions.ToInt(str, 0);
		};
		array[1302] = val;
		val = new Command();
		val.Name = "runtime_profiling_persist";
		val.Parent = "profile";
		val.FullName = "profile.runtime_profiling_persist";
		val.ServerAdmin = true;
		val.Saved = true;
		val.Description = "Enable to allow runtime profiling to persist across restarts";
		val.Variable = true;
		val.GetOveride = () => RuntimeProfiler.runtime_profiling_persist.ToString();
		val.SetOveride = delegate(string str)
		{
			RuntimeProfiler.runtime_profiling_persist = StringExtensions.ToBool(str);
		};
		array[1303] = val;
		val = new Command();
		val.Name = "runtime_profiling_pool_flush_interval";
		val.Parent = "profile";
		val.FullName = "profile.runtime_profiling_pool_flush_interval";
		val.ServerAdmin = true;
		val.Description = "How often to flush pooling stats in seconds";
		val.Variable = true;
		val.GetOveride = () => RuntimeProfiler.runtime_profiling_pool_flush_interval.ToString();
		val.SetOveride = delegate(string str)
		{
			RuntimeProfiler.runtime_profiling_pool_flush_interval = StringExtensions.ToInt(str, 0);
		};
		array[1304] = val;
		val = new Command();
		val.Name = "runtime_profiling_pooling";
		val.Parent = "profile";
		val.FullName = "profile.runtime_profiling_pooling";
		val.ServerAdmin = true;
		val.Description = "0 = off, 1 = flush every 5 minutes";
		val.Variable = true;
		val.GetOveride = () => RuntimeProfiler.runtime_profiling_pooling.ToString();
		val.SetOveride = delegate(string str)
		{
			RuntimeProfiler.runtime_profiling_pooling = StringExtensions.ToInt(str, 0);
		};
		array[1305] = val;
		val = new Command();
		val.Name = "runtime_profiling_uploader_pooling";
		val.Parent = "profile";
		val.FullName = "profile.runtime_profiling_uploader_pooling";
		val.ServerAdmin = true;
		val.Description = "Should analytics bulk uploaders use pooling";
		val.Variable = true;
		val.GetOveride = () => RuntimeProfiler.runtime_profiling_uploader_pooling.ToString();
		val.SetOveride = delegate(string str)
		{
			RuntimeProfiler.runtime_profiling_uploader_pooling = StringExtensions.ToBool(str);
		};
		array[1306] = val;
		val = new Command();
		val.Name = "tick_uploader_lifetime";
		val.Parent = "ticklogging";
		val.FullName = "ticklogging.tick_uploader_lifetime";
		val.ServerAdmin = true;
		val.Variable = true;
		val.GetOveride = () => TickLogging.tick_uploader_lifetime.ToString();
		val.SetOveride = delegate(string str)
		{
			TickLogging.tick_uploader_lifetime = StringExtensions.ToInt(str, 0);
		};
		array[1307] = val;
		val = new Command();
		val.Name = "simhours";
		val.Parent = "farmableanimal";
		val.FullName = "farmableanimal.simhours";
		val.ServerAdmin = true;
		val.Description = "Simulates the provided number of hours on all farm animals within 10m";
		val.Variable = false;
		val.Call = delegate(Arg arg)
		{
			FarmableAnimal.SimHours(arg);
		};
		array[1308] = val;
		val = new Command();
		val.Name = "movetowardsrate";
		val.Parent = "frankensteinbrain";
		val.FullName = "frankensteinbrain.movetowardsrate";
		val.ServerAdmin = true;
		val.Variable = true;
		val.GetOveride = () => FrankensteinBrain.MoveTowardsRate.ToString();
		val.SetOveride = delegate(string str)
		{
			FrankensteinBrain.MoveTowardsRate = StringExtensions.ToFloat(str, 0f);
		};
		array[1309] = val;
		val = new Command();
		val.Name = "decayminutes";
		val.Parent = "frankensteinpet";
		val.FullName = "frankensteinpet.decayminutes";
		val.ServerAdmin = true;
		val.Description = "How long before a Frankenstein Pet dies un controlled and not asleep on table";
		val.Variable = true;
		val.GetOveride = () => FrankensteinPet.decayminutes.ToString();
		val.SetOveride = delegate(string str)
		{
			FrankensteinPet.decayminutes = StringExtensions.ToFloat(str, 0f);
		};
		array[1310] = val;
		val = new Command();
		val.Name = "reclaim_building_auth";
		val.Parent = "gamemodesoftcore";
		val.FullName = "gamemodesoftcore.reclaim_building_auth";
		val.ServerAdmin = true;
		val.Variable = true;
		val.GetOveride = () => GameModeSoftcore.reclaim_building_auth.ToString();
		val.SetOveride = delegate(string str)
		{
			GameModeSoftcore.reclaim_building_auth = StringExtensions.ToBool(str);
		};
		array[1311] = val;
		val = new Command();
		val.Name = "reclaim_fraction_belt";
		val.Parent = "gamemodesoftcore";
		val.FullName = "gamemodesoftcore.reclaim_fraction_belt";
		val.ServerAdmin = true;
		val.Variable = true;
		val.GetOveride = () => GameModeSoftcore.reclaim_fraction_belt.ToString();
		val.SetOveride = delegate(string str)
		{
			GameModeSoftcore.reclaim_fraction_belt = StringExtensions.ToFloat(str, 0f);
		};
		array[1312] = val;
		val = new Command();
		val.Name = "reclaim_fraction_main";
		val.Parent = "gamemodesoftcore";
		val.FullName = "gamemodesoftcore.reclaim_fraction_main";
		val.ServerAdmin = true;
		val.Variable = true;
		val.GetOveride = () => GameModeSoftcore.reclaim_fraction_main.ToString();
		val.SetOveride = delegate(string str)
		{
			GameModeSoftcore.reclaim_fraction_main = StringExtensions.ToFloat(str, 0f);
		};
		array[1313] = val;
		val = new Command();
		val.Name = "reclaim_fraction_wear";
		val.Parent = "gamemodesoftcore";
		val.FullName = "gamemodesoftcore.reclaim_fraction_wear";
		val.ServerAdmin = true;
		val.Variable = true;
		val.GetOveride = () => GameModeSoftcore.reclaim_fraction_wear.ToString();
		val.SetOveride = delegate(string str)
		{
			GameModeSoftcore.reclaim_fraction_wear = StringExtensions.ToFloat(str, 0f);
		};
		array[1314] = val;
		val = new Command();
		val.Name = "reclaim_suicide";
		val.Parent = "gamemodesoftcore";
		val.FullName = "gamemodesoftcore.reclaim_suicide";
		val.ServerAdmin = true;
		val.Variable = true;
		val.GetOveride = () => GameModeSoftcore.reclaim_suicide.ToString();
		val.SetOveride = delegate(string str)
		{
			GameModeSoftcore.reclaim_suicide = StringExtensions.ToBool(str);
		};
		array[1315] = val;
		val = new Command();
		val.Name = "framebudgetms";
		val.Parent = "growableentity";
		val.FullName = "growableentity.framebudgetms";
		val.ServerAdmin = true;
		val.Variable = true;
		val.GetOveride = () => GrowableEntity.framebudgetms.ToString();
		val.SetOveride = delegate(string str)
		{
			GrowableEntity.framebudgetms = StringExtensions.ToFloat(str, 0f);
		};
		array[1316] = val;
		val = new Command();
		val.Name = "growall";
		val.Parent = "growableentity";
		val.FullName = "growableentity.growall";
		val.ServerAdmin = true;
		val.Variable = false;
		val.Call = delegate(Arg arg)
		{
			GrowableEntity.GrowAll(arg);
		};
		array[1317] = val;
		val = new Command();
		val.Name = "gun_trap_budget_ms";
		val.Parent = "guntrap";
		val.FullName = "guntrap.gun_trap_budget_ms";
		val.ServerAdmin = true;
		val.Description = "How many milliseconds to spend on target scanning per frame";
		val.Variable = true;
		val.GetOveride = () => GunTrap.gun_trap_budget_ms.ToString();
		val.SetOveride = delegate(string str)
		{
			GunTrap.gun_trap_budget_ms = StringExtensions.ToFloat(str, 0f);
		};
		array[1318] = val;
		val = new Command();
		val.Name = "decayseconds";
		val.Parent = "hackablelockedcrate";
		val.FullName = "hackablelockedcrate.decayseconds";
		val.ServerAdmin = true;
		val.Description = "How many seconds until the crate is destroyed without any hack attempts";
		val.Variable = true;
		val.GetOveride = () => HackableLockedCrate.decaySeconds.ToString();
		val.SetOveride = delegate(string str)
		{
			HackableLockedCrate.decaySeconds = StringExtensions.ToFloat(str, 0f);
		};
		array[1319] = val;
		val = new Command();
		val.Name = "requiredhackseconds";
		val.Parent = "hackablelockedcrate";
		val.FullName = "hackablelockedcrate.requiredhackseconds";
		val.ServerAdmin = true;
		val.Description = "How many seconds for the crate to unlock";
		val.Variable = true;
		val.GetOveride = () => HackableLockedCrate.requiredHackSeconds.ToString();
		val.SetOveride = delegate(string str)
		{
			HackableLockedCrate.requiredHackSeconds = StringExtensions.ToFloat(str, 0f);
		};
		array[1320] = val;
		val = new Command();
		val.Name = "lifetime";
		val.Parent = "halloweendungeon";
		val.FullName = "halloweendungeon.lifetime";
		val.ServerAdmin = true;
		val.Description = "How long each active dungeon should last before dying";
		val.ShowInAdminUI = true;
		val.Variable = true;
		val.GetOveride = () => HalloweenDungeon.lifetime.ToString();
		val.SetOveride = delegate(string str)
		{
			HalloweenDungeon.lifetime = StringExtensions.ToFloat(str, 0f);
		};
		array[1321] = val;
		val = new Command();
		val.Name = "population";
		val.Parent = "halloweendungeon";
		val.FullName = "halloweendungeon.population";
		val.ServerAdmin = true;
		val.Description = "Population active on the server";
		val.ShowInAdminUI = true;
		val.Variable = true;
		val.GetOveride = () => HalloweenDungeon.population.ToString();
		val.SetOveride = delegate(string str)
		{
			HalloweenDungeon.population = StringExtensions.ToFloat(str, 0f);
		};
		array[1322] = val;
		val = new Command();
		val.Name = "maxconditionrepairlossonpush";
		val.Parent = "handcuffs";
		val.FullName = "handcuffs.maxconditionrepairlossonpush";
		val.ServerAdmin = true;
		val.Variable = true;
		val.GetOveride = () => Handcuffs.maxConditionRepairLossOnPush.ToString();
		val.SetOveride = delegate(string str)
		{
			Handcuffs.maxConditionRepairLossOnPush = StringExtensions.ToFloat(str, 0f);
		};
		array[1323] = val;
		val = new Command();
		val.Name = "restrainedpushdamage";
		val.Parent = "handcuffs";
		val.FullName = "handcuffs.restrainedpushdamage";
		val.ServerAdmin = true;
		val.Variable = true;
		val.GetOveride = () => Handcuffs.restrainedPushDamage.ToString();
		val.SetOveride = delegate(string str)
		{
			Handcuffs.restrainedPushDamage = StringExtensions.ToFloat(str, 0f);
		};
		array[1324] = val;
		val = new Command();
		val.Name = "togglecuffslocked";
		val.Parent = "handcuffs";
		val.FullName = "handcuffs.togglecuffslocked";
		val.ServerAdmin = true;
		val.Variable = false;
		val.Call = delegate(Arg arg)
		{
			Handcuffs.togglecuffslocked(arg);
		};
		array[1325] = val;
		val = new Command();
		val.Name = "generategrid";
		val.Parent = "hexagongridgenerator";
		val.FullName = "hexagongridgenerator.generategrid";
		val.ServerAdmin = true;
		val.Description = "<gridSize> 5 <tileSpacing> 1.35";
		val.Variable = false;
		val.Call = delegate(Arg arg)
		{
			HexagonGridGenerator.generategrid(arg);
		};
		array[1326] = val;
		val = new Command();
		val.Name = "minimumaltitudeterrain";
		val.Parent = "hotairballoon";
		val.FullName = "hotairballoon.minimumaltitudeterrain";
		val.ServerAdmin = true;
		val.Variable = true;
		val.GetOveride = () => HotAirBalloon.minimumAltitudeTerrain.ToString();
		val.SetOveride = delegate(string str)
		{
			HotAirBalloon.minimumAltitudeTerrain = StringExtensions.ToFloat(str, 0f);
		};
		array[1327] = val;
		val = new Command();
		val.Name = "outsidedecayminutes";
		val.Parent = "hotairballoon";
		val.FullName = "hotairballoon.outsidedecayminutes";
		val.ServerAdmin = true;
		val.Description = "How long before a HAB loses all its health while outside";
		val.Variable = true;
		val.GetOveride = () => HotAirBalloon.outsidedecayminutes.ToString();
		val.SetOveride = delegate(string str)
		{
			HotAirBalloon.outsidedecayminutes = StringExtensions.ToFloat(str, 0f);
		};
		array[1328] = val;
		val = new Command();
		val.Name = "population";
		val.Parent = "hotairballoon";
		val.FullName = "hotairballoon.population";
		val.ServerAdmin = true;
		val.Description = "Population active on the server";
		val.ShowInAdminUI = true;
		val.Variable = true;
		val.GetOveride = () => HotAirBalloon.population.ToString();
		val.SetOveride = delegate(string str)
		{
			HotAirBalloon.population = StringExtensions.ToFloat(str, 0f);
		};
		array[1329] = val;
		val = new Command();
		val.Name = "serviceceiling";
		val.Parent = "hotairballoon";
		val.FullName = "hotairballoon.serviceceiling";
		val.ServerAdmin = true;
		val.Variable = true;
		val.GetOveride = () => HotAirBalloon.serviceCeiling.ToString();
		val.SetOveride = delegate(string str)
		{
			HotAirBalloon.serviceCeiling = StringExtensions.ToFloat(str, 0f);
		};
		array[1330] = val;
		val = new Command();
		val.Name = "backtracking";
		val.Parent = "ioentity";
		val.FullName = "ioentity.backtracking";
		val.ServerAdmin = true;
		val.Variable = true;
		val.GetOveride = () => IOEntity.backtracking.ToString();
		val.SetOveride = delegate(string str)
		{
			IOEntity.backtracking = StringExtensions.ToInt(str, 0);
		};
		array[1331] = val;
		val = new Command();
		val.Name = "debugbudget";
		val.Parent = "ioentity";
		val.FullName = "ioentity.debugbudget";
		val.ServerAdmin = true;
		val.Description = "Print out what is taking so long in the IO frame budget";
		val.Variable = true;
		val.GetOveride = () => IOEntity.debugBudget.ToString();
		val.SetOveride = delegate(string str)
		{
			IOEntity.debugBudget = StringExtensions.ToBool(str);
		};
		array[1332] = val;
		val = new Command();
		val.Name = "debugbudgetthreshold";
		val.Parent = "ioentity";
		val.FullName = "ioentity.debugbudgetthreshold";
		val.ServerAdmin = true;
		val.Description = "Ignore frames with a lower ms than this while debugBudget is active";
		val.Variable = true;
		val.GetOveride = () => IOEntity.debugBudgetThreshold.ToString();
		val.SetOveride = delegate(string str)
		{
			IOEntity.debugBudgetThreshold = StringExtensions.ToFloat(str, 0f);
		};
		array[1333] = val;
		val = new Command();
		val.Name = "debugqueue";
		val.Parent = "ioentity";
		val.FullName = "ioentity.debugqueue";
		val.ServerAdmin = true;
		val.Variable = false;
		val.Call = delegate(Arg arg)
		{
			IOEntity.DebugQueue(arg);
		};
		array[1334] = val;
		val = new Command();
		val.Name = "framebudgetelectrichighpriorityms";
		val.Parent = "ioentity";
		val.FullName = "ioentity.framebudgetelectrichighpriorityms";
		val.ServerAdmin = true;
		val.Variable = true;
		val.GetOveride = () => IOEntity.frameBudgetElectricHighPriorityMs.ToString();
		val.SetOveride = delegate(string str)
		{
			IOEntity.frameBudgetElectricHighPriorityMs = StringExtensions.ToFloat(str, 0f);
		};
		array[1335] = val;
		val = new Command();
		val.Name = "framebudgetelectriclowpriorityms";
		val.Parent = "ioentity";
		val.FullName = "ioentity.framebudgetelectriclowpriorityms";
		val.ServerAdmin = true;
		val.Variable = true;
		val.GetOveride = () => IOEntity.frameBudgetElectricLowPriorityMs.ToString();
		val.SetOveride = delegate(string str)
		{
			IOEntity.frameBudgetElectricLowPriorityMs = StringExtensions.ToFloat(str, 0f);
		};
		array[1336] = val;
		val = new Command();
		val.Name = "framebudgetfluidms";
		val.Parent = "ioentity";
		val.FullName = "ioentity.framebudgetfluidms";
		val.ServerAdmin = true;
		val.Variable = true;
		val.GetOveride = () => IOEntity.frameBudgetFluidMs.ToString();
		val.SetOveride = delegate(string str)
		{
			IOEntity.frameBudgetFluidMs = StringExtensions.ToFloat(str, 0f);
		};
		array[1337] = val;
		val = new Command();
		val.Name = "framebudgetgenericms";
		val.Parent = "ioentity";
		val.FullName = "ioentity.framebudgetgenericms";
		val.ServerAdmin = true;
		val.Variable = true;
		val.GetOveride = () => IOEntity.frameBudgetGenericMs.ToString();
		val.SetOveride = delegate(string str)
		{
			IOEntity.frameBudgetGenericMs = StringExtensions.ToFloat(str, 0f);
		};
		array[1338] = val;
		val = new Command();
		val.Name = "framebudgetindustrialms";
		val.Parent = "ioentity";
		val.FullName = "ioentity.framebudgetindustrialms";
		val.ServerAdmin = true;
		val.Variable = true;
		val.GetOveride = () => IOEntity.frameBudgetIndustrialMs.ToString();
		val.SetOveride = delegate(string str)
		{
			IOEntity.frameBudgetIndustrialMs = StringExtensions.ToFloat(str, 0f);
		};
		array[1339] = val;
		val = new Command();
		val.Name = "framebudgetkineticms";
		val.Parent = "ioentity";
		val.FullName = "ioentity.framebudgetkineticms";
		val.ServerAdmin = true;
		val.Variable = true;
		val.GetOveride = () => IOEntity.frameBudgetKineticMs.ToString();
		val.SetOveride = delegate(string str)
		{
			IOEntity.frameBudgetKineticMs = StringExtensions.ToFloat(str, 0f);
		};
		array[1340] = val;
		val = new Command();
		val.Name = "infiniteiopower";
		val.Parent = "ioentity";
		val.FullName = "ioentity.infiniteiopower";
		val.ServerAdmin = true;
		val.ClientAdmin = true;
		val.Client = true;
		val.Description = "All player placed electrical entities will receive full power without needing to be plugged into anything";
		val.Replicated = true;
		val.Variable = true;
		val.GetOveride = () => IOEntity.infiniteIoPower.ToString();
		val.SetOveride = delegate(string str)
		{
			IOEntity.infiniteIoPower = StringExtensions.ToBool(str);
		};
		val.Default = "False";
		array[1341] = val;
		val = new Command();
		val.Name = "responsetime";
		val.Parent = "ioentity";
		val.FullName = "ioentity.responsetime";
		val.ServerAdmin = true;
		val.Variable = true;
		val.GetOveride = () => IOEntity.responsetime.ToString();
		val.SetOveride = delegate(string str)
		{
			IOEntity.responsetime = StringExtensions.ToFloat(str, 0f);
		};
		array[1342] = val;
		val = new Command();
		val.Name = "enablepooling";
		val.Parent = "itemmanager";
		val.FullName = "itemmanager.enablepooling";
		val.ServerAdmin = true;
		val.Variable = true;
		val.GetOveride = () => ItemManager.EnablePooling.ToString();
		val.SetOveride = delegate(string str)
		{
			ItemManager.EnablePooling = StringExtensions.ToBool(str);
		};
		array[1343] = val;
		val = new Command();
		val.Name = "framebudgetms";
		val.Parent = "junkpilewater";
		val.FullName = "junkpilewater.framebudgetms";
		val.ServerAdmin = true;
		val.Variable = true;
		val.GetOveride = () => JunkPileWater.framebudgetms.ToString();
		val.SetOveride = delegate(string str)
		{
			JunkPileWater.framebudgetms = StringExtensions.ToFloat(str, 0f);
		};
		array[1344] = val;
		val = new Command();
		val.Name = "max_shelters";
		val.Parent = "legacyshelter";
		val.FullName = "legacyshelter.max_shelters";
		val.ServerAdmin = true;
		val.ClientAdmin = true;
		val.Client = true;
		val.Replicated = true;
		val.Variable = true;
		val.GetOveride = () => LegacyShelter.max_shelters.ToString();
		val.SetOveride = delegate(string str)
		{
			LegacyShelter.max_shelters = StringExtensions.ToInt(str, 0);
		};
		val.Default = "1";
		array[1345] = val;
		val = new Command();
		val.Name = "megaphonevoicerange";
		val.Parent = "megaphone";
		val.FullName = "megaphone.megaphonevoicerange";
		val.ServerAdmin = true;
		val.ClientAdmin = true;
		val.Client = true;
		val.Replicated = true;
		val.Variable = true;
		val.GetOveride = () => Megaphone.MegaphoneVoiceRange.ToString();
		val.SetOveride = delegate(string str)
		{
			Megaphone.MegaphoneVoiceRange = StringExtensions.ToFloat(str, 0f);
		};
		val.Default = "100";
		array[1346] = val;
		val = new Command();
		val.Name = "add";
		val.Parent = "meta";
		val.FullName = "meta.add";
		val.ServerAdmin = true;
		val.Client = true;
		val.Description = "add <convar> <amount> - adds amount to convar";
		val.Variable = false;
		val.Call = delegate(Arg arg)
		{
			Meta.add(arg);
		};
		array[1347] = val;
		val = new Command();
		val.Name = "timeoutduration";
		val.Parent = "metaldetectorflag";
		val.FullName = "metaldetectorflag.timeoutduration";
		val.ServerAdmin = true;
		val.Variable = true;
		val.GetOveride = () => MetalDetectorFlag.TimeoutDuration.ToString();
		val.SetOveride = delegate(string str)
		{
			MetalDetectorFlag.TimeoutDuration = StringExtensions.ToFloat(str, 0f);
		};
		array[1348] = val;
		val = new Command();
		val.Name = "attemptspersubsourcespawn";
		val.Parent = "metaldetectorsource";
		val.FullName = "metaldetectorsource.attemptspersubsourcespawn";
		val.ServerAdmin = true;
		val.Variable = true;
		val.GetOveride = () => MetalDetectorSource.AttemptsPerSubSourceSpawn.ToString();
		val.SetOveride = delegate(string str)
		{
			MetalDetectorSource.AttemptsPerSubSourceSpawn = StringExtensions.ToInt(str, 0);
		};
		array[1349] = val;
		val = new Command();
		val.Name = "mindistancebetweensubsources";
		val.Parent = "metaldetectorsource";
		val.FullName = "metaldetectorsource.mindistancebetweensubsources";
		val.ServerAdmin = true;
		val.Variable = true;
		val.GetOveride = () => MetalDetectorSource.MinDistanceBetweenSubSources.ToString();
		val.SetOveride = delegate(string str)
		{
			MetalDetectorSource.MinDistanceBetweenSubSources = StringExtensions.ToFloat(str, 0f);
		};
		array[1350] = val;
		val = new Command();
		val.Name = "population";
		val.Parent = "metaldetectorsource";
		val.FullName = "metaldetectorsource.population";
		val.ServerAdmin = true;
		val.Description = "Population active on the server, per square km";
		val.ShowInAdminUI = true;
		val.Variable = true;
		val.GetOveride = () => MetalDetectorSource.Population.ToString();
		val.SetOveride = delegate(string str)
		{
			MetalDetectorSource.Population = StringExtensions.ToFloat(str, 0f);
		};
		array[1351] = val;
		val = new Command();
		val.Name = "servercountsources";
		val.Parent = "metaldetectorsource";
		val.FullName = "metaldetectorsource.servercountsources";
		val.ServerAdmin = true;
		val.Variable = false;
		val.Call = delegate
		{
			MetalDetectorSource.ServerCountSources();
		};
		array[1352] = val;
		val = new Command();
		val.Name = "timeoutduration";
		val.Parent = "metaldetectorsource";
		val.FullName = "metaldetectorsource.timeoutduration";
		val.ServerAdmin = true;
		val.Variable = true;
		val.GetOveride = () => MetalDetectorSource.TimeoutDuration.ToString();
		val.SetOveride = delegate(string str)
		{
			MetalDetectorSource.TimeoutDuration = StringExtensions.ToFloat(str, 0f);
		};
		array[1353] = val;
		val = new Command();
		val.Name = "population";
		val.Parent = "minicopter";
		val.FullName = "minicopter.population";
		val.ServerAdmin = true;
		val.Description = "Population active on the server";
		val.ShowInAdminUI = true;
		val.Variable = true;
		val.GetOveride = () => Minicopter.population.ToString();
		val.SetOveride = delegate(string str)
		{
			Minicopter.population = StringExtensions.ToFloat(str, 0f);
		};
		array[1354] = val;
		val = new Command();
		val.Name = "brokendownminutes";
		val.Parent = "mlrs";
		val.FullName = "mlrs.brokendownminutes";
		val.ServerAdmin = true;
		val.Description = "How many minutes before the MLRS recovers from use and can be used again";
		val.Variable = true;
		val.GetOveride = () => MLRS.brokenDownMinutes.ToString();
		val.SetOveride = delegate(string str)
		{
			MLRS.brokenDownMinutes = StringExtensions.ToFloat(str, 0f);
		};
		array[1355] = val;
		val = new Command();
		val.Name = "outsidedecayminutes";
		val.Parent = "modularcar";
		val.FullName = "modularcar.outsidedecayminutes";
		val.ServerAdmin = true;
		val.Description = "How many minutes before a ModularCar loses all its health while outside";
		val.Variable = true;
		val.GetOveride = () => ModularCar.outsidedecayminutes.ToString();
		val.SetOveride = delegate(string str)
		{
			ModularCar.outsidedecayminutes = StringExtensions.ToFloat(str, 0f);
		};
		array[1356] = val;
		val = new Command();
		val.Name = "population";
		val.Parent = "modularcar";
		val.FullName = "modularcar.population";
		val.ServerAdmin = true;
		val.Description = "Population active on the server";
		val.ShowInAdminUI = true;
		val.Variable = true;
		val.GetOveride = () => ModularCar.population.ToString();
		val.SetOveride = delegate(string str)
		{
			ModularCar.population = StringExtensions.ToFloat(str, 0f);
		};
		array[1357] = val;
		val = new Command();
		val.Name = "use_baked_terrain_mesh";
		val.Parent = "monumentnavmesh";
		val.FullName = "monumentnavmesh.use_baked_terrain_mesh";
		val.ServerAdmin = true;
		val.Variable = true;
		val.GetOveride = () => MonumentNavMesh.use_baked_terrain_mesh.ToString();
		val.SetOveride = delegate(string str)
		{
			MonumentNavMesh.use_baked_terrain_mesh = StringExtensions.ToBool(str);
		};
		array[1358] = val;
		val = new Command();
		val.Name = "decaystartdelayminutes";
		val.Parent = "motorrowboat";
		val.FullName = "motorrowboat.decaystartdelayminutes";
		val.ServerAdmin = true;
		val.Description = "How long until decay begins after the boat was last used";
		val.Variable = true;
		val.GetOveride = () => MotorRowboat.decaystartdelayminutes.ToString();
		val.SetOveride = delegate(string str)
		{
			MotorRowboat.decaystartdelayminutes = StringExtensions.ToFloat(str, 0f);
		};
		array[1359] = val;
		val = new Command();
		val.Name = "deepwaterdecayminutes";
		val.Parent = "motorrowboat";
		val.FullName = "motorrowboat.deepwaterdecayminutes";
		val.ServerAdmin = true;
		val.Description = "How long before a boat loses all its health while in deep water";
		val.Variable = true;
		val.GetOveride = () => MotorRowboat.deepwaterdecayminutes.ToString();
		val.SetOveride = delegate(string str)
		{
			MotorRowboat.deepwaterdecayminutes = StringExtensions.ToFloat(str, 0f);
		};
		array[1360] = val;
		val = new Command();
		val.Name = "outsidedecayminutes";
		val.Parent = "motorrowboat";
		val.FullName = "motorrowboat.outsidedecayminutes";
		val.ServerAdmin = true;
		val.Description = "How long before a boat loses all its health while outside. If it's in deep water, deepwaterdecayminutes is used";
		val.Variable = true;
		val.GetOveride = () => MotorRowboat.outsidedecayminutes.ToString();
		val.SetOveride = delegate(string str)
		{
			MotorRowboat.outsidedecayminutes = StringExtensions.ToFloat(str, 0f);
		};
		array[1361] = val;
		val = new Command();
		val.Name = "population";
		val.Parent = "motorrowboat";
		val.FullName = "motorrowboat.population";
		val.ServerAdmin = true;
		val.Description = "Population active on the server";
		val.ShowInAdminUI = true;
		val.Variable = true;
		val.GetOveride = () => MotorRowboat.population.ToString();
		val.SetOveride = delegate(string str)
		{
			MotorRowboat.population = StringExtensions.ToFloat(str, 0f);
		};
		array[1362] = val;
		val = new Command();
		val.Name = "update";
		val.Parent = "note";
		val.FullName = "note.update";
		val.ServerUser = true;
		val.Variable = false;
		val.Call = delegate(Arg arg)
		{
			note.update(arg);
		};
		array[1363] = val;
		val = new Command();
		val.Name = "sleeperhostiledelay";
		val.Parent = "npcautoturret";
		val.FullName = "npcautoturret.sleeperhostiledelay";
		val.ServerAdmin = true;
		val.ClientAdmin = true;
		val.Client = true;
		val.Description = "How many seconds until a sleeping player is considered hostile";
		val.Replicated = true;
		val.Variable = true;
		val.GetOveride = () => NPCAutoTurret.sleeperhostiledelay.ToString();
		val.SetOveride = delegate(string str)
		{
			NPCAutoTurret.sleeperhostiledelay = StringExtensions.ToFloat(str, 0f);
		};
		val.Default = "1200";
		array[1364] = val;
		val = new Command();
		val.Name = "addhours";
		val.Parent = "npcvendingmachine";
		val.FullName = "npcvendingmachine.addhours";
		val.ServerAdmin = true;
		val.Description = "Simulates the provided number of hours passing in the vending machine system";
		val.Variable = false;
		val.Call = delegate(Arg arg)
		{
			NPCVendingMachine.addHours(arg);
		};
		array[1365] = val;
		val = new Command();
		val.Name = "dynamicpricingenabled";
		val.Parent = "npcvendingmachine";
		val.FullName = "npcvendingmachine.dynamicpricingenabled";
		val.ServerAdmin = true;
		val.Saved = true;
		val.Description = "Whether to run the the dynamic pricing system";
		val.Variable = true;
		val.GetOveride = () => NPCVendingMachine.DynamicPricingEnabled.ToString();
		val.SetOveride = delegate(string str)
		{
			NPCVendingMachine.DynamicPricingEnabled = StringExtensions.ToBool(str);
		};
		array[1366] = val;
		val = new Command();
		val.Name = "maximumpricemultiplier";
		val.Parent = "npcvendingmachine";
		val.FullName = "npcvendingmachine.maximumpricemultiplier";
		val.ServerAdmin = true;
		val.Saved = true;
		val.Description = "The maximum point that a price can increase to (2 = 200%)";
		val.Variable = true;
		val.GetOveride = () => NPCVendingMachine.MaximumPriceMultiplier.ToString();
		val.SetOveride = delegate(string str)
		{
			NPCVendingMachine.MaximumPriceMultiplier = StringExtensions.ToFloat(str, 0f);
		};
		array[1367] = val;
		val = new Command();
		val.Name = "minimumpricemultiplier";
		val.Parent = "npcvendingmachine";
		val.FullName = "npcvendingmachine.minimumpricemultiplier";
		val.ServerAdmin = true;
		val.Saved = true;
		val.Description = "The Minimum point that the price can drop to (0.5 = 50% off)";
		val.Variable = true;
		val.GetOveride = () => NPCVendingMachine.MinimumPriceMultiplier.ToString();
		val.SetOveride = delegate(string str)
		{
			NPCVendingMachine.MinimumPriceMultiplier = StringExtensions.ToFloat(str, 0f);
		};
		array[1368] = val;
		val = new Command();
		val.Name = "pricedecreaseamount";
		val.Parent = "npcvendingmachine";
		val.FullName = "npcvendingmachine.pricedecreaseamount";
		val.ServerAdmin = true;
		val.Saved = true;
		val.Description = "How much to decrease the price for if it is underselling (0.05 = 5%)";
		val.Variable = true;
		val.GetOveride = () => NPCVendingMachine.PriceDecreaseAmount.ToString();
		val.SetOveride = delegate(string str)
		{
			NPCVendingMachine.PriceDecreaseAmount = StringExtensions.ToFloat(str, 0f);
		};
		array[1369] = val;
		val = new Command();
		val.Name = "priceincreaseamount";
		val.Parent = "npcvendingmachine";
		val.FullName = "npcvendingmachine.priceincreaseamount";
		val.ServerAdmin = true;
		val.Saved = true;
		val.Description = "How much to increase the price by if it is selling a lot (0.05 = 5%)";
		val.Variable = true;
		val.GetOveride = () => NPCVendingMachine.PriceIncreaseAmount.ToString();
		val.SetOveride = delegate(string str)
		{
			NPCVendingMachine.PriceIncreaseAmount = StringExtensions.ToFloat(str, 0f);
		};
		array[1370] = val;
		val = new Command();
		val.Name = "priceupdatefrequencybiweekly";
		val.Parent = "npcvendingmachine";
		val.FullName = "npcvendingmachine.priceupdatefrequencybiweekly";
		val.ServerAdmin = true;
		val.Saved = true;
		val.Description = "How many realtime hours are checked when looking for price increases. Max 72 (10 days), min 0.5 (half an hour)";
		val.ShowInAdminUI = true;
		val.Variable = true;
		val.GetOveride = () => NPCVendingMachine.PriceUpdateFrequencyBiWeekly.ToString();
		val.SetOveride = delegate(string str)
		{
			NPCVendingMachine.PriceUpdateFrequencyBiWeekly = StringExtensions.ToFloat(str, 0f);
		};
		array[1371] = val;
		val = new Command();
		val.Name = "priceupdatefrequencydefault";
		val.Parent = "npcvendingmachine";
		val.FullName = "npcvendingmachine.priceupdatefrequencydefault";
		val.ServerAdmin = true;
		val.Saved = true;
		val.Description = "How many realtime hours are checked when looking for price increases. Max 72 (10 days), min 0.5 (half an hour)";
		val.ShowInAdminUI = true;
		val.Variable = true;
		val.GetOveride = () => NPCVendingMachine.PriceUpdateFrequencyDefault.ToString();
		val.SetOveride = delegate(string str)
		{
			NPCVendingMachine.PriceUpdateFrequencyDefault = StringExtensions.ToFloat(str, 0f);
		};
		array[1372] = val;
		val = new Command();
		val.Name = "priceupdatefrequencyweekly";
		val.Parent = "npcvendingmachine";
		val.FullName = "npcvendingmachine.priceupdatefrequencyweekly";
		val.ServerAdmin = true;
		val.Saved = true;
		val.Description = "How many realtime hours are checked when looking for price increases. Max 72 (10 days), min 0.5 (half an hour)";
		val.ShowInAdminUI = true;
		val.Variable = true;
		val.GetOveride = () => NPCVendingMachine.PriceUpdateFrequencyWeekly.ToString();
		val.SetOveride = delegate(string str)
		{
			NPCVendingMachine.PriceUpdateFrequencyWeekly = StringExtensions.ToFloat(str, 0f);
		};
		array[1373] = val;
		val = new Command();
		val.Name = "printallpricechanges";
		val.Parent = "npcvendingmachine";
		val.FullName = "npcvendingmachine.printallpricechanges";
		val.ServerAdmin = true;
		val.Description = "Print out all current price changes on the server";
		val.Variable = false;
		val.Call = delegate(Arg arg)
		{
			NPCVendingMachine.printAllPriceChanges(arg);
		};
		array[1374] = val;
		val = new Command();
		val.Name = "resetdynamicpricing";
		val.Parent = "npcvendingmachine";
		val.FullName = "npcvendingmachine.resetdynamicpricing";
		val.ServerAdmin = true;
		val.Description = "Resets the state of all discounts and surcharges from NPC vending machines";
		val.Variable = false;
		val.Call = delegate
		{
			NPCVendingMachine.resetDynamicPricing();
		};
		array[1375] = val;
		val = new Command();
		val.Name = "resetfrequencytags";
		val.Parent = "npcvendingmachine";
		val.FullName = "npcvendingmachine.resetfrequencytags";
		val.ServerAdmin = true;
		val.Variable = false;
		val.Call = delegate(Arg arg)
		{
			NPCVendingMachine.ResetFrequencyTags(arg);
		};
		array[1376] = val;
		val = new Command();
		val.Name = "startingpricemultiplier";
		val.Parent = "npcvendingmachine";
		val.FullName = "npcvendingmachine.startingpricemultiplier";
		val.ServerAdmin = true;
		val.Saved = true;
		val.Description = "What discount surcharge should be applied to items when the server starts";
		val.Variable = true;
		val.GetOveride = () => NPCVendingMachine.StartingPriceMultiplier.ToString();
		val.SetOveride = delegate(string str)
		{
			NPCVendingMachine.StartingPriceMultiplier = StringExtensions.ToFloat(str, 0f);
		};
		array[1377] = val;
		val = new Command();
		val.Name = "bypassrepack";
		val.Parent = "parachute";
		val.FullName = "parachute.bypassrepack";
		val.ServerAdmin = true;
		val.Saved = true;
		val.Variable = true;
		val.GetOveride = () => Parachute.BypassRepack.ToString();
		val.SetOveride = delegate(string str)
		{
			Parachute.BypassRepack = StringExtensions.ToBool(str);
		};
		array[1378] = val;
		val = new Command();
		val.Name = "landinganimations";
		val.Parent = "parachute";
		val.FullName = "parachute.landinganimations";
		val.ServerAdmin = true;
		val.Saved = true;
		val.Variable = true;
		val.GetOveride = () => Parachute.LandingAnimations.ToString();
		val.SetOveride = delegate(string str)
		{
			Parachute.LandingAnimations = StringExtensions.ToBool(str);
		};
		array[1379] = val;
		val = new Command();
		val.Name = "flee_damage_percentage";
		val.Parent = "patrolhelicopterai";
		val.FullName = "patrolhelicopterai.flee_damage_percentage";
		val.ServerAdmin = true;
		val.Variable = true;
		val.GetOveride = () => PatrolHelicopterAI.flee_damage_percentage.ToString();
		val.SetOveride = delegate(string str)
		{
			PatrolHelicopterAI.flee_damage_percentage = StringExtensions.ToFloat(str, 0f);
		};
		array[1380] = val;
		val = new Command();
		val.Name = "monument_crash";
		val.Parent = "patrolhelicopterai";
		val.FullName = "patrolhelicopterai.monument_crash";
		val.ServerAdmin = true;
		val.Variable = true;
		val.GetOveride = () => PatrolHelicopterAI.monument_crash.ToString();
		val.SetOveride = delegate(string str)
		{
			PatrolHelicopterAI.monument_crash = StringExtensions.ToBool(str);
		};
		array[1381] = val;
		val = new Command();
		val.Name = "use_danger_zones";
		val.Parent = "patrolhelicopterai";
		val.FullName = "patrolhelicopterai.use_danger_zones";
		val.ServerAdmin = true;
		val.Variable = true;
		val.GetOveride = () => PatrolHelicopterAI.use_danger_zones.ToString();
		val.SetOveride = delegate(string str)
		{
			PatrolHelicopterAI.use_danger_zones = StringExtensions.ToBool(str);
		};
		array[1382] = val;
		val = new Command();
		val.Name = "controldistance";
		val.Parent = "petbrain";
		val.FullName = "petbrain.controldistance";
		val.ServerAdmin = true;
		val.ClientAdmin = true;
		val.Client = true;
		val.Replicated = true;
		val.Variable = true;
		val.GetOveride = () => PetBrain.ControlDistance.ToString();
		val.SetOveride = delegate(string str)
		{
			PetBrain.ControlDistance = StringExtensions.ToFloat(str, 0f);
		};
		val.Default = "100";
		array[1383] = val;
		val = new Command();
		val.Name = "drownindeepwater";
		val.Parent = "petbrain";
		val.FullName = "petbrain.drownindeepwater";
		val.ServerAdmin = true;
		val.Variable = true;
		val.GetOveride = () => PetBrain.DrownInDeepWater.ToString();
		val.SetOveride = delegate(string str)
		{
			PetBrain.DrownInDeepWater = StringExtensions.ToBool(str);
		};
		array[1384] = val;
		val = new Command();
		val.Name = "drowntimer";
		val.Parent = "petbrain";
		val.FullName = "petbrain.drowntimer";
		val.ServerAdmin = true;
		val.Variable = true;
		val.GetOveride = () => PetBrain.DrownTimer.ToString();
		val.SetOveride = delegate(string str)
		{
			PetBrain.DrownTimer = StringExtensions.ToFloat(str, 0f);
		};
		array[1385] = val;
		val = new Command();
		val.Name = "idlewhenownermounted";
		val.Parent = "petbrain";
		val.FullName = "petbrain.idlewhenownermounted";
		val.ServerAdmin = true;
		val.Variable = true;
		val.GetOveride = () => PetBrain.IdleWhenOwnerMounted.ToString();
		val.SetOveride = delegate(string str)
		{
			PetBrain.IdleWhenOwnerMounted = StringExtensions.ToBool(str);
		};
		array[1386] = val;
		val = new Command();
		val.Name = "idlewhenownerofflineordead";
		val.Parent = "petbrain";
		val.FullName = "petbrain.idlewhenownerofflineordead";
		val.ServerAdmin = true;
		val.Variable = true;
		val.GetOveride = () => PetBrain.IdleWhenOwnerOfflineOrDead.ToString();
		val.SetOveride = delegate(string str)
		{
			PetBrain.IdleWhenOwnerOfflineOrDead = StringExtensions.ToBool(str);
		};
		array[1387] = val;
		val = new Command();
		val.Name = "outsidetestdistance";
		val.Parent = "planterbox";
		val.FullName = "planterbox.outsidetestdistance";
		val.ServerAdmin = true;
		val.Variable = true;
		val.GetOveride = () => PlanterBox.outsideTestDistance.ToString();
		val.SetOveride = delegate(string str)
		{
			PlanterBox.outsideTestDistance = StringExtensions.ToFloat(str, 0f);
		};
		array[1388] = val;
		val = new Command();
		val.Name = "favourablegenechance";
		val.Parent = "planterboxstatic";
		val.FullName = "planterboxstatic.favourablegenechance";
		val.ServerAdmin = true;
		val.Description = "Chance of a favourable gene being picked [0-1]. Setting this to 0 does not ensure no favourable genes are picked up, but it greatly reduces the chances.";
		val.Variable = true;
		val.GetOveride = () => PlanterBoxStatic.FavourableGeneChance.ToString();
		val.SetOveride = delegate(string str)
		{
			PlanterBoxStatic.FavourableGeneChance = StringExtensions.ToFloat(str, 0f);
		};
		array[1389] = val;
		val = new Command();
		val.Name = "insidedecayminutes";
		val.Parent = "playerhelicopter";
		val.FullName = "playerhelicopter.insidedecayminutes";
		val.ServerAdmin = true;
		val.Description = "How long before a player helicopter loses all its health while indoors";
		val.Variable = true;
		val.GetOveride = () => PlayerHelicopter.insidedecayminutes.ToString();
		val.SetOveride = delegate(string str)
		{
			PlayerHelicopter.insidedecayminutes = StringExtensions.ToFloat(str, 0f);
		};
		array[1390] = val;
		val = new Command();
		val.Name = "outsidedecayminutes";
		val.Parent = "playerhelicopter";
		val.FullName = "playerhelicopter.outsidedecayminutes";
		val.ServerAdmin = true;
		val.Description = "How long before a player helicopter loses all its health while outside";
		val.Variable = true;
		val.GetOveride = () => PlayerHelicopter.outsidedecayminutes.ToString();
		val.SetOveride = delegate(string str)
		{
			PlayerHelicopter.outsidedecayminutes = StringExtensions.ToFloat(str, 0f);
		};
		array[1391] = val;
		val = new Command();
		val.Name = "forcebirthday";
		val.Parent = "playerinventory";
		val.FullName = "playerinventory.forcebirthday";
		val.ServerAdmin = true;
		val.Variable = true;
		val.GetOveride = () => PlayerInventory.forceBirthday.ToString();
		val.SetOveride = delegate(string str)
		{
			PlayerInventory.forceBirthday = StringExtensions.ToBool(str);
		};
		array[1392] = val;
		val = new Command();
		val.Name = "population";
		val.Parent = "polarbear";
		val.FullName = "polarbear.population";
		val.ServerAdmin = true;
		val.Description = "Population active on the server, per square km";
		val.ShowInAdminUI = true;
		val.Variable = true;
		val.GetOveride = () => Polarbear.Population.ToString();
		val.SetOveride = delegate(string str)
		{
			Polarbear.Population = StringExtensions.ToFloat(str, 0f);
		};
		array[1393] = val;
		val = new Command();
		val.Name = "materialtoradsratio";
		val.Parent = "radiation";
		val.FullName = "radiation.materialtoradsratio";
		val.ServerAdmin = true;
		val.Variable = true;
		val.GetOveride = () => Radiation.materialToRadsRatio.ToString();
		val.SetOveride = delegate(string str)
		{
			Radiation.materialToRadsRatio = StringExtensions.ToFloat(str, 0f);
		};
		array[1394] = val;
		val = new Command();
		val.Name = "water_inventory_damage";
		val.Parent = "radiation";
		val.FullName = "radiation.water_inventory_damage";
		val.ServerAdmin = true;
		val.Variable = true;
		val.GetOveride = () => Radiation.water_inventory_damage.ToString();
		val.SetOveride = delegate(string str)
		{
			Radiation.water_inventory_damage = StringExtensions.ToBool(str);
		};
		array[1395] = val;
		val = new Command();
		val.Name = "water_loot_damage";
		val.Parent = "radiation";
		val.FullName = "radiation.water_loot_damage";
		val.ServerAdmin = true;
		val.Variable = true;
		val.GetOveride = () => Radiation.water_loot_damage.ToString();
		val.SetOveride = delegate(string str)
		{
			Radiation.water_loot_damage = StringExtensions.ToBool(str);
		};
		array[1396] = val;
		val = new Command();
		val.Name = "reclaim_expire_minutes";
		val.Parent = "reclaimmanager";
		val.FullName = "reclaimmanager.reclaim_expire_minutes";
		val.ServerAdmin = true;
		val.Variable = true;
		val.GetOveride = () => ReclaimManager.reclaim_expire_minutes.ToString();
		val.SetOveride = delegate(string str)
		{
			ReclaimManager.reclaim_expire_minutes = StringExtensions.ToFloat(str, 0f);
		};
		array[1397] = val;
		val = new Command();
		val.Name = "acceptinvite";
		val.Parent = "relationshipmanager";
		val.FullName = "relationshipmanager.acceptinvite";
		val.ServerUser = true;
		val.Variable = false;
		val.Call = delegate(Arg arg)
		{
			RelationshipManager.acceptinvite(arg);
		};
		array[1398] = val;
		val = new Command();
		val.Name = "addtoteam";
		val.Parent = "relationshipmanager";
		val.FullName = "relationshipmanager.addtoteam";
		val.ServerAdmin = true;
		val.Variable = false;
		val.Call = delegate(Arg arg)
		{
			RelationshipManager.addtoteam(arg);
		};
		array[1399] = val;
		val = new Command();
		val.Name = "contacts";
		val.Parent = "relationshipmanager";
		val.FullName = "relationshipmanager.contacts";
		val.ServerAdmin = true;
		val.ClientAdmin = true;
		val.Client = true;
		val.Replicated = true;
		val.Variable = true;
		val.GetOveride = () => RelationshipManager.contacts.ToString();
		val.SetOveride = delegate(string str)
		{
			RelationshipManager.contacts = StringExtensions.ToBool(str);
		};
		val.Default = "true";
		array[1400] = val;
		val = new Command();
		val.Name = "createandaddtoteam";
		val.Parent = "relationshipmanager";
		val.FullName = "relationshipmanager.createandaddtoteam";
		val.ServerAdmin = true;
		val.Variable = false;
		val.Call = delegate(Arg arg)
		{
			string text26 = RelationshipManager.createAndAddToTeam(arg);
			arg.ReplyWithObject((object)text26);
		};
		array[1401] = val;
		val = new Command();
		val.Name = "fakeinvite";
		val.Parent = "relationshipmanager";
		val.FullName = "relationshipmanager.fakeinvite";
		val.ServerAdmin = true;
		val.Variable = false;
		val.Call = delegate(Arg arg)
		{
			RelationshipManager.fakeinvite(arg);
		};
		array[1402] = val;
		val = new Command();
		val.Name = "forgetafterminutes";
		val.Parent = "relationshipmanager";
		val.FullName = "relationshipmanager.forgetafterminutes";
		val.ServerAdmin = true;
		val.Variable = true;
		val.GetOveride = () => RelationshipManager.forgetafterminutes.ToString();
		val.SetOveride = delegate(string str)
		{
			RelationshipManager.forgetafterminutes = StringExtensions.ToInt(str, 0);
		};
		array[1403] = val;
		val = new Command();
		val.Name = "kickmember";
		val.Parent = "relationshipmanager";
		val.FullName = "relationshipmanager.kickmember";
		val.ServerUser = true;
		val.Variable = false;
		val.Call = delegate(Arg arg)
		{
			RelationshipManager.kickmember(arg);
		};
		array[1404] = val;
		val = new Command();
		val.Name = "leaveteam";
		val.Parent = "relationshipmanager";
		val.FullName = "relationshipmanager.leaveteam";
		val.ServerUser = true;
		val.Variable = false;
		val.Call = delegate(Arg arg)
		{
			RelationshipManager.leaveteam(arg);
		};
		array[1405] = val;
		val = new Command();
		val.Name = "maxplayerrelationships";
		val.Parent = "relationshipmanager";
		val.FullName = "relationshipmanager.maxplayerrelationships";
		val.ServerAdmin = true;
		val.Variable = true;
		val.GetOveride = () => RelationshipManager.maxplayerrelationships.ToString();
		val.SetOveride = delegate(string str)
		{
			RelationshipManager.maxplayerrelationships = StringExtensions.ToInt(str, 0);
		};
		array[1406] = val;
		val = new Command();
		val.Name = "maxteamsize";
		val.Parent = "relationshipmanager";
		val.FullName = "relationshipmanager.maxteamsize";
		val.ServerAdmin = true;
		val.Variable = true;
		val.GetOveride = () => RelationshipManager.maxTeamSize.ToString();
		val.SetOveride = delegate(string str)
		{
			RelationshipManager.maxTeamSize = StringExtensions.ToInt(str, 0);
		};
		array[1407] = val;
		val = new Command();
		val.Name = "mugshotupdateinterval";
		val.Parent = "relationshipmanager";
		val.FullName = "relationshipmanager.mugshotupdateinterval";
		val.ServerAdmin = true;
		val.Variable = true;
		val.GetOveride = () => RelationshipManager.mugshotUpdateInterval.ToString();
		val.SetOveride = delegate(string str)
		{
			RelationshipManager.mugshotUpdateInterval = StringExtensions.ToFloat(str, 0f);
		};
		array[1408] = val;
		val = new Command();
		val.Name = "promote";
		val.Parent = "relationshipmanager";
		val.FullName = "relationshipmanager.promote";
		val.ServerUser = true;
		val.Variable = false;
		val.Call = delegate(Arg arg)
		{
			RelationshipManager.promote(arg);
		};
		array[1409] = val;
		val = new Command();
		val.Name = "promote_id";
		val.Parent = "relationshipmanager";
		val.FullName = "relationshipmanager.promote_id";
		val.ServerUser = true;
		val.Variable = false;
		val.Call = delegate(Arg arg)
		{
			RelationshipManager.promote_id(arg);
		};
		array[1410] = val;
		val = new Command();
		val.Name = "rejectinvite";
		val.Parent = "relationshipmanager";
		val.FullName = "relationshipmanager.rejectinvite";
		val.ServerUser = true;
		val.Variable = false;
		val.Call = delegate(Arg arg)
		{
			RelationshipManager.rejectinvite(arg);
		};
		array[1411] = val;
		val = new Command();
		val.Name = "seendistance";
		val.Parent = "relationshipmanager";
		val.FullName = "relationshipmanager.seendistance";
		val.ServerAdmin = true;
		val.Variable = true;
		val.GetOveride = () => RelationshipManager.seendistance.ToString();
		val.SetOveride = delegate(string str)
		{
			RelationshipManager.seendistance = StringExtensions.ToFloat(str, 0f);
		};
		array[1412] = val;
		val = new Command();
		val.Name = "sendinvite";
		val.Parent = "relationshipmanager";
		val.FullName = "relationshipmanager.sendinvite";
		val.ServerUser = true;
		val.Variable = false;
		val.Call = delegate(Arg arg)
		{
			RelationshipManager.sendinvite(arg);
		};
		array[1413] = val;
		val = new Command();
		val.Name = "sleeptoggle";
		val.Parent = "relationshipmanager";
		val.FullName = "relationshipmanager.sleeptoggle";
		val.ServerAdmin = true;
		val.Variable = false;
		val.Call = delegate(Arg arg)
		{
			RelationshipManager.sleeptoggle(arg);
		};
		array[1414] = val;
		val = new Command();
		val.Name = "trycreateteam";
		val.Parent = "relationshipmanager";
		val.FullName = "relationshipmanager.trycreateteam";
		val.ServerUser = true;
		val.Variable = false;
		val.Call = delegate(Arg arg)
		{
			RelationshipManager.trycreateteam(arg);
		};
		array[1415] = val;
		val = new Command();
		val.Name = "wipe_all_contacts";
		val.Parent = "relationshipmanager";
		val.FullName = "relationshipmanager.wipe_all_contacts";
		val.ServerAdmin = true;
		val.Variable = false;
		val.Call = delegate(Arg arg)
		{
			RelationshipManager.wipe_all_contacts(arg);
		};
		array[1416] = val;
		val = new Command();
		val.Name = "wipecontacts";
		val.Parent = "relationshipmanager";
		val.FullName = "relationshipmanager.wipecontacts";
		val.ServerAdmin = true;
		val.Variable = false;
		val.Call = delegate(Arg arg)
		{
			RelationshipManager.wipecontacts(arg);
		};
		array[1417] = val;
		val = new Command();
		val.Name = "rhibpopulation";
		val.Parent = "rhib";
		val.FullName = "rhib.rhibpopulation";
		val.ServerAdmin = true;
		val.Description = "Population active on the server";
		val.ShowInAdminUI = true;
		val.Variable = true;
		val.GetOveride = () => RHIB.rhibpopulation.ToString();
		val.SetOveride = delegate(string str)
		{
			RHIB.rhibpopulation = StringExtensions.ToFloat(str, 0f);
		};
		array[1418] = val;
		val = new Command();
		val.Name = "autoavoidance";
		val.Parent = "ridablehorse";
		val.FullName = "ridablehorse.autoavoidance";
		val.ServerAdmin = true;
		val.ClientAdmin = true;
		val.Saved = true;
		val.Variable = true;
		val.GetOveride = () => RidableHorse.autoAvoidance.ToString();
		val.SetOveride = delegate(string str)
		{
			RidableHorse.autoAvoidance = StringExtensions.ToBool(str);
		};
		val.Default = "True";
		array[1419] = val;
		val = new Command();
		val.Name = "debug";
		val.Parent = "ridablehorse";
		val.FullName = "ridablehorse.debug";
		val.ServerAdmin = true;
		val.ClientAdmin = true;
		val.Saved = true;
		val.Variable = true;
		val.GetOveride = () => RidableHorse.debug.ToString();
		val.SetOveride = delegate(string str)
		{
			RidableHorse.debug = StringExtensions.ToBool(str);
		};
		val.Default = "False";
		array[1420] = val;
		val = new Command();
		val.Name = "decayminutes";
		val.Parent = "ridablehorse";
		val.FullName = "ridablehorse.decayminutes";
		val.ServerAdmin = true;
		val.Description = "How long before a horse dies unattended";
		val.Variable = true;
		val.GetOveride = () => RidableHorse.decayMinutes.ToString();
		val.SetOveride = delegate(string str)
		{
			RidableHorse.decayMinutes = StringExtensions.ToFloat(str, 0f);
		};
		array[1421] = val;
		val = new Command();
		val.Name = "dungtimescale";
		val.Parent = "ridablehorse";
		val.FullName = "ridablehorse.dungtimescale";
		val.ServerAdmin = true;
		val.Variable = true;
		val.GetOveride = () => RidableHorse.dungTimeScale.ToString();
		val.SetOveride = delegate(string str)
		{
			RidableHorse.dungTimeScale = StringExtensions.ToFloat(str, 0f);
		};
		array[1422] = val;
		val = new Command();
		val.Name = "groundangleupdaterate";
		val.Parent = "ridablehorse";
		val.FullName = "ridablehorse.groundangleupdaterate";
		val.ServerAdmin = true;
		val.ClientAdmin = true;
		val.Saved = true;
		val.Variable = true;
		val.GetOveride = () => RidableHorse.groundAngleUpdateRate.ToString();
		val.SetOveride = delegate(string str)
		{
			RidableHorse.groundAngleUpdateRate = StringExtensions.ToFloat(str, 0f);
		};
		val.Default = "0.05";
		array[1423] = val;
		val = new Command();
		val.Name = "population";
		val.Parent = "ridablehorse";
		val.FullName = "ridablehorse.population";
		val.ServerAdmin = true;
		val.Description = "Population active on the server, per square km";
		val.ShowInAdminUI = true;
		val.Variable = true;
		val.GetOveride = () => RidableHorse.Population.ToString();
		val.SetOveride = delegate(string str)
		{
			RidableHorse.Population = StringExtensions.ToFloat(str, 0f);
		};
		array[1424] = val;
		val = new Command();
		val.Name = "ragdoll";
		val.Parent = "ridablehorse";
		val.FullName = "ridablehorse.ragdoll";
		val.ServerAdmin = true;
		val.Variable = false;
		val.Call = delegate(Arg arg)
		{
			RidableHorse.Ragdoll(arg);
		};
		array[1425] = val;
		val = new Command();
		val.Name = "setforsale";
		val.Parent = "ridablehorse";
		val.FullName = "ridablehorse.setforsale";
		val.ServerAdmin = true;
		val.Variable = false;
		val.Call = delegate(Arg arg)
		{
			RidableHorse.SetForSale(arg);
		};
		array[1426] = val;
		val = new Command();
		val.Name = "sethorsebreed";
		val.Parent = "ridablehorse";
		val.FullName = "ridablehorse.sethorsebreed";
		val.ServerAdmin = true;
		val.Variable = false;
		val.Call = delegate(Arg arg)
		{
			RidableHorse.SetHorseBreed(arg);
		};
		array[1427] = val;
		val = new Command();
		val.Name = "throttledgroundangleupdate";
		val.Parent = "ridablehorse";
		val.FullName = "ridablehorse.throttledgroundangleupdate";
		val.ServerAdmin = true;
		val.ClientAdmin = true;
		val.Saved = true;
		val.Variable = true;
		val.GetOveride = () => RidableHorse.throttledGroundAngleUpdate.ToString();
		val.SetOveride = delegate(string str)
		{
			RidableHorse.throttledGroundAngleUpdate = StringExtensions.ToBool(str);
		};
		val.Default = "1";
		array[1428] = val;
		val = new Command();
		val.Name = "ai_dormant";
		val.Parent = "aimanager";
		val.FullName = "aimanager.ai_dormant";
		val.ServerAdmin = true;
		val.Description = "If ai_dormant is true, any npc outside the range of players will render itself dormant and take up less resources, but wildlife won't simulate as well.";
		val.Variable = true;
		val.GetOveride = () => AiManager.ai_dormant.ToString();
		val.SetOveride = delegate(string str)
		{
			AiManager.ai_dormant = StringExtensions.ToBool(str);
		};
		array[1429] = val;
		val = new Command();
		val.Name = "ai_dormant_max_wakeup_per_tick";
		val.Parent = "aimanager";
		val.FullName = "aimanager.ai_dormant_max_wakeup_per_tick";
		val.ServerAdmin = true;
		val.Description = "ai_dormant_max_wakeup_per_tick defines the maximum number of dormant agents we will wake up in a single tick. (default: 30)";
		val.Variable = true;
		val.GetOveride = () => AiManager.ai_dormant_max_wakeup_per_tick.ToString();
		val.SetOveride = delegate(string str)
		{
			AiManager.ai_dormant_max_wakeup_per_tick = StringExtensions.ToInt(str, 0);
		};
		array[1430] = val;
		val = new Command();
		val.Name = "ai_htn_animal_tick_budget";
		val.Parent = "aimanager";
		val.FullName = "aimanager.ai_htn_animal_tick_budget";
		val.ServerAdmin = true;
		val.Description = "ai_htn_animal_tick_budget defines the maximum amount of milliseconds ticking htn animal agents are allowed to consume. (default: 4 ms)";
		val.Variable = true;
		val.GetOveride = () => AiManager.ai_htn_animal_tick_budget.ToString();
		val.SetOveride = delegate(string str)
		{
			AiManager.ai_htn_animal_tick_budget = StringExtensions.ToFloat(str, 0f);
		};
		array[1431] = val;
		val = new Command();
		val.Name = "ai_htn_player_junkpile_tick_budget";
		val.Parent = "aimanager";
		val.FullName = "aimanager.ai_htn_player_junkpile_tick_budget";
		val.ServerAdmin = true;
		val.Description = "ai_htn_player_junkpile_tick_budget defines the maximum amount of milliseconds ticking htn player junkpile agents are allowed to consume. (default: 4 ms)";
		val.Variable = true;
		val.GetOveride = () => AiManager.ai_htn_player_junkpile_tick_budget.ToString();
		val.SetOveride = delegate(string str)
		{
			AiManager.ai_htn_player_junkpile_tick_budget = StringExtensions.ToFloat(str, 0f);
		};
		array[1432] = val;
		val = new Command();
		val.Name = "ai_htn_player_tick_budget";
		val.Parent = "aimanager";
		val.FullName = "aimanager.ai_htn_player_tick_budget";
		val.ServerAdmin = true;
		val.Description = "ai_htn_player_tick_budget defines the maximum amount of milliseconds ticking htn player agents are allowed to consume. (default: 4 ms)";
		val.Variable = true;
		val.GetOveride = () => AiManager.ai_htn_player_tick_budget.ToString();
		val.SetOveride = delegate(string str)
		{
			AiManager.ai_htn_player_tick_budget = StringExtensions.ToFloat(str, 0f);
		};
		array[1433] = val;
		val = new Command();
		val.Name = "ai_htn_use_agency_tick";
		val.Parent = "aimanager";
		val.FullName = "aimanager.ai_htn_use_agency_tick";
		val.ServerAdmin = true;
		val.Description = "If ai_htn_use_agency_tick is true, the ai manager's agency system will tick htn agents at the ms budgets defined in ai_htn_player_tick_budget and ai_htn_animal_tick_budget. If it's false, each agent registers with the invoke system individually, with no frame-budget restrictions. (default: true)";
		val.Variable = true;
		val.GetOveride = () => AiManager.ai_htn_use_agency_tick.ToString();
		val.SetOveride = delegate(string str)
		{
			AiManager.ai_htn_use_agency_tick = StringExtensions.ToBool(str);
		};
		array[1434] = val;
		val = new Command();
		val.Name = "ai_to_player_distance_wakeup_range";
		val.Parent = "aimanager";
		val.FullName = "aimanager.ai_to_player_distance_wakeup_range";
		val.ServerAdmin = true;
		val.Description = "If an agent is beyond this distance to a player, it's flagged for becoming dormant.";
		val.Variable = true;
		val.GetOveride = () => AiManager.ai_to_player_distance_wakeup_range.ToString();
		val.SetOveride = delegate(string str)
		{
			AiManager.ai_to_player_distance_wakeup_range = StringExtensions.ToFloat(str, 0f);
		};
		array[1435] = val;
		val = new Command();
		val.Name = "nav_disable";
		val.Parent = "aimanager";
		val.FullName = "aimanager.nav_disable";
		val.ServerAdmin = true;
		val.Description = "If set to true the navmesh won't generate.. which means Ai that uses the navmesh won't be able to move";
		val.Variable = true;
		val.GetOveride = () => AiManager.nav_disable.ToString();
		val.SetOveride = delegate(string str)
		{
			AiManager.nav_disable = StringExtensions.ToBool(str);
		};
		array[1436] = val;
		val = new Command();
		val.Name = "nav_obstacles_carve_state";
		val.Parent = "aimanager";
		val.FullName = "aimanager.nav_obstacles_carve_state";
		val.ServerAdmin = true;
		val.Description = "nav_obstacles_carve_state defines which obstacles can carve the terrain. 0 - No carving, 1 - Only player construction carves, 2 - All obstacles carve.";
		val.Variable = true;
		val.GetOveride = () => AiManager.nav_obstacles_carve_state.ToString();
		val.SetOveride = delegate(string str)
		{
			AiManager.nav_obstacles_carve_state = StringExtensions.ToInt(str, 0);
		};
		array[1437] = val;
		val = new Command();
		val.Name = "nav_wait";
		val.Parent = "aimanager";
		val.FullName = "aimanager.nav_wait";
		val.ServerAdmin = true;
		val.Description = "If true we'll wait for the navmesh to generate before completely starting the server. This might cause your server to hitch and lag as it generates in the background.";
		val.Variable = true;
		val.GetOveride = () => AiManager.nav_wait.ToString();
		val.SetOveride = delegate(string str)
		{
			AiManager.nav_wait = StringExtensions.ToBool(str);
		};
		array[1438] = val;
		val = new Command();
		val.Name = "pathfindingiterationsperframe";
		val.Parent = "aimanager";
		val.FullName = "aimanager.pathfindingiterationsperframe";
		val.ServerAdmin = true;
		val.Description = "The maximum amount of nodes processed each frame in the asynchronous pathfinding process. Increasing this value will cause the paths to be processed faster, but can cause some hiccups in frame rate. Default value is 100, a good range for tuning is between 50 and 500.";
		val.Variable = true;
		val.GetOveride = () => AiManager.pathfindingIterationsPerFrame.ToString();
		val.SetOveride = delegate(string str)
		{
			AiManager.pathfindingIterationsPerFrame = StringExtensions.ToInt(str, 0);
		};
		array[1439] = val;
		val = new Command();
		val.Name = "setdestination_navmesh_failsafe";
		val.Parent = "aimanager";
		val.FullName = "aimanager.setdestination_navmesh_failsafe";
		val.ServerAdmin = true;
		val.Description = "If set to true, npcs will attempt to place themselves on the navmesh if not on a navmesh when set destination is called.";
		val.Variable = true;
		val.GetOveride = () => AiManager.setdestination_navmesh_failsafe.ToString();
		val.SetOveride = delegate(string str)
		{
			AiManager.setdestination_navmesh_failsafe = StringExtensions.ToBool(str);
		};
		array[1440] = val;
		val = new Command();
		val.Name = "cover_point_sample_step_height";
		val.Parent = "coverpointvolume";
		val.FullName = "coverpointvolume.cover_point_sample_step_height";
		val.ServerAdmin = true;
		val.Description = "cover_point_sample_step_height defines the height of the steps we do vertically for the cover point volume's cover point generation (smaller steps gives more accurate cover points, but at a higher processing cost). (default: 2.0)";
		val.Variable = true;
		val.GetOveride = () => CoverPointVolume.cover_point_sample_step_height.ToString();
		val.SetOveride = delegate(string str)
		{
			CoverPointVolume.cover_point_sample_step_height = StringExtensions.ToFloat(str, 0f);
		};
		array[1441] = val;
		val = new Command();
		val.Name = "cover_point_sample_step_size";
		val.Parent = "coverpointvolume";
		val.FullName = "coverpointvolume.cover_point_sample_step_size";
		val.ServerAdmin = true;
		val.Description = "cover_point_sample_step_size defines the size of the steps we do horizontally for the cover point volume's cover point generation (smaller steps gives more accurate cover points, but at a higher processing cost). (default: 6.0)";
		val.Variable = true;
		val.GetOveride = () => CoverPointVolume.cover_point_sample_step_size.ToString();
		val.SetOveride = delegate(string str)
		{
			CoverPointVolume.cover_point_sample_step_size = StringExtensions.ToFloat(str, 0f);
		};
		array[1442] = val;
		val = new Command();
		val.Name = "showclawmarks";
		val.Parent = "clawmarkspawner";
		val.FullName = "clawmarkspawner.showclawmarks";
		val.ServerAdmin = true;
		val.Variable = false;
		val.Call = delegate(Arg arg)
		{
			ClawMarkSpawner.ShowClawMarks(arg);
		};
		array[1443] = val;
		val = new Command();
		val.Name = "population";
		val.Parent = "crocodile";
		val.FullName = "crocodile.population";
		val.ServerAdmin = true;
		val.Description = "Population active on the server, per square km";
		val.ShowInAdminUI = true;
		val.Variable = true;
		val.GetOveride = () => Crocodile.Population.ToString();
		val.SetOveride = delegate(string str)
		{
			Crocodile.Population = StringExtensions.ToFloat(str, 0f);
		};
		array[1444] = val;
		val = new Command();
		val.Name = "population";
		val.Parent = "panther";
		val.FullName = "panther.population";
		val.ServerAdmin = true;
		val.Description = "Population active on the server, per square km";
		val.ShowInAdminUI = true;
		val.Variable = true;
		val.GetOveride = () => Panther.Population.ToString();
		val.SetOveride = delegate(string str)
		{
			Panther.Population = StringExtensions.ToFloat(str, 0f);
		};
		array[1445] = val;
		val = new Command();
		val.Name = "maxrefreshintervalseconds";
		val.Parent = "sensecomponent";
		val.FullName = "sensecomponent.maxrefreshintervalseconds";
		val.ServerAdmin = true;
		val.Variable = true;
		val.GetOveride = () => SenseComponent.maxRefreshIntervalSeconds.ToString();
		val.SetOveride = delegate(string str)
		{
			SenseComponent.maxRefreshIntervalSeconds = StringExtensions.ToFloat(str, 0f);
		};
		array[1446] = val;
		val = new Command();
		val.Name = "minrefreshintervalseconds";
		val.Parent = "sensecomponent";
		val.FullName = "sensecomponent.minrefreshintervalseconds";
		val.ServerAdmin = true;
		val.Variable = true;
		val.GetOveride = () => SenseComponent.minRefreshIntervalSeconds.ToString();
		val.SetOveride = delegate(string str)
		{
			SenseComponent.minRefreshIntervalSeconds = StringExtensions.ToFloat(str, 0f);
		};
		array[1447] = val;
		val = new Command();
		val.Name = "population";
		val.Parent = "tiger";
		val.FullName = "tiger.population";
		val.ServerAdmin = true;
		val.Description = "Population active on the server, per square km";
		val.ShowInAdminUI = true;
		val.Variable = true;
		val.GetOveride = () => Tiger.Population.ToString();
		val.SetOveride = delegate(string str)
		{
			Tiger.Population = StringExtensions.ToFloat(str, 0f);
		};
		array[1448] = val;
		val = new Command();
		val.Name = "chargerange";
		val.Parent = "tigerfsm";
		val.FullName = "tigerfsm.chargerange";
		val.ServerAdmin = true;
		val.Description = "The range at which the tiger will charge instead of fleeing if aimed at";
		val.Variable = true;
		val.GetOveride = () => TigerFSM.chargeRange.ToString();
		val.SetOveride = delegate(string str)
		{
			TigerFSM.chargeRange = StringExtensions.ToFloat(str, 0f);
		};
		array[1449] = val;
		val = new Command();
		val.Name = "minangle";
		val.Parent = "tigersneaktelegraphgrowl";
		val.FullName = "tigersneaktelegraphgrowl.minangle";
		val.ServerAdmin = true;
		val.Description = "Minimum angle for the tiger to growl when stalking a player";
		val.Variable = true;
		val.GetOveride = () => TigerSneakTelegraphGrowl.minAngle.ToString();
		val.SetOveride = delegate(string str)
		{
			TigerSneakTelegraphGrowl.minAngle = StringExtensions.ToFloat(str, 0f);
		};
		array[1450] = val;
		val = new Command();
		val.Name = "mintimebetweengrowls";
		val.Parent = "tigersneaktelegraphgrowl";
		val.FullName = "tigersneaktelegraphgrowl.mintimebetweengrowls";
		val.ServerAdmin = true;
		val.Description = "Time between growls when stalking a player";
		val.Variable = true;
		val.GetOveride = () => TigerSneakTelegraphGrowl.minTimeBetweenGrowls.ToString();
		val.SetOveride = delegate(string str)
		{
			TigerSneakTelegraphGrowl.minTimeBetweenGrowls = StringExtensions.ToFloat(str, 0f);
		};
		array[1451] = val;
		val = new Command();
		val.Name = "level";
		val.Parent = "log";
		val.FullName = "log.level";
		val.ServerAdmin = true;
		val.Variable = false;
		val.Call = delegate(Arg arg)
		{
			RustLog.Level(arg);
		};
		array[1452] = val;
		val = new Command();
		val.Name = "staticrepairseconds";
		val.Parent = "samsite";
		val.FullName = "samsite.staticrepairseconds";
		val.ServerAdmin = true;
		val.Description = "how long until static sam sites auto repair";
		val.Variable = true;
		val.GetOveride = () => SamSite.staticrepairseconds.ToString();
		val.SetOveride = delegate(string str)
		{
			SamSite.staticrepairseconds = StringExtensions.ToFloat(str, 0f);
		};
		array[1453] = val;
		val = new Command();
		val.Name = "altitudeaboveterrain";
		val.Parent = "santasleigh";
		val.FullName = "santasleigh.altitudeaboveterrain";
		val.ServerAdmin = true;
		val.Variable = true;
		val.GetOveride = () => SantaSleigh.altitudeAboveTerrain.ToString();
		val.SetOveride = delegate(string str)
		{
			SantaSleigh.altitudeAboveTerrain = StringExtensions.ToFloat(str, 0f);
		};
		array[1454] = val;
		val = new Command();
		val.Name = "desiredaltitude";
		val.Parent = "santasleigh";
		val.FullName = "santasleigh.desiredaltitude";
		val.ServerAdmin = true;
		val.Variable = true;
		val.GetOveride = () => SantaSleigh.desiredAltitude.ToString();
		val.SetOveride = delegate(string str)
		{
			SantaSleigh.desiredAltitude = StringExtensions.ToFloat(str, 0f);
		};
		array[1455] = val;
		val = new Command();
		val.Name = "drop";
		val.Parent = "santasleigh";
		val.FullName = "santasleigh.drop";
		val.ServerAdmin = true;
		val.Variable = false;
		val.Call = delegate(Arg arg)
		{
			SantaSleigh.drop(arg);
		};
		array[1456] = val;
		val = new Command();
		val.Name = "monument_scenes_enabled";
		val.Parent = "scenetoprefab";
		val.FullName = "scenetoprefab.monument_scenes_enabled";
		val.ServerAdmin = true;
		val.Variable = true;
		val.GetOveride = () => SceneToPrefab.monument_scenes_enabled.ToString();
		val.SetOveride = delegate(string str)
		{
			SceneToPrefab.monument_scenes_enabled = StringExtensions.ToBool(str);
		};
		array[1457] = val;
		val = new Command();
		val.Name = "population";
		val.Parent = "scraptransporthelicopter";
		val.FullName = "scraptransporthelicopter.population";
		val.ServerAdmin = true;
		val.Description = "Population active on the server";
		val.ShowInAdminUI = true;
		val.Variable = true;
		val.GetOveride = () => ScrapTransportHelicopter.population.ToString();
		val.SetOveride = delegate(string str)
		{
			ScrapTransportHelicopter.population = StringExtensions.ToFloat(str, 0f);
		};
		array[1458] = val;
		val = new Command();
		val.Name = "serverocclusiondebug";
		val.Parent = "serverocclusion";
		val.FullName = "serverocclusion.serverocclusiondebug";
		val.ServerAdmin = true;
		val.Description = "Tests occlusion visibility between two positions";
		val.Variable = false;
		val.Call = delegate(Arg arg)
		{
			string text27 = ServerOcclusion.serverocclusiondebug(arg);
			arg.ReplyWithObject((object)text27);
		};
		array[1459] = val;
		val = new Command();
		val.Name = "usejob";
		val.Parent = "serverocclusion";
		val.FullName = "serverocclusion.usejob";
		val.ServerAdmin = true;
		val.Variable = true;
		val.GetOveride = () => ServerOcclusion.UseJob.ToString();
		val.SetOveride = delegate(string str)
		{
			ServerOcclusion.UseJob = StringExtensions.ToBool(str);
		};
		array[1460] = val;
		val = new Command();
		val.Name = "infiniteshieldblock";
		val.Parent = "shield";
		val.FullName = "shield.infiniteshieldblock";
		val.ServerAdmin = true;
		val.ClientAdmin = true;
		val.Client = true;
		val.Replicated = true;
		val.Variable = true;
		val.GetOveride = () => Shield.InfiniteShieldBlock.ToString();
		val.SetOveride = delegate(string str)
		{
			Shield.InfiniteShieldBlock = StringExtensions.ToBool(str);
		};
		val.Default = "False";
		array[1461] = val;
		val = new Command();
		val.Name = "disable";
		val.Parent = "simpleshark";
		val.FullName = "simpleshark.disable";
		val.ServerAdmin = true;
		val.Variable = true;
		val.GetOveride = () => SimpleShark.disable.ToString();
		val.SetOveride = delegate(string str)
		{
			SimpleShark.disable = StringExtensions.ToBool(str);
		};
		array[1462] = val;
		val = new Command();
		val.Name = "forcesurfaceamount";
		val.Parent = "simpleshark";
		val.FullName = "simpleshark.forcesurfaceamount";
		val.ServerAdmin = true;
		val.Variable = true;
		val.GetOveride = () => SimpleShark.forceSurfaceAmount.ToString();
		val.SetOveride = delegate(string str)
		{
			SimpleShark.forceSurfaceAmount = StringExtensions.ToFloat(str, 0f);
		};
		array[1463] = val;
		val = new Command();
		val.Name = "forcepayoutindex";
		val.Parent = "slotmachine";
		val.FullName = "slotmachine.forcepayoutindex";
		val.ServerAdmin = true;
		val.Variable = true;
		val.GetOveride = () => SlotMachine.ForcePayoutIndex.ToString();
		val.SetOveride = delegate(string str)
		{
			SlotMachine.ForcePayoutIndex = StringExtensions.ToInt(str, 0);
		};
		array[1464] = val;
		val = new Command();
		val.Name = "population";
		val.Parent = "snakehazard";
		val.FullName = "snakehazard.population";
		val.ServerAdmin = true;
		val.Description = "Population active on the server, per square km";
		val.ShowInAdminUI = true;
		val.Variable = true;
		val.GetOveride = () => SnakeHazard.Population.ToString();
		val.SetOveride = delegate(string str)
		{
			SnakeHazard.Population = StringExtensions.ToFloat(str, 0f);
		};
		array[1465] = val;
		val = new Command();
		val.Name = "allowpassengeronly";
		val.Parent = "snowmobile";
		val.FullName = "snowmobile.allowpassengeronly";
		val.ServerAdmin = true;
		val.Description = "Allow mounting as a passenger when there's no driver";
		val.Variable = true;
		val.GetOveride = () => Snowmobile.allowPassengerOnly.ToString();
		val.SetOveride = delegate(string str)
		{
			Snowmobile.allowPassengerOnly = StringExtensions.ToBool(str);
		};
		array[1466] = val;
		val = new Command();
		val.Name = "allterrain";
		val.Parent = "snowmobile";
		val.FullName = "snowmobile.allterrain";
		val.ServerAdmin = true;
		val.Description = "If true, snowmobile goes fast on all terrain types";
		val.Variable = true;
		val.GetOveride = () => Snowmobile.allTerrain.ToString();
		val.SetOveride = delegate(string str)
		{
			Snowmobile.allTerrain = StringExtensions.ToBool(str);
		};
		array[1467] = val;
		val = new Command();
		val.Name = "outsidedecayminutes";
		val.Parent = "snowmobile";
		val.FullName = "snowmobile.outsidedecayminutes";
		val.ServerAdmin = true;
		val.Description = "How long before a snowmobile loses all its health while outside";
		val.Variable = true;
		val.GetOveride = () => Snowmobile.outsideDecayMinutes.ToString();
		val.SetOveride = delegate(string str)
		{
			Snowmobile.outsideDecayMinutes = StringExtensions.ToFloat(str, 0f);
		};
		array[1468] = val;
		val = new Command();
		val.Name = "demolish_seconds";
		val.Parent = "stabilityentity";
		val.FullName = "stabilityentity.demolish_seconds";
		val.ServerAdmin = true;
		val.Variable = true;
		val.GetOveride = () => StabilityEntity.demolish_seconds.ToString();
		val.SetOveride = delegate(string str)
		{
			StabilityEntity.demolish_seconds = StringExtensions.ToInt(str, 0);
		};
		array[1469] = val;
		val = new Command();
		val.Name = "population";
		val.Parent = "stag";
		val.FullName = "stag.population";
		val.ServerAdmin = true;
		val.Description = "Population active on the server, per square km";
		val.ShowInAdminUI = true;
		val.Variable = true;
		val.GetOveride = () => Stag.Population.ToString();
		val.SetOveride = delegate(string str)
		{
			Stag.Population = StringExtensions.ToFloat(str, 0f);
		};
		array[1470] = val;
		val = new Command();
		val.Name = "reveal_tick_rate";
		val.Parent = "stash";
		val.FullName = "stash.reveal_tick_rate";
		val.ServerAdmin = true;
		val.Variable = true;
		val.GetOveride = () => StashContainer.PlayerDetectionTickRate.ToString();
		val.SetOveride = delegate(string str)
		{
			StashContainer.PlayerDetectionTickRate = StringExtensions.ToFloat(str, 0f);
		};
		array[1471] = val;
		val = new Command();
		val.Name = "canrequireauthifnolock";
		val.Parent = "storagecontainer";
		val.FullName = "storagecontainer.canrequireauthifnolock";
		val.ServerAdmin = true;
		val.Variable = true;
		val.GetOveride = () => StorageContainer.canRequireAuthIfNoLock.ToString();
		val.SetOveride = delegate(string str)
		{
			StorageContainer.canRequireAuthIfNoLock = StringExtensions.ToBool(str);
		};
		array[1472] = val;
		val = new Command();
		val.Name = "corpseitemssavedpercent";
		val.Parent = "storagecontainer";
		val.FullName = "storagecontainer.corpseitemssavedpercent";
		val.ServerAdmin = true;
		val.Variable = true;
		val.GetOveride = () => StorageContainer.corpseItemsSavedPercent.ToString();
		val.SetOveride = delegate(string str)
		{
			StorageContainer.corpseItemsSavedPercent = StringExtensions.ToFloat(str, 0f);
		};
		array[1473] = val;
		val = new Command();
		val.Name = "dropcorpseondeath";
		val.Parent = "storagecontainer";
		val.FullName = "storagecontainer.dropcorpseondeath";
		val.ServerAdmin = true;
		val.Variable = true;
		val.GetOveride = () => StorageContainer.dropCorpseOnDeath.ToString();
		val.SetOveride = delegate(string str)
		{
			StorageContainer.dropCorpseOnDeath = StringExtensions.ToBool(str);
		};
		array[1474] = val;
		val = new Command();
		val.Name = "maxcalllength";
		val.Parent = "telephonemanager";
		val.FullName = "telephonemanager.maxcalllength";
		val.ServerAdmin = true;
		val.Variable = true;
		val.GetOveride = () => TelephoneManager.MaxCallLength.ToString();
		val.SetOveride = delegate(string str)
		{
			TelephoneManager.MaxCallLength = StringExtensions.ToInt(str, 0);
		};
		array[1475] = val;
		val = new Command();
		val.Name = "maxconcurrentcalls";
		val.Parent = "telephonemanager";
		val.FullName = "telephonemanager.maxconcurrentcalls";
		val.ServerAdmin = true;
		val.Variable = true;
		val.GetOveride = () => TelephoneManager.MaxConcurrentCalls.ToString();
		val.SetOveride = delegate(string str)
		{
			TelephoneManager.MaxConcurrentCalls = StringExtensions.ToInt(str, 0);
		};
		array[1476] = val;
		val = new Command();
		val.Name = "printallphones";
		val.Parent = "telephonemanager";
		val.FullName = "telephonemanager.printallphones";
		val.ServerAdmin = true;
		val.Variable = false;
		val.Call = delegate(Arg arg)
		{
			TelephoneManager.PrintAllPhones(arg);
		};
		array[1477] = val;
		val = new Command();
		val.Name = "decayminutes";
		val.Parent = "traincar";
		val.FullName = "traincar.decayminutes";
		val.ServerAdmin = true;
		val.Description = "How long before a train car despawns";
		val.Variable = true;
		val.GetOveride = () => TrainCar.decayminutes.ToString();
		val.SetOveride = delegate(string str)
		{
			TrainCar.decayminutes = StringExtensions.ToFloat(str, 0f);
		};
		array[1478] = val;
		val = new Command();
		val.Name = "population";
		val.Parent = "traincar";
		val.FullName = "traincar.population";
		val.ServerAdmin = true;
		val.Description = "Population active on the server";
		val.ShowInAdminUI = true;
		val.Variable = true;
		val.GetOveride = () => TrainCar.population.ToString();
		val.SetOveride = delegate(string str)
		{
			TrainCar.population = StringExtensions.ToFloat(str, 0f);
		};
		array[1479] = val;
		val = new Command();
		val.Name = "wagons_per_engine";
		val.Parent = "traincar";
		val.FullName = "traincar.wagons_per_engine";
		val.ServerAdmin = true;
		val.Description = "Ratio of wagons to train engines that spawn";
		val.Variable = true;
		val.GetOveride = () => TrainCar.wagons_per_engine.ToString();
		val.SetOveride = delegate(string str)
		{
			TrainCar.wagons_per_engine = StringExtensions.ToInt(str, 0);
		};
		array[1480] = val;
		val = new Command();
		val.Name = "decayminutesafterunload";
		val.Parent = "traincarunloadable";
		val.FullName = "traincarunloadable.decayminutesafterunload";
		val.ServerAdmin = true;
		val.Description = "How long before an unloadable train car despawns afer being unloaded";
		val.Variable = true;
		val.GetOveride = () => TrainCarUnloadable.decayminutesafterunload.ToString();
		val.SetOveride = delegate(string str)
		{
			TrainCarUnloadable.decayminutesafterunload = StringExtensions.ToFloat(str, 0f);
		};
		array[1481] = val;
		val = new Command();
		val.Name = "max_couple_speed";
		val.Parent = "traincouplingcontroller";
		val.FullName = "traincouplingcontroller.max_couple_speed";
		val.ServerAdmin = true;
		val.Description = "Maximum difference in velocity for train cars to couple";
		val.Variable = true;
		val.GetOveride = () => TrainCouplingController.max_couple_speed.ToString();
		val.SetOveride = delegate(string str)
		{
			TrainCouplingController.max_couple_speed = StringExtensions.ToFloat(str, 0f);
		};
		array[1482] = val;
		val = new Command();
		val.Name = "alive_time_seconds";
		val.Parent = "travellingvendor";
		val.FullName = "travellingvendor.alive_time_seconds";
		val.ServerAdmin = true;
		val.Variable = true;
		val.GetOveride = () => TravellingVendor.alive_time_seconds.ToString();
		val.SetOveride = delegate(string str)
		{
			TravellingVendor.alive_time_seconds = StringExtensions.ToFloat(str, 0f);
		};
		array[1483] = val;
		val = new Command();
		val.Name = "attempt_pullovers";
		val.Parent = "travellingvendor";
		val.FullName = "travellingvendor.attempt_pullovers";
		val.ServerAdmin = true;
		val.Variable = true;
		val.GetOveride = () => TravellingVendor.attempt_pullovers.ToString();
		val.SetOveride = delegate(string str)
		{
			TravellingVendor.attempt_pullovers = StringExtensions.ToBool(str);
		};
		array[1484] = val;
		val = new Command();
		val.Name = "max_speed";
		val.Parent = "travellingvendor";
		val.FullName = "travellingvendor.max_speed";
		val.ServerAdmin = true;
		val.ClientAdmin = true;
		val.Client = true;
		val.Saved = true;
		val.Replicated = true;
		val.Variable = true;
		val.GetOveride = () => TravellingVendor.max_speed.ToString();
		val.SetOveride = delegate(string str)
		{
			TravellingVendor.max_speed = StringExtensions.ToFloat(str, 0f);
		};
		val.Default = "5";
		array[1485] = val;
		val = new Command();
		val.Name = "should_destroy_buildings";
		val.Parent = "travellingvendor";
		val.FullName = "travellingvendor.should_destroy_buildings";
		val.ServerAdmin = true;
		val.Variable = true;
		val.GetOveride = () => TravellingVendor.should_destroy_buildings.ToString();
		val.SetOveride = delegate(string str)
		{
			TravellingVendor.should_destroy_buildings = StringExtensions.ToBool(str);
		};
		array[1486] = val;
		val = new Command();
		val.Name = "should_spawn";
		val.Parent = "travellingvendor";
		val.FullName = "travellingvendor.should_spawn";
		val.ServerAdmin = true;
		val.Variable = true;
		val.GetOveride = () => TravellingVendor.should_spawn.ToString();
		val.SetOveride = delegate(string str)
		{
			TravellingVendor.should_spawn = StringExtensions.ToBool(str);
		};
		array[1487] = val;
		val = new Command();
		val.Name = "spawn";
		val.Parent = "travellingvendor";
		val.FullName = "travellingvendor.spawn";
		val.ServerAdmin = true;
		val.Variable = false;
		val.Call = delegate(Arg arg)
		{
			string text28 = TravellingVendor.svspawntravellingvendor(arg);
			arg.ReplyWithObject((object)text28);
		};
		array[1488] = val;
		val = new Command();
		val.Name = "startevent";
		val.Parent = "travellingvendor";
		val.FullName = "travellingvendor.startevent";
		val.ServerAdmin = true;
		val.Variable = false;
		val.Call = delegate(Arg arg)
		{
			string text29 = TravellingVendor.svspawntravellingvendorevent(arg);
			arg.ReplyWithObject((object)text29);
		};
		array[1489] = val;
		val = new Command();
		val.Name = "cellsize";
		val.Parent = "treemanager";
		val.FullName = "treemanager.cellsize";
		val.ServerAdmin = true;
		val.Description = "Define cell size(in m) of a grid for trees  - only has effect on world load and must be > 1. This affects how much data we send per tree cell(bigger the cell - more trees we have to send). The smaller the cell, the more cells we have to process and the more memory we need per player to track what's left to send(gridSize ^ 2 / 8 bytes). We readjust CellSize to ensure gridSize never exceeds 512.";
		val.Variable = true;
		val.GetOveride = () => TreeManager.CellSize.ToString();
		val.SetOveride = delegate(string str)
		{
			TreeManager.CellSize = StringExtensions.ToInt(str, 0);
		};
		array[1490] = val;
		val = new Command();
		val.Name = "enabletreestreaming";
		val.Parent = "treemanager";
		val.FullName = "treemanager.enabletreestreaming";
		val.ServerAdmin = true;
		val.Variable = true;
		val.GetOveride = () => TreeManager.EnableTreeStreaming.ToString();
		val.SetOveride = delegate(string str)
		{
			TreeManager.EnableTreeStreaming = StringExtensions.ToBool(str);
		};
		array[1491] = val;
		val = new Command();
		val.Name = "playerbudgetms";
		val.Parent = "treemanager";
		val.FullName = "treemanager.playerbudgetms";
		val.ServerAdmin = true;
		val.Variable = true;
		val.GetOveride = () => TreeManager.PlayerBudgetMS.ToString();
		val.SetOveride = delegate(string str)
		{
			TreeManager.PlayerBudgetMS = StringExtensions.ToFloat(str, 0f);
		};
		array[1492] = val;
		val = new Command();
		val.Name = "updatebudgetms";
		val.Parent = "treemanager";
		val.FullName = "treemanager.updatebudgetms";
		val.ServerAdmin = true;
		val.Variable = true;
		val.GetOveride = () => TreeManager.UpdateBudgetMS.ToString();
		val.SetOveride = delegate(string str)
		{
			TreeManager.UpdateBudgetMS = StringExtensions.ToFloat(str, 0f);
		};
		array[1493] = val;
		val = new Command();
		val.Name = "uselazyserialization";
		val.Parent = "treemanager";
		val.FullName = "treemanager.uselazyserialization";
		val.ServerAdmin = true;
		val.Description = "Instead of reserializing grid cell on every tree add/removal(which can cost 0.25ms on 4.5k world), defer it to the streaming update. This reduces amount of times we need to serialize the tree list, but causes the player queue to take longer to process, as that's where evaluation happens.";
		val.Variable = true;
		val.GetOveride = () => TreeManager.UseLazySerialization.ToString();
		val.SetOveride = delegate(string str)
		{
			TreeManager.UseLazySerialization = StringExtensions.ToBool(str);
		};
		array[1494] = val;
		val = new Command();
		val.Name = "clearexcludelayers";
		val.Parent = "triggerbase";
		val.FullName = "triggerbase.clearexcludelayers";
		val.ServerAdmin = true;
		val.Variable = false;
		val.Call = delegate
		{
			TriggerBase.ClearExcludeLayers();
		};
		array[1495] = val;
		val = new Command();
		val.Name = "setexcludelayers";
		val.Parent = "triggerbase";
		val.FullName = "triggerbase.setexcludelayers";
		val.ServerAdmin = true;
		val.Variable = false;
		val.Call = delegate
		{
			TriggerBase.SetExcludeLayers();
		};
		array[1496] = val;
		val = new Command();
		val.Name = "useexcludelayers";
		val.Parent = "triggerbase";
		val.FullName = "triggerbase.useexcludelayers";
		val.ServerAdmin = true;
		val.Variable = true;
		val.GetOveride = () => TriggerBase.UseExcludeLayers.ToString();
		val.SetOveride = delegate(string str)
		{
			TriggerBase.UseExcludeLayers = StringExtensions.ToBool(str);
		};
		array[1497] = val;
		val = new Command();
		val.Name = "tugcorpseseconds";
		val.Parent = "tugboat";
		val.FullName = "tugboat.tugcorpseseconds";
		val.ServerAdmin = true;
		val.Variable = true;
		val.GetOveride = () => Tugboat.tugcorpseseconds.ToString();
		val.SetOveride = delegate(string str)
		{
			Tugboat.tugcorpseseconds = StringExtensions.ToFloat(str, 0f);
		};
		array[1498] = val;
		val = new Command();
		val.Name = "tugdecayminutes";
		val.Parent = "tugboat";
		val.FullName = "tugboat.tugdecayminutes";
		val.ServerAdmin = true;
		val.Description = "How long before a tugboat loses all its health while outside";
		val.Variable = true;
		val.GetOveride = () => Tugboat.tugdecayminutes.ToString();
		val.SetOveride = delegate(string str)
		{
			Tugboat.tugdecayminutes = StringExtensions.ToFloat(str, 0f);
		};
		array[1499] = val;
		val = new Command();
		val.Name = "tugdecaystartdelayminutes";
		val.Parent = "tugboat";
		val.FullName = "tugboat.tugdecaystartdelayminutes";
		val.ServerAdmin = true;
		val.Description = "How long until decay begins after the tugboat was last used";
		val.Variable = true;
		val.GetOveride = () => Tugboat.tugdecaystartdelayminutes.ToString();
		val.SetOveride = delegate(string str)
		{
			Tugboat.tugdecaystartdelayminutes = StringExtensions.ToFloat(str, 0f);
		};
		array[1500] = val;
		val = new Command();
		val.Name = "enforcetrespasschecks";
		val.Parent = "tutorialisland";
		val.FullName = "tutorialisland.enforcetrespasschecks";
		val.ServerAdmin = true;
		val.Saved = true;
		val.Variable = true;
		val.GetOveride = () => TutorialIsland.EnforceTrespassChecks.ToString();
		val.SetOveride = delegate(string str)
		{
			TutorialIsland.EnforceTrespassChecks = StringExtensions.ToBool(str);
		};
		array[1501] = val;
		val = new Command();
		val.Name = "overridetutoriallocation";
		val.Parent = "tutorialisland";
		val.FullName = "tutorialisland.overridetutoriallocation";
		val.ServerAdmin = true;
		val.Description = "Will place the tutorial as close as possible to this pos, only for debugging";
		val.Variable = true;
		val.GetOveride = () => ((object)(Vector3)(ref TutorialIsland.OverrideTutorialLocation)/*cast due to .constrained prefix*/).ToString();
		val.SetOveride = delegate(string str)
		{
			//IL_0001: Unknown result type (might be due to invalid IL or missing references)
			//IL_0006: Unknown result type (might be due to invalid IL or missing references)
			TutorialIsland.OverrideTutorialLocation = StringExtensions.ToVector3(str);
		};
		array[1502] = val;
		val = new Command();
		val.Name = "spawntutorialislandfornewplayer";
		val.Parent = "tutorialisland";
		val.FullName = "tutorialisland.spawntutorialislandfornewplayer";
		val.ServerAdmin = true;
		val.Saved = true;
		val.Variable = true;
		val.GetOveride = () => TutorialIsland.SpawnTutorialIslandForNewPlayer.ToString();
		val.SetOveride = delegate(string str)
		{
			TutorialIsland.SpawnTutorialIslandForNewPlayer = StringExtensions.ToBool(str);
		};
		array[1503] = val;
		val = new Command();
		val.Name = "setisrecording";
		val.Parent = "vddraw";
		val.FullName = "vddraw.setisrecording";
		val.ServerAdmin = true;
		val.Variable = false;
		val.Call = delegate(Arg arg)
		{
			VDDraw.SetIsRecording(arg);
		};
		array[1504] = val;
		val = new Command();
		val.Name = "clearallvendingcustomerhistory";
		val.Parent = "vendingmachine";
		val.FullName = "vendingmachine.clearallvendingcustomerhistory";
		val.ServerAdmin = true;
		val.Description = "Wipe the backend customer stats data on all vending machines. Slow operation.";
		val.Variable = false;
		val.Call = delegate
		{
			VendingMachine.ClearAllVendingCustomerHistory();
		};
		array[1505] = val;
		val = new Command();
		val.Name = "clearallvendinghistory";
		val.Parent = "vendingmachine";
		val.FullName = "vendingmachine.clearallvendinghistory";
		val.ServerAdmin = true;
		val.Description = "Wipe the backend stats data on all vending machines. Slow operation.";
		val.Variable = false;
		val.Call = delegate
		{
			VendingMachine.ClearAllVendingHistory();
		};
		array[1506] = val;
		val = new Command();
		val.Name = "max_history";
		val.Parent = "vendingmachine";
		val.FullName = "vendingmachine.max_history";
		val.ServerAdmin = true;
		val.Variable = true;
		val.GetOveride = () => VendingMachine.max_history.ToString();
		val.SetOveride = delegate(string str)
		{
			VendingMachine.max_history = StringExtensions.ToInt(str, 0);
		};
		array[1507] = val;
		val = new Command();
		val.Name = "max_processed";
		val.Parent = "vendingmachine";
		val.FullName = "vendingmachine.max_processed";
		val.ServerAdmin = true;
		val.Variable = true;
		val.GetOveride = () => VendingMachine.max_processed.ToString();
		val.SetOveride = delegate(string str)
		{
			VendingMachine.max_processed = StringExtensions.ToInt(str, 0);
		};
		array[1508] = val;
		val = new Command();
		val.Name = "max_returned";
		val.Parent = "vendingmachine";
		val.FullName = "vendingmachine.max_returned";
		val.ServerAdmin = true;
		val.Variable = true;
		val.GetOveride = () => VendingMachine.max_returned.ToString();
		val.SetOveride = delegate(string str)
		{
			VendingMachine.max_returned = StringExtensions.ToInt(str, 0);
		};
		array[1509] = val;
		val = new Command();
		val.Name = "allowchaining";
		val.Parent = "vinemountable";
		val.FullName = "vinemountable.allowchaining";
		val.ServerAdmin = true;
		val.Variable = true;
		val.GetOveride = () => VineMountable.allowChaining.ToString();
		val.SetOveride = delegate(string str)
		{
			VineMountable.allowChaining = StringExtensions.ToBool(str);
		};
		array[1510] = val;
		val = new Command();
		val.Name = "racetimeout";
		val.Parent = "waypointrace";
		val.FullName = "waypointrace.racetimeout";
		val.ServerAdmin = true;
		val.Saved = true;
		val.Description = "How long a race can go until it times out (in seconds)";
		val.Variable = true;
		val.GetOveride = () => WaypointRace.raceTimeout.ToString();
		val.SetOveride = delegate(string str)
		{
			WaypointRace.raceTimeout = StringExtensions.ToFloat(str, 0f);
		};
		array[1511] = val;
		val = new Command();
		val.Name = "startrace";
		val.Parent = "waypointrace";
		val.FullName = "waypointrace.startrace";
		val.ServerAdmin = true;
		val.Variable = false;
		val.Call = delegate(Arg arg)
		{
			WaypointRace.startRace(arg);
		};
		array[1512] = val;
		val = new Command();
		val.Name = "chancetorepositionmultiplier";
		val.Parent = "wildlifehazard";
		val.FullName = "wildlifehazard.chancetorepositionmultiplier";
		val.ServerAdmin = true;
		val.Variable = true;
		val.GetOveride = () => WildlifeHazard.ChanceToRepositionMultiplier.ToString();
		val.SetOveride = delegate(string str)
		{
			WildlifeHazard.ChanceToRepositionMultiplier = StringExtensions.ToFloat(str, 0f);
		};
		array[1513] = val;
		val = new Command();
		val.Name = "clienttickrate";
		val.Parent = "wildlifehazard";
		val.FullName = "wildlifehazard.clienttickrate";
		val.ServerAdmin = true;
		val.Variable = true;
		val.GetOveride = () => WildlifeHazard.ClientTickRate.ToString();
		val.SetOveride = delegate(string str)
		{
			WildlifeHazard.ClientTickRate = StringExtensions.ToFloat(str, 0f);
		};
		array[1514] = val;
		val = new Command();
		val.Name = "reactiontimemultiplier";
		val.Parent = "wildlifehazard";
		val.FullName = "wildlifehazard.reactiontimemultiplier";
		val.ServerAdmin = true;
		val.Variable = true;
		val.GetOveride = () => WildlifeHazard.ReactionTimeMultiplier.ToString();
		val.SetOveride = delegate(string str)
		{
			WildlifeHazard.ReactionTimeMultiplier = StringExtensions.ToFloat(str, 0f);
		};
		array[1515] = val;
		val = new Command();
		val.Name = "repositionattempts";
		val.Parent = "wildlifehazard";
		val.FullName = "wildlifehazard.repositionattempts";
		val.ServerAdmin = true;
		val.Variable = true;
		val.GetOveride = () => WildlifeHazard.RepositionAttempts.ToString();
		val.SetOveride = delegate(string str)
		{
			WildlifeHazard.RepositionAttempts = StringExtensions.ToInt(str, 0);
		};
		array[1516] = val;
		val = new Command();
		val.Name = "repositionradiusmultiplier";
		val.Parent = "wildlifehazard";
		val.FullName = "wildlifehazard.repositionradiusmultiplier";
		val.ServerAdmin = true;
		val.Variable = true;
		val.GetOveride = () => WildlifeHazard.RepositionRadiusMultiplier.ToString();
		val.SetOveride = delegate(string str)
		{
			WildlifeHazard.RepositionRadiusMultiplier = StringExtensions.ToFloat(str, 0f);
		};
		array[1517] = val;
		val = new Command();
		val.Name = "repositiontimermultiplier";
		val.Parent = "wildlifehazard";
		val.FullName = "wildlifehazard.repositiontimermultiplier";
		val.ServerAdmin = true;
		val.Variable = true;
		val.GetOveride = () => WildlifeHazard.RepositionTimerMultiplier.ToString();
		val.SetOveride = delegate(string str)
		{
			WildlifeHazard.RepositionTimerMultiplier = StringExtensions.ToFloat(str, 0f);
		};
		array[1518] = val;
		val = new Command();
		val.Name = "days_to_add_test";
		val.Parent = "wipetimer";
		val.FullName = "wipetimer.days_to_add_test";
		val.ServerAdmin = true;
		val.Variable = true;
		val.GetOveride = () => WipeTimer.daysToAddTest.ToString();
		val.SetOveride = delegate(string str)
		{
			WipeTimer.daysToAddTest = StringExtensions.ToInt(str, 0);
		};
		array[1519] = val;
		val = new Command();
		val.Name = "hours_to_add_test";
		val.Parent = "wipetimer";
		val.FullName = "wipetimer.hours_to_add_test";
		val.ServerAdmin = true;
		val.Variable = true;
		val.GetOveride = () => WipeTimer.hoursToAddTest.ToString();
		val.SetOveride = delegate(string str)
		{
			WipeTimer.hoursToAddTest = StringExtensions.ToFloat(str, 0f);
		};
		array[1520] = val;
		val = new Command();
		val.Name = "printtimezones";
		val.Parent = "wipetimer";
		val.FullName = "wipetimer.printtimezones";
		val.ServerAdmin = true;
		val.Variable = false;
		val.Call = delegate(Arg arg)
		{
			WipeTimer.PrintTimeZones(arg);
		};
		array[1521] = val;
		val = new Command();
		val.Name = "printwipe";
		val.Parent = "wipetimer";
		val.FullName = "wipetimer.printwipe";
		val.ServerAdmin = true;
		val.Variable = false;
		val.Call = delegate(Arg arg)
		{
			WipeTimer.PrintWipe(arg);
		};
		array[1522] = val;
		val = new Command();
		val.Name = "wipecronoverride";
		val.Parent = "wipetimer";
		val.FullName = "wipetimer.wipecronoverride";
		val.ServerAdmin = true;
		val.Description = "Custom cron expression for the wipe schedule. Overrides all other convars (except wipeUnixTimestampOverride) if set. Uses Cronos as a parser: https://github.com/HangfireIO/Cronos/";
		val.Variable = true;
		val.GetOveride = () => WipeTimer.wipeCronOverride ?? "";
		val.SetOveride = delegate(string str)
		{
			WipeTimer.wipeCronOverride = str;
		};
		array[1523] = val;
		val = new Command();
		val.Name = "wipedayofweek";
		val.Parent = "wipetimer";
		val.FullName = "wipetimer.wipedayofweek";
		val.ServerAdmin = true;
		val.Description = "0=sun,1=mon,2=tues,3=wed,4=thur,5=fri,6=sat";
		val.Variable = true;
		val.GetOveride = () => WipeTimer.wipeDayOfWeek.ToString();
		val.SetOveride = delegate(string str)
		{
			WipeTimer.wipeDayOfWeek = StringExtensions.ToInt(str, 0);
		};
		array[1524] = val;
		val = new Command();
		val.Name = "wipehourofday";
		val.Parent = "wipetimer";
		val.FullName = "wipetimer.wipehourofday";
		val.ServerAdmin = true;
		val.Description = "Which hour to wipe? 14.5 = 2:30pm";
		val.Variable = true;
		val.GetOveride = () => WipeTimer.wipeHourOfDay.ToString();
		val.SetOveride = delegate(string str)
		{
			WipeTimer.wipeHourOfDay = StringExtensions.ToFloat(str, 0f);
		};
		array[1525] = val;
		val = new Command();
		val.Name = "wipetimezone";
		val.Parent = "wipetimer";
		val.FullName = "wipetimer.wipetimezone";
		val.ServerAdmin = true;
		val.Description = "The timezone to use for wipes. Defaults to the server's time zone if not set or invalid. Value should be a TZ identifier as seen here: https://en.wikipedia.org/wiki/List_of_tz_database_time_zones";
		val.Variable = true;
		val.GetOveride = () => WipeTimer.wipeTimezone ?? "";
		val.SetOveride = delegate(string str)
		{
			WipeTimer.wipeTimezone = str;
		};
		array[1526] = val;
		val = new Command();
		val.Name = "wipeunixtimestampoverride";
		val.Parent = "wipetimer";
		val.FullName = "wipetimer.wipeunixtimestampoverride";
		val.ServerAdmin = true;
		val.Description = "Unix timestamp (seconds) for the upcoming wipe. Overrides all other convars if set to a time in the future.";
		val.Variable = true;
		val.GetOveride = () => WipeTimer.wipeUnixTimestampOverride.ToString();
		val.SetOveride = delegate(string str)
		{
			WipeTimer.wipeUnixTimestampOverride = StringExtensions.ToLong(str, 0L);
		};
		array[1527] = val;
		val = new Command();
		val.Name = "population";
		val.Parent = "wolf";
		val.FullName = "wolf.population";
		val.ServerAdmin = true;
		val.Description = "Population active on the server, per square km";
		val.ShowInAdminUI = true;
		val.Variable = true;
		val.GetOveride = () => Wolf.Population.ToString();
		val.SetOveride = delegate(string str)
		{
			Wolf.Population = StringExtensions.ToFloat(str, 0f);
		};
		array[1528] = val;
		val = new Command();
		val.Name = "playerdetectrange";
		val.Parent = "xmasdungeon";
		val.FullName = "xmasdungeon.playerdetectrange";
		val.ServerAdmin = true;
		val.Description = "How far we detect players from our inside/outside";
		val.ShowInAdminUI = true;
		val.Variable = true;
		val.GetOveride = () => XmasDungeon.playerdetectrange.ToString();
		val.SetOveride = delegate(string str)
		{
			XmasDungeon.playerdetectrange = StringExtensions.ToFloat(str, 0f);
		};
		array[1529] = val;
		val = new Command();
		val.Name = "xmaslifetime";
		val.Parent = "xmasdungeon";
		val.FullName = "xmasdungeon.xmaslifetime";
		val.ServerAdmin = true;
		val.Description = "How long each active dungeon should last before dying";
		val.ShowInAdminUI = true;
		val.Variable = true;
		val.GetOveride = () => XmasDungeon.xmaslifetime.ToString();
		val.SetOveride = delegate(string str)
		{
			XmasDungeon.xmaslifetime = StringExtensions.ToFloat(str, 0f);
		};
		array[1530] = val;
		val = new Command();
		val.Name = "xmaspopulation";
		val.Parent = "xmasdungeon";
		val.FullName = "xmasdungeon.xmaspopulation";
		val.ServerAdmin = true;
		val.Description = "Population active on the server";
		val.ShowInAdminUI = true;
		val.Variable = true;
		val.GetOveride = () => XmasDungeon.xmaspopulation.ToString();
		val.SetOveride = delegate(string str)
		{
			XmasDungeon.xmaspopulation = StringExtensions.ToFloat(str, 0f);
		};
		array[1531] = val;
		val = new Command();
		val.Name = "highlight";
		val.Parent = "ziplinelaunchpoint";
		val.FullName = "ziplinelaunchpoint.highlight";
		val.ServerAdmin = true;
		val.Variable = false;
		val.Call = delegate(Arg arg)
		{
			ZiplineLaunchPoint.highlight(arg);
		};
		array[1532] = val;
		val = new Command();
		val.Name = "report";
		val.Parent = "ziplinelaunchpoint";
		val.FullName = "ziplinelaunchpoint.report";
		val.ServerAdmin = true;
		val.Variable = false;
		val.Call = delegate(Arg arg)
		{
			ZiplineLaunchPoint.report(arg);
		};
		array[1533] = val;
		val = new Command();
		val.Name = "population";
		val.Parent = "zombie";
		val.FullName = "zombie.population";
		val.ServerAdmin = true;
		val.Description = "Population active on the server, per square km";
		val.ShowInAdminUI = true;
		val.Variable = true;
		val.GetOveride = () => Zombie.Population.ToString();
		val.SetOveride = delegate(string str)
		{
			Zombie.Population = StringExtensions.ToFloat(str, 0f);
		};
		array[1534] = val;
		All = (Command[])(object)array;
	}
}


using System;
using System.Collections.Generic;
using ConVar;
using Facepunch;
using Network;
using ProtoBuf;
using UnityEngine;
using UnityEngine.Assertions;

public class AdvancedChristmasLights : IOEntity
{
	public struct pointEntry
	{
		public Vector3 point;

		public Vector3 normal;

		public float slack;
	}

	public enum AnimationType
	{
		ON = 1,
		FLASHING = 2,
		CHASING = 3,
		FADE = 4,
		SLOWGLOW = 6
	}

	public GameObjectRef bulbPrefab;

	public LineRenderer lineRenderer;

	public List<pointEntry> points = new List<pointEntry>();

	public List<BaseBulb> bulbs = new List<BaseBulb>();

	public float bulbSpacing = 0.25f;

	public float wireThickness = 0.02f;

	public Transform wireEmission;

	public AnimationType animationStyle = AnimationType.ON;

	public RendererLOD _lod;

	[Tooltip("This many units used will result in +1 power usage")]
	public float lengthToPowerRatio = 5f;

	private bool finalized;

	private int lengthUsed;

	public override bool OnRpcMessage(BasePlayer player, uint rpc, Message msg)
	{
		TimeWarning val = TimeWarning.New("AdvancedChristmasLights.OnRpcMessage", 0);
		try
		{
			if (rpc == 1435781224 && (Object)(object)player != (Object)null)
			{
				Assert.IsTrue(player.isServer, "SV_RPC Message is using a clientside player!");
				if (Global.developer > 2)
				{
					Debug.Log((object)("SV_RPCMessage: " + ((object)player)?.ToString() + " - SetAnimationStyle "));
				}
				TimeWarning val2 = TimeWarning.New("SetAnimationStyle", 0);
				try
				{
					TimeWarning val3 = TimeWarning.New("Conditions", 0);
					try
					{
						if (!RPC_Server.IsVisible.Test(1435781224u, "SetAnimationStyle", this, player, 3f))
						{
							return true;
						}
					}
					finally
					{
						((IDisposable)val3)?.Dispose();
					}
					try
					{
						val3 = TimeWarning.New("Call", 0);
						try
						{
							RPCMessage rPCMessage = default(RPCMessage);
							rPCMessage.connection = msg.connection;
							rPCMessage.player = player;
							rPCMessage.read = msg.read;
							RPCMessage rPCMessage2 = rPCMessage;
							SetAnimationStyle(rPCMessage2);
						}
						finally
						{
							((IDisposable)val3)?.Dispose();
						}
					}
					catch (Exception ex)
					{
						Debug.LogException(ex);
						player.Kick("RPC Error in SetAnimationStyle");
					}
				}
				finally
				{
					((IDisposable)val2)?.Dispose();
				}
				return true;
			}
		}
		finally
		{
			((IDisposable)val)?.Dispose();
		}
		return base.OnRpcMessage(player, rpc, msg);
	}

	public void ClearPoints()
	{
		points.Clear();
	}

	public void FinishEditing()
	{
		finalized = true;
	}

	public bool IsFinalized()
	{
		return finalized;
	}

	public void AddPoint(Vector3 newPoint, Vector3 newNormal, float slackLevel)
	{
		//IL_002c: Unknown result type (might be due to invalid IL or missing references)
		//IL_002d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0034: Unknown result type (might be due to invalid IL or missing references)
		//IL_0035: Unknown result type (might be due to invalid IL or missing references)
		//IL_001b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0020: Unknown result type (might be due to invalid IL or missing references)
		if (base.isServer && points.Count == 0)
		{
			newPoint = wireEmission.position;
		}
		pointEntry item = default(pointEntry);
		item.point = newPoint;
		item.normal = newNormal;
		item.slack = slackLevel;
		points.Add(item);
		if (base.isServer)
		{
			SendNetworkUpdate();
		}
	}

	public override int ConsumptionAmount()
	{
		return 5;
	}

	protected override int GetPickupCount()
	{
		return Mathf.Max(lengthUsed, 1);
	}

	public void AddLengthUsed(int addLength)
	{
		lengthUsed += addLength;
	}

	public override void ServerInit()
	{
		base.ServerInit();
	}

	public override void Save(SaveInfo info)
	{
		//IL_0076: Unknown result type (might be due to invalid IL or missing references)
		//IL_007b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0082: Unknown result type (might be due to invalid IL or missing references)
		//IL_0087: Unknown result type (might be due to invalid IL or missing references)
		base.Save(info);
		info.msg.lightString = Pool.Get<LightString>();
		info.msg.lightString.points = Pool.Get<List<StringPoint>>();
		info.msg.lightString.lengthUsed = lengthUsed;
		info.msg.lightString.animationStyle = (int)animationStyle;
		foreach (pointEntry point in points)
		{
			StringPoint val = Pool.Get<StringPoint>();
			val.point = point.point;
			val.normal = point.normal;
			val.slack = point.slack;
			info.msg.lightString.points.Add(val);
		}
	}

	public override void Load(LoadInfo info)
	{
		//IL_003f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0045: Unknown result type (might be due to invalid IL or missing references)
		base.Load(info);
		if (info.msg.lightString == null)
		{
			return;
		}
		ClearPoints();
		foreach (StringPoint point in info.msg.lightString.points)
		{
			AddPoint(point.point, point.normal, point.slack);
		}
		lengthUsed = info.msg.lightString.lengthUsed;
		animationStyle = (AnimationType)info.msg.lightString.animationStyle;
		if (info.fromDisk)
		{
			FinishEditing();
		}
	}

	public bool CanPlayerManipulate(BasePlayer player)
	{
		return true;
	}

	[RPC_Server.IsVisible(3f)]
	[RPC_Server]
	public void SetAnimationStyle(RPCMessage msg)
	{
		int num = msg.read.Int32();
		num = Mathf.Clamp(num, 1, 7);
		if (Global.developer > 0)
		{
			string text = num.ToString();
			int num2 = (int)animationStyle;
			Debug.Log((object)("Set animation style to :" + text + " old was : " + num2));
		}
		AnimationType animationType = (AnimationType)num;
		if (animationType != animationStyle)
		{
			animationStyle = animationType;
			SendNetworkUpdate();
		}
	}
}


using UnityEngine;

public struct pointEntry
{
	public Vector3 point;

	public Vector3 normal;

	public float slack;
}


public enum AnimationType
{
	ON = 1,
	FLASHING = 2,
	CHASING = 3,
	FADE = 4,
	SLOWGLOW = 6
}


using System;
using System.Collections.Generic;
using ConVar;
using Network;
using Oxide.Core;
using Rust;
using UnityEngine;
using UnityEngine.Assertions;

public class AdventCalendar : BaseCombatEntity
{
	[Serializable]
	public class DayReward
	{
		public ItemAmount[] rewards;

		public AlternativeReward[] alternativeRewards;
	}

	[Serializable]
	public class AlternativeReward
	{
		public ItemAmount[] rewards;

		public Era era;
	}

	public int startMonth;

	public int startDay;

	public DayReward[] days;

	public GameObject[] crosses;

	public static List<AdventCalendar> all = new List<AdventCalendar>();

	public static Dictionary<ulong, List<int>> playerRewardHistory = new Dictionary<ulong, List<int>>();

	public static readonly Phrase CheckLater = new Phrase("adventcalendar.checklater", "You've already claimed today's gift. Come back tomorrow.");

	public static readonly Phrase EventOver = new Phrase("adventcalendar.eventover", "The Advent Calendar event is over. See you next year.");

	public GameObjectRef giftEffect;

	public GameObjectRef boxCloseEffect;

	[ServerVar]
	public static int overrideAdventCalendarDay = 0;

	[ServerVar]
	public static int overrideAdventCalendarMonth = 0;

	public override bool OnRpcMessage(BasePlayer player, uint rpc, Message msg)
	{
		TimeWarning val = TimeWarning.New("AdventCalendar.OnRpcMessage", 0);
		try
		{
			if (rpc == 1911254136 && (Object)(object)player != (Object)null)
			{
				Assert.IsTrue(player.isServer, "SV_RPC Message is using a clientside player!");
				if (Global.developer > 2)
				{
					Debug.Log((object)("SV_RPCMessage: " + ((object)player)?.ToString() + " - RPC_RequestGift "));
				}
				TimeWarning val2 = TimeWarning.New("RPC_RequestGift", 0);
				try
				{
					TimeWarning val3 = TimeWarning.New("Conditions", 0);
					try
					{
						if (!RPC_Server.CallsPerSecond.Test(1911254136u, "RPC_RequestGift", this, player, 1uL))
						{
							return true;
						}
						if (!RPC_Server.IsVisible.Test(1911254136u, "RPC_RequestGift", this, player, 3f))
						{
							return true;
						}
					}
					finally
					{
						((IDisposable)val3)?.Dispose();
					}
					try
					{
						val3 = TimeWarning.New("Call", 0);
						try
						{
							RPCMessage rPCMessage = default(RPCMessage);
							rPCMessage.connection = msg.connection;
							rPCMessage.player = player;
							rPCMessage.read = msg.read;
							RPCMessage msg2 = rPCMessage;
							RPC_RequestGift(msg2);
						}
						finally
						{
							((IDisposable)val3)?.Dispose();
						}
					}
					catch (Exception ex)
					{
						Debug.LogException(ex);
						player.Kick("RPC Error in RPC_RequestGift");
					}
				}
				finally
				{
					((IDisposable)val2)?.Dispose();
				}
				return true;
			}
		}
		finally
		{
			((IDisposable)val)?.Dispose();
		}
		return base.OnRpcMessage(player, rpc, msg);
	}

	public override void ServerInit()
	{
		base.ServerInit();
		all.Add(this);
	}

	public override void DestroyShared()
	{
		all.Remove(this);
		base.DestroyShared();
	}

	public void AwardGift(BasePlayer player)
	{
		//IL_00c0: Unknown result type (might be due to invalid IL or missing references)
		//IL_00c7: Unknown result type (might be due to invalid IL or missing references)
		//IL_00cd: Unknown result type (might be due to invalid IL or missing references)
		//IL_0132: Unknown result type (might be due to invalid IL or missing references)
		//IL_00f7: Unknown result type (might be due to invalid IL or missing references)
		//IL_00fc: Unknown result type (might be due to invalid IL or missing references)
		//IL_0106: Unknown result type (might be due to invalid IL or missing references)
		//IL_010b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0112: Unknown result type (might be due to invalid IL or missing references)
		//IL_0118: Unknown result type (might be due to invalid IL or missing references)
		//IL_0157: Unknown result type (might be due to invalid IL or missing references)
		//IL_015c: Unknown result type (might be due to invalid IL or missing references)
		if (Interface.CallHook("OnAdventGiftAward", (object)this, (object)player) != null)
		{
			return;
		}
		DateTime now = DateTime.Now;
		int num = ((overrideAdventCalendarDay > 0) ? overrideAdventCalendarDay : now.Day) - startDay;
		if (((overrideAdventCalendarMonth > 0) ? overrideAdventCalendarMonth : now.Month) != startMonth || num < 0 || num >= days.Length)
		{
			return;
		}
		if (!playerRewardHistory.ContainsKey(player.userID))
		{
			playerRewardHistory.Add(player.userID, new List<int>());
		}
		playerRewardHistory[player.userID].Add(num);
		Effect.server.Run(giftEffect.resourcePath, ((Component)player).transform.position);
		if (num >= 0 && num < crosses.Length)
		{
			Effect.server.Run(boxCloseEffect.resourcePath, ((Component)this).transform.position + Vector3.up * 1.5f);
		}
		DayReward dayReward = days[num];
		ItemAmount[] rewards = dayReward.rewards;
		if ((int)ConVar.Server.Era != 0 && dayReward.alternativeRewards != null)
		{
			AlternativeReward[] alternativeRewards = dayReward.alternativeRewards;
			foreach (AlternativeReward alternativeReward in alternativeRewards)
			{
				if (alternativeReward.era == ConVar.Server.Era)
				{
					rewards = alternativeReward.rewards;
					break;
				}
			}
		}
		foreach (ItemAmount itemAmount in rewards)
		{
			if (itemAmount.itemDef.IsAllowedInEra((EraRestriction)2))
			{
				player.GiveItem(ItemManager.CreateByItemID(itemAmount.itemid, Mathf.CeilToInt(itemAmount.amount), 0uL).SetItemOwnership(player, ItemOwnershipPhrases.AdventCalendar), GiveItemReason.PickedUp);
			}
		}
		Interface.CallHook("OnAdventGiftAwarded", (object)this, (object)player);
	}

	public bool WasAwardedTodaysGift(BasePlayer player)
	{
		object obj = Interface.CallHook("CanBeAwardedAdventGift", (object)this, (object)player);
		if (obj is bool)
		{
			return !(bool)obj;
		}
		if (!playerRewardHistory.ContainsKey(player.userID))
		{
			return false;
		}
		DateTime now = DateTime.Now;
		if (((overrideAdventCalendarMonth > 0) ? overrideAdventCalendarMonth : now.Month) != startMonth)
		{
			return true;
		}
		int num = ((overrideAdventCalendarDay > 0) ? overrideAdventCalendarDay : now.Day) - startDay;
		if (num < 0 || num >= days.Length)
		{
			return true;
		}
		if (playerRewardHistory[player.userID].Contains(num))
		{
			return true;
		}
		return false;
	}

	[RPC_Server]
	[RPC_Server.IsVisible(3f)]
	[RPC_Server.CallsPerSecond(1uL)]
	public void RPC_RequestGift(RPCMessage msg)
	{
		BasePlayer player = msg.player;
		if (WasAwardedTodaysGift(player))
		{
			player.ShowToast(GameTip.Styles.Red_Normal, CheckLater, false);
		}
		else
		{
			AwardGift(player);
		}
	}
}


using System;

[Serializable]
public class DayReward
{
	public ItemAmount[] rewards;

	public AlternativeReward[] alternativeRewards;
}


using System;
using Rust;

[Serializable]
public class AlternativeReward
{
	public ItemAmount[] rewards;

	public Era era;
}


using System;
using System.Collections.Generic;
using System.Globalization;
using CompanionServer;
using ConVar;
using Facepunch;
using Network;
using ProtoBuf;
using UnityEngine;
using UnityEngine.Assertions;

public abstract class AppIOEntity : IOEntity
{
	private float _cacheTime;

	private BuildingPrivlidge _cache;

	public abstract AppEntityType Type { get; }

	public virtual bool Value
	{
		get
		{
			return false;
		}
		set
		{
		}
	}

	public override bool OnRpcMessage(BasePlayer player, uint rpc, Message msg)
	{
		TimeWarning val = TimeWarning.New("AppIOEntity.OnRpcMessage", 0);
		try
		{
			if (rpc == 3018927126u && (Object)(object)player != (Object)null)
			{
				Assert.IsTrue(player.isServer, "SV_RPC Message is using a clientside player!");
				if (Global.developer > 2)
				{
					Debug.Log((object)("SV_RPCMessage: " + ((object)player)?.ToString() + " - PairWithApp "));
				}
				TimeWarning val2 = TimeWarning.New("PairWithApp", 0);
				try
				{
					TimeWarning val3 = TimeWarning.New("Conditions", 0);
					try
					{
						if (!RPC_Server.CallsPerSecond.Test(3018927126u, "PairWithApp", this, player, 5uL))
						{
							return true;
						}
						if (!RPC_Server.IsVisible.Test(3018927126u, "PairWithApp", this, player, 3f))
						{
							return true;
						}
					}
					finally
					{
						((IDisposable)val3)?.Dispose();
					}
					try
					{
						val3 = TimeWarning.New("Call", 0);
						try
						{
							RPCMessage rPCMessage = default(RPCMessage);
							rPCMessage.connection = msg.connection;
							rPCMessage.player = player;
							rPCMessage.read = msg.read;
							RPCMessage msg2 = rPCMessage;
							PairWithApp(msg2);
						}
						finally
						{
							((IDisposable)val3)?.Dispose();
						}
					}
					catch (Exception ex)
					{
						Debug.LogException(ex);
						player.Kick("RPC Error in PairWithApp");
					}
				}
				finally
				{
					((IDisposable)val2)?.Dispose();
				}
				return true;
			}
		}
		finally
		{
			((IDisposable)val)?.Dispose();
		}
		return base.OnRpcMessage(player, rpc, msg);
	}

	protected void BroadcastValueChange()
	{
		//IL_002c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0031: Unknown result type (might be due to invalid IL or missing references)
		if (this.IsValid())
		{
			EntityTarget target = GetTarget();
			AppBroadcast val = Pool.Get<AppBroadcast>();
			val.entityChanged = Pool.Get<AppEntityChanged>();
			val.entityChanged.entityId = net.ID;
			val.entityChanged.payload = Pool.Get<AppEntityPayload>();
			FillEntityPayload(val.entityChanged.payload);
			CompanionServer.Server.Broadcast(target, val);
		}
	}

	internal virtual void FillEntityPayload(AppEntityPayload payload)
	{
		payload.value = Value;
	}

	public override BuildingPrivlidge GetBuildingPrivilege()
	{
		if (Time.realtimeSinceStartup - _cacheTime > 5f)
		{
			_cache = base.GetBuildingPrivilege();
			_cacheTime = Time.realtimeSinceStartup;
		}
		return _cache;
	}

	public EntityTarget GetTarget()
	{
		//IL_0006: Unknown result type (might be due to invalid IL or missing references)
		return new EntityTarget(net.ID);
	}

	[RPC_Server.IsVisible(3f)]
	[RPC_Server]
	[RPC_Server.CallsPerSecond(5uL)]
	public async void PairWithApp(RPCMessage msg)
	{
		try
		{
			BasePlayer player = msg.player;
			Dictionary<string, string> dictionary = CompanionServer.Util.TryGetPlayerPairingData(player);
			if (dictionary == null)
			{
				player.ClientRPC(RpcTarget.Player("HandleCompanionPairingResult", player), 3);
				return;
			}
			dictionary.Add("entityId", net.ID.Value.ToString("G", CultureInfo.InvariantCulture));
			dictionary.Add("entityType", ((int)Type).ToString("G", CultureInfo.InvariantCulture));
			dictionary.Add("entityName", GetDisplayName().translated);
			NotificationSendResult notificationSendResult = await CompanionServer.Util.SendPairNotification("entity", player, GetDisplayName().translated, "Tap to pair with this device.", dictionary);
			if (notificationSendResult == NotificationSendResult.Sent)
			{
				OnPairedWithPlayer(msg.player);
			}
			else
			{
				player.ClientRPC(RpcTarget.Player("HandleCompanionPairingResult", player), (int)notificationSendResult);
			}
		}
		catch (Exception ex)
		{
			Debug.LogException(ex);
		}
	}

	protected virtual void OnPairedWithPlayer(BasePlayer player)
	{
	}
}


using System;
using ConVar;
using Facepunch;
using Network;
using ProtoBuf;
using UnityEngine;
using UnityEngine.Assertions;

public class AttackHelicopter : PlayerHelicopter
{
	public class GunnerInputState
	{
		public bool fire1;

		public bool fire2;

		public bool reload;

		public Ray eyeRay;

		public Vector3 eyePos;

		public void Reset()
		{
			//IL_001b: Unknown result type (might be due to invalid IL or missing references)
			fire1 = false;
			fire2 = false;
			reload = false;
			eyeRay = default(Ray);
		}
	}

	[Header("Attack Helicopter")]
	public Transform gunnerEyePos;

	[SerializeField]
	private Transform turbofanBone;

	[SerializeField]
	private GameObjectRef turretStoragePrefab;

	[SerializeField]
	private GameObjectRef rocketStoragePrefab;

	[SerializeField]
	private GameObjectRef gunCamUIPrefab;

	[SerializeField]
	private GameObjectRef gunCamUIDialogPrefab;

	[SerializeField]
	private GameObject gunCamUIParent;

	[SerializeField]
	private ParticleSystemContainer fxLightDamage;

	[SerializeField]
	private ParticleSystemContainer fxMediumDamage;

	[SerializeField]
	private ParticleSystemContainer fxHeavyDamage;

	[SerializeField]
	private SoundDefinition damagedLightLoop;

	[SerializeField]
	private SoundDefinition damagedHeavyLoop;

	[SerializeField]
	private GameObject damageSoundTarget;

	[SerializeField]
	private MeshRenderer monitorStaticRenderer;

	[SerializeField]
	private Material monitorStatic;

	[SerializeField]
	private Material monitorStaticSafeZone;

	[SerializeField]
	[Header("Heli Pilot Flares")]
	public GameObjectRef flareFireFX;

	[SerializeField]
	public GameObjectRef pilotFlare;

	[SerializeField]
	public Transform leftFlareLaunchPos;

	[SerializeField]
	public Transform rightFlareLaunchPos;

	[SerializeField]
	public float flareLaunchVel = 10f;

	[Header("Heli Pilot Lights")]
	[SerializeField]
	private Renderer rocketLightOff;

	[SerializeField]
	private Renderer rocketLightRed;

	[SerializeField]
	private Renderer rocketLightGreen;

	[SerializeField]
	private Renderer flareLightOff;

	[SerializeField]
	private Renderer flareLightRed;

	[SerializeField]
	private Renderer flareLightGreen;

	[Header("Heli Turret")]
	public Vector2 turretPitchClamp = new Vector2(-15f, 70f);

	public Vector2 turretYawClamp = new Vector2(-90f, 90f);

	public const Flags IN_GUNNER_VIEW_FLAG = Flags.Reserved9;

	public const Flags IN_SAFE_ZONE_FLAG = Flags.Reserved10;

	protected static int headingGaugeIndex = Animator.StringToHash("headingFraction");

	protected static int altGaugeIndex = Animator.StringToHash("altFraction");

	protected int altShakeIndex = -1;

	public EntityRef<AttackHelicopterTurret> turretInstance;

	public EntityRef<AttackHelicopterRockets> rocketsInstance;

	public GunnerInputState gunnerInputState = new GunnerInputState();

	public TimeSince timeSinceLastGunnerInput;

	public TimeSince timeSinceFailedWeaponFireRPC;

	public TimeSince timeSinceFailedFlareRPC;

	public bool HasSafeZoneFlag => HasFlag(Flags.Reserved10);

	public bool GunnerIsInGunnerView => HasFlag(Flags.Reserved9);

	public override bool OnRpcMessage(BasePlayer player, uint rpc, Message msg)
	{
		TimeWarning val = TimeWarning.New("AttackHelicopter.OnRpcMessage", 0);
		try
		{
			if (rpc == 3309981499u && (Object)(object)player != (Object)null)
			{
				Assert.IsTrue(player.isServer, "SV_RPC Message is using a clientside player!");
				if (Global.developer > 2)
				{
					Debug.Log((object)("SV_RPCMessage: " + ((object)player)?.ToString() + " - RPC_CloseGunnerView "));
				}
				TimeWarning val2 = TimeWarning.New("RPC_CloseGunnerView", 0);
				try
				{
					TimeWarning val3 = TimeWarning.New("Conditions", 0);
					try
					{
						if (!RPC_Server.IsVisible.Test(3309981499u, "RPC_CloseGunnerView", this, player, 3f))
						{
							return true;
						}
					}
					finally
					{
						((IDisposable)val3)?.Dispose();
					}
					try
					{
						val3 = TimeWarning.New("Call", 0);
						try
						{
							RPCMessage rPCMessage = default(RPCMessage);
							rPCMessage.connection = msg.connection;
							rPCMessage.player = player;
							rPCMessage.read = msg.read;
							RPCMessage msg2 = rPCMessage;
							RPC_CloseGunnerView(msg2);
						}
						finally
						{
							((IDisposable)val3)?.Dispose();
						}
					}
					catch (Exception ex)
					{
						Debug.LogException(ex);
						player.Kick("RPC Error in RPC_CloseGunnerView");
					}
				}
				finally
				{
					((IDisposable)val2)?.Dispose();
				}
				return true;
			}
			if (rpc == 1427416040 && (Object)(object)player != (Object)null)
			{
				Assert.IsTrue(player.isServer, "SV_RPC Message is using a clientside player!");
				if (Global.developer > 2)
				{
					Debug.Log((object)("SV_RPCMessage: " + ((object)player)?.ToString() + " - RPC_OpenGunnerView "));
				}
				TimeWarning val2 = TimeWarning.New("RPC_OpenGunnerView", 0);
				try
				{
					TimeWarning val3 = TimeWarning.New("Conditions", 0);
					try
					{
						if (!RPC_Server.IsVisible.Test(1427416040u, "RPC_OpenGunnerView", this, player, 3f))
						{
							return true;
						}
					}
					finally
					{
						((IDisposable)val3)?.Dispose();
					}
					try
					{
						val3 = TimeWarning.New("Call", 0);
						try
						{
							RPCMessage rPCMessage = default(RPCMessage);
							rPCMessage.connection = msg.connection;
							rPCMessage.player = player;
							rPCMessage.read = msg.read;
							RPCMessage msg3 = rPCMessage;
							RPC_OpenGunnerView(msg3);
						}
						finally
						{
							((IDisposable)val3)?.Dispose();
						}
					}
					catch (Exception ex2)
					{
						Debug.LogException(ex2);
						player.Kick("RPC Error in RPC_OpenGunnerView");
					}
				}
				finally
				{
					((IDisposable)val2)?.Dispose();
				}
				return true;
			}
			if (rpc == 4185921214u && (Object)(object)player != (Object)null)
			{
				Assert.IsTrue(player.isServer, "SV_RPC Message is using a clientside player!");
				if (Global.developer > 2)
				{
					Debug.Log((object)("SV_RPCMessage: " + ((object)player)?.ToString() + " - RPC_OpenStorage "));
				}
				TimeWarning val2 = TimeWarning.New("RPC_OpenStorage", 0);
				try
				{
					TimeWarning val3 = TimeWarning.New("Conditions", 0);
					try
					{
						if (!RPC_Server.IsVisible.Test(4185921214u, "RPC_OpenStorage", this, player, 3f))
						{
							return true;
						}
					}
					finally
					{
						((IDisposable)val3)?.Dispose();
					}
					try
					{
						val3 = TimeWarning.New("Call", 0);
						try
						{
							RPCMessage rPCMessage = default(RPCMessage);
							rPCMessage.connection = msg.connection;
							rPCMessage.player = player;
							rPCMessage.read = msg.read;
							RPCMessage msg4 = rPCMessage;
							RPC_OpenStorage(msg4);
						}
						finally
						{
							((IDisposable)val3)?.Dispose();
						}
					}
					catch (Exception ex3)
					{
						Debug.LogException(ex3);
						player.Kick("RPC Error in RPC_OpenStorage");
					}
				}
				finally
				{
					((IDisposable)val2)?.Dispose();
				}
				return true;
			}
			if (rpc == 148009183 && (Object)(object)player != (Object)null)
			{
				Assert.IsTrue(player.isServer, "SV_RPC Message is using a clientside player!");
				if (Global.developer > 2)
				{
					Debug.Log((object)("SV_RPCMessage: " + ((object)player)?.ToString() + " - RPC_OpenTurret "));
				}
				TimeWarning val2 = TimeWarning.New("RPC_OpenTurret", 0);
				try
				{
					TimeWarning val3 = TimeWarning.New("Conditions", 0);
					try
					{
						if (!RPC_Server.IsVisible.Test(148009183u, "RPC_OpenTurret", this, player, 3f))
						{
							return true;
						}
					}
					finally
					{
						((IDisposable)val3)?.Dispose();
					}
					try
					{
						val3 = TimeWarning.New("Call", 0);
						try
						{
							RPCMessage rPCMessage = default(RPCMessage);
							rPCMessage.connection = msg.connection;
							rPCMessage.player = player;
							rPCMessage.read = msg.read;
							RPCMessage msg5 = rPCMessage;
							RPC_OpenTurret(msg5);
						}
						finally
						{
							((IDisposable)val3)?.Dispose();
						}
					}
					catch (Exception ex4)
					{
						Debug.LogException(ex4);
						player.Kick("RPC Error in RPC_OpenTurret");
					}
				}
				finally
				{
					((IDisposable)val2)?.Dispose();
				}
				return true;
			}
		}
		finally
		{
			((IDisposable)val)?.Dispose();
		}
		return base.OnRpcMessage(player, rpc, msg);
	}

	public override void OnFlagsChanged(Flags old, Flags next)
	{
		base.OnFlagsChanged(old, next);
		if (base.isServer)
		{
			VehicleEngineController<PlayerHelicopter>.EngineState engineState = engineController.EngineStateFrom(old);
			if (engineController.CurEngineState != engineState)
			{
				SetFlag(Flags.Reserved5, engineController.IsStartingOrOn);
			}
		}
	}

	protected override void OnChildAdded(BaseEntity child)
	{
		base.OnChildAdded(child);
		if (child.prefabID == turretStoragePrefab.GetEntity().prefabID)
		{
			AttackHelicopterTurret attackHelicopterTurret = (AttackHelicopterTurret)child;
			turretInstance.Set(attackHelicopterTurret);
			attackHelicopterTurret.owner = this;
		}
		if (child.prefabID == rocketStoragePrefab.GetEntity().prefabID)
		{
			AttackHelicopterRockets attackHelicopterRockets = (AttackHelicopterRockets)child;
			rocketsInstance.Set(attackHelicopterRockets);
			attackHelicopterRockets.owner = this;
		}
	}

	public override void Load(LoadInfo info)
	{
		//IL_0025: Unknown result type (might be due to invalid IL or missing references)
		//IL_0040: Unknown result type (might be due to invalid IL or missing references)
		base.Load(info);
		if (info.msg.attackHeli != null)
		{
			turretInstance.uid = info.msg.attackHeli.turretID;
			rocketsInstance.uid = info.msg.attackHeli.rocketsID;
		}
	}

	public AttackHelicopterTurret GetTurret()
	{
		AttackHelicopterTurret attackHelicopterTurret = turretInstance.Get(base.isServer);
		if (attackHelicopterTurret.IsValid())
		{
			return attackHelicopterTurret;
		}
		return null;
	}

	public AttackHelicopterRockets GetRockets()
	{
		AttackHelicopterRockets attackHelicopterRockets = rocketsInstance.Get(base.isServer);
		if (attackHelicopterRockets.IsValid())
		{
			return attackHelicopterRockets;
		}
		return null;
	}

	public override void PilotInput(InputState inputState, BasePlayer player)
	{
		base.PilotInput(inputState, player);
		if (!IsOn())
		{
			return;
		}
		bool num = inputState.IsDown(BUTTON.FIRE_PRIMARY);
		bool flag = inputState.WasJustPressed(BUTTON.FIRE_SECONDARY);
		if (num)
		{
			AttackHelicopterRockets rockets = GetRockets();
			if (rockets.TryFireRocket(player))
			{
				MarkAllMountedPlayersAsHostile();
			}
			else if (inputState.WasJustPressed(BUTTON.FIRE_PRIMARY))
			{
				WeaponFireFailed(rockets.GetRocketAmount(), player);
			}
		}
		if (flag && !GetRockets().TryFireFlare())
		{
			FlareFireFailed(player);
		}
	}

	public override void PassengerInput(InputState inputState, BasePlayer player)
	{
		//IL_000e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0013: Unknown result type (might be due to invalid IL or missing references)
		//IL_006b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0070: Unknown result type (might be due to invalid IL or missing references)
		//IL_0075: Unknown result type (might be due to invalid IL or missing references)
		//IL_007a: Unknown result type (might be due to invalid IL or missing references)
		//IL_0095: Unknown result type (might be due to invalid IL or missing references)
		//IL_00a5: Unknown result type (might be due to invalid IL or missing references)
		//IL_00af: Unknown result type (might be due to invalid IL or missing references)
		//IL_00b4: Unknown result type (might be due to invalid IL or missing references)
		base.PassengerInput(inputState, player);
		timeSinceLastGunnerInput = TimeSince.op_Implicit(0f);
		gunnerInputState.fire1 = inputState.IsDown(BUTTON.FIRE_PRIMARY);
		gunnerInputState.fire2 = inputState.IsDown(BUTTON.FIRE_SECONDARY);
		gunnerInputState.reload = inputState.IsDown(BUTTON.RELOAD);
		((Ray)(ref gunnerInputState.eyeRay)).direction = Quaternion.Euler(inputState.current.aimAngles) * Vector3.forward;
		((Ray)(ref gunnerInputState.eyeRay)).origin = player.eyes.position + ((Ray)(ref gunnerInputState.eyeRay)).direction * 0.5f;
		if (IsOn() && GunnerIsInGunnerView)
		{
			AttackHelicopterTurret turret = GetTurret();
			if (turret.InputTick(gunnerInputState))
			{
				MarkAllMountedPlayersAsHostile();
			}
			else if (inputState.WasJustPressed(BUTTON.FIRE_PRIMARY))
			{
				turret.GetAmmoAmounts(out var _, out var available);
				WeaponFireFailed(available, player);
			}
			AttackHelicopterRockets rockets = GetRockets();
			if (rockets.InputTick(gunnerInputState, player))
			{
				MarkAllMountedPlayersAsHostile();
			}
			else if (inputState.WasJustPressed(BUTTON.FIRE_SECONDARY))
			{
				WeaponFireFailed(rockets.GetRocketAmount(), player);
			}
		}
	}

	public void WeaponFireFailed(int ammo, BasePlayer player)
	{
		//IL_0001: Unknown result type (might be due to invalid IL or missing references)
		//IL_002f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0034: Unknown result type (might be due to invalid IL or missing references)
		if (!(TimeSince.op_Implicit(timeSinceFailedWeaponFireRPC) <= 1f) && ammo <= 0)
		{
			ClientRPC(RpcTarget.Player("WeaponFireFailed", player));
			timeSinceFailedWeaponFireRPC = TimeSince.op_Implicit(0f);
		}
	}

	public void FlareFireFailed(BasePlayer player)
	{
		//IL_0001: Unknown result type (might be due to invalid IL or missing references)
		//IL_002a: Unknown result type (might be due to invalid IL or missing references)
		//IL_002f: Unknown result type (might be due to invalid IL or missing references)
		if (!(TimeSince.op_Implicit(timeSinceFailedFlareRPC) <= 1f))
		{
			ClientRPC(RpcTarget.Player("FlareFireFailed", player));
			timeSinceFailedFlareRPC = TimeSince.op_Implicit(0f);
		}
	}

	public override void VehicleFixedUpdate()
	{
		//IL_0013: Unknown result type (might be due to invalid IL or missing references)
		TimeWarning val = TimeWarning.New("AttackHelicopter.VehicleFixedUpdate", 0);
		try
		{
			base.VehicleFixedUpdate();
			if (TimeSince.op_Implicit(timeSinceLastGunnerInput) > 0.5f)
			{
				gunnerInputState.Reset();
			}
		}
		finally
		{
			((IDisposable)val)?.Dispose();
		}
	}

	public override bool EnterTrigger(TriggerBase trigger)
	{
		bool result = base.EnterTrigger(trigger);
		SetFlag(Flags.Reserved10, InSafeZone());
		return result;
	}

	public override void LeaveTrigger(TriggerBase trigger)
	{
		base.LeaveTrigger(trigger);
		SetFlag(Flags.Reserved10, InSafeZone());
	}

	public override void PrePlayerDismount(BasePlayer player, BaseMountable seat)
	{
		base.PrePlayerDismount(player, seat);
		if (HasFlag(Flags.Reserved9) && IsPassenger(player))
		{
			SetFlag(Flags.Reserved9, b: false);
		}
	}

	internal override void DoServerDestroy()
	{
		if (vehicle.vehiclesdroploot)
		{
			if (turretInstance.IsValid(base.isServer))
			{
				turretInstance.Get(base.isServer).DropItems();
			}
			if (rocketsInstance.IsValid(base.isServer))
			{
				rocketsInstance.Get(base.isServer).DropItems();
			}
		}
		base.DoServerDestroy();
	}

	public override void Save(SaveInfo info)
	{
		//IL_0028: Unknown result type (might be due to invalid IL or missing references)
		//IL_002d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0043: Unknown result type (might be due to invalid IL or missing references)
		//IL_0048: Unknown result type (might be due to invalid IL or missing references)
		base.Save(info);
		info.msg.attackHeli = Pool.Get<AttackHeli>();
		info.msg.attackHeli.turretID = turretInstance.uid;
		info.msg.attackHeli.rocketsID = rocketsInstance.uid;
	}

	public void MarkAllMountedPlayersAsHostile()
	{
		foreach (MountPointInfo mountPoint in mountPoints)
		{
			if ((Object)(object)mountPoint.mountable != (Object)null)
			{
				BasePlayer mounted = mountPoint.mountable.GetMounted();
				if ((Object)(object)mounted != (Object)null)
				{
					mounted.MarkHostileFor();
				}
			}
		}
	}

	public override bool AdminFixUp(int tier)
	{
		if (!base.AdminFixUp(tier))
		{
			return false;
		}
		AttackHelicopterTurret turret = GetTurret();
		if ((Object)(object)turret != (Object)null && (Object)(object)turret.GetAttachedHeldEntity() == (Object)null)
		{
			ItemDefinition itemToCreate;
			ItemDefinition itemDefinition;
			switch (tier)
			{
			case 1:
				itemToCreate = ItemManager.FindItemDefinition("hmlmg");
				itemDefinition = ItemManager.FindItemDefinition("ammo.rifle");
				break;
			case 2:
				itemToCreate = ItemManager.FindItemDefinition("rifle.ak");
				itemDefinition = ItemManager.FindItemDefinition("ammo.rifle");
				break;
			default:
				itemToCreate = ItemManager.FindItemDefinition("lmg.m249");
				itemDefinition = ItemManager.FindItemDefinition("ammo.rifle");
				break;
			}
			turret.inventory.AddItem(itemToCreate, 1, 0uL);
			turret.GetAmmoAmounts(out var _, out var available);
			int num = itemDefinition.stackable * (turret.inventory.capacity - 1);
			turret.forceAcceptAmmo = true;
			if (available < num)
			{
				int num2 = num - available;
				while (num2 > 0)
				{
					int num3 = Mathf.Min(num2, itemDefinition.stackable);
					turret.inventory.AddItem(itemDefinition, itemDefinition.stackable, 0uL);
					num2 -= num3;
				}
			}
			turret.forceAcceptAmmo = false;
		}
		AttackHelicopterRockets rockets = GetRockets();
		if ((Object)(object)rockets != (Object)null)
		{
			ItemDefinition itemDefinition2 = ItemManager.FindItemDefinition("flare");
			ItemDefinition itemDefinition3 = tier switch
			{
				1 => ItemManager.FindItemDefinition("ammo.rocket.hv"), 
				2 => ItemManager.FindItemDefinition("ammo.rocket.hv"), 
				_ => ItemManager.FindItemDefinition("ammo.rocket.fire"), 
			};
			int num4 = itemDefinition2.stackable * 2;
			int rocketAmount = rockets.GetRocketAmount();
			int num5 = itemDefinition3.stackable * (rockets.inventory.capacity - num4);
			if (rocketAmount < num5)
			{
				int num6 = num5 - rocketAmount;
				while (num6 > 0)
				{
					int num7 = Mathf.Min(num6, itemDefinition3.stackable);
					rockets.inventory.AddItem(itemDefinition3, itemDefinition3.stackable, 0uL);
					num6 -= num7;
				}
			}
			rockets.inventory.AddItem(itemDefinition2, num4, 0uL, ItemContainer.LimitStack.All);
		}
		return true;
	}

	public void LaunchFlare()
	{
		//IL_0016: Unknown result type (might be due to invalid IL or missing references)
		//IL_001b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0039: Unknown result type (might be due to invalid IL or missing references)
		//IL_003e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0053: Unknown result type (might be due to invalid IL or missing references)
		//IL_0058: Unknown result type (might be due to invalid IL or missing references)
		//IL_0063: Unknown result type (might be due to invalid IL or missing references)
		//IL_007e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0083: Unknown result type (might be due to invalid IL or missing references)
		//IL_0098: Unknown result type (might be due to invalid IL or missing references)
		//IL_00a3: Unknown result type (might be due to invalid IL or missing references)
		Effect.server.Run(flareFireFX.resourcePath, this, StringPool.Get("FlareLaunchPos"), Vector3.zero, Vector3.zero);
		Object.Instantiate<GameObject>(pilotFlare.Get(), leftFlareLaunchPos.position, Quaternion.identity).GetComponent<AttackHeliPilotFlare>().Init(-((Component)this).transform.right * flareLaunchVel);
		Object.Instantiate<GameObject>(pilotFlare.Get(), rightFlareLaunchPos.position, Quaternion.identity).GetComponent<AttackHeliPilotFlare>().Init(((Component)this).transform.right * flareLaunchVel);
	}

	[RPC_Server.IsVisible(3f)]
	[RPC_Server]
	public void RPC_OpenTurret(RPCMessage msg)
	{
		BasePlayer player = msg.player;
		if (!CanBeLooted(player) || player.isMounted || (IsSafe() && (Object)(object)player != (Object)(object)creatorEntity))
		{
			return;
		}
		StorageContainer turret = GetTurret();
		if (!((Object)(object)turret == (Object)null))
		{
			BasePlayer driver = GetDriver();
			if (!((Object)(object)driver != (Object)null) || !((Object)(object)driver != (Object)(object)player))
			{
				turret.PlayerOpenLoot(player);
			}
		}
	}

	[RPC_Server.IsVisible(3f)]
	[RPC_Server]
	public void RPC_OpenStorage(RPCMessage msg)
	{
		BasePlayer player = msg.player;
		if (!CanBeLooted(player) || player.isMounted || (IsSafe() && (Object)(object)player != (Object)(object)creatorEntity))
		{
			return;
		}
		StorageContainer rockets = GetRockets();
		if (!((Object)(object)rockets == (Object)null))
		{
			BasePlayer driver = GetDriver();
			if (!((Object)(object)driver != (Object)null) || !((Object)(object)driver != (Object)(object)player))
			{
				rockets.PlayerOpenLoot(player);
			}
		}
	}

	[RPC_Server.IsVisible(3f)]
	[RPC_Server]
	public void RPC_OpenGunnerView(RPCMessage msg)
	{
		BasePlayer player = msg.player;
		if (CanBeLooted(player) && IsOn() && IsPassenger(player) && !InSafeZone())
		{
			SetFlag(Flags.Reserved9, b: true);
		}
	}

	[RPC_Server.IsVisible(3f)]
	[RPC_Server]
	public void RPC_CloseGunnerView(RPCMessage msg)
	{
		BasePlayer player = msg.player;
		if (IsPassenger(player))
		{
			SetFlag(Flags.Reserved9, b: false);
		}
	}
}


using UnityEngine;

public class GunnerInputState
{
	public bool fire1;

	public bool fire2;

	public bool reload;

	public Ray eyeRay;

	public Vector3 eyePos;

	public void Reset()
	{
		//IL_001b: Unknown result type (might be due to invalid IL or missing references)
		fire1 = false;
		fire2 = false;
		reload = false;
		eyeRay = default(Ray);
	}
}


using System;
using System.Collections.Generic;
using Facepunch;
using Network;
using ProtoBuf;
using Rust;
using UnityEngine;

public class AttackHelicopterRockets : StorageContainer
{
	[SerializeField]
	private Transform[] rocketMuzzlePositions;

	[SerializeField]
	private GameObjectRef rocketFireTubeFX;

	[SerializeField]
	public float timeBetweenRockets = 0.5f;

	[SerializeField]
	private float timeBetweenFlares = 30f;

	[SerializeField]
	public float reloadTime = 8f;

	[SerializeField]
	public int rocketsPerReload = 6;

	[SerializeField]
	private ItemDefinition incendiaryRocketDef;

	[SerializeField]
	private ItemDefinition hvRocketDef;

	[SerializeField]
	private ItemDefinition flareItemDef;

	[NonSerialized]
	public AttackHelicopter owner;

	private const AmmoTypes ammoType = 32;

	public TimeSince timeSinceRocketFired;

	private TimeSince timeSinceFlareFired;

	private const float ROCKET_LAUNCH_OFFSET = 1f;

	private int rocketsSinceReload;

	private bool leftSide;

	public bool CanFireRocket
	{
		get
		{
			//IL_0009: Unknown result type (might be due to invalid IL or missing references)
			if (!IsReloading && TimeSince.op_Implicit(timeSinceRocketFired) >= timeBetweenRockets)
			{
				return GetRocketAmount() > 0;
			}
			return false;
		}
	}

	public bool IsReloading
	{
		get
		{
			//IL_000f: Unknown result type (might be due to invalid IL or missing references)
			if (rocketsSinceReload >= rocketsPerReload && TimeSince.op_Implicit(timeSinceRocketFired) < reloadTime)
			{
				return GetRocketAmount() > 0;
			}
			return false;
		}
	}

	public bool CanFireFlare
	{
		get
		{
			//IL_0001: Unknown result type (might be due to invalid IL or missing references)
			if (TimeSince.op_Implicit(timeSinceFlareFired) >= timeBetweenFlares)
			{
				return HasFlareAmmo();
			}
			return false;
		}
	}

	private bool HasOwner => (Object)(object)owner != (Object)null;

	public override bool OnRpcMessage(BasePlayer player, uint rpc, Message msg)
	{
		TimeWarning val = TimeWarning.New("AttackHelicopterRockets.OnRpcMessage", 0);
		try
		{
		}
		finally
		{
			((IDisposable)val)?.Dispose();
		}
		return base.OnRpcMessage(player, rpc, msg);
	}

	public override void InitShared()
	{
		base.InitShared();
		ResetFiringTimes();
	}

	public int GetRocketAmount()
	{
		if (base.isServer)
		{
			return base.inventory.GetAmmoAmount((AmmoTypes)32);
		}
		return 0;
	}

	public bool HasFlareAmmo()
	{
		if (base.isServer)
		{
			return base.inventory.HasAny(flareItemDef);
		}
		return false;
	}

	public int GetAmmoBeforeReload()
	{
		int num = ((rocketsSinceReload >= rocketsPerReload) ? rocketsSinceReload : (rocketsPerReload - rocketsSinceReload));
		return Mathf.Min(GetRocketAmount(), num);
	}

	public bool TryGetAmmoDef(out ItemDefinition ammoDef)
	{
		ammoDef = null;
		if (base.isServer)
		{
			List<Item> list = Pool.Get<List<Item>>();
			base.inventory.FindAmmo(list, (AmmoTypes)32);
			if (list.Count > 0)
			{
				ammoDef = list[list.Count - 1].info;
			}
			Pool.Free<Item>(ref list, false);
		}
		return (Object)(object)ammoDef != (Object)null;
	}

	public Vector3 MuzzleMidPoint()
	{
		//IL_0008: Unknown result type (might be due to invalid IL or missing references)
		//IL_0015: Unknown result type (might be due to invalid IL or missing references)
		//IL_001a: Unknown result type (might be due to invalid IL or missing references)
		//IL_0024: Unknown result type (might be due to invalid IL or missing references)
		return (rocketMuzzlePositions[1].position + rocketMuzzlePositions[0].position) * 0.5f;
	}

	public float GetMinRocketSpeed()
	{
		return owner.GetSpeed() + 2f;
	}

	public Vector3 GetProjectedHitPos()
	{
		//IL_0001: Unknown result type (might be due to invalid IL or missing references)
		//IL_000e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0018: Unknown result type (might be due to invalid IL or missing references)
		//IL_001d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0022: Unknown result type (might be due to invalid IL or missing references)
		//IL_002e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0033: Unknown result type (might be due to invalid IL or missing references)
		//IL_0106: Unknown result type (might be due to invalid IL or missing references)
		//IL_0107: Unknown result type (might be due to invalid IL or missing references)
		//IL_010d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0112: Unknown result type (might be due to invalid IL or missing references)
		//IL_0077: Unknown result type (might be due to invalid IL or missing references)
		//IL_008b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0090: Unknown result type (might be due to invalid IL or missing references)
		//IL_0097: Unknown result type (might be due to invalid IL or missing references)
		//IL_009c: Unknown result type (might be due to invalid IL or missing references)
		//IL_00a1: Unknown result type (might be due to invalid IL or missing references)
		//IL_00d4: Unknown result type (might be due to invalid IL or missing references)
		//IL_00d7: Unknown result type (might be due to invalid IL or missing references)
		//IL_00ac: Unknown result type (might be due to invalid IL or missing references)
		//IL_00ae: Unknown result type (might be due to invalid IL or missing references)
		//IL_0103: Unknown result type (might be due to invalid IL or missing references)
		//IL_00c2: Unknown result type (might be due to invalid IL or missing references)
		//IL_00c4: Unknown result type (might be due to invalid IL or missing references)
		//IL_00c8: Unknown result type (might be due to invalid IL or missing references)
		//IL_00cd: Unknown result type (might be due to invalid IL or missing references)
		//IL_00d2: Unknown result type (might be due to invalid IL or missing references)
		Vector3 val = MuzzleMidPoint() + rocketMuzzlePositions[0].forward * 1f;
		Vector3 forward = ((Component)owner).transform.forward;
		if (TryGetAmmoDef(out var ammoDef))
		{
			ItemModProjectile component = ((Component)ammoDef).GetComponent<ItemModProjectile>();
			ServerProjectile component2 = component.projectileObject.Get().GetComponent<ServerProjectile>();
			if ((Object)(object)component != (Object)null && (Object)(object)component2 != (Object)null)
			{
				float minRocketSpeed = GetMinRocketSpeed();
				float gravity = Physics.gravity.y * component2.gravityModifier;
				Vector3 val2 = component2.initialVelocity + forward * component2.speed;
				if (minRocketSpeed > 0f)
				{
					float num = Vector3.Dot(val2, forward) - minRocketSpeed;
					if (num < 0f)
					{
						val2 += forward * (0f - num);
					}
				}
				if (Ballistics.TryGetPhysicsProjectileHitPos(val, ((Vector3)(ref val2)).normalized, ((Vector3)(ref val2)).magnitude, gravity, out var result, 1.5f, 0.5f, 32f, owner))
				{
					return result;
				}
			}
		}
		return val + forward * 1000f;
	}

	private void ResetFiringTimes()
	{
		//IL_0006: Unknown result type (might be due to invalid IL or missing references)
		//IL_000b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0016: Unknown result type (might be due to invalid IL or missing references)
		//IL_001b: Unknown result type (might be due to invalid IL or missing references)
		timeSinceRocketFired = TimeSince.op_Implicit(9999f);
		timeSinceFlareFired = TimeSince.op_Implicit(9999f);
	}

	public override void Save(SaveInfo info)
	{
		base.Save(info);
		info.msg.attackHeliRockets = Pool.Get<AttackHeliRockets>();
		info.msg.attackHeliRockets.totalAmmo = GetRocketAmount();
		info.msg.attackHeliRockets.hasFlares = HasFlareAmmo();
		info.msg.attackHeliRockets.rocketsSinceReload = rocketsSinceReload;
		if (TryGetAmmoDef(out var ammoDef))
		{
			info.msg.attackHeliRockets.ammoItemID = ammoDef.itemid;
		}
	}

	public override BasePlayer ToPlayer()
	{
		if (HasOwner)
		{
			return owner.GetPassenger();
		}
		return null;
	}

	public override bool ItemFilter(Item item, int targetSlot)
	{
		if (!base.ItemFilter(item, targetSlot))
		{
			return false;
		}
		if (targetSlot == -1)
		{
			if (IsValidFlare())
			{
				for (int i = 12; i < base.inventory.capacity; i++)
				{
					if (!base.inventory.SlotTaken(item, i))
					{
						targetSlot = i;
						break;
					}
				}
			}
			else
			{
				if (!IsValidRocket())
				{
					return false;
				}
				for (int j = 0; j < 12; j++)
				{
					if (!base.inventory.SlotTaken(item, j))
					{
						targetSlot = j;
						break;
					}
				}
			}
		}
		if (targetSlot < 12)
		{
			return IsValidRocket();
		}
		return IsValidFlare();
		bool IsValidFlare()
		{
			return (Object)(object)item.info == (Object)(object)flareItemDef;
		}
		bool IsValidRocket()
		{
			if (!((Object)(object)item.info == (Object)(object)incendiaryRocketDef))
			{
				return (Object)(object)item.info == (Object)(object)hvRocketDef;
			}
			return true;
		}
	}

	public override void OnItemAddedOrRemoved(Item item, bool added)
	{
		//IL_000b: Unknown result type (might be due to invalid IL or missing references)
		//IL_001e: Unknown result type (might be due to invalid IL or missing references)
		if (added)
		{
			rocketsSinceReload = 0;
			if (TimeSince.op_Implicit(timeSinceFlareFired) < timeBetweenFlares || TimeSince.op_Implicit(timeSinceRocketFired) < timeBetweenRockets)
			{
				ResetFiringTimes();
				ClientRPC(RpcTarget.NetworkGroup("ResetFiringTimes"));
			}
		}
		SendNetworkUpdate();
	}

	public bool InputTick(AttackHelicopter.GunnerInputState input, BasePlayer gunner)
	{
		if (!owner.GunnerIsInGunnerView)
		{
			return false;
		}
		bool result = false;
		if (input.fire2)
		{
			result = TryFireRocket(gunner);
		}
		return result;
	}

	public bool TryFireRocket(BasePlayer shooter)
	{
		//IL_003e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0043: Unknown result type (might be due to invalid IL or missing references)
		//IL_004c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0051: Unknown result type (might be due to invalid IL or missing references)
		//IL_0062: Unknown result type (might be due to invalid IL or missing references)
		//IL_0063: Unknown result type (might be due to invalid IL or missing references)
		//IL_0095: Unknown result type (might be due to invalid IL or missing references)
		//IL_009a: Unknown result type (might be due to invalid IL or missing references)
		//IL_00d2: Unknown result type (might be due to invalid IL or missing references)
		//IL_00d7: Unknown result type (might be due to invalid IL or missing references)
		if (!CanFireRocket)
		{
			return false;
		}
		if ((Object)(object)owner == (Object)null)
		{
			return false;
		}
		if (owner.InSafeZone())
		{
			return false;
		}
		int num = ((!leftSide) ? 1 : 0);
		Vector3 position = rocketMuzzlePositions[num].position;
		Vector3 forward = rocketMuzzlePositions[num].forward;
		float minRocketSpeed = GetMinRocketSpeed();
		if (owner.TryFireProjectile(this, (AmmoTypes)32, position, forward, shooter, 1f, minRocketSpeed, out var _))
		{
			Effect.server.Run(rocketFireTubeFX.resourcePath, this, StringPool.Get(((Object)rocketMuzzlePositions[num]).name), Vector3.zero, Vector3.zero, null, broadcast: true);
			leftSide = !leftSide;
			ItemDefinition ammoDef;
			int arg = (TryGetAmmoDef(out ammoDef) ? ammoDef.itemid : 0);
			timeSinceRocketFired = TimeSince.op_Implicit(0f);
			if (rocketsSinceReload < rocketsPerReload)
			{
				rocketsSinceReload++;
			}
			else
			{
				rocketsSinceReload = 1;
			}
			ClientRPC(RpcTarget.NetworkGroup("RPCRocketFired"), (short)GetRocketAmount(), arg, rocketsSinceReload);
			return true;
		}
		return false;
	}

	public bool TryFireFlare()
	{
		//IL_0047: Unknown result type (might be due to invalid IL or missing references)
		//IL_004c: Unknown result type (might be due to invalid IL or missing references)
		if (!CanFireFlare)
		{
			return false;
		}
		if ((Object)(object)owner == (Object)null)
		{
			return false;
		}
		if (!base.inventory.TryTakeOne(flareItemDef.itemid, out var item))
		{
			return false;
		}
		item.Remove();
		timeSinceFlareFired = TimeSince.op_Implicit(0f);
		owner.LaunchFlare();
		ClientRPC(RpcTarget.NetworkGroup("RPCFlareFired"), HasFlareAmmo());
		return true;
	}
}


using System;
using Facepunch;
using Network;
using ProtoBuf;
using UnityEngine;

public class AttackHelicopterTurret : StorageContainer
{
	public enum GunStatus
	{
		NoWeapon,
		Ready,
		Reloading,
		NoAmmo
	}

	[SerializeField]
	public Transform turretSocket;

	[SerializeField]
	public Transform turretHorizontal;

	[SerializeField]
	public Transform turretVertical;

	[NonSerialized]
	public AttackHelicopter owner;

	public EntityRef<HeldEntity> attachedHeldEntity;

	[NonSerialized]
	public bool forceAcceptAmmo;

	public const float WEAPON_Z_OFFSET_SCALE = -0.5f;

	public float muzzleYOffset;

	public float lastSentX;

	public float lastSentY;

	public bool HasOwner => (Object)(object)owner != (Object)null;

	public GunStatus GunState { get; set; }

	public float GunXAngle => turretVertical.localEulerAngles.x;

	public float GunYAngle => turretHorizontal.localEulerAngles.y;

	public override bool OnRpcMessage(BasePlayer player, uint rpc, Message msg)
	{
		TimeWarning val = TimeWarning.New("AttackHelicopterTurret.OnRpcMessage", 0);
		try
		{
		}
		finally
		{
			((IDisposable)val)?.Dispose();
		}
		return base.OnRpcMessage(player, rpc, msg);
	}

	public override void Load(LoadInfo info)
	{
		//IL_006c: Unknown result type (might be due to invalid IL or missing references)
		base.Load(info);
		if (info.msg.attackHeliTurret != null)
		{
			_ = GunState;
			GunState = (GunStatus)info.msg.attackHeliTurret.gunState;
			float xRot = info.msg.attackHeliTurret.xRot;
			float yRot = info.msg.attackHeliTurret.yRot;
			SetGunRotation(xRot, yRot);
			attachedHeldEntity.uid = info.msg.attackHeliTurret.heldEntityID;
		}
	}

	public void SetGunRotation(float xRot, float yRot)
	{
		//IL_0020: Unknown result type (might be due to invalid IL or missing references)
		//IL_003c: Unknown result type (might be due to invalid IL or missing references)
		if (!((Object)(object)owner == (Object)null))
		{
			turretHorizontal.localEulerAngles = new Vector3(0f, yRot, 0f);
			turretVertical.localEulerAngles = new Vector3(0f - xRot, 0f, 0f);
		}
	}

	public HeldEntity GetAttachedHeldEntity()
	{
		HeldEntity heldEntity = attachedHeldEntity.Get(base.isServer);
		if (heldEntity.IsValid())
		{
			return heldEntity;
		}
		return null;
	}

	public void GetAmmoAmounts(out int clip, out int available)
	{
		//IL_0049: Unknown result type (might be due to invalid IL or missing references)
		clip = 0;
		available = 0;
		if (base.isServer && GetAttachedHeldEntity() is BaseProjectile baseProjectile)
		{
			clip = baseProjectile.primaryMagazine.contents;
			if (baseProjectile.primaryMagazine.allowAmmoSwitching)
			{
				available = base.inventory.GetAmmoAmount(baseProjectile.primaryMagazine.definition.ammoTypes);
			}
			else
			{
				available = base.inventory.GetAmmoAmount(baseProjectile.primaryMagazine.ammoType);
			}
		}
	}

	public Vector3 GetProjectedHitPos()
	{
		//IL_0024: Unknown result type (might be due to invalid IL or missing references)
		//IL_002f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0034: Unknown result type (might be due to invalid IL or missing references)
		//IL_0040: Unknown result type (might be due to invalid IL or missing references)
		//IL_004b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0050: Unknown result type (might be due to invalid IL or missing references)
		HeldEntity heldEntity = GetAttachedHeldEntity();
		if ((Object)(object)heldEntity == (Object)null || (Object)(object)heldEntity.MuzzleTransform == (Object)null)
		{
			return Ballistics.GetBulletHitPoint(turretSocket.position, turretSocket.forward);
		}
		return Ballistics.GetBulletHitPoint(heldEntity.MuzzleTransform.position, heldEntity.MuzzleTransform.forward);
	}

	public override void ServerInit()
	{
		base.ServerInit();
		ItemContainer itemContainer = base.inventory;
		itemContainer.canAcceptItem = (Func<Item, int, bool>)Delegate.Combine(itemContainer.canAcceptItem, new Func<Item, int, bool>(CanAcceptItem));
		((FacepunchBehaviour)this).InvokeRandomized((Action)RefreshGunState, 0f, 0.25f, 0.05f);
	}

	public override void Save(SaveInfo info)
	{
		//IL_0073: Unknown result type (might be due to invalid IL or missing references)
		//IL_0093: Unknown result type (might be due to invalid IL or missing references)
		//IL_00b3: Unknown result type (might be due to invalid IL or missing references)
		//IL_00b8: Unknown result type (might be due to invalid IL or missing references)
		base.Save(info);
		if (HasOwner)
		{
			info.msg.attackHeliTurret = Pool.Get<AttackHeliTurret>();
			GetAmmoAmounts(out var clip, out var available);
			info.msg.attackHeliTurret.clipAmmo = clip;
			info.msg.attackHeliTurret.totalAmmo = available;
			info.msg.attackHeliTurret.gunState = (int)GunState;
			info.msg.attackHeliTurret.xRot = turretVertical.localEulerAngles.x;
			info.msg.attackHeliTurret.yRot = turretHorizontal.localEulerAngles.y;
			info.msg.attackHeliTurret.heldEntityID = attachedHeldEntity.uid;
		}
	}

	public override BasePlayer ToPlayer()
	{
		if (HasOwner)
		{
			return owner.GetPassenger();
		}
		return null;
	}

	public bool CanAcceptItem(Item item, int targetSlot)
	{
		Item slot = base.inventory.GetSlot(0);
		if (IsValidWeapon(item) && targetSlot == 0)
		{
			return true;
		}
		if (item.info.category == ItemCategory.Ammunition)
		{
			if (forceAcceptAmmo)
			{
				return true;
			}
			if (slot == null || (Object)(object)GetAttachedHeldEntity() == (Object)null)
			{
				return false;
			}
			if (targetSlot == 0)
			{
				return false;
			}
			return true;
		}
		return false;
	}

	public bool IsValidWeapon(Item item)
	{
		ItemDefinition info = item.info;
		if (item.isBroken)
		{
			return false;
		}
		ItemModEntity component = ((Component)info).GetComponent<ItemModEntity>();
		if ((Object)(object)component == (Object)null)
		{
			return false;
		}
		HeldEntity component2 = component.entityPrefab.Get().GetComponent<HeldEntity>();
		if ((Object)(object)component2 == (Object)null)
		{
			return false;
		}
		if (!component2.IsUsableByTurret)
		{
			return false;
		}
		return true;
	}

	public bool InputTick(AttackHelicopter.GunnerInputState input)
	{
		//IL_0049: Unknown result type (might be due to invalid IL or missing references)
		//IL_0054: Unknown result type (might be due to invalid IL or missing references)
		//IL_005f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0064: Unknown result type (might be due to invalid IL or missing references)
		//IL_006f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0074: Unknown result type (might be due to invalid IL or missing references)
		//IL_0079: Unknown result type (might be due to invalid IL or missing references)
		//IL_008b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0092: Unknown result type (might be due to invalid IL or missing references)
		//IL_0097: Unknown result type (might be due to invalid IL or missing references)
		//IL_009c: Unknown result type (might be due to invalid IL or missing references)
		//IL_00a3: Unknown result type (might be due to invalid IL or missing references)
		//IL_00a4: Unknown result type (might be due to invalid IL or missing references)
		//IL_00a9: Unknown result type (might be due to invalid IL or missing references)
		//IL_00aa: Unknown result type (might be due to invalid IL or missing references)
		//IL_00ab: Unknown result type (might be due to invalid IL or missing references)
		//IL_00b0: Unknown result type (might be due to invalid IL or missing references)
		//IL_00b5: Unknown result type (might be due to invalid IL or missing references)
		//IL_00b9: Unknown result type (might be due to invalid IL or missing references)
		//IL_00be: Unknown result type (might be due to invalid IL or missing references)
		if (!owner.GunnerIsInGunnerView)
		{
			return false;
		}
		bool result = false;
		if (input.reload)
		{
			TryReload();
		}
		else if (input.fire1)
		{
			result = TryFireWeapon();
		}
		((Ray)(ref input.eyeRay)).direction = ClampEyeAngle(((Component)owner).transform, ((Ray)(ref input.eyeRay)).direction, owner.turretPitchClamp, owner.turretYawClamp);
		Vector3 bulletHitPoint = Ballistics.GetBulletHitPoint(input.eyeRay);
		bulletHitPoint.y -= muzzleYOffset;
		Vector3 val = bulletHitPoint - turretSocket.position;
		val = ((Component)this).transform.InverseTransformDirection(val);
		Quaternion val2 = Quaternion.LookRotation(val, Vector3.up);
		Vector3 eulerAngles = ((Quaternion)(ref val2)).eulerAngles;
		float num = 0f - eulerAngles.x;
		float y = eulerAngles.y;
		SetGunRotation(num, y);
		if (Mathf.Abs(num - lastSentX) > 1f || Mathf.Abs(y - lastSentY) > 1f)
		{
			ClientRPC(RpcTarget.NetworkGroup("RPCRotation"), GetNetworkTime(), num, y);
			lastSentX = num;
			lastSentY = y;
		}
		return result;
	}

	public Vector3 ClampEyeAngle(Transform heliTransform, Vector3 eyeDir, Vector2 pitchRange, Vector2 yawRange)
	{
		//IL_0001: Unknown result type (might be due to invalid IL or missing references)
		//IL_0002: Unknown result type (might be due to invalid IL or missing references)
		//IL_0007: Unknown result type (might be due to invalid IL or missing references)
		//IL_0008: Unknown result type (might be due to invalid IL or missing references)
		//IL_001a: Unknown result type (might be due to invalid IL or missing references)
		//IL_0020: Unknown result type (might be due to invalid IL or missing references)
		//IL_002b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0031: Unknown result type (might be due to invalid IL or missing references)
		//IL_0044: Unknown result type (might be due to invalid IL or missing references)
		//IL_004b: Unknown result type (might be due to invalid IL or missing references)
		//IL_005e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0063: Unknown result type (might be due to invalid IL or missing references)
		//IL_0068: Unknown result type (might be due to invalid IL or missing references)
		//IL_006d: Unknown result type (might be due to invalid IL or missing references)
		//IL_006f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0070: Unknown result type (might be due to invalid IL or missing references)
		Vector3 val = heliTransform.InverseTransformDirection(eyeDir);
		float num = Mathf.Clamp(Mathf.Asin(0f - val.y) * 57.29578f, pitchRange.x, pitchRange.y);
		float num2 = Mathf.Atan2(val.x, val.z) * 57.29578f;
		num2 = Mathf.Clamp(num2, yawRange.x, yawRange.y);
		val = Quaternion.Euler(num, num2, 0f) * Vector3.forward;
		return heliTransform.TransformDirection(val);
	}

	public override void OnItemAddedOrRemoved(Item item, bool added)
	{
		base.OnItemAddedOrRemoved(item, added);
		if (Object.op_Implicit((Object)(object)((Component)item.info).GetComponent<ItemModEntity>()))
		{
			if (((FacepunchBehaviour)this).IsInvoking((Action)UpdateAttachedWeapon))
			{
				UpdateAttachedWeapon();
			}
			((FacepunchBehaviour)this).Invoke((Action)UpdateAttachedWeapon, 0.5f);
		}
	}

	public void UpdateAttachedWeapon()
	{
		//IL_0063: Unknown result type (might be due to invalid IL or missing references)
		//IL_0068: Unknown result type (might be due to invalid IL or missing references)
		if (!HasOwner)
		{
			Debug.LogError((object)(((object)this).GetType().Name + ": Turret socket not yet set."));
			return;
		}
		HeldEntity heldEntity = AutoTurret.TryAddWeaponToTurret(base.inventory.GetSlot(0), turretSocket, this, -0.5f);
		if ((Object)(object)heldEntity != (Object)null)
		{
			attachedHeldEntity.Set(heldEntity);
			muzzleYOffset = turretSocket.InverseTransformPoint(heldEntity.MuzzleTransform.position).y;
		}
		else
		{
			HeldEntity heldEntity2 = GetAttachedHeldEntity();
			if ((Object)(object)heldEntity2 != (Object)null)
			{
				heldEntity2.SetGenericVisible(wantsVis: false);
				heldEntity2.SetLightsOn(isOn: false);
			}
			attachedHeldEntity.Set(null);
			muzzleYOffset = 0f;
		}
		SendNetworkUpdate();
	}

	public bool TryReload()
	{
		BaseProjectile baseProjectile = GetAttachedHeldEntity() as BaseProjectile;
		if ((Object)(object)baseProjectile == (Object)null)
		{
			return false;
		}
		return baseProjectile.ServerTryReload(base.inventory);
	}

	public bool TryFireWeapon()
	{
		HeldEntity heldEntity = GetAttachedHeldEntity();
		if ((Object)(object)heldEntity == (Object)null)
		{
			return false;
		}
		if (owner.InSafeZone())
		{
			return false;
		}
		if (heldEntity is BaseProjectile baseProjectile)
		{
			if (baseProjectile.primaryMagazine.contents <= 0)
			{
				baseProjectile.ServerTryReload(base.inventory);
				return false;
			}
			if (baseProjectile.NextAttackTime > Time.time)
			{
				return false;
			}
		}
		heldEntity.ServerUse();
		GetAmmoAmounts(out var clip, out var available);
		ClientRPC(RpcTarget.NetworkGroup("RPCAmmo"), (short)clip, (short)available);
		return true;
	}

	public void RefreshGunState()
	{
		HeldEntity heldEntity = GetAttachedHeldEntity();
		GunStatus gunStatus;
		if (Object.op_Implicit((Object)(object)heldEntity))
		{
			gunStatus = GunStatus.Ready;
			BaseProjectile baseProjectile = heldEntity as BaseProjectile;
			if ((Object)(object)baseProjectile != (Object)null)
			{
				if (baseProjectile.ServerIsReloading())
				{
					gunStatus = GunStatus.Reloading;
				}
				else
				{
					GetAmmoAmounts(out var clip, out var available);
					if (clip == 0 && available == 0)
					{
						gunStatus = GunStatus.NoAmmo;
					}
				}
			}
		}
		else
		{
			gunStatus = GunStatus.NoWeapon;
		}
		if (gunStatus != GunState)
		{
			GunState = gunStatus;
			SendNetworkUpdate();
		}
	}
}


public enum GunStatus
{
	NoWeapon,
	Ready,
	Reloading,
	NoAmmo
}


using System;
using ConVar;
using Facepunch;
using Network;
using ProtoBuf;
using UnityEngine;
using UnityEngine.Assertions;

public class AudioVisualisationEntity : IOEntity
{
	public enum LightColour
	{
		Red,
		Green,
		Blue,
		Yellow,
		Pink
	}

	public enum VolumeSensitivity
	{
		Small,
		Medium,
		Large
	}

	public enum Speed
	{
		Low,
		Medium,
		High
	}

	private EntityRef<BaseEntity> connectedTo;

	public GameObjectRef SettingsDialog;

	public LightColour currentColour { get; private set; }

	public VolumeSensitivity currentVolumeSensitivity { get; private set; } = VolumeSensitivity.Medium;

	public Speed currentSpeed { get; private set; } = Speed.Medium;

	public int currentGradient { get; private set; }

	public override bool OnRpcMessage(BasePlayer player, uint rpc, Message msg)
	{
		TimeWarning val = TimeWarning.New("AudioVisualisationEntity.OnRpcMessage", 0);
		try
		{
			if (rpc == 4002266471u && (Object)(object)player != (Object)null)
			{
				Assert.IsTrue(player.isServer, "SV_RPC Message is using a clientside player!");
				if (Global.developer > 2)
				{
					Debug.Log((object)("SV_RPCMessage: " + ((object)player)?.ToString() + " - ServerUpdateSettings "));
				}
				TimeWarning val2 = TimeWarning.New("ServerUpdateSettings", 0);
				try
				{
					TimeWarning val3 = TimeWarning.New("Conditions", 0);
					try
					{
						if (!RPC_Server.CallsPerSecond.Test(4002266471u, "ServerUpdateSettings", this, player, 5uL))
						{
							return true;
						}
						if (!RPC_Server.IsVisible.Test(4002266471u, "ServerUpdateSettings", this, player, 3f))
						{
							return true;
						}
					}
					finally
					{
						((IDisposable)val3)?.Dispose();
					}
					try
					{
						val3 = TimeWarning.New("Call", 0);
						try
						{
							RPCMessage rPCMessage = default(RPCMessage);
							rPCMessage.connection = msg.connection;
							rPCMessage.player = player;
							rPCMessage.read = msg.read;
							RPCMessage msg2 = rPCMessage;
							ServerUpdateSettings(msg2);
						}
						finally
						{
							((IDisposable)val3)?.Dispose();
						}
					}
					catch (Exception ex)
					{
						Debug.LogException(ex);
						player.Kick("RPC Error in ServerUpdateSettings");
					}
				}
				finally
				{
					((IDisposable)val2)?.Dispose();
				}
				return true;
			}
		}
		finally
		{
			((IDisposable)val)?.Dispose();
		}
		return base.OnRpcMessage(player, rpc, msg);
	}

	public override void OnFlagsChanged(Flags old, Flags next)
	{
		//IL_0082: Unknown result type (might be due to invalid IL or missing references)
		base.OnFlagsChanged(old, next);
		if (base.isServer && old.HasFlag(Flags.Reserved8) != next.HasFlag(Flags.Reserved8) && next.HasFlag(Flags.Reserved8))
		{
			int depth = BoomBox.BacktrackLength * 4;
			IOEntity audioSource = GetAudioSource(this, ref depth);
			if ((Object)(object)audioSource != (Object)null)
			{
				ClientRPC<NetworkableId>(RpcTarget.NetworkGroup("Client_PlayAudioFrom"), audioSource.net.ID);
			}
			connectedTo.Set(audioSource);
		}
	}

	private IOEntity GetAudioSource(IOEntity entity, ref int depth)
	{
		if (depth <= 0)
		{
			return null;
		}
		IOSlot[] array = entity.inputs;
		IAudioConnectionSource audioConnectionSource = default(IAudioConnectionSource);
		AudioVisualisationEntity audioVisualisationEntity = default(AudioVisualisationEntity);
		IAudioConnectionSource audioConnectionSource2 = default(IAudioConnectionSource);
		for (int i = 0; i < array.Length; i++)
		{
			IOEntity iOEntity = array[i].connectedTo.Get(base.isServer);
			if ((Object)(object)iOEntity == (Object)(object)this)
			{
				return null;
			}
			if ((Object)(object)iOEntity != (Object)null && ((Component)iOEntity).TryGetComponent<IAudioConnectionSource>(ref audioConnectionSource))
			{
				return iOEntity;
			}
			if ((Object)(object)iOEntity != (Object)null && ((Component)iOEntity).TryGetComponent<AudioVisualisationEntity>(ref audioVisualisationEntity) && audioVisualisationEntity.connectedTo.IsSet)
			{
				return audioVisualisationEntity.connectedTo.Get(base.isServer) as IOEntity;
			}
			if ((Object)(object)iOEntity != (Object)null)
			{
				depth--;
				iOEntity = GetAudioSource(iOEntity, ref depth);
				if ((Object)(object)iOEntity != (Object)null && ((Component)iOEntity).TryGetComponent<IAudioConnectionSource>(ref audioConnectionSource2))
				{
					return iOEntity;
				}
			}
		}
		return null;
	}

	public override void Save(SaveInfo info)
	{
		//IL_0035: Unknown result type (might be due to invalid IL or missing references)
		//IL_003a: Unknown result type (might be due to invalid IL or missing references)
		base.Save(info);
		if (info.msg.connectedSpeaker == null)
		{
			info.msg.connectedSpeaker = Pool.Get<ConnectedSpeaker>();
		}
		info.msg.connectedSpeaker.connectedTo = connectedTo.uid;
		if (info.msg.audioEntity == null)
		{
			info.msg.audioEntity = Pool.Get<AudioEntity>();
		}
		info.msg.audioEntity.colourMode = (int)currentColour;
		info.msg.audioEntity.volumeRange = (int)currentVolumeSensitivity;
		info.msg.audioEntity.speed = (int)currentSpeed;
		info.msg.audioEntity.gradient = currentGradient;
	}

	[RPC_Server.IsVisible(3f)]
	[RPC_Server.CallsPerSecond(5uL)]
	[RPC_Server]
	public void ServerUpdateSettings(RPCMessage msg)
	{
		int num = msg.read.Int32();
		int num2 = msg.read.Int32();
		int num3 = msg.read.Int32();
		int num4 = msg.read.Int32();
		if (currentColour != (LightColour)num || currentVolumeSensitivity != (VolumeSensitivity)num2 || currentSpeed != (Speed)num3 || currentGradient != num4)
		{
			currentColour = (LightColour)num;
			currentVolumeSensitivity = (VolumeSensitivity)num2;
			currentSpeed = (Speed)num3;
			currentGradient = num4;
			MarkDirty();
			SendNetworkUpdate();
		}
	}

	public override void Load(LoadInfo info)
	{
		//IL_008a: Unknown result type (might be due to invalid IL or missing references)
		base.Load(info);
		if (info.msg.audioEntity != null)
		{
			currentColour = (LightColour)info.msg.audioEntity.colourMode;
			currentVolumeSensitivity = (VolumeSensitivity)info.msg.audioEntity.volumeRange;
			currentSpeed = (Speed)info.msg.audioEntity.speed;
			currentGradient = info.msg.audioEntity.gradient;
		}
		if (info.msg.connectedSpeaker != null)
		{
			connectedTo.uid = info.msg.connectedSpeaker.connectedTo;
		}
	}
}


public enum LightColour
{
	Red,
	Green,
	Blue,
	Yellow,
	Pink
}


public enum VolumeSensitivity
{
	Small,
	Medium,
	Large
}


public enum Speed
{
	Low,
	Medium,
	High
}


using System;
using System.Collections.Generic;
using System.Linq;
using ConVar;
using Facepunch;
using Facepunch.Rust;
using Network;
using Oxide.Core;
using ProtoBuf;
using Rust;
using UnityEngine;
using UnityEngine.Assertions;

public class AutoTurret : ContainerIOEntity, IRemoteControllable
{
	public static class TurretFlags
	{
		public const Flags Peacekeeper = Flags.Reserved1;
	}

	public class UpdateAutoTurretScanQueue : PersistentObjectWorkQueue<AutoTurret>
	{
		protected override void RunJob(AutoTurret entity)
		{
			if (((PersistentObjectWorkQueue<AutoTurret>)this).ShouldAdd(entity))
			{
				entity.TargetScan();
			}
		}

		protected override bool ShouldAdd(AutoTurret entity)
		{
			if (base.ShouldAdd(entity))
			{
				return entity.IsValid();
			}
			return false;
		}
	}

	public GameObjectRef gun_fire_effect;

	public GameObjectRef bulletEffect;

	public float bulletSpeed = 200f;

	public AmbienceEmitter ambienceEmitter;

	public bool playAmbientSounds = true;

	public GameObject assignDialog;

	public LaserBeam laserBeam;

	public BaseCombatEntity target;

	public Transform eyePos;

	public Transform muzzlePos;

	public Vector3 aimDir;

	public Transform gun_yaw;

	public Transform gun_pitch;

	public float sightRange = 30f;

	public SoundDefinition turnLoopDef;

	public SoundDefinition movementChangeDef;

	public SoundDefinition ambientLoopDef;

	public SoundDefinition focusCameraDef;

	public float focusSoundFreqMin = 2.5f;

	public float focusSoundFreqMax = 7f;

	public GameObjectRef peacekeeperToggleSound;

	public GameObjectRef onlineSound;

	public GameObjectRef offlineSound;

	public GameObjectRef targetAcquiredEffect;

	public GameObjectRef targetLostEffect;

	public GameObjectRef reloadEffect;

	public float aimCone;

	public const Flags Flag_Equipped = Flags.Reserved3;

	public const Flags Flag_MaxAuths = Flags.Reserved4;

	[NonSerialized]
	public HashSet<PlayerNameID> authorizedPlayers = new HashSet<PlayerNameID>();

	[ServerVar(Help = "How many milliseconds to spend on target scanning per frame")]
	public static float auto_turret_budget_ms = 0.5f;

	public static UpdateAutoTurretScanQueue updateAutoTurretScanQueue = new UpdateAutoTurretScanQueue();

	[Header("RC")]
	public float rcTurnSensitivity = 4f;

	public Transform RCEyes;

	public GameObjectRef IDPanelPrefab;

	public RemoteControllableControls rcControls;

	public string rcIdentifier = "";

	public TargetTrigger targetTrigger;

	public TriggerBase interferenceTrigger;

	public float maxInterference = -1f;

	public float attachedWeaponZOffsetScale = -0.5f;

	public Transform socketTransform;

	public bool authDirty;

	public bool hasPotentialUnauthedTarget = true;

	public float nextShotTime;

	public float lastShotTime;

	public float nextVisCheck;

	public float lastTargetSeenTime;

	public bool targetVisible = true;

	public bool booting;

	public float nextIdleAimTime;

	public Vector3 targetAimDir = Vector3.forward;

	public const float bulletDamage = 15f;

	public RealTimeSinceEx timeSinceLastServerTick;

	public HashSet<AutoTurret> nearbyTurrets = new HashSet<AutoTurret>();

	public static HashSet<AutoTurret> interferenceUpdateList = new HashSet<AutoTurret>();

	private const float SlowProjectileSpeedMultplier = 2f;

	private const float SlowProjectileSpeedThreshold = 100f;

	public float nextForcedAimTime;

	public Vector3 lastSentAimDir = Vector3.zero;

	public static float[] visibilityOffsets = new float[3] { 0f, 0.15f, -0.15f };

	public int peekIndex;

	[NonSerialized]
	public int numConsecutiveMisses;

	[NonSerialized]
	public int totalAmmo;

	public float nextAmmoCheckTime;

	public bool totalAmmoDirty = true;

	public float currentAmmoGravity;

	public float currentAmmoVelocity;

	public HeldEntity AttachedWeapon;

	private bool shouldUpdateOnOutOfAmmo;

	[NonSerialized]
	public int consumptionAmount = 10;

	public bool CanPing => false;

	public virtual bool RequiresMouse => true;

	public float MaxRange => 10000f;

	public RemoteControllableControls RequiredControls => rcControls;

	public int ViewerCount { get; set; }

	public CameraViewerId? ControllingViewerId { get; set; }

	public bool IsBeingControlled
	{
		get
		{
			if (ViewerCount > 0)
			{
				return ControllingViewerId.HasValue;
			}
			return false;
		}
	}

	protected override bool PreventDuplicatesInQueue
	{
		public get
		{
			return Sentry.debugPreventDuplicates;
		}
	}

	public override bool OnRpcMessage(BasePlayer player, uint rpc, Message msg)
	{
		TimeWarning val = TimeWarning.New("AutoTurret.OnRpcMessage", 0);
		try
		{
			if (rpc == 1092560690 && (Object)(object)player != (Object)null)
			{
				Assert.IsTrue(player.isServer, "SV_RPC Message is using a clientside player!");
				if (Global.developer > 2)
				{
					Debug.Log((object)("SV_RPCMessage: " + ((object)player)?.ToString() + " - AddSelfAuthorize "));
				}
				TimeWarning val2 = TimeWarning.New("AddSelfAuthorize", 0);
				try
				{
					TimeWarning val3 = TimeWarning.New("Conditions", 0);
					try
					{
						if (!RPC_Server.IsVisible.Test(1092560690u, "AddSelfAuthorize", this, player, 3f))
						{
							return true;
						}
					}
					finally
					{
						((IDisposable)val3)?.Dispose();
					}
					try
					{
						val3 = TimeWarning.New("Call", 0);
						try
						{
							RPCMessage rPCMessage = default(RPCMessage);
							rPCMessage.connection = msg.connection;
							rPCMessage.player = player;
							rPCMessage.read = msg.read;
							RPCMessage rpc2 = rPCMessage;
							AddSelfAuthorize(rpc2);
						}
						finally
						{
							((IDisposable)val3)?.Dispose();
						}
					}
					catch (Exception ex)
					{
						Debug.LogException(ex);
						player.Kick("RPC Error in AddSelfAuthorize");
					}
				}
				finally
				{
					((IDisposable)val2)?.Dispose();
				}
				return true;
			}
			if (rpc == 3057055788u && (Object)(object)player != (Object)null)
			{
				Assert.IsTrue(player.isServer, "SV_RPC Message is using a clientside player!");
				if (Global.developer > 2)
				{
					Debug.Log((object)("SV_RPCMessage: " + ((object)player)?.ToString() + " - AssignToFriend "));
				}
				TimeWarning val2 = TimeWarning.New("AssignToFriend", 0);
				try
				{
					TimeWarning val3 = TimeWarning.New("Conditions", 0);
					try
					{
						if (!RPC_Server.IsVisible.Test(3057055788u, "AssignToFriend", this, player, 3f))
						{
							return true;
						}
					}
					finally
					{
						((IDisposable)val3)?.Dispose();
					}
					try
					{
						val3 = TimeWarning.New("Call", 0);
						try
						{
							RPCMessage rPCMessage = default(RPCMessage);
							rPCMessage.connection = msg.connection;
							rPCMessage.player = player;
							rPCMessage.read = msg.read;
							RPCMessage msg2 = rPCMessage;
							AssignToFriend(msg2);
						}
						finally
						{
							((IDisposable)val3)?.Dispose();
						}
					}
					catch (Exception ex2)
					{
						Debug.LogException(ex2);
						player.Kick("RPC Error in AssignToFriend");
					}
				}
				finally
				{
					((IDisposable)val2)?.Dispose();
				}
				return true;
			}
			if (rpc == 253307592 && (Object)(object)player != (Object)null)
			{
				Assert.IsTrue(player.isServer, "SV_RPC Message is using a clientside player!");
				if (Global.developer > 2)
				{
					Debug.Log((object)("SV_RPCMessage: " + ((object)player)?.ToString() + " - ClearList "));
				}
				TimeWarning val2 = TimeWarning.New("ClearList", 0);
				try
				{
					TimeWarning val3 = TimeWarning.New("Conditions", 0);
					try
					{
						if (!RPC_Server.IsVisible.Test(253307592u, "ClearList", this, player, 3f))
						{
							return true;
						}
					}
					finally
					{
						((IDisposable)val3)?.Dispose();
					}
					try
					{
						val3 = TimeWarning.New("Call", 0);
						try
						{
							RPCMessage rPCMessage = default(RPCMessage);
							rPCMessage.connection = msg.connection;
							rPCMessage.player = player;
							rPCMessage.read = msg.read;
							RPCMessage rpc3 = rPCMessage;
							ClearList(rpc3);
						}
						finally
						{
							((IDisposable)val3)?.Dispose();
						}
					}
					catch (Exception ex3)
					{
						Debug.LogException(ex3);
						player.Kick("RPC Error in ClearList");
					}
				}
				finally
				{
					((IDisposable)val2)?.Dispose();
				}
				return true;
			}
			if (rpc == 1500257773 && (Object)(object)player != (Object)null)
			{
				Assert.IsTrue(player.isServer, "SV_RPC Message is using a clientside player!");
				if (Global.developer > 2)
				{
					Debug.Log((object)("SV_RPCMessage: " + ((object)player)?.ToString() + " - FlipAim "));
				}
				TimeWarning val2 = TimeWarning.New("FlipAim", 0);
				try
				{
					TimeWarning val3 = TimeWarning.New("Conditions", 0);
					try
					{
						if (!RPC_Server.IsVisible.Test(1500257773u, "FlipAim", this, player, 3f))
						{
							return true;
						}
					}
					finally
					{
						((IDisposable)val3)?.Dispose();
					}
					try
					{
						val3 = TimeWarning.New("Call", 0);
						try
						{
							RPCMessage rPCMessage = default(RPCMessage);
							rPCMessage.connection = msg.connection;
							rPCMessage.player = player;
							rPCMessage.read = msg.read;
							RPCMessage rpc4 = rPCMessage;
							FlipAim(rpc4);
						}
						finally
						{
							((IDisposable)val3)?.Dispose();
						}
					}
					catch (Exception ex4)
					{
						Debug.LogException(ex4);
						player.Kick("RPC Error in FlipAim");
					}
				}
				finally
				{
					((IDisposable)val2)?.Dispose();
				}
				return true;
			}
			if (rpc == 3617985969u && (Object)(object)player != (Object)null)
			{
				Assert.IsTrue(player.isServer, "SV_RPC Message is using a clientside player!");
				if (Global.developer > 2)
				{
					Debug.Log((object)("SV_RPCMessage: " + ((object)player)?.ToString() + " - RemoveSelfAuthorize "));
				}
				TimeWarning val2 = TimeWarning.New("RemoveSelfAuthorize", 0);
				try
				{
					TimeWarning val3 = TimeWarning.New("Conditions", 0);
					try
					{
						if (!RPC_Server.IsVisible.Test(3617985969u, "RemoveSelfAuthorize", this, player, 3f))
						{
							return true;
						}
					}
					finally
					{
						((IDisposable)val3)?.Dispose();
					}
					try
					{
						val3 = TimeWarning.New("Call", 0);
						try
						{
							RPCMessage rPCMessage = default(RPCMessage);
							rPCMessage.connection = msg.connection;
							rPCMessage.player = player;
							rPCMessage.read = msg.read;
							RPCMessage rpc5 = rPCMessage;
							RemoveSelfAuthorize(rpc5);
						}
						finally
						{
							((IDisposable)val3)?.Dispose();
						}
					}
					catch (Exception ex5)
					{
						Debug.LogException(ex5);
						player.Kick("RPC Error in RemoveSelfAuthorize");
					}
				}
				finally
				{
					((IDisposable)val2)?.Dispose();
				}
				return true;
			}
			if (rpc == 1770263114 && (Object)(object)player != (Object)null)
			{
				Assert.IsTrue(player.isServer, "SV_RPC Message is using a clientside player!");
				if (Global.developer > 2)
				{
					Debug.Log((object)("SV_RPCMessage: " + ((object)player)?.ToString() + " - SERVER_AttackAll "));
				}
				TimeWarning val2 = TimeWarning.New("SERVER_AttackAll", 0);
				try
				{
					TimeWarning val3 = TimeWarning.New("Conditions", 0);
					try
					{
						if (!RPC_Server.IsVisible.Test(1770263114u, "SERVER_AttackAll", this, player, 3f))
						{
							return true;
						}
					}
					finally
					{
						((IDisposable)val3)?.Dispose();
					}
					try
					{
						val3 = TimeWarning.New("Call", 0);
						try
						{
							RPCMessage rPCMessage = default(RPCMessage);
							rPCMessage.connection = msg.connection;
							rPCMessage.player = player;
							rPCMessage.read = msg.read;
							RPCMessage rpc6 = rPCMessage;
							SERVER_AttackAll(rpc6);
						}
						finally
						{
							((IDisposable)val3)?.Dispose();
						}
					}
					catch (Exception ex6)
					{
						Debug.LogException(ex6);
						player.Kick("RPC Error in SERVER_AttackAll");
					}
				}
				finally
				{
					((IDisposable)val2)?.Dispose();
				}
				return true;
			}
			if (rpc == 3265538831u && (Object)(object)player != (Object)null)
			{
				Assert.IsTrue(player.isServer, "SV_RPC Message is using a clientside player!");
				if (Global.developer > 2)
				{
					Debug.Log((object)("SV_RPCMessage: " + ((object)player)?.ToString() + " - SERVER_Peacekeeper "));
				}
				TimeWarning val2 = TimeWarning.New("SERVER_Peacekeeper", 0);
				try
				{
					TimeWarning val3 = TimeWarning.New("Conditions", 0);
					try
					{
						if (!RPC_Server.IsVisible.Test(3265538831u, "SERVER_Peacekeeper", this, player, 3f))
						{
							return true;
						}
					}
					finally
					{
						((IDisposable)val3)?.Dispose();
					}
					try
					{
						val3 = TimeWarning.New("Call", 0);
						try
						{
							RPCMessage rPCMessage = default(RPCMessage);
							rPCMessage.connection = msg.connection;
							rPCMessage.player = player;
							rPCMessage.read = msg.read;
							RPCMessage rpc7 = rPCMessage;
							SERVER_Peacekeeper(rpc7);
						}
						finally
						{
							((IDisposable)val3)?.Dispose();
						}
					}
					catch (Exception ex7)
					{
						Debug.LogException(ex7);
						player.Kick("RPC Error in SERVER_Peacekeeper");
					}
				}
				finally
				{
					((IDisposable)val2)?.Dispose();
				}
				return true;
			}
			if (rpc == 1677685895 && (Object)(object)player != (Object)null)
			{
				Assert.IsTrue(player.isServer, "SV_RPC Message is using a clientside player!");
				if (Global.developer > 2)
				{
					Debug.Log((object)("SV_RPCMessage: " + ((object)player)?.ToString() + " - SERVER_RequestOpenRCPanel "));
				}
				TimeWarning val2 = TimeWarning.New("SERVER_RequestOpenRCPanel", 0);
				try
				{
					TimeWarning val3 = TimeWarning.New("Conditions", 0);
					try
					{
						if (!RPC_Server.CallsPerSecond.Test(1677685895u, "SERVER_RequestOpenRCPanel", this, player, 3uL))
						{
							return true;
						}
						if (!RPC_Server.IsVisible.Test(1677685895u, "SERVER_RequestOpenRCPanel", this, player, 3f))
						{
							return true;
						}
						if (!RPC_Server.MaxDistance.Test(1677685895u, "SERVER_RequestOpenRCPanel", this, player, 3f))
						{
							return true;
						}
					}
					finally
					{
						((IDisposable)val3)?.Dispose();
					}
					try
					{
						val3 = TimeWarning.New("Call", 0);
						try
						{
							RPCMessage rPCMessage = default(RPCMessage);
							rPCMessage.connection = msg.connection;
							rPCMessage.player = player;
							rPCMessage.read = msg.read;
							RPCMessage msg3 = rPCMessage;
							SERVER_RequestOpenRCPanel(msg3);
						}
						finally
						{
							((IDisposable)val3)?.Dispose();
						}
					}
					catch (Exception ex8)
					{
						Debug.LogException(ex8);
						player.Kick("RPC Error in SERVER_RequestOpenRCPanel");
					}
				}
				finally
				{
					((IDisposable)val2)?.Dispose();
				}
				return true;
			}
			if (rpc == 1053317251 && (Object)(object)player != (Object)null)
			{
				Assert.IsTrue(player.isServer, "SV_RPC Message is using a clientside player!");
				if (Global.developer > 2)
				{
					Debug.Log((object)("SV_RPCMessage: " + ((object)player)?.ToString() + " - Server_SetID "));
				}
				TimeWarning val2 = TimeWarning.New("Server_SetID", 0);
				try
				{
					TimeWarning val3 = TimeWarning.New("Conditions", 0);
					try
					{
						if (!RPC_Server.MaxDistance.Test(1053317251u, "Server_SetID", this, player, 3f))
						{
							return true;
						}
					}
					finally
					{
						((IDisposable)val3)?.Dispose();
					}
					try
					{
						val3 = TimeWarning.New("Call", 0);
						try
						{
							RPCMessage rPCMessage = default(RPCMessage);
							rPCMessage.connection = msg.connection;
							rPCMessage.player = player;
							rPCMessage.read = msg.read;
							RPCMessage msg4 = rPCMessage;
							Server_SetID(msg4);
						}
						finally
						{
							((IDisposable)val3)?.Dispose();
						}
					}
					catch (Exception ex9)
					{
						Debug.LogException(ex9);
						player.Kick("RPC Error in Server_SetID");
					}
				}
				finally
				{
					((IDisposable)val2)?.Dispose();
				}
				return true;
			}
		}
		finally
		{
			((IDisposable)val)?.Dispose();
		}
		return base.OnRpcMessage(player, rpc, msg);
	}

	public bool IsOnline()
	{
		return IsOn();
	}

	public bool IsOffline()
	{
		return !IsOnline();
	}

	public override void ResetState()
	{
		base.ResetState();
	}

	public virtual Transform GetCenterMuzzle()
	{
		return gun_pitch;
	}

	public float AngleToTarget(BaseCombatEntity potentialtarget, bool use2D = false)
	{
		//IL_000b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0010: Unknown result type (might be due to invalid IL or missing references)
		//IL_0013: Unknown result type (might be due to invalid IL or missing references)
		//IL_0018: Unknown result type (might be due to invalid IL or missing references)
		//IL_0019: Unknown result type (might be due to invalid IL or missing references)
		//IL_001e: Unknown result type (might be due to invalid IL or missing references)
		//IL_002c: Unknown result type (might be due to invalid IL or missing references)
		//IL_002d: Unknown result type (might be due to invalid IL or missing references)
		//IL_002e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0033: Unknown result type (might be due to invalid IL or missing references)
		//IL_0037: Unknown result type (might be due to invalid IL or missing references)
		//IL_003c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0022: Unknown result type (might be due to invalid IL or missing references)
		//IL_0023: Unknown result type (might be due to invalid IL or missing references)
		//IL_0024: Unknown result type (might be due to invalid IL or missing references)
		//IL_0029: Unknown result type (might be due to invalid IL or missing references)
		//IL_0049: Unknown result type (might be due to invalid IL or missing references)
		//IL_004e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0053: Unknown result type (might be due to invalid IL or missing references)
		//IL_0057: Unknown result type (might be due to invalid IL or missing references)
		//IL_0041: Unknown result type (might be due to invalid IL or missing references)
		//IL_005c: Unknown result type (might be due to invalid IL or missing references)
		use2D = true;
		Transform centerMuzzle = GetCenterMuzzle();
		Vector3 position = centerMuzzle.position;
		Vector3 val = AimOffset(potentialtarget);
		Vector3 zero = Vector3.zero;
		Vector3 val2;
		if (use2D)
		{
			zero = Vector3Ex.Direction2D(val, position);
		}
		else
		{
			val2 = val - position;
			zero = ((Vector3)(ref val2)).normalized;
		}
		Vector3 val3;
		if (!use2D)
		{
			val3 = centerMuzzle.forward;
		}
		else
		{
			val2 = Vector3Ex.XZ3D(centerMuzzle.forward);
			val3 = ((Vector3)(ref val2)).normalized;
		}
		return Vector3.Angle(val3, zero);
	}

	public virtual bool InFiringArc(BaseCombatEntity potentialtarget)
	{
		return Mathf.Abs(AngleToTarget(potentialtarget)) <= 90f;
	}

	public override bool CanPickup(BasePlayer player)
	{
		if (base.CanPickup(player) && IsOffline())
		{
			return IsAuthed(player);
		}
		return false;
	}

	public override bool CanUseNetworkCache(Connection connection)
	{
		return false;
	}

	public override void Save(SaveInfo info)
	{
		base.Save(info);
		info.msg.autoturret = Pool.Get<AutoTurret>();
		if (info.forDisk || IsAuthed(info.forConnection.userid))
		{
			info.msg.autoturret.users = Pool.Get<List<PlayerNameID>>();
			foreach (PlayerNameID authorizedPlayer in authorizedPlayers)
			{
				info.msg.autoturret.users.Add(authorizedPlayer);
			}
		}
		if (info.forDisk)
		{
			info.msg.rcEntity = Pool.Get<RCEntity>();
			info.msg.rcEntity.identifier = GetIdentifier();
		}
	}

	public override void PostSave(SaveInfo info)
	{
		base.PostSave(info);
		info.msg.autoturret.users = null;
	}

	public override void Load(LoadInfo info)
	{
		base.Load(info);
		if (info.msg.autoturret != null)
		{
			authorizedPlayers.Clear();
			if (info.msg.autoturret.users != null)
			{
				foreach (PlayerNameID user in info.msg.autoturret.users)
				{
					authorizedPlayers.Add(user);
				}
			}
			info.msg.autoturret.users = null;
		}
		if (info.msg.rcEntity != null)
		{
			UpdateIdentifier(info.msg.rcEntity.identifier);
		}
	}

	public Vector3 AimOffset(BaseCombatEntity aimat)
	{
		//IL_008b: Unknown result type (might be due to invalid IL or missing references)
		//IL_001e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0023: Unknown result type (might be due to invalid IL or missing references)
		//IL_002d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0032: Unknown result type (might be due to invalid IL or missing references)
		//IL_0046: Unknown result type (might be due to invalid IL or missing references)
		//IL_004b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0055: Unknown result type (might be due to invalid IL or missing references)
		//IL_005a: Unknown result type (might be due to invalid IL or missing references)
		//IL_0084: Unknown result type (might be due to invalid IL or missing references)
		//IL_0078: Unknown result type (might be due to invalid IL or missing references)
		BasePlayer basePlayer = aimat as BasePlayer;
		if ((Object)(object)basePlayer != (Object)null)
		{
			if (basePlayer.IsSleeping())
			{
				return ((Component)basePlayer).transform.position + Vector3.up * 0.1f;
			}
			if (basePlayer.IsWounded())
			{
				return ((Component)basePlayer).transform.position + Vector3.up * 0.25f;
			}
			if (basePlayer.GetActiveShield(out var foundShield) && foundShield.IsBlocking())
			{
				return ((Component)foundShield).transform.position;
			}
			return basePlayer.eyes.position;
		}
		return aimat.CenterPoint();
	}

	public float GetAimSpeed()
	{
		if (HasTarget())
		{
			return 5f;
		}
		return 1f;
	}

	public void UpdateAiming(float dt)
	{
		//IL_0001: Unknown result type (might be due to invalid IL or missing references)
		//IL_0006: Unknown result type (might be due to invalid IL or missing references)
		//IL_0040: Unknown result type (might be due to invalid IL or missing references)
		//IL_0045: Unknown result type (might be due to invalid IL or missing references)
		//IL_004a: Unknown result type (might be due to invalid IL or missing references)
		//IL_0052: Unknown result type (might be due to invalid IL or missing references)
		//IL_0061: Unknown result type (might be due to invalid IL or missing references)
		//IL_0066: Unknown result type (might be due to invalid IL or missing references)
		//IL_0069: Unknown result type (might be due to invalid IL or missing references)
		//IL_007d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0082: Unknown result type (might be due to invalid IL or missing references)
		//IL_008e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0093: Unknown result type (might be due to invalid IL or missing references)
		//IL_00ce: Unknown result type (might be due to invalid IL or missing references)
		//IL_00d3: Unknown result type (might be due to invalid IL or missing references)
		//IL_00b1: Unknown result type (might be due to invalid IL or missing references)
		//IL_00b6: Unknown result type (might be due to invalid IL or missing references)
		//IL_00b9: Unknown result type (might be due to invalid IL or missing references)
		//IL_00f1: Unknown result type (might be due to invalid IL or missing references)
		//IL_00f6: Unknown result type (might be due to invalid IL or missing references)
		//IL_00f9: Unknown result type (might be due to invalid IL or missing references)
		if (!(aimDir == Vector3.zero))
		{
			float num = 5f;
			if (base.isServer && !IsBeingControlled)
			{
				num = ((!HasTarget()) ? 15f : 35f);
			}
			Quaternion val = Quaternion.LookRotation(aimDir);
			Quaternion val2 = Quaternion.Euler(0f, ((Quaternion)(ref val)).eulerAngles.y, 0f);
			Quaternion val3 = Quaternion.Euler(((Quaternion)(ref val)).eulerAngles.x, 0f, 0f);
			if (((Component)gun_yaw).transform.rotation != val2)
			{
				((Component)gun_yaw).transform.rotation = Mathx.Lerp(((Component)gun_yaw).transform.rotation, val2, num, dt);
			}
			if (((Component)gun_pitch).transform.localRotation != val3)
			{
				((Component)gun_pitch).transform.localRotation = Mathx.Lerp(((Component)gun_pitch).transform.localRotation, val3, num, dt);
			}
		}
	}

	public bool IsAuthed(ulong id)
	{
		foreach (PlayerNameID authorizedPlayer in authorizedPlayers)
		{
			if (authorizedPlayer.userid == id)
			{
				return true;
			}
		}
		return false;
	}

	public bool IsAuthed(BasePlayer player)
	{
		return IsAuthed(player.userID);
	}

	public bool AnyAuthed()
	{
		return authorizedPlayers.Count > 0;
	}

	public virtual bool CanChangeSettings(BasePlayer player)
	{
		if (IsAuthed(player) && IsOffline())
		{
			return player.CanBuild();
		}
		return false;
	}

	public bool PeacekeeperMode()
	{
		return HasFlag(Flags.Reserved1);
	}

	public Transform GetEyes()
	{
		return RCEyes;
	}

	public float GetFovScale()
	{
		return 1f;
	}

	public BaseEntity GetEnt()
	{
		return this;
	}

	public virtual bool CanControl(ulong playerID)
	{
		object obj = Interface.CallHook("OnEntityControl", (object)this, (object)playerID);
		if (obj is bool)
		{
			return (bool)obj;
		}
		if (booting)
		{
			return false;
		}
		if (IsPowered())
		{
			return !PeacekeeperMode();
		}
		return false;
	}

	public bool InitializeControl(CameraViewerId viewerID)
	{
		ViewerCount++;
		if (!ControllingViewerId.HasValue)
		{
			ControllingViewerId = viewerID;
			SetTarget(null);
			SendAimDirImmediate();
			return true;
		}
		return false;
	}

	public void StopControl(CameraViewerId viewerID)
	{
		ViewerCount--;
		if (ControllingViewerId == viewerID)
		{
			ControllingViewerId = null;
		}
	}

	public void UserInput(InputState inputState, CameraViewerId viewerID)
	{
		//IL_00d4: Unknown result type (might be due to invalid IL or missing references)
		CameraViewerId? controllingViewerId = ControllingViewerId;
		if (viewerID != controllingViewerId)
		{
			return;
		}
		UpdateManualAim(inputState);
		if (Time.time < nextShotTime)
		{
			return;
		}
		if (inputState.WasJustPressed(BUTTON.RELOAD))
		{
			Reload();
		}
		else
		{
			if (EnsureReloaded() || !inputState.IsDown(BUTTON.FIRE_PRIMARY))
			{
				return;
			}
			BaseProjectile attachedWeapon = GetAttachedWeapon();
			if (Object.op_Implicit((Object)(object)attachedWeapon))
			{
				float damageModifier = 1f;
				float speedModifier = 1f;
				ItemDefinition ammoType = attachedWeapon.primaryMagazine.ammoType;
				if (Object.op_Implicit((Object)(object)ammoType))
				{
					ItemModProjectile component = ((Component)ammoType).GetComponent<ItemModProjectile>();
					if (Object.op_Implicit((Object)(object)component) && component.projectileVelocity < 100f)
					{
						speedModifier = 2f;
					}
				}
				if (attachedWeapon.primaryMagazine.contents > 0)
				{
					FireAttachedGun(Vector3.zero, aimCone, null, null, damageModifier, speedModifier);
					float delay = (attachedWeapon.isSemiAuto ? (attachedWeapon.repeatDelay * 1.5f) : attachedWeapon.repeatDelay);
					delay = attachedWeapon.ScaleRepeatDelay(delay);
					nextShotTime = Time.time + delay;
				}
				else
				{
					nextShotTime = Time.time + 5f;
				}
			}
			else if (HasGenericFireable())
			{
				AttachedWeapon.ServerUse();
				nextShotTime = Time.time + 0.115f;
			}
			else
			{
				nextShotTime = Time.time + 1f;
			}
		}
	}

	public bool UpdateManualAim(InputState inputState)
	{
		//IL_0032: Unknown result type (might be due to invalid IL or missing references)
		//IL_003d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0042: Unknown result type (might be due to invalid IL or missing references)
		//IL_0047: Unknown result type (might be due to invalid IL or missing references)
		//IL_004b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0057: Unknown result type (might be due to invalid IL or missing references)
		//IL_005c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0061: Unknown result type (might be due to invalid IL or missing references)
		//IL_0062: Unknown result type (might be due to invalid IL or missing references)
		//IL_0098: Unknown result type (might be due to invalid IL or missing references)
		//IL_006f: Unknown result type (might be due to invalid IL or missing references)
		//IL_00ce: Unknown result type (might be due to invalid IL or missing references)
		//IL_00cf: Unknown result type (might be due to invalid IL or missing references)
		//IL_00d4: Unknown result type (might be due to invalid IL or missing references)
		//IL_00d9: Unknown result type (might be due to invalid IL or missing references)
		//IL_00de: Unknown result type (might be due to invalid IL or missing references)
		//IL_00ea: Unknown result type (might be due to invalid IL or missing references)
		//IL_00a5: Unknown result type (might be due to invalid IL or missing references)
		//IL_007e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0102: Unknown result type (might be due to invalid IL or missing references)
		//IL_00b4: Unknown result type (might be due to invalid IL or missing references)
		//IL_012c: Unknown result type (might be due to invalid IL or missing references)
		//IL_012d: Unknown result type (might be due to invalid IL or missing references)
		//IL_011a: Unknown result type (might be due to invalid IL or missing references)
		float num = (0f - inputState.current.mouseDelta.y) * rcTurnSensitivity;
		float num2 = inputState.current.mouseDelta.x * rcTurnSensitivity;
		Quaternion val = Quaternion.LookRotation(aimDir, ((Component)this).transform.up);
		Vector3 val2 = ((Quaternion)(ref val)).eulerAngles + new Vector3(num, num2, 0f);
		if (val2.x >= 0f && val2.x <= 135f)
		{
			val2.x = Mathf.Clamp(val2.x, 0f, 45f);
		}
		if (val2.x >= 225f && val2.x <= 360f)
		{
			val2.x = Mathf.Clamp(val2.x, 285f, 360f);
		}
		Vector3 val3 = Quaternion.Euler(val2) * Vector3.forward;
		bool result = !Mathf.Approximately(aimDir.x, val3.x) || !Mathf.Approximately(aimDir.y, val3.y) || !Mathf.Approximately(aimDir.z, val3.z);
		aimDir = val3;
		return result;
	}

	public override void InitShared()
	{
		base.InitShared();
		RCSetup();
	}

	public override void DestroyShared()
	{
		RCShutdown();
		base.DestroyShared();
	}

	public void RCSetup()
	{
		if (base.isServer)
		{
			RemoteControlEntity.InstallControllable(this);
		}
	}

	public void RCShutdown()
	{
		if (base.isServer)
		{
			RemoteControlEntity.RemoveControllable(this);
		}
	}

	[RPC_Server.MaxDistance(3f)]
	[RPC_Server]
	public void Server_SetID(RPCMessage msg)
	{
		if ((Object)(object)msg.player == (Object)null || !CanChangeID(msg.player))
		{
			return;
		}
		string text = msg.read.String(256, false);
		if (string.IsNullOrEmpty(text) || ComputerStation.IsValidIdentifier(text))
		{
			string text2 = msg.read.String(256, false);
			if (ComputerStation.IsValidIdentifier(text2) && text == GetIdentifier() && Interface.CallHook("OnTurretIdentifierSet", (object)this, (object)msg.player, (object)text2) == null)
			{
				Debug.Log((object)"SetID success!");
				UpdateIdentifier(text2);
			}
		}
	}

	[RPC_Server]
	[RPC_Server.MaxDistance(3f)]
	[RPC_Server.CallsPerSecond(3uL)]
	[RPC_Server.IsVisible(3f)]
	public void SERVER_RequestOpenRCPanel(RPCMessage msg)
	{
		BasePlayer player = msg.player;
		if (!((Object)(object)player == (Object)null) && CanChangeID(player))
		{
			ClientRPC(RpcTarget.Player("CLIENT_OpenRCPanel", player), GetIdentifier());
		}
	}

	public void UpdateIdentifier(string newID, bool clientSend = false)
	{
		_ = rcIdentifier;
		if (base.isServer)
		{
			if (!RemoteControlEntity.IDInUse(newID))
			{
				rcIdentifier = newID;
			}
			SendNetworkUpdate();
		}
	}

	public string GetIdentifier()
	{
		return rcIdentifier;
	}

	public virtual bool CanChangeID(BasePlayer player)
	{
		return CanChangeSettings(player);
	}

	public override int ConsumptionAmount()
	{
		return consumptionAmount;
	}

	public void SetOnline()
	{
		SetIsOnline(online: true);
	}

	public void SetIsOnline(bool online)
	{
		if (online != IsOn() && Interface.CallHook("OnTurretToggle", (object)this) == null)
		{
			SetFlag(Flags.On, online);
			if (online)
			{
				TryRegisterForInterferenceUpdate();
			}
			else
			{
				SetFlag(Flags.OnFire, b: false);
				UpdateInterferenceOnOthers();
			}
			booting = false;
			GetAttachedWeapon()?.SetLightsOn(online);
			SendNetworkUpdate();
			if (IsOffline())
			{
				SetTarget(null);
				isLootable = true;
			}
			else
			{
				isLootable = false;
				authDirty = true;
			}
		}
	}

	public static void ProcessInterferenceQueue()
	{
		float realtimeSinceStartup = Time.realtimeSinceStartup;
		float num = 0.0005f;
		List<AutoTurret> list = Pool.Get<List<AutoTurret>>();
		while (interferenceUpdateList.Count > 0 && Time.realtimeSinceStartup < realtimeSinceStartup + num)
		{
			list.Clear();
			ulong num2 = 0uL;
			AutoTurret autoTurret = null;
			foreach (AutoTurret interferenceUpdate in interferenceUpdateList)
			{
				if ((Object)(object)interferenceUpdate == (Object)null)
				{
					list.Add(interferenceUpdate);
				}
				else if (interferenceUpdate.net.ID.Value > num2)
				{
					num2 = interferenceUpdate.net.ID.Value;
					autoTurret = interferenceUpdate;
				}
			}
			if ((Object)(object)autoTurret != (Object)null)
			{
				interferenceUpdateList.Remove(autoTurret);
				autoTurret.UpdateInterference();
			}
			foreach (AutoTurret item in list)
			{
				interferenceUpdateList.Remove(item);
			}
		}
		Pool.FreeUnmanaged<AutoTurret>(ref list);
	}

	public override int GetPassthroughAmount(int outputSlot = 0)
	{
		int result = Mathf.Min(1, GetCurrentEnergy());
		switch (outputSlot)
		{
		case 0:
			if (!HasTarget())
			{
				return 0;
			}
			return result;
		case 1:
			if (totalAmmo > 50)
			{
				return 0;
			}
			return result;
		case 2:
			if (totalAmmo != 0)
			{
				return 0;
			}
			return result;
		default:
			return 0;
		}
	}

	public override void IOStateChanged(int inputAmount, int inputSlot)
	{
		base.IOStateChanged(inputAmount, inputSlot);
		if (IsPowered() && !IsOn())
		{
			InitiateStartup();
		}
		else if ((!IsPowered() && IsOn()) || booting)
		{
			InitiateShutdown();
		}
	}

	public void InitiateShutdown()
	{
		//IL_0046: Unknown result type (might be due to invalid IL or missing references)
		//IL_004b: Unknown result type (might be due to invalid IL or missing references)
		if ((!IsOffline() || booting) && Interface.CallHook("OnTurretShutdown", (object)this) == null)
		{
			((FacepunchBehaviour)this).CancelInvoke((Action)SetOnline);
			booting = false;
			Effect.server.Run(offlineSound.resourcePath, this, 0u, Vector3.zero, Vector3.zero);
			SetIsOnline(online: false);
		}
	}

	public void InitiateStartup()
	{
		//IL_002d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0032: Unknown result type (might be due to invalid IL or missing references)
		if (!IsOnline() && !booting && Interface.CallHook("OnTurretStartup", (object)this) == null)
		{
			Effect.server.Run(onlineSound.resourcePath, this, 0u, Vector3.zero, Vector3.zero);
			((FacepunchBehaviour)this).Invoke((Action)SetOnline, 2f);
			booting = true;
		}
	}

	public void SetPeacekeepermode(bool isOn)
	{
		//IL_0025: Unknown result type (might be due to invalid IL or missing references)
		//IL_002a: Unknown result type (might be due to invalid IL or missing references)
		if (PeacekeeperMode() != isOn)
		{
			SetFlag(Flags.Reserved1, isOn);
			Effect.server.Run(peacekeeperToggleSound.resourcePath, this, 0u, Vector3.zero, Vector3.zero);
		}
	}

	public bool IsValidWeapon(Item item)
	{
		ItemDefinition info = item.info;
		if (item.isBroken)
		{
			return false;
		}
		ItemModEntity component = ((Component)info).GetComponent<ItemModEntity>();
		if ((Object)(object)component == (Object)null)
		{
			return false;
		}
		HeldEntity component2 = component.entityPrefab.Get().GetComponent<HeldEntity>();
		if ((Object)(object)component2 == (Object)null)
		{
			return false;
		}
		if (!component2.IsUsableByTurret)
		{
			return false;
		}
		return true;
	}

	public bool CanAcceptItem(Item item, int targetSlot)
	{
		//IL_005e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0064: Unknown result type (might be due to invalid IL or missing references)
		//IL_0069: Unknown result type (might be due to invalid IL or missing references)
		Item slot = base.inventory.GetSlot(0);
		if (IsValidWeapon(item) && targetSlot == 0)
		{
			return true;
		}
		if (item.info.category == ItemCategory.Ammunition)
		{
			ItemModProjectile component = ((Component)item.info).GetComponent<ItemModProjectile>();
			BaseProjectile attachedWeapon = GetAttachedWeapon();
			if (slot == null || (Object)(object)attachedWeapon == (Object)null || (Object)(object)component == (Object)null)
			{
				return false;
			}
			if ((attachedWeapon.primaryMagazine.definition.ammoTypes & component.ammoType) == 0)
			{
				return false;
			}
			if (targetSlot == 0)
			{
				return false;
			}
			return true;
		}
		return false;
	}

	public bool AtMaxAuthCapacity()
	{
		return HasFlag(Flags.Reserved4);
	}

	public void UpdateMaxAuthCapacity()
	{
		if (authorizedPlayers.Count >= 200)
		{
			SetFlag(Flags.Reserved4, b: true);
			return;
		}
		BaseGameMode activeGameMode = BaseGameMode.GetActiveGameMode(serverside: true);
		bool b = (Object)(object)activeGameMode != (Object)null && activeGameMode.limitTeamAuths && authorizedPlayers.Count >= activeGameMode.GetMaxRelationshipTeamSize();
		SetFlag(Flags.Reserved4, b);
	}

	[RPC_Server]
	[RPC_Server.IsVisible(3f)]
	private void FlipAim(RPCMessage rpc)
	{
		//IL_0040: Unknown result type (might be due to invalid IL or missing references)
		//IL_0045: Unknown result type (might be due to invalid IL or missing references)
		//IL_0050: Unknown result type (might be due to invalid IL or missing references)
		//IL_0055: Unknown result type (might be due to invalid IL or missing references)
		if (!IsOnline() && IsAuthed(rpc.player) && !booting && Interface.CallHook("OnTurretRotate", (object)this, (object)rpc.player) == null)
		{
			((Component)this).transform.rotation = Quaternion.LookRotation(-((Component)this).transform.forward, ((Component)this).transform.up);
			SendNetworkUpdate();
		}
	}

	[RPC_Server]
	[RPC_Server.IsVisible(3f)]
	private void AddSelfAuthorize(RPCMessage rpc)
	{
		AddSelfAuthorize(rpc.player);
	}

	public void AddSelfAuthorize(BasePlayer player)
	{
		//IL_0054: Unknown result type (might be due to invalid IL or missing references)
		//IL_005a: Expected O, but got Unknown
		BasePlayer player2 = player;
		if (!IsOnline() && player2.CanBuild() && !AtMaxAuthCapacity() && Interface.CallHook("OnTurretAuthorize", (object)this, (object)player) == null)
		{
			authorizedPlayers.RemoveWhere((PlayerNameID x) => x.userid == (ulong)player2.userID);
			PlayerNameID val = new PlayerNameID();
			val.userid = player2.userID;
			val.username = player2.displayName;
			authorizedPlayers.Add(val);
			Analytics.Azure.OnEntityAuthChanged(this, player2, authorizedPlayers.Select((PlayerNameID x) => x.userid), "added", player2.userID);
			UpdateMaxAuthCapacity();
			SendNetworkUpdate();
		}
	}

	[RPC_Server]
	[RPC_Server.IsVisible(3f)]
	private void RemoveSelfAuthorize(RPCMessage rpc)
	{
		RPCMessage rpc2 = rpc;
		if (!booting && !IsOnline() && IsAuthed(rpc2.player) && Interface.CallHook("OnTurretDeauthorize", (object)this, (object)rpc.player) == null)
		{
			authorizedPlayers.RemoveWhere((PlayerNameID x) => x.userid == (ulong)rpc2.player.userID);
			authDirty = true;
			Analytics.Azure.OnEntityAuthChanged(this, rpc2.player, authorizedPlayers.Select((PlayerNameID x) => x.userid), "removed", rpc2.player.userID);
			UpdateMaxAuthCapacity();
			SendNetworkUpdate();
		}
	}

	[RPC_Server]
	[RPC_Server.IsVisible(3f)]
	private void ClearList(RPCMessage rpc)
	{
		BasePlayer player = rpc.player;
		if (!((Object)(object)player == (Object)null) && !booting && !IsOnline() && player.CanBuild() && Interface.CallHook("OnTurretClearList", (object)this, (object)rpc.player) == null)
		{
			authorizedPlayers.Clear();
			authDirty = true;
			Analytics.Azure.OnEntityAuthChanged(this, rpc.player, authorizedPlayers.Select((PlayerNameID x) => x.userid), "clear", rpc.player.userID);
			UpdateMaxAuthCapacity();
			SendNetworkUpdate();
		}
	}

	[RPC_Server.IsVisible(3f)]
	[RPC_Server]
	public void AssignToFriend(RPCMessage msg)
	{
		//IL_0081: Unknown result type (might be due to invalid IL or missing references)
		//IL_0087: Expected O, but got Unknown
		if (AtMaxAuthCapacity() || (Object)(object)msg.player == (Object)null || !msg.player.CanInteract() || !CanChangeSettings(msg.player))
		{
			return;
		}
		ulong num = msg.read.UInt64();
		if (num != 0L && !IsAuthed(num) && Interface.CallHook("OnTurretAssign", (object)this, (object)num, (object)msg.player) == null)
		{
			string username = BasePlayer.SanitizePlayerNameString(msg.read.String(256, false), num);
			PlayerNameID val = new PlayerNameID();
			val.userid = num;
			val.username = username;
			Analytics.Azure.OnEntityAuthChanged(this, msg.player, authorizedPlayers.Select((PlayerNameID x) => x.userid), "added", num);
			authorizedPlayers.Add(val);
			UpdateMaxAuthCapacity();
			SendNetworkUpdate();
			Interface.CallHook("OnTurretAssigned", (object)this, (object)num, (object)msg.player);
		}
	}

	[RPC_Server.IsVisible(3f)]
	[RPC_Server]
	private void SERVER_Peacekeeper(RPCMessage rpc)
	{
		if (IsAuthed(rpc.player) && Interface.CallHook("OnTurretModeToggle", (object)this, (object)rpc.player) == null)
		{
			SetPeacekeepermode(isOn: true);
		}
	}

	[RPC_Server.IsVisible(3f)]
	[RPC_Server]
	private void SERVER_AttackAll(RPCMessage rpc)
	{
		if (IsAuthed(rpc.player) && Interface.CallHook("OnTurretModeToggle", (object)this, (object)rpc.player) == null)
		{
			SetPeacekeepermode(isOn: false);
		}
	}

	public virtual float TargetScanRate()
	{
		return 1f;
	}

	public override void ServerInit()
	{
		base.ServerInit();
		ItemContainer itemContainer = base.inventory;
		itemContainer.canAcceptItem = (Func<Item, int, bool>)Delegate.Combine(itemContainer.canAcceptItem, new Func<Item, int, bool>(CanAcceptItem));
		TargetTrigger obj = targetTrigger;
		obj.OnEntityEnterTrigger = (Action<BaseNetworkable>)Delegate.Combine(obj.OnEntityEnterTrigger, new Action<BaseNetworkable>(OnEntityEnterTrigger));
		timeSinceLastServerTick = 0.0;
		((FacepunchBehaviour)this).InvokeRepeating((Action)ServerTick, Random.Range(0f, 1f), 0.015f);
		((FacepunchBehaviour)this).InvokeRandomized((Action)SendAimDir, Random.Range(0f, 1f), 0.2f, 0.05f);
		((PersistentObjectWorkQueue<AutoTurret>)updateAutoTurretScanQueue).Add(this);
		((Component)targetTrigger).GetComponent<SphereCollider>().radius = sightRange;
		UpdateNearbyTurrets(created: true);
	}

	internal override void DoServerDestroy()
	{
		base.DoServerDestroy();
		((PersistentObjectWorkQueue<AutoTurret>)updateAutoTurretScanQueue).Remove(this);
		UpdateNearbyTurrets(created: false);
	}

	public void OnEntityEnterTrigger(BaseNetworkable entity)
	{
		if (entity is BasePlayer player && !IsAuthed(player))
		{
			authDirty = true;
		}
	}

	public void SendAimDir()
	{
		//IL_0016: Unknown result type (might be due to invalid IL or missing references)
		//IL_001c: Unknown result type (might be due to invalid IL or missing references)
		if (Time.realtimeSinceStartup > nextForcedAimTime || HasTarget() || Vector3.Angle(lastSentAimDir, aimDir) > 0.03f)
		{
			SendAimDirImmediate();
		}
	}

	public void SendAimDirImmediate()
	{
		//IL_0002: Unknown result type (might be due to invalid IL or missing references)
		//IL_0007: Unknown result type (might be due to invalid IL or missing references)
		//IL_0018: Unknown result type (might be due to invalid IL or missing references)
		lastSentAimDir = aimDir;
		ClientRPC<Vector3>(RpcTarget.NetworkGroup("CLIENT_ReceiveAimDir"), aimDir);
		nextForcedAimTime = Time.realtimeSinceStartup + 2f;
	}

	public void SetTarget(BaseCombatEntity targ)
	{
		//IL_005b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0060: Unknown result type (might be due to invalid IL or missing references)
		if (Interface.CallHook("OnTurretTarget", (object)this, (object)targ) != null)
		{
			return;
		}
		if ((Object)(object)targ != (Object)(object)target || targ.IsRealNull() != target.IsRealNull())
		{
			Effect.server.Run(((Object)(object)targ == (Object)null) ? targetLostEffect.resourcePath : targetAcquiredEffect.resourcePath, ((Component)this).transform.position, Vector3.up);
			if (outputs != null && outputs.Length != 0 && (Object)(object)outputs[0].connectedTo.Get() != (Object)null)
			{
				MarkDirtyForceUpdateOutputs();
			}
			nextShotTime += 0.1f;
			authDirty = true;
		}
		target = targ;
	}

	public virtual bool CheckPeekers()
	{
		return true;
	}

	public bool ObjectVisible(BaseCombatEntity obj)
	{
		//IL_002b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0030: Unknown result type (might be due to invalid IL or missing references)
		//IL_0031: Unknown result type (might be due to invalid IL or missing references)
		//IL_0048: Unknown result type (might be due to invalid IL or missing references)
		//IL_004d: Unknown result type (might be due to invalid IL or missing references)
		//IL_004e: Unknown result type (might be due to invalid IL or missing references)
		//IL_004f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0056: Unknown result type (might be due to invalid IL or missing references)
		//IL_0057: Unknown result type (might be due to invalid IL or missing references)
		//IL_0058: Unknown result type (might be due to invalid IL or missing references)
		//IL_005d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0061: Unknown result type (might be due to invalid IL or missing references)
		//IL_0066: Unknown result type (might be due to invalid IL or missing references)
		//IL_006b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0070: Unknown result type (might be due to invalid IL or missing references)
		//IL_008b: Unknown result type (might be due to invalid IL or missing references)
		//IL_008c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0095: Unknown result type (might be due to invalid IL or missing references)
		//IL_009a: Unknown result type (might be due to invalid IL or missing references)
		//IL_009f: Unknown result type (might be due to invalid IL or missing references)
		//IL_00a0: Unknown result type (might be due to invalid IL or missing references)
		//IL_00a5: Unknown result type (might be due to invalid IL or missing references)
		//IL_00a9: Unknown result type (might be due to invalid IL or missing references)
		//IL_00ae: Unknown result type (might be due to invalid IL or missing references)
		//IL_00b7: Unknown result type (might be due to invalid IL or missing references)
		//IL_00b8: Unknown result type (might be due to invalid IL or missing references)
		//IL_00ba: Unknown result type (might be due to invalid IL or missing references)
		//IL_00e5: Unknown result type (might be due to invalid IL or missing references)
		object obj2 = Interface.CallHook("CanBeTargeted", (object)obj, (object)this);
		if (obj2 is bool)
		{
			return (bool)obj2;
		}
		Vector3 position = ((Component)eyePos).transform.position;
		if (GamePhysics.CheckSphere(position, 0.1f, 2097152, (QueryTriggerInteraction)0))
		{
			return false;
		}
		Vector3 val = AimOffset(obj);
		float num = Vector3.Distance(val, position);
		Vector3 val2 = val - position;
		Vector3 val3 = Vector3.Cross(((Vector3)(ref val2)).normalized, Vector3.up);
		if (num > sightRange)
		{
			return false;
		}
		List<RaycastHit> list = Pool.Get<List<RaycastHit>>();
		for (int i = 0; (float)i < (CheckPeekers() ? 3f : 1f); i++)
		{
			val2 = val + val3 * visibilityOffsets[i] - position;
			Vector3 normalized = ((Vector3)(ref val2)).normalized;
			list.Clear();
			GamePhysics.TraceAll(new Ray(position, normalized), 0f, list, num * 1.1f, 1218652417, (QueryTriggerInteraction)0);
			for (int j = 0; j < list.Count; j++)
			{
				BaseEntity entity = list[j].GetEntity();
				if ((!((Object)(object)entity != (Object)null) || !entity.isClient) && (!((Object)(object)entity != (Object)null) || !((Object)(object)entity.ToPlayer() != (Object)null) || entity.EqualNetID((BaseNetworkable)obj)) && (!((Object)(object)entity != (Object)null) || !entity.EqualNetID((BaseNetworkable)this)))
				{
					if ((Object)(object)entity != (Object)null && ((Object)(object)entity == (Object)(object)obj || entity.EqualNetID((BaseNetworkable)obj)))
					{
						Pool.FreeUnmanaged<RaycastHit>(ref list);
						peekIndex = i;
						return true;
					}
					if (!((Object)(object)entity != (Object)null) || entity.ShouldBlockProjectiles())
					{
						break;
					}
				}
			}
		}
		Pool.FreeUnmanaged<RaycastHit>(ref list);
		return false;
	}

	public virtual void FireAttachedGun(Vector3 targetPos, float aimCone, Transform muzzleToUse = null, BaseCombatEntity target = null, float damageModifier = 1f, float speedModifier = 1f)
	{
		BaseProjectile attachedWeapon = GetAttachedWeapon();
		if (!((Object)(object)attachedWeapon == (Object)null) && !IsOffline())
		{
			attachedWeapon.ServerUse(damageModifier, speedModifier, IsBeingControlled ? RCEyes : gun_pitch, useBulletThickness: false);
		}
	}

	public virtual void FireGun(Vector3 targetPos, float aimCone, Transform muzzleToUse = null, BaseCombatEntity target = null)
	{
		//IL_0025: Unknown result type (might be due to invalid IL or missing references)
		//IL_0030: Unknown result type (might be due to invalid IL or missing references)
		//IL_003a: Unknown result type (might be due to invalid IL or missing references)
		//IL_003f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0044: Unknown result type (might be due to invalid IL or missing references)
		//IL_0050: Unknown result type (might be due to invalid IL or missing references)
		//IL_0055: Unknown result type (might be due to invalid IL or missing references)
		//IL_0057: Unknown result type (might be due to invalid IL or missing references)
		//IL_0059: Unknown result type (might be due to invalid IL or missing references)
		//IL_005e: Unknown result type (might be due to invalid IL or missing references)
		//IL_005f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0060: Unknown result type (might be due to invalid IL or missing references)
		//IL_0066: Unknown result type (might be due to invalid IL or missing references)
		//IL_006b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0070: Unknown result type (might be due to invalid IL or missing references)
		//IL_0078: Unknown result type (might be due to invalid IL or missing references)
		//IL_0079: Unknown result type (might be due to invalid IL or missing references)
		//IL_007a: Unknown result type (might be due to invalid IL or missing references)
		//IL_00a4: Unknown result type (might be due to invalid IL or missing references)
		//IL_00a9: Unknown result type (might be due to invalid IL or missing references)
		//IL_00ab: Unknown result type (might be due to invalid IL or missing references)
		//IL_0126: Unknown result type (might be due to invalid IL or missing references)
		//IL_012b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0202: Unknown result type (might be due to invalid IL or missing references)
		//IL_0154: Unknown result type (might be due to invalid IL or missing references)
		//IL_0159: Unknown result type (might be due to invalid IL or missing references)
		//IL_015b: Unknown result type (might be due to invalid IL or missing references)
		//IL_015c: Unknown result type (might be due to invalid IL or missing references)
		//IL_015d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0162: Unknown result type (might be due to invalid IL or missing references)
		//IL_0166: Unknown result type (might be due to invalid IL or missing references)
		//IL_016b: Unknown result type (might be due to invalid IL or missing references)
		//IL_01c5: Unknown result type (might be due to invalid IL or missing references)
		//IL_01ca: Unknown result type (might be due to invalid IL or missing references)
		//IL_01d0: Unknown result type (might be due to invalid IL or missing references)
		//IL_01d5: Unknown result type (might be due to invalid IL or missing references)
		//IL_01da: Unknown result type (might be due to invalid IL or missing references)
		if (IsOffline())
		{
			return;
		}
		if ((Object)(object)muzzleToUse == (Object)null)
		{
			muzzleToUse = muzzlePos;
		}
		Vector3 val = ((Component)GetCenterMuzzle()).transform.position - GetCenterMuzzle().forward * 0.25f;
		Vector3 val2 = ((Component)GetCenterMuzzle()).transform.forward;
		Vector3 modifiedAimConeDirection = AimConeUtil.GetModifiedAimConeDirection(aimCone, val2);
		targetPos = val + modifiedAimConeDirection * 300f;
		List<RaycastHit> list = Pool.Get<List<RaycastHit>>();
		GamePhysics.TraceAll(new Ray(val, modifiedAimConeDirection), 0f, list, 300f, 1220225809, (QueryTriggerInteraction)0);
		bool flag = false;
		for (int i = 0; i < list.Count; i++)
		{
			RaycastHit hit = list[i];
			BaseEntity entity = hit.GetEntity();
			if (((Object)(object)entity != (Object)null && ((Object)(object)entity == (Object)(object)this || entity.EqualNetID((BaseNetworkable)this))) || (PeacekeeperMode() && (Object)(object)target != (Object)null && (Object)(object)entity != (Object)null && (Object)(object)((Component)entity).GetComponent<BasePlayer>() != (Object)null && !entity.EqualNetID((BaseNetworkable)target)))
			{
				continue;
			}
			BaseCombatEntity baseCombatEntity = entity as BaseCombatEntity;
			if ((Object)(object)baseCombatEntity != (Object)null)
			{
				ApplyDamage(baseCombatEntity, ((RaycastHit)(ref hit)).point, modifiedAimConeDirection);
				if (baseCombatEntity.EqualNetID((BaseNetworkable)target))
				{
					flag = true;
				}
			}
			if (!((Object)(object)entity != (Object)null) || entity.ShouldBlockProjectiles())
			{
				targetPos = ((RaycastHit)(ref hit)).point;
				Vector3 val3 = targetPos - val;
				val2 = ((Vector3)(ref val3)).normalized;
				break;
			}
		}
		int num = 2;
		if (!flag)
		{
			numConsecutiveMisses++;
		}
		else
		{
			numConsecutiveMisses = 0;
		}
		if ((Object)(object)target != (Object)null && targetVisible && numConsecutiveMisses > num)
		{
			ApplyDamage(target, ((Component)target).transform.position - val2 * 0.25f, val2);
			numConsecutiveMisses = 0;
		}
		ClientRPC<uint, Vector3>(RpcTarget.NetworkGroup("CLIENT_FireGun"), StringPool.Get(((Object)((Component)muzzleToUse).gameObject).name), targetPos);
		Pool.FreeUnmanaged<RaycastHit>(ref list);
	}

	public void ApplyDamage(BaseCombatEntity entity, Vector3 point, Vector3 normal)
	{
		//IL_005f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0083: Unknown result type (might be due to invalid IL or missing references)
		//IL_0084: Unknown result type (might be due to invalid IL or missing references)
		//IL_008a: Unknown result type (might be due to invalid IL or missing references)
		//IL_008b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0090: Unknown result type (might be due to invalid IL or missing references)
		float num = 15f * Random.Range(0.9f, 1.1f);
		if (entity is BasePlayer && (Object)(object)entity != (Object)(object)target)
		{
			num *= 0.5f;
		}
		if (PeacekeeperMode() && (Object)(object)entity == (Object)(object)target)
		{
			target.MarkHostileFor(300f);
		}
		HitInfo info = new HitInfo(this, entity, DamageType.Bullet, num, point);
		entity.OnAttacked(info);
		if (entity is BasePlayer || entity is BaseNpc)
		{
			Effect.server.ImpactEffect(new HitInfo
			{
				HitPositionWorld = point,
				HitNormalWorld = -normal,
				HitMaterial = StringPool.Get("Flesh")
			});
		}
	}

	public void IdleTick(float dt)
	{
		//IL_002e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0033: Unknown result type (might be due to invalid IL or missing references)
		//IL_0038: Unknown result type (might be due to invalid IL or missing references)
		//IL_003d: Unknown result type (might be due to invalid IL or missing references)
		//IL_003e: Unknown result type (might be due to invalid IL or missing references)
		//IL_004e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0053: Unknown result type (might be due to invalid IL or missing references)
		//IL_0058: Unknown result type (might be due to invalid IL or missing references)
		//IL_005d: Unknown result type (might be due to invalid IL or missing references)
		//IL_005f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0060: Unknown result type (might be due to invalid IL or missing references)
		//IL_0065: Unknown result type (might be due to invalid IL or missing references)
		//IL_006a: Unknown result type (might be due to invalid IL or missing references)
		//IL_0079: Unknown result type (might be due to invalid IL or missing references)
		//IL_007f: Unknown result type (might be due to invalid IL or missing references)
		//IL_008a: Unknown result type (might be due to invalid IL or missing references)
		//IL_008f: Unknown result type (might be due to invalid IL or missing references)
		if (Time.realtimeSinceStartup > nextIdleAimTime)
		{
			nextIdleAimTime = Time.realtimeSinceStartup + Random.Range(4f, 5f);
			Quaternion val = Quaternion.LookRotation(((Component)this).transform.forward, Vector3.up);
			val *= Quaternion.AngleAxis(Random.Range(-45f, 45f), Vector3.up);
			targetAimDir = val * Vector3.forward;
		}
		if (!HasTarget())
		{
			aimDir = Mathx.Lerp(aimDir, targetAimDir, 2f, dt);
		}
	}

	public virtual bool HasClipAmmo()
	{
		BaseProjectile attachedWeapon = GetAttachedWeapon();
		if ((Object)(object)attachedWeapon == (Object)null)
		{
			return false;
		}
		return attachedWeapon.primaryMagazine.contents > 0;
	}

	public virtual bool HasReserveAmmo()
	{
		return totalAmmo > 0;
	}

	public int GetTotalAmmo()
	{
		//IL_002c: Unknown result type (might be due to invalid IL or missing references)
		int num = 0;
		BaseProjectile attachedWeapon = GetAttachedWeapon();
		if ((Object)(object)attachedWeapon == (Object)null)
		{
			return num;
		}
		List<Item> ammos = Pool.Get<List<Item>>();
		base.inventory.FindAmmo(ammos, attachedWeapon.primaryMagazine.definition.ammoTypes);
		if (!attachedWeapon.primaryMagazine.allowAmmoSwitching)
		{
			BaseProjectile.StripAmmoToType(ref ammos, attachedWeapon.primaryMagazine.ammoType);
		}
		for (int i = 0; i < ammos.Count; i++)
		{
			num += ammos[i].amount;
		}
		Pool.Free<Item>(ref ammos, false);
		return num;
	}

	public AmmoTypes GetValidAmmoTypes()
	{
		//IL_001d: Unknown result type (might be due to invalid IL or missing references)
		BaseProjectile attachedWeapon = GetAttachedWeapon();
		if ((Object)(object)attachedWeapon == (Object)null)
		{
			return (AmmoTypes)2;
		}
		return attachedWeapon.primaryMagazine.definition.ammoTypes;
	}

	public ItemDefinition GetDesiredAmmo()
	{
		BaseProjectile attachedWeapon = GetAttachedWeapon();
		if ((Object)(object)attachedWeapon == (Object)null)
		{
			return null;
		}
		return attachedWeapon.primaryMagazine.ammoType;
	}

	public void Reload()
	{
		//IL_0051: Unknown result type (might be due to invalid IL or missing references)
		//IL_0056: Unknown result type (might be due to invalid IL or missing references)
		//IL_0146: Unknown result type (might be due to invalid IL or missing references)
		//IL_018d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0192: Unknown result type (might be due to invalid IL or missing references)
		BaseProjectile attachedWeapon = GetAttachedWeapon();
		if ((Object)(object)attachedWeapon == (Object)null)
		{
			return;
		}
		_ = attachedWeapon.primaryMagazine.ammoType;
		float turretReloadDuration = attachedWeapon.GetTurretReloadDuration();
		nextShotTime = Mathf.Max(nextShotTime, Time.time + Mathf.Min(turretReloadDuration, 2f));
		AmmoTypes ammoTypes = attachedWeapon.primaryMagazine.definition.ammoTypes;
		if (attachedWeapon.primaryMagazine.contents > 0)
		{
			bool flag = false;
			if (base.inventory.capacity > base.inventory.itemList.Count)
			{
				flag = true;
			}
			else
			{
				int num = 0;
				foreach (Item item in base.inventory.itemList)
				{
					if ((Object)(object)item.info == (Object)(object)attachedWeapon.primaryMagazine.ammoType)
					{
						num += item.MaxStackable() - item.amount;
					}
				}
				flag = num >= attachedWeapon.primaryMagazine.contents;
			}
			if (!flag)
			{
				return;
			}
			base.inventory.AddItem(attachedWeapon.primaryMagazine.ammoType, attachedWeapon.primaryMagazine.contents, 0uL);
			attachedWeapon.SetAmmoCount(0);
		}
		List<Item> ammos = Pool.Get<List<Item>>();
		base.inventory.FindAmmo(ammos, ammoTypes);
		if (!attachedWeapon.primaryMagazine.allowAmmoSwitching)
		{
			BaseProjectile.StripAmmoToType(ref ammos, attachedWeapon.primaryMagazine.ammoType);
		}
		if (ammos.Count > 0)
		{
			Effect.server.Run(reloadEffect.resourcePath, this, StringPool.Get("WeaponAttachmentPoint"), Vector3.zero, Vector3.zero);
			totalAmmoDirty = true;
			attachedWeapon.primaryMagazine.ammoType = ammos[0].info;
			int num2 = 0;
			while (attachedWeapon.primaryMagazine.contents < attachedWeapon.primaryMagazine.capacity && num2 < ammos.Count)
			{
				if ((Object)(object)ammos[num2].info == (Object)(object)attachedWeapon.primaryMagazine.ammoType)
				{
					int num3 = attachedWeapon.primaryMagazine.capacity - attachedWeapon.primaryMagazine.contents;
					num3 = Mathf.Min(ammos[num2].amount, num3);
					ammos[num2].UseItem(num3);
					attachedWeapon.ModifyAmmoCount(num3);
				}
				num2++;
			}
		}
		ItemDefinition ammoType = attachedWeapon.primaryMagazine.ammoType;
		if (Object.op_Implicit((Object)(object)ammoType))
		{
			ItemModProjectile component = ((Component)ammoType).GetComponent<ItemModProjectile>();
			GameObject val = component.projectileObject.Get();
			if (Object.op_Implicit((Object)(object)val))
			{
				if (Object.op_Implicit((Object)(object)val.GetComponent<Projectile>()))
				{
					currentAmmoGravity = 0f;
					currentAmmoVelocity = component.GetMaxVelocity();
				}
				else
				{
					ServerProjectile component2 = val.GetComponent<ServerProjectile>();
					if (Object.op_Implicit((Object)(object)component2))
					{
						currentAmmoGravity = component2.gravityModifier;
						currentAmmoVelocity = component2.speed;
					}
				}
			}
		}
		Pool.Free<Item>(ref ammos, false);
		attachedWeapon.SendNetworkUpdate();
	}

	public override void PostServerLoad()
	{
		base.PostServerLoad();
		totalAmmoDirty = true;
		Reload();
		UpdateNearbyTurrets(created: true);
	}

	public void UpdateTotalAmmo()
	{
		int num = totalAmmo;
		totalAmmo = GetTotalAmmo();
		if (num != totalAmmo && ((Object)(object)outputs[1].connectedTo.Get() != (Object)null || (Object)(object)outputs[2].connectedTo.Get() != (Object)null))
		{
			MarkDirtyForceUpdateOutputs();
		}
	}

	public override void OnItemAddedOrRemoved(Item item, bool added)
	{
		base.OnItemAddedOrRemoved(item, added);
		if (Object.op_Implicit((Object)(object)((Component)item.info).GetComponent<ItemModEntity>()))
		{
			if (((FacepunchBehaviour)this).IsInvoking((Action)UpdateAttachedWeapon))
			{
				UpdateAttachedWeapon();
			}
			((FacepunchBehaviour)this).Invoke((Action)UpdateAttachedWeapon, 0.5f);
		}
	}

	public bool EnsureReloaded(bool onlyReloadIfEmpty = true)
	{
		bool flag = HasReserveAmmo();
		if (onlyReloadIfEmpty)
		{
			if (flag && !HasClipAmmo())
			{
				Reload();
				return true;
			}
		}
		else if (flag)
		{
			Reload();
			return true;
		}
		return false;
	}

	public BaseProjectile GetAttachedWeapon()
	{
		return AttachedWeapon as BaseProjectile;
	}

	public virtual bool HasFallbackWeapon()
	{
		return false;
	}

	public bool HasGenericFireable()
	{
		if ((Object)(object)AttachedWeapon != (Object)null)
		{
			return AttachedWeapon.IsInstrument();
		}
		return false;
	}

	public void UpdateAttachedWeapon()
	{
		HeldEntity heldEntity = TryAddWeaponToTurret(base.inventory.GetSlot(0), socketTransform, this, attachedWeaponZOffsetScale);
		bool flag = (Object)(object)heldEntity != (Object)null;
		SetFlag(Flags.Reserved3, flag);
		if (flag)
		{
			AttachedWeapon = heldEntity;
			totalAmmoDirty = true;
			Reload();
			UpdateTotalAmmo();
			if (IsOffline())
			{
				heldEntity.SetLightsOn(isOn: false);
			}
		}
		else
		{
			BaseProjectile attachedWeapon = GetAttachedWeapon();
			if ((Object)(object)attachedWeapon != (Object)null)
			{
				attachedWeapon.SetGenericVisible(wantsVis: false);
				attachedWeapon.SetLightsOn(isOn: false);
			}
			AttachedWeapon = null;
		}
		bool b = false;
		if (flag)
		{
			BaseProjectile component = ((Component)heldEntity).GetComponent<BaseProjectile>();
			b = (Object)(object)component != (Object)null && component.largeTurretWeapon;
		}
		SetFlag(Flags.Reserved2, b);
	}

	public static HeldEntity TryAddWeaponToTurret(Item weaponItem, Transform parent, BaseEntity entityParent, float zOffsetScale)
	{
		//IL_0075: Unknown result type (might be due to invalid IL or missing references)
		//IL_0080: Unknown result type (might be due to invalid IL or missing references)
		//IL_008b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0091: Unknown result type (might be due to invalid IL or missing references)
		//IL_0096: Unknown result type (might be due to invalid IL or missing references)
		//IL_009b: Unknown result type (might be due to invalid IL or missing references)
		//IL_00a0: Unknown result type (might be due to invalid IL or missing references)
		//IL_00c8: Unknown result type (might be due to invalid IL or missing references)
		//IL_00d3: Unknown result type (might be due to invalid IL or missing references)
		//IL_00df: Unknown result type (might be due to invalid IL or missing references)
		//IL_00e4: Unknown result type (might be due to invalid IL or missing references)
		//IL_00e5: Unknown result type (might be due to invalid IL or missing references)
		//IL_00f1: Unknown result type (might be due to invalid IL or missing references)
		//IL_00f6: Unknown result type (might be due to invalid IL or missing references)
		//IL_00fb: Unknown result type (might be due to invalid IL or missing references)
		//IL_00fe: Unknown result type (might be due to invalid IL or missing references)
		//IL_0103: Unknown result type (might be due to invalid IL or missing references)
		//IL_010a: Unknown result type (might be due to invalid IL or missing references)
		//IL_0115: Unknown result type (might be due to invalid IL or missing references)
		//IL_011b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0129: Unknown result type (might be due to invalid IL or missing references)
		//IL_012e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0135: Unknown result type (might be due to invalid IL or missing references)
		//IL_013b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0140: Unknown result type (might be due to invalid IL or missing references)
		HeldEntity heldEntity = null;
		if (weaponItem != null && (weaponItem.info.category == ItemCategory.Weapon || weaponItem.info.category == ItemCategory.Fun))
		{
			BaseEntity heldEntity2 = weaponItem.GetHeldEntity();
			if ((Object)(object)heldEntity2 != (Object)null)
			{
				HeldEntity component = ((Component)heldEntity2).GetComponent<HeldEntity>();
				if ((Object)(object)component != (Object)null && component.IsUsableByTurret)
				{
					heldEntity = component;
				}
			}
		}
		if ((Object)(object)heldEntity == (Object)null)
		{
			return null;
		}
		Transform transform = ((Component)heldEntity).transform;
		Transform muzzleTransform = heldEntity.MuzzleTransform;
		heldEntity.SetParent(null);
		transform.localPosition = Vector3.zero;
		transform.localRotation = Quaternion.identity;
		Quaternion val = transform.rotation * Quaternion.Inverse(muzzleTransform.rotation);
		heldEntity.limitNetworking = false;
		heldEntity.SetFlag(Flags.Disabled, b: false);
		heldEntity.SetParent(entityParent, StringPool.Get(((Object)parent).name));
		transform.localPosition = Vector3.zero;
		transform.localRotation = Quaternion.identity;
		transform.rotation *= val;
		Vector3 val2 = parent.InverseTransformPoint(muzzleTransform.position);
		transform.localPosition = Vector3.left * val2.x;
		float num = Vector3.Distance(muzzleTransform.position, transform.position);
		transform.localPosition += Vector3.forward * num * zOffsetScale;
		heldEntity.SetGenericVisible(wantsVis: true);
		heldEntity.SetLightsOn(isOn: true);
		return heldEntity;
	}

	public override void OnDied(HitInfo info)
	{
		BaseProjectile attachedWeapon = GetAttachedWeapon();
		if ((Object)(object)attachedWeapon != (Object)null)
		{
			attachedWeapon.SetGenericVisible(wantsVis: false);
			attachedWeapon.SetLightsOn(isOn: false);
		}
		AttachedWeapon = null;
		base.OnDied(info);
	}

	public override bool OnStartBeingLooted(BasePlayer baseEntity)
	{
		if (!IsAuthed(baseEntity))
		{
			return false;
		}
		return base.OnStartBeingLooted(baseEntity);
	}

	public override void PlayerStoppedLooting(BasePlayer player)
	{
		base.PlayerStoppedLooting(player);
		UpdateTotalAmmo();
		EnsureReloaded(onlyReloadIfEmpty: false);
		UpdateTotalAmmo();
		nextShotTime = Time.time;
	}

	public virtual float GetMaxAngleForEngagement()
	{
		BaseProjectile attachedWeapon = GetAttachedWeapon();
		float result = (((Object)(object)attachedWeapon == (Object)null) ? 1f : ((1f - Mathf.InverseLerp(0.2f, 1f, attachedWeapon.repeatDelay)) * 7f));
		if (Time.time - lastShotTime > 1f)
		{
			result = 1f;
		}
		return result;
	}

	public void TargetTick()
	{
		//IL_01a6: Unknown result type (might be due to invalid IL or missing references)
		//IL_0109: Unknown result type (might be due to invalid IL or missing references)
		if (Time.realtimeSinceStartup >= nextVisCheck)
		{
			nextVisCheck = Time.realtimeSinceStartup + Random.Range(0.2f, 0.3f);
			targetVisible = ObjectVisible(target);
			if (targetVisible)
			{
				lastTargetSeenTime = Time.realtimeSinceStartup;
			}
		}
		EnsureReloaded();
		BaseProjectile attachedWeapon = GetAttachedWeapon();
		if (!(Time.time >= nextShotTime) || !targetVisible || !(Mathf.Abs(AngleToTarget(target, currentAmmoGravity != 0f)) < GetMaxAngleForEngagement()))
		{
			return;
		}
		if (Object.op_Implicit((Object)(object)attachedWeapon))
		{
			float damageModifier = 1f;
			float speedModifier = 1f;
			ItemDefinition ammoType = attachedWeapon.primaryMagazine.ammoType;
			if (Object.op_Implicit((Object)(object)ammoType))
			{
				ItemModProjectile component = ((Component)ammoType).GetComponent<ItemModProjectile>();
				if (Object.op_Implicit((Object)(object)component) && component.projectileVelocity < 100f)
				{
					speedModifier = 2f;
				}
			}
			if (attachedWeapon.primaryMagazine.contents > 0)
			{
				FireAttachedGun(AimOffset(target), aimCone, null, PeacekeeperMode() ? target : null, damageModifier, speedModifier);
				float delay = (attachedWeapon.isSemiAuto ? (attachedWeapon.repeatDelay * 1.5f) : attachedWeapon.repeatDelay);
				delay = attachedWeapon.ScaleRepeatDelay(delay);
				nextShotTime = Time.time + delay;
				shouldUpdateOnOutOfAmmo = true;
			}
			else
			{
				nextShotTime = Time.time + 5f;
				if (shouldUpdateOnOutOfAmmo)
				{
					shouldUpdateOnOutOfAmmo = false;
					attachedWeapon.SendNetworkUpdate();
				}
			}
		}
		else if (HasFallbackWeapon())
		{
			FireGun(AimOffset(target), aimCone, null, target);
			nextShotTime = Time.time + 0.115f;
		}
		else if (HasGenericFireable())
		{
			AttachedWeapon.ServerUse();
			nextShotTime = Time.time + 0.115f;
		}
		else
		{
			nextShotTime = Time.time + 1f;
		}
	}

	public bool HasTarget()
	{
		if ((Object)(object)target != (Object)null)
		{
			return target.IsAlive();
		}
		return false;
	}

	public void OfflineTick()
	{
		//IL_0001: Unknown result type (might be due to invalid IL or missing references)
		//IL_0006: Unknown result type (might be due to invalid IL or missing references)
		aimDir = Vector3.up;
	}

	public virtual bool IsEntityHostile(BaseCombatEntity ent)
	{
		if (ent is ScarecrowNPC)
		{
			return true;
		}
		if (ent is BasePet basePet && (Object)(object)basePet.Brain.OwningPlayer != (Object)null)
		{
			if (!basePet.Brain.OwningPlayer.IsHostile())
			{
				return ent.IsHostile();
			}
			return true;
		}
		return ent.IsHostile();
	}

	public bool ShouldTarget(BaseCombatEntity targ)
	{
		if (targ is AutoTurret)
		{
			return false;
		}
		if (targ is RidableHorse)
		{
			return false;
		}
		if (targ is BasePet basePet && (Object)(object)basePet.Brain.OwningPlayer != (Object)null && IsAuthed(basePet.Brain.OwningPlayer))
		{
			return false;
		}
		return true;
	}

	public void ScheduleForTargetScan()
	{
		((PersistentObjectWorkQueue<AutoTurret>)updateAutoTurretScanQueue).Add(this);
	}

	public bool HasInterference()
	{
		return IsOnFire();
	}

	public void TryRegisterForInterferenceUpdate()
	{
		if (IsOn() && interferenceUpdateList.Add(this))
		{
			UpdateInterferenceOnOthers();
		}
	}

	public void UpdateInterference()
	{
		//IL_0058: Unknown result type (might be due to invalid IL or missing references)
		if (!IsOn() || Interface.CallHook("OnInterferenceUpdate", (object)this) != null)
		{
			return;
		}
		float num = 0f;
		foreach (AutoTurret nearbyTurret in nearbyTurrets)
		{
			if (!nearbyTurret.isClient && nearbyTurret.IsValid() && ((Component)nearbyTurret).gameObject.activeSelf && !nearbyTurret.EqualNetID(net.ID) && nearbyTurret.IsOn() && !nearbyTurret.HasInterference())
			{
				num += 1f;
			}
		}
		SetFlag(Flags.OnFire, num >= (float)Sentry.maxinterference);
	}

	public void UpdateInterferenceOnOthers()
	{
		if (Interface.CallHook("OnInterferenceOthersUpdate", (object)this) != null)
		{
			return;
		}
		foreach (AutoTurret nearbyTurret in nearbyTurrets)
		{
			if ((Object)(object)nearbyTurret != (Object)null)
			{
				nearbyTurret.TryRegisterForInterferenceUpdate();
			}
		}
	}

	public void UpdateNearbyTurrets(bool created)
	{
		//IL_0020: Unknown result type (might be due to invalid IL or missing references)
		List<AutoTurret> list = Pool.Get<List<AutoTurret>>();
		if (Interface.CallHook("OnNearbyTurretsScan", (object)this, (object)list, (object)created) == null)
		{
			Vis.Entities(((Component)this).transform.position, Sentry.interferenceradius, list, 256, (QueryTriggerInteraction)1);
		}
		foreach (AutoTurret item in list)
		{
			if (!((Object)(object)item == (Object)(object)this))
			{
				if (created)
				{
					nearbyTurrets.Add(item);
					item.nearbyTurrets.Add(this);
				}
				else
				{
					item.nearbyTurrets.Remove(this);
				}
			}
		}
		if (!created)
		{
			nearbyTurrets.Clear();
		}
		Pool.FreeUnmanaged<AutoTurret>(ref list);
	}

	public void TargetScan()
	{
		//IL_0041: Unknown result type (might be due to invalid IL or missing references)
		//IL_0051: Unknown result type (might be due to invalid IL or missing references)
		if (!target.IsRealNull() && ((Object)(object)target == (Object)null || target.IsDead() || Time.realtimeSinceStartup - lastTargetSeenTime > 3f || Vector3.Distance(((Component)this).transform.position, ((Component)target).transform.position) > sightRange || (PeacekeeperMode() && !IsEntityHostile(target))))
		{
			SetTarget(null);
		}
		if (!authDirty && !hasPotentialUnauthedTarget)
		{
			return;
		}
		if (HasInterference())
		{
			if (HasTarget())
			{
				SetTarget(null);
			}
			return;
		}
		hasPotentialUnauthedTarget = false;
		authDirty = false;
		if (HasTarget() || IsOffline() || IsBeingControlled)
		{
			return;
		}
		if (targetTrigger.entityContents != null)
		{
			foreach (BaseEntity entityContent in targetTrigger.entityContents)
			{
				BaseCombatEntity baseCombatEntity = entityContent as BaseCombatEntity;
				if ((Object)(object)baseCombatEntity == (Object)null)
				{
					continue;
				}
				if (!Sentry.targetall)
				{
					BasePlayer basePlayer = baseCombatEntity as BasePlayer;
					if ((Object)(object)basePlayer != (Object)null && (IsAuthed(basePlayer) || Ignore(basePlayer)))
					{
						continue;
					}
				}
				if (!hasPotentialUnauthedTarget)
				{
					hasPotentialUnauthedTarget = true;
				}
				if ((!PeacekeeperMode() || IsEntityHostile(baseCombatEntity)) && baseCombatEntity.IsAlive() && ShouldTarget(baseCombatEntity) && InFiringArc(baseCombatEntity) && ObjectVisible(baseCombatEntity))
				{
					SetTarget(baseCombatEntity);
					if (target != null)
					{
						break;
					}
				}
			}
		}
		if (PeacekeeperMode() && (Object)(object)target == (Object)null)
		{
			nextShotTime = Time.time + 1f;
		}
	}

	public virtual bool Ignore(BasePlayer player)
	{
		return false;
	}

	public void ServerTick()
	{
		if (base.isClient || base.IsDestroyed)
		{
			return;
		}
		float dt = (float)(double)timeSinceLastServerTick;
		timeSinceLastServerTick = 0.0;
		if (!IsOnline())
		{
			OfflineTick();
		}
		else if (!IsBeingControlled)
		{
			if (HasTarget())
			{
				TargetTick();
			}
			else
			{
				IdleTick(dt);
			}
		}
		UpdateFacingToTarget(dt);
		if (totalAmmoDirty && Time.time > nextAmmoCheckTime)
		{
			UpdateTotalAmmo();
			totalAmmoDirty = false;
			nextAmmoCheckTime = Time.time + 0.5f;
		}
	}

	public override void OnAttacked(HitInfo info)
	{
		base.OnAttacked(info);
		if (((IsOnline() && !HasTarget()) || !targetVisible) && !((Object)(object)(info.Initiator as AutoTurret) != (Object)null) && !((Object)(object)(info.Initiator as SamSite) != (Object)null) && !((Object)(object)(info.Initiator as GunTrap) != (Object)null))
		{
			BasePlayer basePlayer = info.Initiator as BasePlayer;
			if (!Object.op_Implicit((Object)(object)basePlayer) || !IsAuthed(basePlayer))
			{
				SetTarget(info.Initiator as BaseCombatEntity);
			}
		}
	}

	public void UpdateFacingToTarget(float dt)
	{
		//IL_002e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0033: Unknown result type (might be due to invalid IL or missing references)
		//IL_0089: Unknown result type (might be due to invalid IL or missing references)
		//IL_0095: Unknown result type (might be due to invalid IL or missing references)
		//IL_009a: Unknown result type (might be due to invalid IL or missing references)
		//IL_009f: Unknown result type (might be due to invalid IL or missing references)
		//IL_00a3: Unknown result type (might be due to invalid IL or missing references)
		//IL_00a8: Unknown result type (might be due to invalid IL or missing references)
		//IL_0047: Unknown result type (might be due to invalid IL or missing references)
		//IL_004c: Unknown result type (might be due to invalid IL or missing references)
		//IL_004d: Unknown result type (might be due to invalid IL or missing references)
		//IL_004e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0055: Unknown result type (might be due to invalid IL or missing references)
		//IL_0056: Unknown result type (might be due to invalid IL or missing references)
		//IL_0057: Unknown result type (might be due to invalid IL or missing references)
		//IL_005c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0060: Unknown result type (might be due to invalid IL or missing references)
		//IL_0065: Unknown result type (might be due to invalid IL or missing references)
		//IL_006a: Unknown result type (might be due to invalid IL or missing references)
		//IL_006f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0070: Unknown result type (might be due to invalid IL or missing references)
		//IL_0071: Unknown result type (might be due to invalid IL or missing references)
		//IL_007e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0083: Unknown result type (might be due to invalid IL or missing references)
		//IL_0088: Unknown result type (might be due to invalid IL or missing references)
		//IL_018a: Unknown result type (might be due to invalid IL or missing references)
		//IL_018b: Unknown result type (might be due to invalid IL or missing references)
		//IL_00fa: Unknown result type (might be due to invalid IL or missing references)
		//IL_00ff: Unknown result type (might be due to invalid IL or missing references)
		//IL_0106: Unknown result type (might be due to invalid IL or missing references)
		//IL_010b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0110: Unknown result type (might be due to invalid IL or missing references)
		//IL_011d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0122: Unknown result type (might be due to invalid IL or missing references)
		//IL_0136: Unknown result type (might be due to invalid IL or missing references)
		//IL_0137: Unknown result type (might be due to invalid IL or missing references)
		//IL_0147: Unknown result type (might be due to invalid IL or missing references)
		//IL_014c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0151: Unknown result type (might be due to invalid IL or missing references)
		//IL_0156: Unknown result type (might be due to invalid IL or missing references)
		//IL_015a: Unknown result type (might be due to invalid IL or missing references)
		//IL_015f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0161: Unknown result type (might be due to invalid IL or missing references)
		//IL_0163: Unknown result type (might be due to invalid IL or missing references)
		//IL_0174: Unknown result type (might be due to invalid IL or missing references)
		//IL_0179: Unknown result type (might be due to invalid IL or missing references)
		//IL_017e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0183: Unknown result type (might be due to invalid IL or missing references)
		//IL_0188: Unknown result type (might be due to invalid IL or missing references)
		if ((Object)(object)target != (Object)null && targetVisible && !IsBeingControlled)
		{
			Vector3 val = AimOffset(target);
			Vector3 val2;
			if (peekIndex != 0)
			{
				Vector3 position = ((Component)eyePos).transform.position;
				Vector3.Distance(val, position);
				val2 = val - position;
				Vector3 val3 = Vector3.Cross(((Vector3)(ref val2)).normalized, Vector3.up);
				val += val3 * visibilityOffsets[peekIndex];
			}
			val2 = val - ((Component)eyePos).transform.position;
			Vector3 val4 = ((Vector3)(ref val2)).normalized;
			if (currentAmmoGravity != 0f)
			{
				float num = 0.2f;
				if (target is BasePlayer)
				{
					float num2 = Mathf.Clamp01(target.WaterFactor()) * 1.8f;
					if (num2 > num)
					{
						num = num2;
					}
				}
				val = ((Component)target).transform.position + Vector3.up * num;
				float angle = GetAngle(((Component)eyePos).transform.position, val, currentAmmoVelocity, currentAmmoGravity);
				Vector3 val5 = Vector3Ex.XZ3D(val) - Vector3Ex.XZ3D(((Component)eyePos).transform.position);
				val5 = ((Vector3)(ref val5)).normalized;
				val4 = Quaternion.LookRotation(val5) * Quaternion.Euler(angle, 0f, 0f) * Vector3.forward;
			}
			aimDir = val4;
		}
		UpdateAiming(dt);
	}

	public float GetAngle(Vector3 launchPosition, Vector3 targetPosition, float launchVelocity, float gravityScale)
	{
		//IL_0000: Unknown result type (might be due to invalid IL or missing references)
		//IL_000e: Unknown result type (might be due to invalid IL or missing references)
		//IL_000f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0014: Unknown result type (might be due to invalid IL or missing references)
		//IL_0015: Unknown result type (might be due to invalid IL or missing references)
		//IL_0020: Unknown result type (might be due to invalid IL or missing references)
		//IL_0026: Unknown result type (might be due to invalid IL or missing references)
		float num = Physics.gravity.y * gravityScale;
		float num2 = Vector3.Distance(Vector3Ex.XZ3D(launchPosition), Vector3Ex.XZ3D(targetPosition));
		float num3 = launchPosition.y - targetPosition.y;
		float num4 = Mathf.Pow(launchVelocity, 2f);
		float num5 = Mathf.Pow(launchVelocity, 4f);
		float num6 = Mathf.Atan((num4 + Mathf.Sqrt(num5 - num * (num * Mathf.Pow(num2, 2f) + 2f * num3 * num4))) / (num * num2)) * 57.29578f;
		float num7 = Mathf.Atan((num4 - Mathf.Sqrt(num5 - num * (num * Mathf.Pow(num2, 2f) + 2f * num3 * num4))) / (num * num2)) * 57.29578f;
		if (float.IsNaN(num6) && float.IsNaN(num7))
		{
			return -45f;
		}
		if (float.IsNaN(num6))
		{
			return num7;
		}
		if (!(num6 > num7))
		{
			return num7;
		}
		return num6;
	}

	public override void OnDeployed(BaseEntity parent, BasePlayer deployedBy, Item fromItem)
	{
		base.OnDeployed(parent, deployedBy, fromItem);
		AddSelfAuthorize(deployedBy);
	}

	public override ItemContainerId GetIdealContainer(BasePlayer player, Item item, ItemMoveModifier modifier)
	{
		//IL_0002: Unknown result type (might be due to invalid IL or missing references)
		//IL_0008: Unknown result type (might be due to invalid IL or missing references)
		return default(ItemContainerId);
	}

	public override int GetIdealSlot(BasePlayer player, ItemContainer container, Item item)
	{
		bool num = item.info.category == ItemCategory.Weapon;
		bool flag = item.info.category == ItemCategory.Ammunition;
		if (num)
		{
			return 0;
		}
		if (flag)
		{
			for (int i = 1; i < base.inventory.capacity; i++)
			{
				if (!base.inventory.SlotTaken(item, i))
				{
					return i;
				}
			}
		}
		return -1;
	}
}


public static class TurretFlags
{
	public const Flags Peacekeeper = Flags.Reserved1;
}


public class UpdateAutoTurretScanQueue : PersistentObjectWorkQueue<AutoTurret>
{
	protected override void RunJob(AutoTurret entity)
	{
		if (((PersistentObjectWorkQueue<AutoTurret>)this).ShouldAdd(entity))
		{
			entity.TargetScan();
		}
	}

	protected override bool ShouldAdd(AutoTurret entity)
	{
		if (base.ShouldAdd(entity))
		{
			return entity.IsValid();
		}
		return false;
	}
}


