#define UNITY_ASSERTIONS
using System;
using System.Collections.Generic;
using System.Linq;
using UnityEngine.Assertions;

public class AttributeCollection
{
	private Dictionary<Type, List<PrefabAttribute>> attributes = new Dictionary<Type, List<PrefabAttribute>>();

	private Dictionary<Type, object> cache = new Dictionary<Type, object>();

	internal List<PrefabAttribute> Find(Type t)
	{
		if (attributes.TryGetValue(t, out var value))
		{
			return value;
		}
		value = new List<PrefabAttribute>();
		attributes.Add(t, value);
		return value;
	}

	public T[] Find<T>()
	{
		if (cache == null)
		{
			cache = new Dictionary<Type, object>();
		}
		if (cache.TryGetValue(typeof(T), out var value))
		{
			return (T[])value;
		}
		value = Find(typeof(T)).Cast<T>().ToArray();
		cache.Add(typeof(T), value);
		return (T[])value;
	}

	public void Add(PrefabAttribute attribute)
	{
		List<PrefabAttribute> list = Find(attribute.GetIndexedType());
		Assert.IsTrue(!list.Contains(attribute), "AttributeCollection.Add: Adding twice to list");
		list.Add(attribute);
		cache = null;
	}
}
