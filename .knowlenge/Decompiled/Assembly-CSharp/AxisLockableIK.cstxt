using System;
using FIMSpace;
using FIMSpace.AnimationTools;
using FIMSpace.FProceduralAnimation;
using FIMSpace.FTools;
using UnityEngine;

[Serializable]
public class AxisLockableIK : FimpIK_Limb
{
	public enum EIKAxisLock
	{
		None = 0,
		X = 2,
		Y = 4,
		Z = 8
	}

	public EIKAxisLock FirstBoneAxisLock;

	public override void Update()
	{
		if (!base.Initialized)
		{
			return;
		}
		Refresh();
		float num = IKPositionWeight * IKWeight;
		base.StartIKBone.sqrMagn = (base.MiddleIKBone.transform.position - base.StartIKBone.transform.position).sqrMagnitude;
		base.MiddleIKBone.sqrMagn = (base.EndIKBone.transform.position - base.MiddleIKBone.transform.position).sqrMagnitude;
		targetElbowNormal = GetDefaultFlexNormal();
		if (ExtraHintAdjustementOffset != Vector3.zero)
		{
			targetElbowNormal = Vector3.Lerp(targetElbowNormal, CalculateElbowNormalToPosition(base.EndIKBone.transform.position + base.EndIKBone.transform.rotation * ExtraHintAdjustementOffset), ExtraHintAdjustementOffset.magnitude).normalized;
		}
		Vector3 vector = GetOrientationDirection(IKTargetPosition, InverseHint ? (-targetElbowNormal) : targetElbowNormal);
		if (vector == Vector3.zero)
		{
			vector = base.MiddleIKBone.transform.position - base.StartIKBone.transform.position;
		}
		if (num > 0f)
		{
			Quaternion targetRotation = base.StartIKBone.GetRotation(vector, targetElbowNormal) * base.StartBoneRotationOffset;
			if (num < 1f)
			{
				targetRotation = Quaternion.LerpUnclamped(base.StartIKBone.srcRotation, targetRotation, num);
			}
			if (FirstBoneAxisLock != 0)
			{
				ApplyAxisLock(FirstBoneAxisLock, base.StartIKBone, ref targetRotation);
			}
			base.StartIKBone.transform.rotation = targetRotation;
			Quaternion quaternion = base.MiddleIKBone.GetRotation(IKTargetPosition - base.MiddleIKBone.transform.position, base.MiddleIKBone.GetCurrentOrientationNormal());
			if (num < 1f)
			{
				quaternion = Quaternion.LerpUnclamped(base.MiddleIKBone.srcRotation, quaternion, num);
			}
			base.MiddleIKBone.transform.rotation = quaternion;
		}
		postIKAnimatorEndBoneRot = base.EndIKBone.transform.rotation;
		EndBoneRotation();
	}

	private void ApplyAxisLock(EIKAxisLock axisLock, IKBone ikBone, ref Quaternion targetRotation)
	{
		Vector3 eulerAngles = FEngineering.QToLocal(ikBone.transform.parent.rotation, targetRotation).eulerAngles;
		if ((axisLock & EIKAxisLock.X) != 0)
		{
			eulerAngles.x = ikBone.LastKeyLocalRotation.eulerAngles.x;
		}
		if ((axisLock & EIKAxisLock.Y) != 0)
		{
			eulerAngles.y = ikBone.LastKeyLocalRotation.eulerAngles.y;
		}
		if ((axisLock & EIKAxisLock.Z) != 0)
		{
			eulerAngles.z = ikBone.LastKeyLocalRotation.eulerAngles.z;
		}
		targetRotation = FEngineering.QToWorld(ikBone.transform.parent.rotation, AnimationGenerateUtils.EnsureQuaternionContinuity(targetRotation, Quaternion.Euler(eulerAngles)));
	}
}
