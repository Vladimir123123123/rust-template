using UnityEngine;

public class BaseFleeState : BasicAIState
{
	private float nextInterval = 2f;

	private float stopFleeDistance;

	public BaseFleeState()
		: base(AIState.Flee)
	{
	}

	public override void StateEnter(BaseAIBrain brain, BaseEntity entity)
	{
		base.StateEnter(brain, entity);
		BaseEntity baseEntity = brain.Events.Memory.Entity.Get(brain.Events.CurrentInputMemorySlot);
		if (baseEntity != null)
		{
			stopFleeDistance = Random.Range(80f, 100f) + Mathf.Clamp(Vector3Ex.Distance2D(brain.Navigator.transform.position, baseEntity.transform.position), 0f, 50f);
		}
		FleeFrom(brain.Events.Memory.Entity.Get(brain.Events.CurrentInputMemorySlot), entity);
	}

	public override void StateLeave(BaseAIBrain brain, BaseEntity entity)
	{
		base.StateLeave(brain, entity);
		Stop();
	}

	private void Stop()
	{
		brain.Navigator.Stop();
	}

	public override StateStatus StateThink(float delta, BaseAIBrain brain, BaseEntity entity)
	{
		base.StateThink(delta, brain, entity);
		BaseEntity baseEntity = brain.Events.Memory.Entity.Get(brain.Events.CurrentInputMemorySlot);
		if (baseEntity == null)
		{
			return StateStatus.Finished;
		}
		if (Vector3Ex.Distance2D(brain.Navigator.transform.position, baseEntity.transform.position) >= stopFleeDistance)
		{
			return StateStatus.Finished;
		}
		if ((brain.Navigator.UpdateIntervalElapsed(nextInterval) || !brain.Navigator.Moving) && !FleeFrom(baseEntity, entity))
		{
			return StateStatus.Error;
		}
		return StateStatus.Running;
	}

	private bool FleeFrom(BaseEntity fleeFromEntity, BaseEntity thisEntity)
	{
		if (thisEntity == null || fleeFromEntity == null)
		{
			return false;
		}
		nextInterval = Random.Range(3f, 6f);
		if (!brain.PathFinder.GetBestFleePosition(brain.Navigator, brain.Senses, fleeFromEntity, brain.Events.Memory.Position.Get(4), 50f, 100f, out var result))
		{
			return false;
		}
		bool num = brain.Navigator.SetDestination(result, BaseNavigator.NavigationSpeed.Fast);
		if (!num)
		{
			Stop();
		}
		return num;
	}
}
