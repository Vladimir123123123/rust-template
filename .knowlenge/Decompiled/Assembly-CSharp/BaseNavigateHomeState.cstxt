using UnityEngine;

public class BaseNavigateHomeState : BasicAIState
{
	private StateStatus status;

	public BaseNavigateHomeState()
		: base(AIState.NavigateHome)
	{
	}

	public override void StateEnter(BaseAIBrain brain, BaseEntity entity)
	{
		base.StateEnter(brain, entity);
		Vector3 pos = brain.Events.Memory.Position.Get(4);
		status = StateStatus.Running;
		if (!brain.Navigator.SetDestination(pos, BaseNavigator.NavigationSpeed.Normal))
		{
			status = StateStatus.Error;
		}
	}

	public override void StateLeave(BaseAIBrain brain, BaseEntity entity)
	{
		base.StateLeave(brain, entity);
		Stop();
	}

	private void Stop()
	{
		brain.Navigator.Stop();
	}

	public override StateStatus StateThink(float delta, BaseAIBrain brain, BaseEntity entity)
	{
		base.StateThink(delta, brain, entity);
		if (status == StateStatus.Error)
		{
			return status;
		}
		if (!brain.Navigator.Moving)
		{
			return StateStatus.Finished;
		}
		return StateStatus.Running;
	}
}
