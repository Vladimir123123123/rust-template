public class BaseSleepState : BasicAIState
{
	private StateStatus status = StateStatus.Error;

	public BaseSleepState()
		: base(AIState.Sleep)
	{
	}

	public override void StateEnter(BaseAIBrain brain, BaseEntity entity)
	{
		base.StateEnter(brain, entity);
		status = StateStatus.Error;
		if (entity is IAISleep iAISleep)
		{
			iAISleep.StartSleeping();
			status = StateStatus.Running;
		}
	}

	public override void StateLeave(BaseAIBrain brain, BaseEntity entity)
	{
		base.StateLeave(brain, entity);
		if (entity is IAISleep iAISleep)
		{
			iAISleep.StopSleeping();
		}
	}

	public override StateStatus StateThink(float delta, BaseAIBrain brain, BaseEntity entity)
	{
		base.StateThink(delta, brain, entity);
		return status;
	}
}
