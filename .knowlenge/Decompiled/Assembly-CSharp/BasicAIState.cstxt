using System;
using UnityEngine;

public class BasicAIState
{
	[NonSerialized]
	public BaseAIBrain brain;

	protected float _lastStateExitTime;

	public AIState StateType { get; private set; }

	public float TimeInState { get; private set; }

	public bool AgrresiveState { get; protected set; }

	public virtual void StateEnter(BaseAIBrain brain, BaseEntity entity)
	{
		TimeInState = 0f;
	}

	public virtual StateStatus StateThink(float delta, BaseAIBrain brain, BaseEntity entity)
	{
		TimeInState += delta;
		return StateStatus.Running;
	}

	public virtual void StateLeave(BaseAIBrain brain, BaseEntity entity)
	{
		TimeInState = 0f;
		_lastStateExitTime = Time.time;
	}

	public virtual bool CanInterrupt()
	{
		return true;
	}

	public virtual bool CanEnter()
	{
		return true;
	}

	public virtual bool CanLeave()
	{
		return CanInterrupt();
	}

	public virtual float GetWeight()
	{
		return 0f;
	}

	public float TimeSinceState()
	{
		return Time.time - _lastStateExitTime;
	}

	public BasicAIState(AIState state)
	{
		StateType = state;
	}

	public void Reset()
	{
		TimeInState = 0f;
	}

	public bool IsInState()
	{
		if (brain != null && brain.CurrentState != null)
		{
			return brain.CurrentState == this;
		}
		return false;
	}

	public virtual void DrawGizmos()
	{
	}
}
