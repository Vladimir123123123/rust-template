using ConVar;
using UnityEngine;

public class ChaseState : BasicAIState
{
	private float throwDelayTime;

	private bool useBeanCan;

	public ChaseState()
		: base(AIState.Chase)
	{
		base.AgrresiveState = true;
	}

	public override void StateEnter(BaseAIBrain brain, BaseEntity entity)
	{
		base.StateEnter(brain, entity);
		entity.SetFlag(BaseEntity.Flags.Reserved3, b: true);
		throwDelayTime = UnityEngine.Time.time + Random.Range(0.2f, 0.5f);
		useBeanCan = (float)Random.Range(0, 100) <= 20f;
		BaseEntity baseEntity = brain.Events.Memory.Entity.Get(brain.Events.CurrentInputMemorySlot);
		if (baseEntity != null)
		{
			brain.Navigator.SetDestination(baseEntity.transform.position, BaseNavigator.NavigationSpeed.Fast);
		}
	}

	public override void StateLeave(BaseAIBrain brain, BaseEntity entity)
	{
		base.StateLeave(brain, entity);
		entity.SetFlag(BaseEntity.Flags.Reserved3, b: false);
		Stop();
	}

	private void Stop()
	{
		brain.Navigator.Stop();
	}

	public override StateStatus StateThink(float delta, BaseAIBrain brain, BaseEntity entity)
	{
		base.StateThink(delta, brain, entity);
		BaseEntity baseEntity = brain.Events.Memory.Entity.Get(brain.Events.CurrentInputMemorySlot);
		if (baseEntity == null)
		{
			Stop();
			return StateStatus.Error;
		}
		if (useBeanCan && UnityEngine.Time.time >= throwDelayTime && AI.npc_use_thrown_weapons && Halloween.scarecrows_throw_beancans && UnityEngine.Time.time >= ScarecrowNPC.NextBeanCanAllowedTime && (brain.GetBrainBaseEntity() as ScarecrowNPC).TryUseThrownWeapon(baseEntity, 10f))
		{
			brain.Navigator.Stop();
			return StateStatus.Running;
		}
		if (!(brain.GetBrainBaseEntity() as BasePlayer).modelState.aiming)
		{
			if (!brain.Navigator.SetDestination(baseEntity.transform.position, BaseNavigator.NavigationSpeed.Fast, 0.25f))
			{
				return StateStatus.Error;
			}
			if (!brain.Navigator.Moving)
			{
				return StateStatus.Finished;
			}
			return StateStatus.Running;
		}
		return StateStatus.Running;
	}
}
