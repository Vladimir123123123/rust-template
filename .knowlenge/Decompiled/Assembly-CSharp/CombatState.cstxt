using UnityEngine;

public class CombatState : BasicAIState
{
	private float nextActionTime;

	private Vector3 combatStartPosition;

	public CombatState()
		: base(AIState.Combat)
	{
		base.AgrresiveState = true;
	}

	public override void StateEnter(BaseAIBrain brain, BaseEntity entity)
	{
		base.StateEnter(brain, entity);
		combatStartPosition = entity.transform.position;
		FaceTarget();
	}

	public override void StateLeave(BaseAIBrain brain, BaseEntity entity)
	{
		base.StateLeave(brain, entity);
		(entity as HumanNPC).SetDucked(flag: false);
		brain.Navigator.ClearFacingDirectionOverride();
	}

	public override StateStatus StateThink(float delta, BaseAIBrain brain, BaseEntity entity)
	{
		base.StateThink(delta, brain, entity);
		HumanNPC humanNPC = entity as HumanNPC;
		FaceTarget();
		if (Time.time > nextActionTime)
		{
			if (Random.Range(0, 3) == 1)
			{
				nextActionTime = Time.time + Random.Range(1f, 2f);
				humanNPC.SetDucked(flag: true);
				brain.Navigator.Stop();
			}
			else
			{
				nextActionTime = Time.time + Random.Range(2f, 3f);
				humanNPC.SetDucked(flag: false);
				brain.Navigator.SetDestination(brain.PathFinder.GetRandomPositionAround(combatStartPosition, 1f), BaseNavigator.NavigationSpeed.Normal);
			}
		}
		return StateStatus.Running;
	}

	private void FaceTarget()
	{
		BaseEntity baseEntity = brain.Events.Memory.Entity.Get(brain.Events.CurrentInputMemorySlot);
		if (baseEntity == null)
		{
			brain.Navigator.ClearFacingDirectionOverride();
		}
		else
		{
			brain.Navigator.SetFacingDirectionEntity(baseEntity);
		}
	}
}
