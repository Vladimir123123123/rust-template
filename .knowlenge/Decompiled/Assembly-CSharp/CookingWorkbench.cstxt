using Rust;
using UnityEngine;

public class CookingWorkbench : MixingTable
{
	public GameObjectRef SubOvenPrefab;

	public Transform SubOvenPosition;

	[Tooltip("The recipes that will set the OvenCooking flag (to play the oven effects)")]
	public ItemDefinition[] ovenCookingFlagItems;

	public const Flags OvenCooking = Flags.Reserved9;

	public const Flags MixingTea = Flags.Reserved10;

	public override void OnFlagsChanged(Flags old, Flags next)
	{
		base.OnFlagsChanged(old, next);
		if (!base.isServer || next.HasFlag(Flags.On) == old.HasFlag(Flags.On))
		{
			return;
		}
		string text = ((currentRecipe != null) ? currentRecipe.ProducedItem.shortname : currentProductionItem?.shortname);
		if (string.IsNullOrEmpty(text))
		{
			return;
		}
		bool flag = GetChildBbq().IsOn();
		ItemDefinition[] array = ovenCookingFlagItems;
		for (int i = 0; i < array.Length; i++)
		{
			if (array[i].shortname == text)
			{
				SetFlag(Flags.Reserved9, next.HasFlag(Flags.On) || flag);
				return;
			}
		}
		SetFlag(Flags.Reserved10, next.HasFlag(Flags.On));
	}

	public override void OnDeployed(BaseEntity parent, BasePlayer deployedBy, Item fromItem)
	{
		base.OnDeployed(parent, deployedBy, fromItem);
		SpawnOven();
	}

	private void SpawnOven()
	{
		if (!(GetChildBbq() != null) && SubOvenPrefab.isValid)
		{
			BaseEntity baseEntity = base.gameManager.CreateEntity(SubOvenPrefab.resourcePath, SubOvenPosition.position, SubOvenPosition.rotation);
			baseEntity.SetParent(this, worldPositionStays: true);
			baseEntity.transform.localPosition = SubOvenPosition.localPosition;
			baseEntity.transform.localRotation = SubOvenPosition.localRotation;
			baseEntity.Spawn();
		}
	}

	public override void ServerInit()
	{
		base.ServerInit();
		if (!Rust.Application.isLoadingSave)
		{
			SpawnOven();
		}
	}

	private CookingWorkbenchBbq GetChildBbq()
	{
		foreach (BaseEntity child in children)
		{
			if (child is CookingWorkbenchBbq result)
			{
				return result;
			}
		}
		return null;
	}

	public override bool CanPickup(BasePlayer player)
	{
		CookingWorkbenchBbq childBbq = GetChildBbq();
		if (childBbq != null && childBbq.inventory != null && childBbq.inventory.itemList.Count != 0)
		{
			return false;
		}
		return base.CanPickup(player);
	}

	internal override void DoServerDestroy()
	{
		CookingWorkbenchBbq childBbq = GetChildBbq();
		if (childBbq != null)
		{
			childBbq.DropItems();
			childBbq.Kill();
		}
		base.DoServerDestroy();
	}
}
