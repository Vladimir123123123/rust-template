using System;
using UnityEngine;

public struct Element
{
	private ByteQuadtree source;

	private int x;

	private int y;

	private int level;

	public bool IsLeaf => level == 0;

	public bool IsRoot => level == source.levels - 1;

	public int ByteMap => level;

	public uint Value => source.values[level][x, y];

	public Vector2 Coords => new Vector2(x, y);

	public int Depth => source.levels - level - 1;

	public Element Parent
	{
		get
		{
			if (IsRoot)
			{
				throw new Exception("Element is the root and therefore has no parent.");
			}
			return new Element(source, x / 2, y / 2, level + 1);
		}
	}

	public Element Child1
	{
		get
		{
			if (IsLeaf)
			{
				throw new Exception("Element is a leaf and therefore has no children.");
			}
			return new Element(source, x * 2, y * 2, level - 1);
		}
	}

	public Element Child2
	{
		get
		{
			if (IsLeaf)
			{
				throw new Exception("Element is a leaf and therefore has no children.");
			}
			return new Element(source, x * 2 + 1, y * 2, level - 1);
		}
	}

	public Element Child3
	{
		get
		{
			if (IsLeaf)
			{
				throw new Exception("Element is a leaf and therefore has no children.");
			}
			return new Element(source, x * 2, y * 2 + 1, level - 1);
		}
	}

	public Element Child4
	{
		get
		{
			if (IsLeaf)
			{
				throw new Exception("Element is a leaf and therefore has no children.");
			}
			return new Element(source, x * 2 + 1, y * 2 + 1, level - 1);
		}
	}

	public Element MaxChild
	{
		get
		{
			Element child = Child1;
			Element child2 = Child2;
			Element child3 = Child3;
			Element child4 = Child4;
			uint value = child.Value;
			uint value2 = child2.Value;
			uint value3 = child3.Value;
			uint value4 = child4.Value;
			if (value >= value2 && value >= value3 && value >= value4)
			{
				return child;
			}
			if (value2 >= value3 && value2 >= value4)
			{
				return child2;
			}
			if (value3 >= value4)
			{
				return child3;
			}
			return child4;
		}
	}

	public Element RandChild
	{
		get
		{
			Element child = Child1;
			Element child2 = Child2;
			Element child3 = Child3;
			Element child4 = Child4;
			uint value = child.Value;
			uint value2 = child2.Value;
			uint value3 = child3.Value;
			uint value4 = child4.Value;
			float num = value + value2 + value3 + value4;
			float value5 = UnityEngine.Random.value;
			if ((float)value / num >= value5)
			{
				return child;
			}
			if ((float)(value + value2) / num >= value5)
			{
				return child2;
			}
			if ((float)(value + value2 + value3) / num >= value5)
			{
				return child3;
			}
			return child4;
		}
	}

	public Element(ByteQuadtree source, int x, int y, int level)
	{
		this.source = source;
		this.x = x;
		this.y = y;
		this.level = level;
	}
}
