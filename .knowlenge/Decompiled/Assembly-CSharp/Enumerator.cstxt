using System;
using System.Collections;
using System.Collections.Generic;
using Facepunch;

public struct Enumerator : IEnumerator<MountPointInfo>, IEnumerator, IDisposable
{
	private enum State
	{
		Direct,
		EnterChild,
		EnumerateChild,
		Finished
	}

	private class Box : Pool.IPooled
	{
		public Enumerator Value;

		public void EnterPool()
		{
			Value = default(Enumerator);
		}

		public void LeavePool()
		{
			Value = default(Enumerator);
		}
	}

	private readonly BaseVehicle _vehicle;

	private State _state;

	private int _index;

	private int _childIndex;

	private Box _enumerator;

	public MountPointInfo Current { get; private set; }

	object IEnumerator.Current => Current;

	public Enumerator(BaseVehicle vehicle)
	{
		if (vehicle == null)
		{
			throw new ArgumentNullException("vehicle");
		}
		_vehicle = vehicle;
		_state = State.Direct;
		_index = -1;
		_childIndex = -1;
		_enumerator = null;
		Current = null;
	}

	public bool MoveNext()
	{
		Current = null;
		switch (_state)
		{
		case State.Direct:
			_index++;
			if (_index >= _vehicle.mountPoints.Count)
			{
				_state = State.EnterChild;
				goto case State.EnterChild;
			}
			Current = _vehicle.mountPoints[_index];
			return true;
		case State.EnterChild:
			do
			{
				_childIndex++;
			}
			while (_childIndex < _vehicle.childVehicles.Count && _vehicle.childVehicles[_childIndex] == null);
			if (_childIndex >= _vehicle.childVehicles.Count)
			{
				_state = State.Finished;
				return false;
			}
			_enumerator = Pool.Get<Box>();
			_enumerator.Value = _vehicle.childVehicles[_childIndex].allMountPoints.GetEnumerator();
			_state = State.EnumerateChild;
			goto case State.EnumerateChild;
		case State.EnumerateChild:
			if (_enumerator.Value.MoveNext())
			{
				Current = _enumerator.Value.Current;
				return true;
			}
			_enumerator.Value.Dispose();
			Pool.Free(ref _enumerator);
			_state = State.EnterChild;
			goto case State.EnterChild;
		case State.Finished:
			return false;
		default:
			throw new NotSupportedException();
		}
	}

	public void Dispose()
	{
		if (_enumerator != null)
		{
			_enumerator.Value.Dispose();
			Pool.Free(ref _enumerator);
		}
	}

	public void Reset()
	{
		throw new NotSupportedException();
	}
}
