using System;
using System.Collections.Generic;
using FIMSpace.Generating;
using UnityEngine;

public static class FGenerators
{
	public class DefinedRandom
	{
		private System.Random random;

		public int Seed { get; private set; }

		public DefinedRandom(int seed)
		{
			random = new System.Random(seed);
		}

		public void ReInitializeSeed(int seed)
		{
			random = new System.Random(seed);
		}

		public float GetRandom()
		{
			return FGenerators.GetRandom(random);
		}

		public float GetRandom(float from, float to)
		{
			return FGenerators.GetRandom(from, to, random);
		}

		public float GetRandomPlusMinus(float range)
		{
			return FGenerators.GetRandomPlusMinus(range, random);
		}

		public int GetRandom(int from, int to)
		{
			return FGenerators.GetRandom(from, to, random);
		}

		public int GetRandomInclusive(int from, int to)
		{
			return FGenerators.GetRandomInclusive(from, to, random);
		}

		public int GetRandom(FIMSpace.Generating.MinMax minMax)
		{
			return FGenerators.GetRandom(minMax, random);
		}

		public bool GetRandomFlip()
		{
			return FGenerators.GetRandomFlip(random);
		}
	}

	private static System.Random random = new System.Random();

	public static string lastPath = "";

	private static float _editorUiScaling;

	public static readonly Color Color_Remove = new Color(1f, 0.825f, 0.825f, 1f);

	public static System.Random GlobalRandomInstance => random;

	public static int LatestSeed { get; private set; }

	public static string GetLastPath => lastPath;

	public static float EditorUIScale => GetEditorUIScale();

	public static GameObject InstantiateObject(GameObject obj)
	{
		return UnityEngine.Object.Instantiate(obj);
	}

	public static void ClearGenerated<T>(List<T> generated) where T : UnityEngine.Object
	{
		if (generated == null)
		{
			return;
		}
		for (int i = 0; i < generated.Count; i++)
		{
			if (!(generated[i] == null))
			{
				if (generated[i] is Component)
				{
					DestroyObject(generated[i] as Component);
				}
				else
				{
					DestroyObject(generated[i]);
				}
			}
		}
		generated.Clear();
	}

	public static bool CheckIfIsNull(object o)
	{
		if (o == null)
		{
			return true;
		}
		return false;
	}

	public static bool Exists(object o)
	{
		return CheckIfExist_NOTNULL(o);
	}

	public static bool NotNull(object o)
	{
		return CheckIfExist_NOTNULL(o);
	}

	public static bool IsNull(object o)
	{
		return CheckIfIsNull(o);
	}

	public static bool CheckIfExist_NOTNULL(object o)
	{
		return !CheckIfIsNull(o);
	}

	public static bool IsChildOf(Transform child, Transform rootParent)
	{
		Transform transform = child;
		while (transform != null && transform != rootParent)
		{
			transform = transform.parent;
		}
		if (transform == null)
		{
			return false;
		}
		return true;
	}

	public static void DestroyObject(UnityEngine.Object obj, bool allowDestroyAssets = false)
	{
		if (!(obj == null))
		{
			UnityEngine.Object.Destroy(obj);
		}
	}

	public static bool RefIsNull(object varMat)
	{
		if (CheckIfIsNull(varMat))
		{
			return true;
		}
		if (varMat == null)
		{
			return true;
		}
		if (varMat == null)
		{
			return true;
		}
		if (varMat.Equals(null))
		{
			return true;
		}
		return false;
	}

	public static void SetSeed(int seed)
	{
		random = new System.Random(seed);
		LatestSeed = seed;
	}

	public static bool GetRandomFlip()
	{
		return GetRandomFlip(random);
	}

	public static bool GetRandomFlip(System.Random rand)
	{
		return GetRandom(0, 2, rand) == 1;
	}

	public static float GetRandom()
	{
		return GetRandom(random);
	}

	public static int GetRandomInclusive(int from, int to)
	{
		return GetRandomInclusive(from, to, random);
	}

	public static int GetRandomInclusive(int from, int to, System.Random rand)
	{
		return rand.Next(from, to + 1);
	}

	public static float GetRandom(System.Random rand)
	{
		return (float)rand.NextDouble();
	}

	public static Vector2 SwampToBeRising(Vector2 minMax)
	{
		if (minMax.y < minMax.x)
		{
			float x = minMax.x;
			minMax.x = minMax.y;
			minMax.y = x;
		}
		return minMax;
	}

	public static float GetRandomSwap(float from, float to, System.Random rand)
	{
		if (from > to)
		{
			float num = from;
			from = to;
			to = num;
		}
		return GetRandom(from, to, rand);
	}

	public static float GetRandomSwap(float from, float to)
	{
		return GetRandomSwap(from, to, random);
	}

	public static float GetRandomPlusMinus(float plusminus)
	{
		return GetRandomPlusMinus(plusminus, random);
	}

	public static float GetRandomPlusMinus(float plusminus, System.Random rand)
	{
		return GetRandom(0f - plusminus, plusminus, rand);
	}

	public static float GetRandom(float from, float to)
	{
		return GetRandom(from, to, random);
	}

	public static float GetRandom(float from, float to, System.Random rand)
	{
		return from + (float)rand.NextDouble() * (to - from);
	}

	public static Vector3 GetRandom(Vector3 plusMinusRangesPerAxis)
	{
		return GetRandom(plusMinusRangesPerAxis, random);
	}

	public static Vector3 GetRandom(Vector3 plusMinusRangesPerAxis, System.Random rand)
	{
		Vector3 result = plusMinusRangesPerAxis;
		result.x = GetRandom(0f - result.x, result.x, rand);
		result.y = GetRandom(0f - result.y, result.y, rand);
		result.z = GetRandom(0f - result.z, result.z, rand);
		return result;
	}

	public static int GetRandom(int from, int to)
	{
		return GetRandom(from, to, random);
	}

	public static int GetRandom(int from, int to, System.Random rand)
	{
		return rand.Next(from, to);
	}

	public static int GetRandom(FIMSpace.Generating.MinMax minMax)
	{
		return GetRandom(minMax, random);
	}

	public static int GetRandom(FIMSpace.Generating.MinMax minMax, System.Random rand)
	{
		return (int)((float)minMax.Min + (float)rand.NextDouble() * (float)(minMax.Max + 1 - minMax.Min));
	}

	public static void GetIncrementalTo<T>(List<T> list) where T : UnityEngine.Object
	{
	}

	public static void GetSimilarTo<T>(List<T> list) where T : UnityEngine.Object
	{
	}

	public static int IndexOfFirstNumber(string name)
	{
		for (int i = 0; i < name.Length; i++)
		{
			if (int.TryParse(name[i].ToString(), out var _))
			{
				return i;
			}
		}
		return -1;
	}

	public static List<T> CopyList<T>(List<T> cellsInstructions)
	{
		List<T> list = new List<T>();
		for (int i = 0; i < cellsInstructions.Count; i++)
		{
			list.Add(cellsInstructions[i]);
		}
		return list;
	}

	public static bool IsRightMouseButton()
	{
		if (Event.current == null)
		{
			return false;
		}
		if (Event.current.type == EventType.Used && Event.current.button == 1)
		{
			return true;
		}
		return false;
	}

	public static float InspectorViewWidth()
	{
		return 0f;
	}

	public static Rect GUILastRect()
	{
		return default(Rect);
	}

	public static void ResetCoords(this Transform t)
	{
		t.localPosition = Vector3.zero;
		t.localRotation = Quaternion.identity;
		t.localScale = Vector3.one;
	}

	public static Vector2 GetEventMousePosition()
	{
		return Vector2.zero;
	}

	public static ScriptableObject GenerateScriptable(ScriptableObject reference, string exampleFilename = "", string playerPrefId = "LastFGenSaveDir")
	{
		return reference;
	}

	public static void DrawScriptableModificatorList<T>(List<T> toDraw, GUIStyle style, string title, ref bool foldout, bool newButton = false, bool moveButtons = false, UnityEngine.Object toDirty = null, string first = "[Base]", string defaultFilename = "New Scriptable File") where T : ScriptableObject
	{
	}

	public static void AddScriptableToSimple(ScriptableObject parent, ScriptableObject toAdd, bool reload = true)
	{
	}

	public static bool AssetContainsAsset(UnityEngine.Object subAsset, UnityEngine.Object parentAsset)
	{
		return false;
	}

	public static void AddScriptableTo(ScriptableObject toAdd, UnityEngine.Object parentAsset, bool checkIfAlreadyContains = true, bool reload = true)
	{
	}

	public static bool IsAssetSaved(UnityEngine.Object asset)
	{
		return false;
	}

	public static void SwapElements<T>(List<T> list, int index1, int index2, bool loop = false)
	{
		if (index1 == index2)
		{
			return;
		}
		if (loop)
		{
			if (index1 >= list.Count)
			{
				index1 -= list.Count;
			}
			if (index1 < 0)
			{
				index1 += list.Count;
			}
			if (index2 >= list.Count)
			{
				index2 -= list.Count;
			}
			if (index2 < 0)
			{
				index2 += list.Count;
			}
		}
		T value = list[index1];
		list[index1] = list[index2];
		list[index2] = value;
	}

	public static void SwapElements<T>(T[] list, int index1, int index2)
	{
		if (index1 != index2)
		{
			T val = list[index1];
			list[index1] = list[index2];
			list[index2] = val;
		}
	}

	public static void CheckForNulls<T>(List<T> classes)
	{
		for (int num = classes.Count - 1; num >= 0; num--)
		{
			if (classes[num] == null)
			{
				classes.RemoveAt(num);
			}
		}
	}

	public static bool IndexInListRange<T>(List<T> list, int index)
	{
		if (list == null)
		{
			return false;
		}
		if (index < 0)
		{
			return false;
		}
		if (index >= list.Count)
		{
			return false;
		}
		return true;
	}

	public static T GetListElementOrNull<T>(this List<T> list, int index) where T : class
	{
		if (list == null)
		{
			return null;
		}
		if (index < 0)
		{
			return null;
		}
		if (index >= list.Count)
		{
			return null;
		}
		if (CheckIfIsNull(list[index]))
		{
			return null;
		}
		return list[index];
	}

	public static void AdjustCount<T>(List<T> list, int targetCount, bool addNulls = false) where T : class, new()
	{
		if (list.Count == targetCount)
		{
			return;
		}
		if (list.Count < targetCount)
		{
			if (addNulls)
			{
				while (list.Count < targetCount)
				{
					list.Add(null);
				}
			}
			else
			{
				while (list.Count < targetCount)
				{
					list.Add(new T());
				}
			}
		}
		else
		{
			while (list.Count > targetCount)
			{
				list.RemoveAt(list.Count - 1);
			}
		}
	}

	public static void Shuffle<T>(this IList<T> list)
	{
		Shuffle(list, random);
	}

	public static void Shuffle<T>(this IList<T> list, System.Random random)
	{
		int num = list.Count;
		while (num > 1)
		{
			num--;
			int index = random.Next(num + 1);
			T value = list[index];
			list[index] = list[num];
			list[num] = value;
		}
	}

	public static float GetEditorUIScale()
	{
		return 1f;
	}
}
