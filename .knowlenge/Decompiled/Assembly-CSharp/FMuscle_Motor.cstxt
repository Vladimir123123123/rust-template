using UnityEngine;

public abstract class FMuscle_Motor
{
	protected float proceduralValue;

	protected float dampingAcceleration;

	protected float dynamicAcceleration;

	protected float accelerationSign;

	public float OutValue { get; protected set; }

	public bool IsWorking()
	{
		return dynamicAcceleration != 0f;
	}

	public void Push(float value)
	{
		dynamicAcceleration += value;
	}

	public void Initialize(float initValue)
	{
		OutValue = initValue;
		proceduralValue = initValue;
		dampingAcceleration = 0f;
		dynamicAcceleration = 0f;
		accelerationSign = 0f;
	}

	protected abstract float GetDiff(float current, float desired);

	public void Update(float delta, float current, float desired, float acceleration, float accelerationLimit, float damping, float brakePower)
	{
		float diff = GetDiff(current, desired);
		accelerationSign = Mathf.Sign(diff);
		dampingAcceleration = diff;
		dampingAcceleration = Mathf.Clamp(dampingAcceleration, 0f - damping, damping) * damping;
		float num = dampingAcceleration * delta;
		if (diff > 0f)
		{
			if (num > diff)
			{
				num = diff;
			}
		}
		else if (num < diff)
		{
			num = diff;
		}
		proceduralValue += num;
		float num2 = 1f;
		if (Mathf.Sign(dynamicAcceleration) != accelerationSign)
		{
			num2 = 1f + Mathf.Abs(diff) / ((1f - brakePower) * 10f + 8f);
		}
		float num3 = diff;
		if (num3 < 0f)
		{
			num3 = 0f - num3;
		}
		float num4 = 5f + (1f - brakePower) * 85f;
		if (num3 < num4)
		{
			num2 *= Mathf.Min(1f, num3 / num4);
		}
		if (num2 < 0f)
		{
			num2 = 0f - num2;
		}
		if (delta > 0.04f)
		{
			delta = 0.04f;
		}
		dynamicAcceleration += acceleration * accelerationSign * delta * num2;
		dynamicAcceleration = Mathf.Clamp(dynamicAcceleration, 0f - accelerationLimit, accelerationLimit);
		if (dynamicAcceleration < 5E-06f && dynamicAcceleration > -5E-06f)
		{
			dynamicAcceleration = 0f;
		}
		proceduralValue += dynamicAcceleration * delta;
		OutValue = proceduralValue;
	}

	public void OverrideValue(float newValue)
	{
		proceduralValue = newValue;
	}

	public void OffsetValue(float off)
	{
		proceduralValue += off;
	}
}
