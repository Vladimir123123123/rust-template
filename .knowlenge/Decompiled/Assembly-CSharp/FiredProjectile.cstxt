using System.Collections.Generic;
using Facepunch;
using UnityEngine;

public class FiredProjectile : Pool.IPooled
{
	public ItemDefinition itemDef;

	public ItemModProjectile itemMod;

	public Projectile projectilePrefab;

	public float firedTime;

	public float travelTime;

	public float partialTime;

	public AttackEntity weaponSource;

	public AttackEntity weaponPrefab;

	public Projectile.Modifier projectileModifier;

	public Item pickupItem;

	public float integrity;

	public float trajectoryMismatch;

	public float startPointMismatch;

	public float endPointMismatch;

	public float entityDistance;

	public Vector3 position;

	public Vector3 initialPositionOffset;

	public Vector3 positionOffset;

	public Vector3 velocity;

	public Vector3 initialPosition;

	public Vector3 initialVelocity;

	public Vector3 inheritedVelocity;

	public int protection;

	public int ricochets;

	public int hits;

	public BaseEntity lastEntityHit;

	public float desyncLifeTime;

	public int id;

	public BasePlayer attacker;

	public List<FiredProjectileUpdate> updates = new List<FiredProjectileUpdate>();

	public List<Vector3> simulatedPositions = new List<Vector3>();

	public void EnterPool()
	{
		itemDef = null;
		itemMod = null;
		projectilePrefab = null;
		firedTime = 0f;
		travelTime = 0f;
		partialTime = 0f;
		weaponSource = null;
		weaponPrefab = null;
		projectileModifier = default(Projectile.Modifier);
		pickupItem = null;
		integrity = 0f;
		trajectoryMismatch = 0f;
		startPointMismatch = 0f;
		endPointMismatch = 0f;
		entityDistance = 0f;
		position = default(Vector3);
		velocity = default(Vector3);
		initialPosition = default(Vector3);
		initialVelocity = default(Vector3);
		inheritedVelocity = default(Vector3);
		protection = 0;
		ricochets = 0;
		hits = 0;
		lastEntityHit = null;
		desyncLifeTime = 0f;
		id = 0;
		attacker = null;
		updates.Clear();
		simulatedPositions.Clear();
	}

	public void LeavePool()
	{
	}
}
