using Unity.Collections;
using Unity.Jobs;
using Unity.Mathematics;
using UnityEngine;

public struct FishCollisionProcessJob : IJob
{
	public int castCount;

	public NativeArray<FishData> fishDataArray;

	[ReadOnly]
	public NativeArray<RaycastHit> castResults;

	[ReadOnly]
	public NativeArray<int> fishCastIndices;

	[ReadOnly]
	public NativeArray<FishRenderData> fishRenderDataArray;

	public void Execute()
	{
		for (int i = 0; i < castCount; i++)
		{
			if (castResults[i].normal != default(Vector3))
			{
				int index = fishCastIndices[i];
				FishData value = fishDataArray[index];
				if (value.startleTime <= 0f)
				{
					float2 xz = fishRenderDataArray[index].position.xz;
					float2 @float = math.normalize(new float2(castResults[i].point.x, castResults[i].point.z) - xz);
					float2 float2 = xz - @float * 8f;
					value.destinationX = float2.x;
					value.destinationZ = float2.y;
					value.startleTime = 2f;
					value.updateTime = 6f;
					fishDataArray[index] = value;
				}
			}
		}
	}
}
