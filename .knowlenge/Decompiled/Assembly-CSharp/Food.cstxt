#define UNITY_ASSERTIONS
using System;
using System.Collections.Generic;
using ConVar;
using Network;
using UnityEngine;
using UnityEngine.Assertions;

public class Food : BaseMelee
{
	public FoodViewModel.FoodVisualConfig VisualConfig;

	public List<GameObject> VisualRoots;

	public override bool OnRpcMessage(BasePlayer player, uint rpc, Message msg)
	{
		using (TimeWarning.New("Food.OnRpcMessage"))
		{
			if (rpc == 1921839088 && player != null)
			{
				Assert.IsTrue(player.isServer, "SV_RPC Message is using a clientside player!");
				if (Global.developer > 2)
				{
					Debug.Log("SV_RPCMessage: " + player?.ToString() + " - Consume ");
				}
				using (TimeWarning.New("Consume"))
				{
					using (TimeWarning.New("Conditions"))
					{
						if (!RPC_Server.CallsPerSecond.Test(1921839088u, "Consume", this, player, 5uL))
						{
							return true;
						}
						if (!RPC_Server.FromOwner.Test(1921839088u, "Consume", this, player, includeMounted: false))
						{
							return true;
						}
					}
					try
					{
						using (TimeWarning.New("Call"))
						{
							Consume();
						}
					}
					catch (Exception exception)
					{
						Debug.LogException(exception);
						player.Kick("RPC Error in Consume");
					}
				}
				return true;
			}
		}
		return base.OnRpcMessage(player, rpc, msg);
	}

	[RPC_Server.FromOwner(false)]
	[RPC_Server.CallsPerSecond(5uL)]
	[RPC_Server]
	public void Consume()
	{
		if (base.isServer)
		{
			if (HasAttackCooldown())
			{
				return;
			}
			StartAttackCooldown(repeatDelay / 2f);
		}
		Item item = GetItem();
		if (item == null)
		{
			return;
		}
		ItemModConsume component = item.info.GetComponent<ItemModConsume>();
		if (!(component == null))
		{
			BasePlayer ownerPlayer = GetOwnerPlayer();
			if (!(ownerPlayer == null))
			{
				component.DoAction(item, ownerPlayer);
			}
		}
	}
}
