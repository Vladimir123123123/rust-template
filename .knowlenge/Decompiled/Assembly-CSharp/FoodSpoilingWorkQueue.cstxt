using System.Collections.Generic;
using UnityEngine;

public class FoodSpoilingWorkQueue : PersistentObjectWorkQueue<Item>
{
	private Dictionary<Item, TimeSince> lastUpdated = new Dictionary<Item, TimeSince>();

	protected override void RunJob(Item foodItem)
	{
		float timeToApply = 0f;
		if (lastUpdated.TryGetValue(foodItem, out var value))
		{
			timeToApply = value;
			lastUpdated[foodItem] = 0f;
		}
		else
		{
			lastUpdated.Add(foodItem, 0f);
		}
		DeductTimeFromFoodItem(foodItem, timeToApply, setDirty: false);
	}

	public static void DeductTimeFromFoodItem(Item foodItem, float timeToApply, bool setDirty)
	{
		if (foodItem.instanceData != null)
		{
			float dataFloat = foodItem.instanceData.dataFloat;
			float num = 1f;
			if (foodItem.parent != null && foodItem.parent.entityOwner != null && foodItem.parent.entityOwner.TryGetComponent<IFoodSpoilModifier>(out var component))
			{
				num = component.GetSpoilMultiplier(foodItem);
			}
			bool flag = num != 1f;
			if (foodItem.HasFlag(Item.Flag.Refrigerated) != flag)
			{
				foodItem.SetFlag(Item.Flag.Refrigerated, flag);
				foodItem.MarkDirty();
				if (foodItem.GetEntityOwner() != null)
				{
					foodItem.GetEntityOwner().SendNetworkUpdate();
				}
			}
			foodItem.instanceData.dataFloat -= timeToApply * num;
			if (foodItem.instanceData.dataFloat <= 0f && dataFloat > 0f)
			{
				foodItem.Remove();
				Item item = ItemManager.Create(foodItem.info.GetComponent<ItemModFoodSpoiling>().SpoilItem, 1, 0uL);
				if (foodItem.parent != null)
				{
					foodItem.parent.GiveItem(item);
					return;
				}
				BaseEntity worldEntity = foodItem.GetWorldEntity();
				item.Drop(worldEntity.transform.position, Vector3.zero, worldEntity.transform.rotation);
			}
		}
		else if (setDirty)
		{
			foodItem.MarkDirty();
			if (foodItem.GetEntityOwner() != null)
			{
				foodItem.GetEntityOwner().SendNetworkUpdate();
			}
		}
	}
}
