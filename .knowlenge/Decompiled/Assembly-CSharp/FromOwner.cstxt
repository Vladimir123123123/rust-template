using Oxide.Core;

public class FromOwner : Conditional
{
	private bool includeMounted;

	public FromOwner(bool includeMounted = false)
	{
		this.includeMounted = includeMounted;
	}

	public override string GetArgs()
	{
		return includeMounted.ToString().ToLower();
	}

	public static bool Test(uint id, string debugName, BaseEntity ent, BasePlayer player, bool includeMounted)
	{
		if (ent == null || player == null)
		{
			return false;
		}
		if (ent.net == null || player.net == null)
		{
			return false;
		}
		object obj = Interface.CallHook("OnEntityFromOwnerCheck", ent, player, id, debugName, includeMounted);
		if (obj is bool)
		{
			return (bool)obj;
		}
		if (ent.net.ID == player.net.ID)
		{
			return true;
		}
		if (ent.parentEntity.uid != player.net.ID)
		{
			BaseEntity parentEntity = ent.GetParentEntity();
			if (parentEntity != null && parentEntity.parentEntity.uid == player.net.ID)
			{
				return true;
			}
			if (includeMounted)
			{
				BaseMountable baseMountable = ent as BaseMountable;
				if (baseMountable == null)
				{
					baseMountable = ent.parentEntity.Get(serverside: true) as BaseMountable;
				}
				if (baseMountable != null && baseMountable.GetMounted()?.net?.ID == player.net.ID)
				{
					return true;
				}
			}
			return false;
		}
		return true;
	}
}
