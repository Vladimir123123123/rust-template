using System;
using System.Collections.Generic;
using ConVar;
using Facepunch;
using Unity.Collections;
using UnityEngine;

public static class GamePhysics
{
	public enum Realm
	{
		Client,
		Server
	}

	public const int BufferLength = 32768;

	private static RaycastHit[] hitBuffer = new RaycastHit[32768];

	private static RaycastHit[] hitBufferB = new RaycastHit[32768];

	private static Collider[] colBuffer = new Collider[32768];

	public static bool CheckSphere(Vector3 position, float radius, int layerMask = -5, QueryTriggerInteraction triggerInteraction = QueryTriggerInteraction.UseGlobal)
	{
		layerMask = HandleIgnoreCollision(position, layerMask);
		return UnityEngine.Physics.CheckSphere(position, radius, layerMask, triggerInteraction);
	}

	public static bool CheckCapsule(Vector3 start, Vector3 end, float radius, int layerMask = -5, QueryTriggerInteraction triggerInteraction = QueryTriggerInteraction.UseGlobal)
	{
		layerMask = HandleIgnoreCollision((start + end) * 0.5f, layerMask);
		return UnityEngine.Physics.CheckCapsule(start, end, radius, layerMask, triggerInteraction);
	}

	public static bool CheckOBB(OBB obb, int layerMask = -5, QueryTriggerInteraction triggerInteraction = QueryTriggerInteraction.UseGlobal)
	{
		layerMask = HandleIgnoreCollision(obb.position, layerMask);
		return UnityEngine.Physics.CheckBox(obb.position, obb.extents, obb.rotation, layerMask, triggerInteraction);
	}

	public static bool CheckOBBAndEntity(OBB obb, int layerMask = -5, QueryTriggerInteraction triggerInteraction = QueryTriggerInteraction.UseGlobal, BaseEntity ignoreEntity = null)
	{
		layerMask = HandleIgnoreCollision(obb.position, layerMask);
		int num = UnityEngine.Physics.OverlapBoxNonAlloc(obb.position, obb.extents, colBuffer, obb.rotation, layerMask, triggerInteraction);
		for (int i = 0; i < num; i++)
		{
			BaseEntity baseEntity = GameObjectEx.ToBaseEntity(colBuffer[i]);
			if (!(baseEntity != null) || !(ignoreEntity != null) || (baseEntity.isServer == ignoreEntity.isServer && !(baseEntity == ignoreEntity)))
			{
				return true;
			}
		}
		return false;
	}

	public static bool CheckBounds(Bounds bounds, int layerMask = -5, QueryTriggerInteraction triggerInteraction = QueryTriggerInteraction.UseGlobal)
	{
		layerMask = HandleIgnoreCollision(bounds.center, layerMask);
		return UnityEngine.Physics.CheckBox(bounds.center, bounds.extents, Quaternion.identity, layerMask, triggerInteraction);
	}

	public static bool CheckInsideNonConvexMesh(Vector3 point, int layerMask = -5)
	{
		bool queriesHitBackfaces = UnityEngine.Physics.queriesHitBackfaces;
		UnityEngine.Physics.queriesHitBackfaces = true;
		int num = UnityEngine.Physics.RaycastNonAlloc(point, Vector3.up, hitBuffer, 100f, layerMask);
		int num2 = UnityEngine.Physics.RaycastNonAlloc(point, -Vector3.up, hitBufferB, 100f, layerMask);
		if (num >= hitBuffer.Length)
		{
			Debug.LogWarning("CheckInsideNonConvexMesh query is exceeding hitBuffer length.");
			return false;
		}
		if (num2 > hitBufferB.Length)
		{
			Debug.LogWarning("CheckInsideNonConvexMesh query is exceeding hitBufferB length.");
			return false;
		}
		for (int i = 0; i < num; i++)
		{
			for (int j = 0; j < num2; j++)
			{
				if (hitBuffer[i].collider == hitBufferB[j].collider)
				{
					UnityEngine.Physics.queriesHitBackfaces = queriesHitBackfaces;
					return true;
				}
			}
		}
		UnityEngine.Physics.queriesHitBackfaces = queriesHitBackfaces;
		return false;
	}

	public static bool CheckInsideAnyCollider(Vector3 point, int layerMask = -5)
	{
		if (UnityEngine.Physics.CheckSphere(point, 0f, layerMask))
		{
			return true;
		}
		if (CheckInsideNonConvexMesh(point, layerMask))
		{
			return true;
		}
		if (TerrainMeta.HeightMap != null && TerrainMeta.HeightMap.GetHeight(point) > point.y)
		{
			return true;
		}
		return false;
	}

	public static void OverlapSphere(Vector3 position, float radius, List<Collider> list, int layerMask = -5, QueryTriggerInteraction triggerInteraction = QueryTriggerInteraction.Ignore)
	{
		layerMask = HandleIgnoreCollision(position, layerMask);
		int count = UnityEngine.Physics.OverlapSphereNonAlloc(position, radius, colBuffer, layerMask, triggerInteraction);
		BufferToList(colBuffer, count, list);
	}

	public static void OverlapSphere(NativeArray<RaycastHit> hits, int maxResPerCast, ReadOnlySpan<Vector3> positions, ReadOnlySpan<float> radii, int layerMask, QueryTriggerInteraction triggerInteraction = QueryTriggerInteraction.Ignore)
	{
		NativeArray<SpherecastCommand> commands = new NativeArray<SpherecastCommand>(positions.Length, Allocator.TempJob, NativeArrayOptions.UninitializedMemory);
		QueryParameters queryParameters = default(QueryParameters);
		queryParameters.hitBackfaces = false;
		queryParameters.hitMultipleFaces = false;
		queryParameters.hitTriggers = triggerInteraction;
		queryParameters.layerMask = layerMask;
		for (int i = 0; i < positions.Length; i++)
		{
			SpherecastCommand value = default(SpherecastCommand);
			value.origin = positions[i];
			value.queryParameters = queryParameters;
			value.radius = radii[i];
			value.direction = Vector3.zero;
			value.distance = 0f;
			value.physicsScene = UnityEngine.Physics.defaultPhysicsScene;
			commands[i] = value;
		}
		SpherecastCommand.ScheduleBatch(commands, hits, 1, maxResPerCast).Complete();
		commands.Dispose();
	}

	public static void CapsuleSweep(Vector3 position0, Vector3 position1, float radius, Vector3 direction, float distance, List<RaycastHit> list, int layerMask = -5, QueryTriggerInteraction triggerInteraction = QueryTriggerInteraction.Ignore)
	{
		layerMask = HandleIgnoreCollision(position0, layerMask);
		layerMask = HandleIgnoreCollision(position1, layerMask);
		HitBufferToList(UnityEngine.Physics.CapsuleCastNonAlloc(position0, position1, radius, direction, hitBuffer, distance, layerMask, triggerInteraction), list);
	}

	public static void OverlapCapsule(Vector3 point0, Vector3 point1, float radius, List<Collider> list, int layerMask = -5, QueryTriggerInteraction triggerInteraction = QueryTriggerInteraction.Ignore)
	{
		layerMask = HandleIgnoreCollision(point0, layerMask);
		layerMask = HandleIgnoreCollision(point1, layerMask);
		int count = UnityEngine.Physics.OverlapCapsuleNonAlloc(point0, point1, radius, colBuffer, layerMask, triggerInteraction);
		BufferToList(colBuffer, count, list);
	}

	public static void OverlapCapsule(NativeArray<ColliderHit> hits, int maxResPerCast, ReadOnlySpan<Vector3> starts, ReadOnlySpan<Vector3> ends, ReadOnlySpan<float> radii, int layerMask, QueryTriggerInteraction triggerInteraction = QueryTriggerInteraction.Ignore)
	{
		NativeArray<OverlapCapsuleCommand> commands = new NativeArray<OverlapCapsuleCommand>(starts.Length, Allocator.TempJob, NativeArrayOptions.UninitializedMemory);
		QueryParameters queryParameters = default(QueryParameters);
		queryParameters.hitBackfaces = false;
		queryParameters.hitMultipleFaces = false;
		queryParameters.hitTriggers = triggerInteraction;
		queryParameters.layerMask = layerMask;
		for (int i = 0; i < starts.Length; i++)
		{
			commands[i] = new OverlapCapsuleCommand(starts[i], ends[i], radii[i], queryParameters);
		}
		OverlapCapsuleCommand.ScheduleBatch(commands, hits, 1, maxResPerCast).Complete();
		commands.Dispose();
	}

	public static void OverlapOBB(OBB obb, List<Collider> list, int layerMask = -5, QueryTriggerInteraction triggerInteraction = QueryTriggerInteraction.Ignore)
	{
		layerMask = HandleIgnoreCollision(obb.position, layerMask);
		int count = UnityEngine.Physics.OverlapBoxNonAlloc(obb.position, obb.extents, colBuffer, obb.rotation, layerMask, triggerInteraction);
		BufferToList(colBuffer, count, list);
	}

	public static void OverlapBounds(Bounds bounds, List<Collider> list, int layerMask = -5, QueryTriggerInteraction triggerInteraction = QueryTriggerInteraction.Ignore)
	{
		layerMask = HandleIgnoreCollision(bounds.center, layerMask);
		int count = UnityEngine.Physics.OverlapBoxNonAlloc(bounds.center, bounds.extents, colBuffer, Quaternion.identity, layerMask, triggerInteraction);
		BufferToList(colBuffer, count, list);
	}

	private static void BufferToList(Collider[] buffer, int count, List<Collider> list)
	{
		for (int i = 0; i < count; i++)
		{
			list.Add(buffer[i]);
			buffer[i] = null;
		}
	}

	public static bool CheckSphere<T>(Vector3 pos, float radius, int layerMask = -5, QueryTriggerInteraction triggerInteraction = QueryTriggerInteraction.Ignore) where T : Component
	{
		List<Collider> obj = Facepunch.Pool.Get<List<Collider>>();
		OverlapSphere(pos, radius, obj, layerMask, triggerInteraction);
		bool result = CheckComponent<T>(obj);
		Facepunch.Pool.FreeUnmanaged(ref obj);
		return result;
	}

	public static void CheckSphere<T>(Span<bool> results, ReadOnlySpan<Vector3> positions, ReadOnlySpan<float> radii, int layerMask, QueryTriggerInteraction triggerInteraction = QueryTriggerInteraction.Ignore) where T : Component
	{
		NativeArray<RaycastHit> hits = new NativeArray<RaycastHit>(positions.Length * 16, Allocator.TempJob, NativeArrayOptions.UninitializedMemory);
		OverlapSphere(hits, 16, positions, radii, layerMask, triggerInteraction);
		for (int i = 0; i < positions.Length; i++)
		{
			bool flag = false;
			for (int j = 0; j < 16 && hits[j].colliderInstanceID != 0; j++)
			{
				if (hits[j].collider.TryGetComponent<T>(out var _))
				{
					flag = true;
					break;
				}
			}
			results[i] = flag;
		}
		hits.Dispose();
	}

	public static bool CheckCapsule<T>(Vector3 start, Vector3 end, float radius, int layerMask = -5, QueryTriggerInteraction triggerInteraction = QueryTriggerInteraction.Ignore) where T : Component
	{
		List<Collider> obj = Facepunch.Pool.Get<List<Collider>>();
		OverlapCapsule(start, end, radius, obj, layerMask, triggerInteraction);
		bool result = CheckComponent<T>(obj);
		Facepunch.Pool.FreeUnmanaged(ref obj);
		return result;
	}

	public static void CheckCapsule<T>(Span<bool> results, ReadOnlySpan<Vector3> starts, ReadOnlySpan<Vector3> ends, ReadOnlySpan<float> radii, int layerMask, QueryTriggerInteraction triggerInteraction = QueryTriggerInteraction.Ignore) where T : Component
	{
		NativeArray<ColliderHit> hits = new NativeArray<ColliderHit>(starts.Length * 16, Allocator.TempJob, NativeArrayOptions.UninitializedMemory);
		OverlapCapsule(hits, 16, starts, ends, radii, layerMask, triggerInteraction);
		for (int i = 0; i < starts.Length; i++)
		{
			bool flag = false;
			for (int j = 0; j < 16 && hits[j].instanceID != 0; j++)
			{
				if (hits[j].collider.TryGetComponent<T>(out var _))
				{
					flag = true;
					break;
				}
			}
			results[i] = flag;
		}
		hits.Dispose();
	}

	public static bool CheckOBB<T>(OBB obb, int layerMask = -5, QueryTriggerInteraction triggerInteraction = QueryTriggerInteraction.Ignore) where T : Component
	{
		List<Collider> obj = Facepunch.Pool.Get<List<Collider>>();
		OverlapOBB(obb, obj, layerMask, triggerInteraction);
		bool result = CheckComponent<T>(obj);
		Facepunch.Pool.FreeUnmanaged(ref obj);
		return result;
	}

	public static bool CheckBounds<T>(Bounds bounds, int layerMask = -5, QueryTriggerInteraction triggerInteraction = QueryTriggerInteraction.Ignore) where T : Component
	{
		List<Collider> obj = Facepunch.Pool.Get<List<Collider>>();
		OverlapBounds(bounds, obj, layerMask, triggerInteraction);
		bool result = CheckComponent<T>(obj);
		Facepunch.Pool.FreeUnmanaged(ref obj);
		return result;
	}

	private static bool CheckComponent<T>(List<Collider> list)
	{
		for (int i = 0; i < list.Count; i++)
		{
			if (list[i].gameObject.TryGetComponent<T>(out var _))
			{
				return true;
			}
		}
		return false;
	}

	public static void OverlapSphere<T>(Vector3 position, float radius, List<T> list, int layerMask = -5, QueryTriggerInteraction triggerInteraction = QueryTriggerInteraction.Ignore) where T : Component
	{
		layerMask = HandleIgnoreCollision(position, layerMask);
		int count = UnityEngine.Physics.OverlapSphereNonAlloc(position, radius, colBuffer, layerMask, triggerInteraction);
		BufferToList(colBuffer, count, list);
	}

	public static void OverlapCapsule<T>(Vector3 point0, Vector3 point1, float radius, List<T> list, int layerMask = -5, QueryTriggerInteraction triggerInteraction = QueryTriggerInteraction.Ignore) where T : Component
	{
		layerMask = HandleIgnoreCollision(point0, layerMask);
		layerMask = HandleIgnoreCollision(point1, layerMask);
		int count = UnityEngine.Physics.OverlapCapsuleNonAlloc(point0, point1, radius, colBuffer, layerMask, triggerInteraction);
		BufferToList(colBuffer, count, list);
	}

	public static void OverlapOBB<T>(OBB obb, List<T> list, int layerMask = -5, QueryTriggerInteraction triggerInteraction = QueryTriggerInteraction.Ignore) where T : Component
	{
		layerMask = HandleIgnoreCollision(obb.position, layerMask);
		int count = UnityEngine.Physics.OverlapBoxNonAlloc(obb.position, obb.extents, colBuffer, obb.rotation, layerMask, triggerInteraction);
		BufferToList(colBuffer, count, list);
	}

	public static void OverlapBounds<T>(Bounds bounds, List<T> list, int layerMask = -5, QueryTriggerInteraction triggerInteraction = QueryTriggerInteraction.Ignore) where T : Component
	{
		layerMask = HandleIgnoreCollision(bounds.center, layerMask);
		int count = UnityEngine.Physics.OverlapBoxNonAlloc(bounds.center, bounds.extents, colBuffer, Quaternion.identity, layerMask, triggerInteraction);
		BufferToList(colBuffer, count, list);
	}

	private static void BufferToList<T>(Collider[] buffer, int count, List<T> list) where T : Component
	{
		for (int i = 0; i < count; i++)
		{
			if (buffer[i].TryGetComponent<T>(out var component))
			{
				list.Add(component);
			}
			buffer[i] = null;
		}
	}

	private static void HitBufferToList(int count, List<RaycastHit> list)
	{
		if (count >= hitBuffer.Length)
		{
			Debug.LogWarning("Physics query is exceeding collider buffer length.");
		}
		for (int i = 0; i < count; i++)
		{
			list.Add(hitBuffer[i]);
		}
	}

	public static BaseNetworkable RaycastEntity(Realm realm, Ray ray, float maxDistance = float.PositiveInfinity, int layerMask = -5, QueryTriggerInteraction triggerInteraction = QueryTriggerInteraction.UseGlobal, BaseEntity ignoreEntity = null)
	{
		if (!Trace(ray, 0f, out var hitInfo, maxDistance, layerMask, triggerInteraction, ignoreEntity))
		{
			return null;
		}
		return RaycastHitEx.GetEntity(hitInfo);
	}

	public static bool Trace(Ray ray, float radius, out RaycastHit hitInfo, float maxDistance = float.PositiveInfinity, int layerMask = -5, QueryTriggerInteraction triggerInteraction = QueryTriggerInteraction.UseGlobal, BaseEntity ignoreEntity = null)
	{
		List<RaycastHit> obj = Facepunch.Pool.Get<List<RaycastHit>>();
		TraceAllUnordered(ray, radius, obj, maxDistance, layerMask, triggerInteraction, ignoreEntity);
		if (obj.Count == 0)
		{
			hitInfo = default(RaycastHit);
			Facepunch.Pool.FreeUnmanaged(ref obj);
			return false;
		}
		Sort(obj);
		hitInfo = obj[0];
		Facepunch.Pool.FreeUnmanaged(ref obj);
		return true;
	}

	public static void TraceAll(Ray ray, float radius, List<RaycastHit> hits, float maxDistance = float.PositiveInfinity, int layerMask = -5, QueryTriggerInteraction triggerInteraction = QueryTriggerInteraction.UseGlobal, BaseEntity ignoreEntity = null)
	{
		TraceAllUnordered(ray, radius, hits, maxDistance, layerMask, triggerInteraction, ignoreEntity);
		Sort(hits);
	}

	public static void TraceAllUnordered(Ray ray, float radius, List<RaycastHit> hits, float maxDistance = float.PositiveInfinity, int layerMask = -5, QueryTriggerInteraction triggerInteraction = QueryTriggerInteraction.UseGlobal, BaseEntity ignoreEntity = null)
	{
		int num = ((radius != 0f) ? UnityEngine.Physics.SphereCastNonAlloc(ray, radius, hitBuffer, maxDistance, layerMask, triggerInteraction) : UnityEngine.Physics.RaycastNonAlloc(ray, hitBuffer, maxDistance, layerMask, triggerInteraction));
		if (num < hitBuffer.Length && (layerMask & 0x10) != 0 && WaterSystem.Trace(ray, out var position, out var normal, maxDistance))
		{
			RaycastHit raycastHit = default(RaycastHit);
			raycastHit.point = position;
			raycastHit.normal = normal;
			raycastHit.distance = (position - ray.origin).magnitude;
			RaycastHit raycastHit2 = raycastHit;
			hitBuffer[num++] = raycastHit2;
		}
		if (num == 0)
		{
			return;
		}
		if (num >= hitBuffer.Length)
		{
			Debug.LogWarning("Physics query is exceeding hit buffer length.");
		}
		for (int i = 0; i < num; i++)
		{
			RaycastHit raycastHit3 = hitBuffer[i];
			if (Verify(raycastHit3, ray.origin, ignoreEntity))
			{
				hits.Add(raycastHit3);
			}
		}
	}

	public static bool LineOfSightRadius(Vector3 p0, Vector3 p1, int layerMask, float radius, float padding0, float padding1, BaseEntity ignoreEntity = null)
	{
		return LineOfSightInternal(p0, p1, layerMask, radius, padding0, padding1, ignoreEntity);
	}

	public static bool LineOfSightRadius(Vector3 p0, Vector3 p1, int layerMask, float radius, float padding, BaseEntity ignoreEntity = null)
	{
		return LineOfSightInternal(p0, p1, layerMask, radius, padding, padding, ignoreEntity);
	}

	public static bool LineOfSightRadius(Vector3 p0, Vector3 p1, int layerMask, float radius, BaseEntity ignoreEntity = null)
	{
		return LineOfSightInternal(p0, p1, layerMask, radius, 0f, 0f, ignoreEntity);
	}

	public static bool LineOfSight(Vector3 p0, Vector3 p1, int layerMask, float padding0, float padding1, BaseEntity ignoreEntity = null)
	{
		return LineOfSightRadius(p0, p1, layerMask, 0f, padding0, padding1, ignoreEntity);
	}

	public static bool LineOfSight(Vector3 p0, Vector3 p1, int layerMask, float padding, BaseEntity ignoreEntity = null)
	{
		return LineOfSightRadius(p0, p1, layerMask, 0f, padding, padding, ignoreEntity);
	}

	public static bool LineOfSight(Vector3 p0, Vector3 p1, int layerMask, BaseEntity ignoreEntity = null)
	{
		return LineOfSightRadius(p0, p1, layerMask, 0f, 0f, 0f, ignoreEntity);
	}

	private static bool LineOfSightInternal(Vector3 p0, Vector3 p1, int layerMask, float radius, float padding0, float padding1, BaseEntity ignoreEntity = null)
	{
		if (!ValidBounds.TestOuterBounds(p0))
		{
			return false;
		}
		if (!ValidBounds.TestOuterBounds(p1))
		{
			return false;
		}
		Vector3 vector = p1 - p0;
		float magnitude = vector.magnitude;
		if (magnitude <= padding0 + padding1)
		{
			return true;
		}
		Vector3 vector2 = vector / magnitude;
		Ray ray = new Ray(p0 + vector2 * padding0, vector2);
		float maxDistance = magnitude - padding0 - padding1;
		bool flag;
		RaycastHit hitInfo;
		if (!ignoreEntity.IsRealNull() || (layerMask & 0x800000) != 0)
		{
			flag = Trace(ray, 0f, out hitInfo, maxDistance, layerMask, QueryTriggerInteraction.Ignore, ignoreEntity);
			if (radius > 0f && !flag)
			{
				flag = Trace(ray, radius, out hitInfo, maxDistance, layerMask, QueryTriggerInteraction.Ignore, ignoreEntity);
			}
		}
		else
		{
			flag = UnityEngine.Physics.Raycast(ray, out hitInfo, maxDistance, layerMask, QueryTriggerInteraction.Ignore);
			if (radius > 0f && !flag)
			{
				flag = UnityEngine.Physics.SphereCast(ray, radius, out hitInfo, maxDistance, layerMask, QueryTriggerInteraction.Ignore);
			}
		}
		if (!flag)
		{
			if (ConVar.Vis.lineofsight)
			{
				ConsoleNetwork.BroadcastToAllClients("ddraw.line", 60f, Color.green, p0, p1);
			}
			return true;
		}
		if (ConVar.Vis.lineofsight)
		{
			ConsoleNetwork.BroadcastToAllClients("ddraw.line", 60f, Color.red, p0, p1);
			ConsoleNetwork.BroadcastToAllClients("ddraw.text", 60f, Color.white, hitInfo.point, hitInfo.collider.name);
		}
		return false;
	}

	public static bool Verify(RaycastHit hitInfo, Vector3 rayOrigin, BaseEntity ignoreEntity = null)
	{
		Vector3 vector = hitInfo.point;
		if (hitInfo.collider is TerrainCollider && vector == Vector3.zero && hitInfo.distance == 0f)
		{
			vector = rayOrigin;
		}
		return Verify(hitInfo.collider, vector, ignoreEntity);
	}

	public static bool Verify(Collider collider, Vector3 point, BaseEntity ignoreEntity = null)
	{
		if (collider == null)
		{
			if ((bool)WaterSystem.Collision && WaterSystem.Collision.GetIgnore(point))
			{
				return false;
			}
			return true;
		}
		if (collider is TerrainCollider)
		{
			if ((bool)TerrainMeta.Collision && TerrainMeta.Collision.GetIgnore(point))
			{
				return false;
			}
			return true;
		}
		if (CompareEntity(GameObjectEx.ToBaseEntity(collider), ignoreEntity))
		{
			return false;
		}
		return collider.enabled;
	}

	public static bool CompareEntity(BaseEntity a, BaseEntity b)
	{
		if (a.IsRealNull() || b.IsRealNull())
		{
			return false;
		}
		if (a == b)
		{
			return true;
		}
		return false;
	}

	public static int HandleIgnoreCollision(Vector3 position, int layerMask)
	{
		int num = 8388608;
		if ((layerMask & num) != 0 && (bool)TerrainMeta.Collision && TerrainMeta.Collision.GetIgnore(position))
		{
			layerMask &= ~num;
		}
		int num2 = 16;
		if ((layerMask & num2) != 0 && (bool)WaterSystem.Collision && WaterSystem.Collision.GetIgnore(position))
		{
			layerMask &= ~num2;
		}
		return layerMask;
	}

	public static void HandleIgnoreCollision(ReadOnlySpan<Vector3> positions, Span<int> layerMasks)
	{
		if ((layerMasks[0] & 0x800000) != 0 && (bool)TerrainMeta.Collision)
		{
			NativeArray<bool> source = new NativeArray<bool>(positions.Length, Allocator.TempJob, NativeArrayOptions.UninitializedMemory);
			NativeArray<float> source2 = new NativeArray<float>(positions.Length, Allocator.TempJob, NativeArrayOptions.UninitializedMemory);
			for (int i = 0; i < positions.Length; i++)
			{
				source2[i] = 0.01f;
			}
			TerrainMeta.Collision.GetIgnore(source, positions, source2);
			for (int j = 0; j < positions.Length; j++)
			{
				if (source[j])
				{
					layerMasks[j] = -8388609;
				}
			}
			source2.Dispose();
			source.Dispose();
		}
		if ((layerMasks[0] & 0x10) == 0 || !WaterSystem.Collision)
		{
			return;
		}
		NativeArray<bool> source3 = new NativeArray<bool>(positions.Length, Allocator.TempJob, NativeArrayOptions.UninitializedMemory);
		NativeArray<float> source4 = new NativeArray<float>(positions.Length, Allocator.TempJob, NativeArrayOptions.UninitializedMemory);
		for (int k = 0; k < positions.Length; k++)
		{
			source4[k] = 0.01f;
		}
		WaterSystem.Collision.GetIgnore(source3, positions, source4);
		for (int l = 0; l < positions.Length; l++)
		{
			if (source3[l])
			{
				layerMasks[l] = -17;
			}
		}
		source4.Dispose();
		source3.Dispose();
	}

	public static void Sort(List<RaycastHit> hits)
	{
		hits.Sort((RaycastHit a, RaycastHit b) => a.distance.CompareTo(b.distance));
	}

	public static void Sort(RaycastHit[] hits)
	{
		Array.Sort(hits, (RaycastHit a, RaycastHit b) => a.distance.CompareTo(b.distance));
	}
}
