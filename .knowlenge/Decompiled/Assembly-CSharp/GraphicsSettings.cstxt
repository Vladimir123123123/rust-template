using System.Linq;
using UnityEngine;

[Factory("graphicssettings")]
public class GraphicsSettings : ConsoleSystem
{
	private const float MinShadowDistance = 100f;

	private const float MaxShadowDistance2Split = 600f;

	private const float MaxShadowDistance4Split = 1000f;

	private static float _streamingMipmapsMemoryBudget = 64f;

	private static float _shadowDistancePercent = 100f;

	[ClientVar(Help = "The maximum number of pixel lights that should affect any object.", Saved = true)]
	public static int pixelLightCount
	{
		get
		{
			return QualitySettings.pixelLightCount;
		}
		set
		{
			QualitySettings.pixelLightCount = Mathf.Clamp(value, 0, 8);
		}
	}

	[ClientVar(Help = "Indicates how many of the highest-resolution mips of each texture Unity does not upload at the given quality level.", Saved = true)]
	public static int globalTextureMipmapLimit
	{
		get
		{
			return QualitySettings.globalTextureMipmapLimit;
		}
		set
		{
			QualitySettings.globalTextureMipmapLimit = Mathf.Clamp(value, 0, 3);
		}
	}

	[ClientVar(Help = "Global anisotropic filtering mode. 0-2. Disabled, enabled per-texture, force-enabled for all textures.", Saved = true)]
	public static int anisotropicFiltering
	{
		get
		{
			return (int)QualitySettings.anisotropicFiltering;
		}
		set
		{
			QualitySettings.anisotropicFiltering = (AnisotropicFiltering)Mathf.Clamp(value, 0, 2);
		}
	}

	[ClientVar(Help = "The total amount of memory (in megabytes) to be used by streaming and non-streaming textures.", Saved = true)]
	public static float streamingMipmapsMemoryBudget
	{
		get
		{
			return _streamingMipmapsMemoryBudget;
		}
		set
		{
			_streamingMipmapsMemoryBudget = Mathf.Clamp(value, 64f, 4096f);
		}
	}

	[ClientVar(Help = "Should soft blending be used for particles?", Saved = true)]
	public static bool softParticles
	{
		get
		{
			return QualitySettings.softParticles;
		}
		set
		{
			QualitySettings.softParticles = value;
		}
	}

	[ClientVar(Help = "Budget for how many ray casts can be performed per frame for approximate collision testing.", Saved = true)]
	public static int particleRaycastBudget
	{
		get
		{
			return QualitySettings.particleRaycastBudget;
		}
		set
		{
			QualitySettings.particleRaycastBudget = value;
		}
	}

	[ClientVar(Help = "If enabled, billboards will face towards camera position rather than camera orientation.", Saved = true)]
	public static bool billboardsFaceCameraPosition
	{
		get
		{
			return QualitySettings.billboardsFaceCameraPosition;
		}
		set
		{
			QualitySettings.billboardsFaceCameraPosition = value;
		}
	}

	[ClientVar(Help = "The rendering mode of Shadowmask. 0 = Shadowmask 1 = Distance Shadowmask", Saved = true)]
	public static int shadowmaskMode
	{
		get
		{
			return (int)QualitySettings.shadowmaskMode;
		}
		set
		{
			QualitySettings.shadowmaskMode = (ShadowmaskMode)Mathf.Clamp(value, 0, 1);
		}
	}

	[ClientVar(Help = "The default resolution of shadow maps. 0 = Low, 1 = Medium, 2 = High, 3 = Very High", Saved = true)]
	public static int shadowResolution
	{
		get
		{
			return (int)QualitySettings.shadowResolution;
		}
		set
		{
			QualitySettings.shadowResolution = (ShadowResolution)Mathf.Clamp(value, 0, 3);
		}
	}

	[ClientVar(Help = "Shadow drawing distance percentage", Saved = true)]
	public static float shadowDistancePercent
	{
		get
		{
			return _shadowDistancePercent;
		}
		set
		{
			_shadowDistancePercent = Mathf.Clamp(value, 0f, 100f);
			EnforceShadowDistanceBounds();
		}
	}

	[ClientVar(Help = "Number of cascades to use for directional light shadows. 1 = None, 2 = Two, 4 = Four", Saved = true)]
	public static int shadowCascades
	{
		get
		{
			return QualitySettings.shadowCascades;
		}
		set
		{
			QualitySettings.shadowCascades = ForceOption(value, 1, 1, 2, 4);
			EnforceShadowDistanceBounds();
		}
	}

	[ClientVar(Help = "Enables or disables LOD Cross Fade.", Saved = true)]
	public static bool enableLODCrossFade
	{
		get
		{
			return QualitySettings.enableLODCrossFade;
		}
		set
		{
			QualitySettings.enableLODCrossFade = value;
		}
	}

	public static void SetMandatoryDefaults()
	{
		QualitySettings.streamingMipmapsAddAllCameras = false;
		QualitySettings.useLegacyDetailDistribution = true;
		QualitySettings.terrainQualityOverrides = TerrainQualityOverrides.None;
		QualitySettings.shadowNearPlaneOffset = 2f;
		QualitySettings.shadowCascade2Split = 0.1f;
		QualitySettings.shadowCascade4Split = new Vector3(0.01f, 0.03f, 0.1f);
		QualitySettings.asyncUploadTimeSlice = 2;
		QualitySettings.asyncUploadBufferSize = 4;
		QualitySettings.asyncUploadPersistentBuffer = true;
		QualitySettings.maximumLODLevel = 0;
		QualitySettings.enableLODCrossFade = true;
		QualitySettings.skinWeights = SkinWeights.FourBones;
		QualitySettings.streamingMipmapsMemoryBudget = 512f;
		QualitySettings.streamingMipmapsRenderersPerFrame = 128;
		QualitySettings.streamingMipmapsMaxLevelReduction = 7;
		QualitySettings.streamingMipmapsMaxFileIORequests = 512;
		QualitySettings.resolutionScalingFixedDPIFactor = 1f;
		QualitySettings.shadows = ShadowQuality.All;
		QualitySettings.shadowProjection = ShadowProjection.StableFit;
	}

	private static void EnforceShadowDistanceBounds()
	{
		float num = _shadowDistancePercent / 100f;
		float shadowDistance = ((QualitySettings.shadowCascades == 1) ? 100f : ((QualitySettings.shadowCascades != 2) ? (100f + 900f * num) : (100f + 500f * num)));
		QualitySettings.shadowDistance = shadowDistance;
	}

	private static int ForceOption(int value, int defaultValue, params int[] options)
	{
		if (options == null || options.Length == 0 || !options.Contains(value))
		{
			return defaultValue;
		}
		return value;
	}
}
