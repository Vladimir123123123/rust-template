using System;
using UnityEngine;

public readonly struct Grid : IEquatable<Grid>
{
	public readonly int x;

	public readonly int y;

	public readonly int z;

	public const float Resolution = 16f;

	public const float HalfResolution = 8f;

	public Grid(int x, int y, int z)
	{
		this.x = x;
		this.y = y;
		this.z = z;
	}

	public int GetOffset(float axis)
	{
		return Mathf.RoundToInt(axis / 2f / 16f);
	}

	public Vector3 GetCenterPoint()
	{
		return new Vector3((float)(x - GetOffset(TerrainMeta.Size.x)) * 16f, (float)(y - GetOffset(MaxY)) * 16f, (float)(z - GetOffset(TerrainMeta.Size.z)) * 16f);
	}

	public override string ToString()
	{
		return $"(x: {x}, y: {y}, z: {z})";
	}

	public bool Equals(Grid other)
	{
		if (x == other.x && y == other.y)
		{
			return z == other.z;
		}
		return false;
	}

	public override int GetHashCode()
	{
		return HashCode.Combine(x, y, z);
	}

	public bool IsBlocked()
	{
		return GamePhysics.CheckBounds(new Bounds(GetCenterPoint(), new Vector3(16f, 16f, 16f)), 8388608);
	}

	public int GetIndex()
	{
		return GetGridIndex(x, y, z);
	}
}
