using System.Collections.Generic;

public class HashedPool<ValueType> where ValueType : HashedPoolValue, new()
{
	private int granularity;

	private Dictionary<ulong, ValueType> dict;

	private List<ValueType> pool;

	private List<ValueType> list;

	private Queue<ValueType> recycled;

	public int Size => list.Count;

	public int Count => dict.Count;

	public ValueType this[int i]
	{
		get
		{
			return list[i];
		}
		set
		{
			list[i] = value;
		}
	}

	public HashedPool(int capacity, int granularity)
	{
		this.granularity = granularity;
		dict = new Dictionary<ulong, ValueType>(capacity);
		pool = new List<ValueType>(capacity);
		list = new List<ValueType>(capacity);
		recycled = new Queue<ValueType>();
	}

	public void Clear()
	{
		dict.Clear();
		pool.Clear();
		list.Clear();
		recycled.Clear();
	}

	public ValueType Add(ulong key, int capacityGranularity = 16)
	{
		ValueType val;
		if (recycled.Count > 0)
		{
			val = recycled.Dequeue();
			list[val.hashedPoolIndex] = val;
		}
		else
		{
			int count = pool.Count;
			if (count == pool.Capacity)
			{
				pool.Capacity += granularity;
			}
			val = new ValueType
			{
				hashedPoolIndex = count
			};
			pool.Add(val);
			list.Add(val);
		}
		val.hashedPoolKey = key;
		dict.Add(key, val);
		return val;
	}

	public void Remove(ValueType value)
	{
		dict.Remove(value.hashedPoolKey);
		list[value.hashedPoolIndex] = null;
		recycled.Enqueue(value);
		value.hashedPoolKey = ulong.MaxValue;
	}

	public bool TryGetValue(ulong key, out ValueType value)
	{
		return dict.TryGetValue(key, out value);
	}

	public bool ContainsKey(ulong key)
	{
		return dict.ContainsKey(key);
	}
}
