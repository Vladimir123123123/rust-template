using System.Collections.Generic;
using Facepunch;
using ProtoBuf;

public class HorseModifiers : BaseModifiers<RidableHorse2>
{
	public static void AddToHorse(RidableHorse2 horse, List<ModifierDefintion> modifiers)
	{
		if (!(horse == null) && !(horse.modifiers == null) && modifiers != null)
		{
			horse.modifiers.Add(modifiers);
		}
	}

	protected override bool IsCompatible(Modifier.ModifierType modType)
	{
		if ((uint)(modType - 20) <= 1u)
		{
			return true;
		}
		return false;
	}

	public ProtoBuf.HorseModifiers Save(bool forDisk)
	{
		ProtoBuf.HorseModifiers horseModifiers = Pool.Get<ProtoBuf.HorseModifiers>();
		horseModifiers.modifiers = Pool.Get<List<ProtoBuf.Modifier>>();
		foreach (Modifier item2 in All)
		{
			if (item2 != null && (!forDisk || item2.Source != Modifier.ModifierSource.Interaction))
			{
				ProtoBuf.Modifier item = item2.Save();
				horseModifiers.modifiers.Add(item);
			}
		}
		return horseModifiers;
	}

	public void Load(ProtoBuf.HorseModifiers m, bool fromDisk)
	{
		RemoveAll();
		if (m == null || m.modifiers == null)
		{
			return;
		}
		foreach (ProtoBuf.Modifier modifier2 in m.modifiers)
		{
			if (modifier2 != null && (!fromDisk || modifier2.source != 2))
			{
				Modifier modifier = new Modifier();
				modifier.Init((Modifier.ModifierType)modifier2.type, (Modifier.ModifierSource)modifier2.source, modifier2.value, modifier2.duration, modifier2.timeRemaing);
				Add(modifier);
			}
		}
	}
}
