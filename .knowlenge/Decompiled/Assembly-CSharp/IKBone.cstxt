using UnityEngine;

public class IKBone : FIK_IKBoneBase
{
	[SerializeField]
	private Quaternion targetToLocalSpace;

	[SerializeField]
	private Vector3 defaultLocalPoleNormal;

	public Vector3 right { get; private set; }

	public Vector3 up { get; private set; }

	public Vector3 forward { get; private set; }

	public Vector3 srcPosition { get; private set; }

	public Quaternion srcRotation { get; private set; }

	public IKBone(Transform t)
		: base(t)
	{
	}

	public void Init(Transform root, Vector3 childPosition, Vector3 orientationNormal)
	{
		RefreshOrientations(childPosition, orientationNormal);
		sqrMagn = (childPosition - base.transform.position).sqrMagnitude;
		LastKeyLocalRotation = base.transform.localRotation;
		right = base.transform.InverseTransformDirection(root.right);
		up = base.transform.InverseTransformDirection(root.up);
		forward = base.transform.InverseTransformDirection(root.forward);
		CaptureSourceAnimation();
	}

	public void RefreshOrientations(Vector3 childPosition, Vector3 orientationNormal)
	{
		if (!(orientationNormal == Vector3.zero))
		{
			Vector3 vector = childPosition - base.transform.position;
			vector.Normalize();
			if (!(vector == Vector3.zero))
			{
				Quaternion rotation = Quaternion.LookRotation(vector, orientationNormal);
				targetToLocalSpace = RotationToLocal(base.transform.rotation, rotation);
				defaultLocalPoleNormal = Quaternion.Inverse(base.transform.rotation) * orientationNormal;
			}
		}
	}

	public void CaptureSourceAnimation()
	{
		srcPosition = base.transform.position;
		srcRotation = base.transform.rotation;
	}

	public static Quaternion RotationToLocal(Quaternion parent, Quaternion rotation)
	{
		return Quaternion.Inverse(Quaternion.Inverse(parent) * rotation);
	}

	public Quaternion GetRotation(Vector3 direction, Vector3 orientationNormal)
	{
		return Quaternion.LookRotation(direction, orientationNormal) * targetToLocalSpace;
	}

	public Vector3 GetCurrentOrientationNormal()
	{
		return base.transform.rotation * defaultLocalPoleNormal;
	}
}
