using System;
using UnityEngine;

[Serializable]
public class IOSlot
{
	public string niceName;

	public IOType type;

	public IORef connectedTo;

	public int connectedToSlot;

	public IOHandlePriority importance;

	public float ArrowOffset;

	public Vector3[] linePoints;

	public LineAnchor[] lineAnchors;

	public float[] slackLevels;

	public Vector3 worldSpaceLineEndRotation;

	[HideInInspector]
	public Vector3 originPosition;

	[HideInInspector]
	public Vector3 originRotation;

	public ClientIOLine line;

	public Vector3 handlePosition;

	public Vector3 handleDirection;

	public bool rootConnectionsOnly;

	public bool mainPowerSlot;

	public WireTool.WireColour wireColour;

	public float lineThickness;

	public void Clear()
	{
		if (connectedTo == null)
		{
			connectedTo = new IORef();
		}
		else
		{
			connectedTo.Clear();
		}
		connectedToSlot = 0;
		linePoints = null;
		lineAnchors = null;
	}

	public void Preserve(ref SprayCan.IOPreserveInfo target)
	{
		target.connectedTo = connectedTo.Get();
		target.connectedToSlot = connectedToSlot;
		target.linePoints = linePoints;
		target.slackLevels = slackLevels;
		target.lineAnchors = lineAnchors;
		target.worldSpaceLineEndRotation = worldSpaceLineEndRotation;
		target.originPosition = originPosition;
		target.originRotation = originRotation;
		target.wireColour = wireColour;
	}

	public void Restore(SprayCan.IOPreserveInfo from)
	{
		connectedTo.Set(from.connectedTo);
		connectedToSlot = from.connectedToSlot;
		linePoints = from.linePoints;
		slackLevels = from.slackLevels;
		lineAnchors = from.lineAnchors;
		worldSpaceLineEndRotation = from.worldSpaceLineEndRotation;
		originPosition = from.originPosition;
		originRotation = from.originRotation;
		wireColour = from.wireColour;
	}

	public bool IsConnected()
	{
		return connectedTo.Get() != null;
	}
}
