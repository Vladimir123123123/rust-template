using UnityEngine;

public struct ImpulseExecutor
{
	public float Elapsed;

	public float PowerMultiplier;

	public float ImpulseDuration;

	public Vector3 WorldTranslation;

	public Vector3 LocalTranslation;

	public float InheritElasticness;

	public Vector3 HipsRotation;

	public bool AlignDesired;

	public AnimationCurve ImpulseCurve;

	public AnimationCurve YAxisMultiplyCurve;

	private static AnimationCurve _defaultCurve;

	private static AnimationCurve _defaultCurve11;

	public static AnimationCurve DefaultCurve
	{
		get
		{
			if (_defaultCurve == null)
			{
				_defaultCurve = PelvisImpulseSettings.GetDefaultCurveInstance();
			}
			return _defaultCurve;
		}
	}

	public static AnimationCurve DefaultCurve11
	{
		get
		{
			if (_defaultCurve11 == null)
			{
				_defaultCurve11 = AnimationCurve.Linear(0f, 1f, 1f, 1f);
			}
			return _defaultCurve11;
		}
	}

	public bool Finished => Elapsed >= ImpulseDuration;

	public float Progress
	{
		get
		{
			if (ImpulseDuration != 0f)
			{
				return Elapsed / ImpulseDuration;
			}
			return 1f;
		}
	}

	public float Evaluation => ImpulseCurve.Evaluate(Progress);

	public float Elastic => InheritElasticness;

	public float Power => PowerMultiplier;

	public Vector3 CurrentLocalOffset => LocalTranslation * Evaluation * Power;

	public float CurrentLocalYAxisMultiplier => YAxisMultiplyCurve.Evaluate(Progress);

	public Vector3 CurrentWorldOffset => WorldTranslation * Evaluation * Power;

	public ImpulseExecutor(PelvisImpulseSettings settings, float powerMultiplier = 1f, float durationMultiplier = 1f)
	{
		Elapsed = 0f;
		PowerMultiplier = settings.PowerMultiplier * powerMultiplier;
		ImpulseDuration = settings.ImpulseDuration * durationMultiplier;
		WorldTranslation = settings.WorldTranslation;
		LocalTranslation = settings.LocalTranslation;
		InheritElasticness = settings.InheritElasticness;
		HipsRotation = settings.HipsRotate;
		ImpulseCurve = settings.ImpulseCurve;
		YAxisMultiplyCurve = settings.YAxisMultiplyCurve;
		AlignDesired = settings.AlignWithDesiredMoveDirection;
	}

	public ImpulseExecutor(Vector3 localOffset, float duration, float elastic = 1f, AnimationCurve curve = null, bool alignWithDesiredDir = false)
	{
		Elapsed = 0f;
		PowerMultiplier = 1f;
		ImpulseDuration = duration;
		WorldTranslation = Vector3.zero;
		LocalTranslation = localOffset;
		InheritElasticness = elastic;
		ImpulseCurve = curve;
		if (curve == null)
		{
			ImpulseCurve = DefaultCurve;
		}
		YAxisMultiplyCurve = DefaultCurve11;
		HipsRotation = Vector3.zero;
		AlignDesired = alignWithDesiredDir;
	}

	public ImpulseExecutor(Vector3 localOffset, Vector3 hipsRotation, float duration, float elastic = 1f, AnimationCurve curve = null, bool alignWithDesiredDir = false)
	{
		Elapsed = 0f;
		PowerMultiplier = 1f;
		ImpulseDuration = duration;
		WorldTranslation = Vector3.zero;
		HipsRotation = hipsRotation;
		LocalTranslation = localOffset;
		InheritElasticness = elastic;
		ImpulseCurve = curve;
		if (curve == null)
		{
			ImpulseCurve = DefaultCurve;
		}
		YAxisMultiplyCurve = DefaultCurve11;
		AlignDesired = alignWithDesiredDir;
	}

	public ImpulseExecutor(float duration, Vector3 worldOffset, float elastic = 1f, AnimationCurve curve = null, bool alignWithDesiredDir = false)
	{
		Elapsed = 0f;
		PowerMultiplier = 1f;
		ImpulseDuration = duration;
		WorldTranslation = worldOffset;
		HipsRotation = Vector3.zero;
		LocalTranslation = Vector3.zero;
		InheritElasticness = elastic;
		ImpulseCurve = curve;
		if (curve == null)
		{
			ImpulseCurve = DefaultCurve;
		}
		YAxisMultiplyCurve = DefaultCurve11;
		AlignDesired = alignWithDesiredDir;
	}

	public void Update(float delta)
	{
		Elapsed += delta;
	}
}
