using Newtonsoft.Json;
using ProtoBuf;

[JsonModel]
public struct ItemFilter
{
	[JsonIgnore]
	public ItemDefinition TargetItem;

	public ItemCategory? TargetCategory;

	public int MaxAmountInOutput;

	public int BufferAmount;

	public int MinAmountInInput;

	public bool IsBlueprint;

	public int BufferTransferRemaining;

	public string TargetItemName
	{
		get
		{
			if (!(TargetItem != null))
			{
				return string.Empty;
			}
			return TargetItem.shortname;
		}
		set
		{
			TargetItem = ItemManager.FindItemDefinition(value);
		}
	}

	public void CopyTo(ProtoBuf.IndustrialConveyor.ItemFilter target)
	{
		if (TargetItem != null)
		{
			target.itemDef = TargetItem.itemid;
		}
		target.maxAmountInDestination = MaxAmountInOutput;
		if (TargetCategory.HasValue)
		{
			target.itemCategory = (int)TargetCategory.Value;
		}
		else
		{
			target.itemCategory = -1;
		}
		target.isBlueprint = (IsBlueprint ? 1 : 0);
		target.bufferAmount = BufferAmount;
		target.retainMinimum = MinAmountInInput;
		target.bufferTransferRemaining = BufferTransferRemaining;
	}

	public ItemFilter(ProtoBuf.IndustrialConveyor.ItemFilter from)
	{
		this = new ItemFilter
		{
			TargetItem = ItemManager.FindItemDefinition(from.itemDef),
			MaxAmountInOutput = from.maxAmountInDestination
		};
		if (from.itemCategory >= 0)
		{
			TargetCategory = (ItemCategory)from.itemCategory;
		}
		else
		{
			TargetCategory = null;
		}
		IsBlueprint = from.isBlueprint == 1;
		BufferAmount = from.bufferAmount;
		MinAmountInInput = from.retainMinimum;
		BufferTransferRemaining = from.bufferTransferRemaining;
	}
}
