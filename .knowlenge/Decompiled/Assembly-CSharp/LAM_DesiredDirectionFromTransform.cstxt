using FIMSpace.FProceduralAnimation;
using UnityEngine;

public class LAM_DesiredDirectionFromTransform : LegsAnimatorControlModuleBase
{
	private LegsAnimator.Variable _Reaction;

	private LegsAnimator.Variable _Thres;

	private LegsAnimator.Variable _IsMov;

	private Vector3 calculatedVelo = Vector3.zero;

	private Vector3 _sd_average = Vector3.zero;

	private Vector3 previousPosition = Vector3.zero;

	public override void OnInit(LegsAnimator.LegsAnimatorCustomModuleHelper helper)
	{
		_Reaction = helper.RequestVariable("Reaction Speed", 0.8f);
		_IsMov = helper.RequestVariable("Control 'IsMoving'", false);
		_Thres = helper.RequestVariable("Not Moving Threshold", 0.2f);
		previousPosition = base.LA.BaseTransform.position;
	}

	public override void OnUpdate(LegsAnimator.LegsAnimatorCustomModuleHelper helper)
	{
		Vector3 vector = base.LA.BaseTransform.position - previousPosition;
		previousPosition = base.LA.BaseTransform.position;
		Vector3 vec = vector / base.LA.DeltaTime;
		vec = base.LA.ToRootLocalSpaceVec(vec);
		vec.y = 0f;
		vec = base.LA.RootToWorldSpaceVec(vec);
		float magnitude = calculatedVelo.magnitude;
		vec = Vector3.Slerp(vec, vec.normalized, Mathf.InverseLerp(0f, magnitude, base.LA.ScaleReference));
		calculatedVelo = Vector3.SmoothDamp(calculatedVelo, vec, ref _sd_average, 5E-05f + (1f - _Reaction.GetFloat()) * 0.15f, 100000f, base.LA.DeltaTime);
		if (_IsMov.GetBool())
		{
			base.LA.User_SetIsMoving(magnitude > base.LA.ScaleReference * _Thres.GetFloat());
		}
		base.LA.User_SetDesiredMovementDirection(calculatedVelo);
	}
}
