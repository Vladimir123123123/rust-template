using FIMSpace.FProceduralAnimation;
using UnityEngine;

public class LAM_EdgeStepDetector : LegsAnimatorControlModuleBase
{
	private LegsAnimator.Variable iterationsV;

	private float initTime;

	public override void OnInit(LegsAnimator.LegsAnimatorCustomModuleHelper helper)
	{
		initTime = Time.time;
		iterationsV = helper.RequestVariable("Iterations", 5);
	}

	public override void OnReInitialize(LegsAnimator.LegsAnimatorCustomModuleHelper helper)
	{
		initTime = Time.time;
	}

	public override void Leg_LatePreRaycastingUpdate(LegsAnimator.LegsAnimatorCustomModuleHelper helper, LegsAnimator.Leg leg)
	{
		if (Time.time - initTime < 0.1f)
		{
			return;
		}
		if (leg.User_RaycastHittedSource)
		{
			leg.User_RestoreRaycasting();
			return;
		}
		Vector3 b = base.LegsAnim.ToRootLocalSpace(leg.ParentHub.LastKeyframePosition);
		Vector3 a = base.LegsAnim.ToRootLocalSpace(leg.lastRaycastingOrigin);
		b.y = a.y;
		b.z = a.z;
		RaycastHit hitInfo = default(RaycastHit);
		float num = Vector3.Distance(leg.lastRaycastingOrigin, leg.lastRaycastingEndPoint);
		float num2 = iterationsV.GetInt();
		for (float num3 = 1f; num3 <= num2; num3 += 1f)
		{
			Vector3 localPos = Vector3.LerpUnclamped(a, b, 0.1f + num3 / num2);
			localPos = base.LegsAnim.RootToWorldSpace(localPos);
			if (Physics.Raycast(localPos, -base.LegsAnim.Up, out hitInfo, num * 1.01f, base.LegsAnim.GroundMask, QueryTriggerInteraction.Ignore))
			{
				break;
			}
		}
		if (hitInfo.transform == null)
		{
			leg.User_RestoreRaycasting();
		}
		else
		{
			leg.User_OverrideRaycastHit(hitInfo, disableSourceRaycast: false);
		}
	}
}
