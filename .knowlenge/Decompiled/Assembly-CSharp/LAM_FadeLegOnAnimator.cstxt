using System;
using System.Collections.Generic;
using FIMSpace.FProceduralAnimation;
using UnityEngine;

public class LAM_FadeLegOnAnimator : LegsAnimatorControlModuleBase
{
	private enum ELayerSelectMode
	{
		ByIndex,
		Auto
	}

	private LegsAnimator.Variable _fadeSpeedV;

	private LegsAnimator.Variable _layerV;

	private LegsAnimator.Variable _idleGlueV;

	private float enabledMultiplier = 1f;

	private float sd_eneMul;

	[NonSerialized]
	private LegsAnimator.Leg[] legs;

	private List<int> stateHashes;

	private List<int> tagHashes;

	private LegsAnimator.Variable _layerMode;

	private LegsAnimator.Variable _layerSkip;

	private List<int> layersToCheck;

	private int lastAutoWeightIndex;

	private bool InitLayerCheck(LegsAnimator.LegsAnimatorCustomModuleHelper helper)
	{
		if (helper.Parent.Mecanim == null)
		{
			return false;
		}
		if (_layerMode.GetInt() == 0)
		{
			return false;
		}
		if (_layerMode == null || _layerSkip == null)
		{
			return false;
		}
		layersToCheck = new List<int>();
		string[] array = _layerSkip.GetString().Split(',');
		for (int i = 0; i < helper.Parent.Mecanim.layerCount; i++)
		{
			layersToCheck.Add(i);
		}
		for (int j = 0; j < array.Length; j++)
		{
			if (int.TryParse(array[j], out var result))
			{
				layersToCheck.Remove(result);
				continue;
			}
			int num = -1;
			for (int k = 0; k < helper.Parent.Mecanim.layerCount; k++)
			{
				if (helper.Parent.Mecanim.GetLayerName(k) == array[j])
				{
					num = k;
					break;
				}
			}
			if (num != -1)
			{
				layersToCheck.Remove(num);
			}
		}
		return true;
	}

	public override void OnInit(LegsAnimator.LegsAnimatorCustomModuleHelper helper)
	{
		if (base.LA.Mecanim == null)
		{
			Debug.Log("[Legs Animator] Fade On Animation Module: Not found animator reference in legs animator Extra/Control!");
			helper.Enabled = false;
			return;
		}
		_layerV = helper.RequestVariable("Animation Layer", 0);
		_fadeSpeedV = helper.RequestVariable("Fade Speed", 0.75f);
		_idleGlueV = helper.RequestVariable("Idle Glue During Fade", false);
		LegsAnimator.Variable variable = helper.RequestVariable("Animation State Tag", "");
		string[] array = helper.RequestVariable("Animation State Name", "").GetString().Split(',');
		if (array.Length != 0)
		{
			stateHashes = new List<int>();
			for (int i = 0; i < array.Length; i++)
			{
				if (!string.IsNullOrWhiteSpace(array[i]))
				{
					stateHashes.Add(Animator.StringToHash(array[i]));
				}
			}
		}
		string[] array2 = variable.GetString().Split(',');
		if (array2.Length != 0)
		{
			tagHashes = new List<int>();
			for (int j = 0; j < array2.Length; j++)
			{
				if (!string.IsNullOrWhiteSpace(array2[j]))
				{
					tagHashes.Add(Animator.StringToHash(array2[j]));
				}
			}
		}
		if (stateHashes.Count == 0 && tagHashes.Count == 0)
		{
			helper.Enabled = false;
			Debug.Log("[Legs Animator] Fade On Animation Module: No assigned animation state names/tags to control module on!");
			return;
		}
		if (helper.customStringList == null)
		{
			helper.Enabled = false;
			Debug.Log("[Legs Animator] Fade On Animation Module: No legs definition!");
			return;
		}
		List<LegsAnimator.Leg> list = new List<LegsAnimator.Leg>();
		for (int k = 0; k < helper.customStringList.Count; k++)
		{
			if (helper.customStringList[k] == "1")
			{
				list.Add(base.LA.Legs[k]);
			}
		}
		if (list.Count == 0)
		{
			helper.Enabled = false;
			Debug.Log("[Legs Animator] Fade On Animation Module: No legs definition!");
			return;
		}
		legs = list.ToArray();
		if (_layerV.GetInt() < 0)
		{
			_layerV.SetValue(0);
		}
		if (_layerV.GetInt() > base.LA.Mecanim.layerCount - 1)
		{
			_layerV.SetValue(base.LA.Mecanim.layerCount - 1);
		}
		_layerMode = helper.RequestVariable("Mode", 0);
		_layerSkip = helper.RequestVariable("Skip", "");
		if (_layerMode.GetInt() == 1 && !InitLayerCheck(helper))
		{
			_layerMode.SetValue(0);
		}
	}

	public override void OnAfterAnimatorCaptureUpdate(LegsAnimator.LegsAnimatorCustomModuleHelper helper)
	{
		Animator mecanim = base.LA.Mecanim;
		if (mecanim == null)
		{
			return;
		}
		int layerIndex = _layerV.GetInt();
		if (_layerMode.GetInt() == 1)
		{
			float num = 0f;
			int num2 = -1;
			for (int num3 = layersToCheck.Count - 1; num3 >= 0; num3--)
			{
				int num4 = layersToCheck[num3];
				float layerWeight = helper.Parent.Mecanim.GetLayerWeight(num4);
				if (layerWeight > 0.95f)
				{
					num2 = num4;
					break;
				}
				if (layerWeight > num)
				{
					num = layerWeight;
					num2 = num4;
				}
			}
			layerIndex = (lastAutoWeightIndex = num2);
		}
		AnimatorStateInfo animatorStateInfo = (mecanim.IsInTransition(layerIndex) ? mecanim.GetNextAnimatorStateInfo(layerIndex) : mecanim.GetCurrentAnimatorStateInfo(layerIndex));
		bool flag = false;
		for (int i = 0; i < stateHashes.Count; i++)
		{
			if (animatorStateInfo.shortNameHash == stateHashes[i])
			{
				flag = true;
				break;
			}
		}
		if (!flag)
		{
			for (int j = 0; j < tagHashes.Count; j++)
			{
				if (animatorStateInfo.tagHash == tagHashes[j])
				{
					flag = true;
					break;
				}
			}
		}
		float num5 = 0.3f - _fadeSpeedV.GetFloat() * 0.299f;
		if (flag)
		{
			enabledMultiplier = Mathf.SmoothDamp(enabledMultiplier, -0.001f, ref sd_eneMul, num5 * 0.9f, 100000f, base.LA.DeltaTime);
		}
		else
		{
			enabledMultiplier = Mathf.SmoothDamp(enabledMultiplier, 1.01f, ref sd_eneMul, num5, 100000f, base.LA.DeltaTime);
		}
		enabledMultiplier = Mathf.Clamp01(enabledMultiplier);
		for (int k = 0; k < legs.Length; k++)
		{
			legs[k].InternalModuleBlendWeight = enabledMultiplier;
			legs[k].IK_UpdateParamsBase();
		}
		if (_idleGlueV.GetBool() && enabledMultiplier < 0.5f)
		{
			base.LA._glueModeExecuted = LegsAnimator.EGlueMode.Idle;
		}
	}
}
