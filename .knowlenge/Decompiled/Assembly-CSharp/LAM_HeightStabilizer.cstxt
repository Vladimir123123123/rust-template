using FIMSpace.FProceduralAnimation;
using UnityEngine;

public class LAM_HeightStabilizer : LegsAnimatorControlModuleBase
{
	private LegsAnimator.Variable _powerV;

	private LegsAnimator.Variable _reactV;

	private LegsAnimator.Variable _thresV;

	private LegsAnimator.Variable _extrV;

	private Vector3 adjustement = Vector3.zero;

	private Vector3 sd_adjustement = Vector3.zero;

	public override bool AskForSpineBone => true;

	public override void OnInit(LegsAnimator.LegsAnimatorCustomModuleHelper helper)
	{
		base.OnInit(helper);
		_powerV = helper.RequestVariable("Blend", 1f);
		_reactV = helper.RequestVariable("Reaction Speed", 0.7f);
		_thresV = helper.RequestVariable("Blend Y", 0.5f);
		_extrV = helper.RequestVariable("Extra Push Down Blend", 0.1f);
	}

	public override void OnReInitialize(LegsAnimator.LegsAnimatorCustomModuleHelper helper)
	{
		adjustement = Vector3.zero;
		sd_adjustement = Vector3.zero;
	}

	public override void OnPreLateUpdate(LegsAnimator.LegsAnimatorCustomModuleHelper helper)
	{
		Vector3 lastAppliedHipsFinalPosition = base.LA._LastAppliedHipsFinalPosition;
		Vector3 vector = base.LA.ToRootLocalSpace(lastAppliedHipsFinalPosition);
		Vector3 lastKeyframeLocalPosition = base.LA.HipsSetup.LastKeyframeLocalPosition;
		vector.y = 0f;
		lastKeyframeLocalPosition.y = 0f;
		Vector3 target = lastKeyframeLocalPosition - vector;
		float magnitude = target.magnitude;
		target.y -= magnitude * _thresV.GetFloat();
		target *= _powerV.GetFloat();
		target.y -= Mathf.InverseLerp(base.LA.ScaleReferenceNoScale * 0.001f, base.LA.ScaleReferenceNoScale * (0.15f + _extrV.GetFloat() * 0.1f), magnitude) * _extrV.GetFloat() * 0.25f;
		target *= base.EffectBlend;
		adjustement = Vector3.SmoothDamp(adjustement, target, ref sd_adjustement, Mathf.Lerp(0.4f, 0.005f, _reactV.GetFloat()), 1000000f, base.LA.DeltaTime);
		base.LA._Hips_Modules_ExtraWOffset += base.LA.RootToWorldSpaceVec(adjustement);
	}
}
