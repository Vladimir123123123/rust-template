using System;
using System.Collections.Generic;
using FIMSpace.FProceduralAnimation;

public class LAM_IKAlgorithmSwitch : LegsAnimatorControlModuleBase
{
	public bool lockX = true;

	public bool lockY;

	public bool lockZ;

	[NonSerialized]
	private List<AxisLockableIK> playmodeIKProcessors;

	public override void OnInit(LegsAnimator.LegsAnimatorCustomModuleHelper helper)
	{
		base.OnInit(helper);
		playmodeIKProcessors = new List<AxisLockableIK>();
		for (int i = 0; i < base.LegsAnim.Legs.Count; i++)
		{
			LegsAnimator.Leg leg = base.LegsAnim.Legs[i];
			AxisLockableIK axisLockableIK = new AxisLockableIK();
			playmodeIKProcessors.Add(axisLockableIK);
			leg.AssignCustomIKProcessor(axisLockableIK);
		}
		OnValidateAfterManualChanges(helper);
	}

	private AxisLockableIK.EIKAxisLock GetLock()
	{
		AxisLockableIK.EIKAxisLock eIKAxisLock = AxisLockableIK.EIKAxisLock.None;
		if (lockX)
		{
			eIKAxisLock |= AxisLockableIK.EIKAxisLock.X;
		}
		if (lockY)
		{
			eIKAxisLock |= AxisLockableIK.EIKAxisLock.Y;
		}
		if (lockZ)
		{
			eIKAxisLock |= AxisLockableIK.EIKAxisLock.Z;
		}
		return eIKAxisLock;
	}

	private void OnValidate()
	{
		OnValidateAfterManualChanges(null);
	}

	public override void OnValidateAfterManualChanges(LegsAnimator.LegsAnimatorCustomModuleHelper helper)
	{
		if (helper != null)
		{
			base.OnValidateAfterManualChanges(helper);
		}
		if (playmodeIKProcessors != null)
		{
			for (int i = 0; i < playmodeIKProcessors.Count; i++)
			{
				playmodeIKProcessors[i].FirstBoneAxisLock = GetLock();
			}
		}
	}
}
