using FIMSpace.FProceduralAnimation;
using UnityEngine;

[CreateAssetMenu(fileName = "Module Settings-Impulses On Stop And On Land", menuName = "FImpossible Creations/Legs Animator/Module - Impulses on Stop and Land Setup", order = 4)]
public class LAM_ImpulsesOnStopAndOnLand : LegsAnimatorControlModuleBase
{
	[FPD_Header("Triggering hips push impulses", 6f, 4f, 2)]
	public LegsAnimator.PelvisImpulseSettings OnStopImpulse;

	public LegsAnimator.PelvisImpulseSettings OnLandImpulse;

	[FPD_Header("Set Zero Power to Not Use", 6f, 4f, 2)]
	public LegsAnimator.PelvisImpulseSettings OnStartMoveImpulse;

	private readonly string powerMulStrN = "Power Multiplier";

	private readonly string durMulStrN = "Duration Multiplier";

	private readonly string spdLandPower = "Speed Affects Land";

	private bool lastGrounded = true;

	private bool lastMoving;

	private float lastMovingTime;

	private float lastUngroundedTime;

	private LegsAnimator.Variable _powerMulVar;

	private LegsAnimator.Variable _durMulVar;

	private LegsAnimator.Variable _spdAffectsLand;

	protected float customMul = 1f;

	private void Reset()
	{
		OnStartMoveImpulse = new LegsAnimator.PelvisImpulseSettings();
		OnStartMoveImpulse.PowerMultiplier = 0f;
		OnStartMoveImpulse.LocalTranslation = new Vector3(0f, -0.05f, -0.001f);
	}

	public override void OnInit(LegsAnimator.LegsAnimatorCustomModuleHelper helper)
	{
		lastGrounded = true;
		lastMoving = false;
		_powerMulVar = helper.RequestVariable(powerMulStrN, 1f);
		_durMulVar = helper.RequestVariable(durMulStrN, 1f);
		_spdAffectsLand = helper.RequestVariable(spdLandPower, false);
	}

	public override void OnUpdate(LegsAnimator.LegsAnimatorCustomModuleHelper helper)
	{
		LegsAnimator lA = base.LA;
		if (lA.IsInAir && lA.InAirTime > 0f)
		{
			lastUngroundedTime = lA.InAirTime;
		}
		if (lA.IsGrounded != lastGrounded && OnLandImpulse.PowerMultiplier != 0f && lA.IsGrounded && lastUngroundedTime > 0.1f)
		{
			Impact_OnLanding(lA);
		}
		if (lA.IsMoving && lA.MovingTime > 0f)
		{
			lastMovingTime = lA.MovingTime;
		}
		if (lA.IsMoving != lastMoving && OnStopImpulse.PowerMultiplier != 0f)
		{
			if (!lA.IsMoving)
			{
				if (lastMovingTime > 0.3f && lA.GroundedTime > 0.25f)
				{
					Impact_OnEndsMove(lA);
				}
			}
			else if (OnStartMoveImpulse.PowerMultiplier != 0f && lA.GroundedTime > 0.1f)
			{
				Impact_OnStartMove(lA);
			}
		}
		lastGrounded = lA.IsGrounded;
		lastMoving = lA.IsMoving;
	}

	protected virtual void Impact_OnStartMove(LegsAnimator l)
	{
		l.User_AddImpulse(OnStartMoveImpulse, _powerMulVar.GetFloat() * customMul, _durMulVar.GetFloat());
	}

	protected virtual void Impact_OnEndsMove(LegsAnimator l)
	{
		l.User_AddImpulse(OnStopImpulse, _powerMulVar.GetFloat() * customMul, _durMulVar.GetFloat());
	}

	protected virtual void Impact_OnLanding(LegsAnimator l)
	{
		if (_spdAffectsLand.GetBool())
		{
			l.User_AddImpulse(OnLandImpulse, _powerMulVar.GetFloat() * customMul, _durMulVar.GetFloat());
		}
		else
		{
			l.User_AddImpulse(OnLandImpulse, _powerMulVar.GetFloat() * ((customMul <= 0f) ? 1f : customMul), _durMulVar.GetFloat());
		}
	}
}
