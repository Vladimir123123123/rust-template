using System.Collections.Generic;
using FIMSpace.FProceduralAnimation;
using UnityEngine;

public class LAM_InsectLegsHelper : LegsAnimatorControlModuleBase
{
	private class LegHelper
	{
		public bool WasAttaching;

		public bool DetachTrigger;

		public float FullyAttachedAt = -1f;

		public LegsAnimator.Leg legRef { get; private set; }

		public LegHelper(LegsAnimator.Leg leg)
		{
			legRef = leg;
			WasAttaching = false;
			DetachTrigger = false;
			FullyAttachedAt = -1f;
		}
	}

	private LegsAnimator.Variable _onOneSideV;

	private LegsAnimator.Variable _onStepCulldownV;

	private LegsAnimator.Variable _legSideCulldownV;

	private LegsAnimator.Variable _afterFullCulldownV;

	private LegsAnimator.Variable _modeV;

	private readonly string minSideS = "Minimum Standing Legs On One Side";

	private readonly string stepculldS = "On Step Culldown";

	private readonly string sideculldV = "Leg Side Culldown";

	private readonly string waitV = "On Full Attach Culldown";

	private readonly string modeV = "Mode";

	private float mainCulldown;

	private float sideLCulldown;

	private float sideRCulldown;

	private List<LegHelper> legHelpers;

	public override void OnInit(LegsAnimator.LegsAnimatorCustomModuleHelper hlp)
	{
		_onOneSideV = hlp.RequestVariable(minSideS, 2);
		_onStepCulldownV = hlp.RequestVariable(stepculldS, 0.025f);
		_legSideCulldownV = hlp.RequestVariable(sideculldV, 0.015f);
		_afterFullCulldownV = hlp.RequestVariable(waitV, 0f);
		_modeV = hlp.RequestVariable(modeV, 0);
		legHelpers = new List<LegHelper>();
		for (int i = 0; i < base.LA.Legs.Count; i++)
		{
			LegHelper item = new LegHelper(base.LA.Legs[i]);
			legHelpers.Add(item);
		}
		if (_onOneSideV.GetInt() >= base.LA.Legs.Count)
		{
			_onOneSideV.SetValue(base.LA.Legs.Count / 2);
		}
	}

	private bool AllowDetach(LegHelper leg)
	{
		if (mainCulldown > 0f)
		{
			return false;
		}
		if (leg.legRef.Side == LegsAnimator.ELegSide.Left)
		{
			if (sideLCulldown > 0f)
			{
				return false;
			}
		}
		else if (leg.legRef.Side == LegsAnimator.ELegSide.Right && sideRCulldown > 0f)
		{
			return false;
		}
		if (_onOneSideV.GetFloat() > 0f)
		{
			int num = 0;
			for (int i = 0; i < legHelpers.Count; i++)
			{
				LegsAnimator.Leg legRef = legHelpers[i].legRef;
				if (legRef.Side == leg.legRef.Side && (!legRef.G_DuringAttaching || legRef.G_Attached))
				{
					num++;
				}
			}
			if ((float)num < _onOneSideV.GetFloat())
			{
				return false;
			}
		}
		if (Time.time - leg.FullyAttachedAt < _afterFullCulldownV.GetFloat())
		{
			return false;
		}
		return true;
	}

	public override void OnPreLateUpdate(LegsAnimator.LegsAnimatorCustomModuleHelper helper)
	{
		if (legHelpers != null)
		{
			mainCulldown -= base.LA.DeltaTime;
			sideLCulldown -= base.LA.DeltaTime;
			sideRCulldown -= base.LA.DeltaTime;
		}
	}

	public override void Leg_LateUpdate(LegsAnimator.LegsAnimatorCustomModuleHelper hlp, LegsAnimator.Leg leg)
	{
		if (_modeV.GetInt() == 2)
		{
			CheckConditionsV2(hlp, leg);
			return;
		}
		LegHelper legHelper = legHelpers[leg.PlaymodeIndex];
		if (leg.G_DuringAttaching && !legHelper.WasAttaching)
		{
			mainCulldown = _onStepCulldownV.GetFloat();
			if (leg.Side == LegsAnimator.ELegSide.Left)
			{
				sideRCulldown = _legSideCulldownV.GetFloat();
			}
			else if (leg.Side == LegsAnimator.ELegSide.Right)
			{
				sideLCulldown = _legSideCulldownV.GetFloat();
			}
		}
		if (leg.G_Attached)
		{
			if (legHelper.FullyAttachedAt == -1f)
			{
				legHelper.FullyAttachedAt = Time.time;
			}
		}
		else
		{
			legHelper.FullyAttachedAt = -1f;
		}
		legHelper.legRef.G_CustomForceNOTDetach = !AllowDetach(legHelper);
		legHelper.WasAttaching = leg.G_DuringAttaching;
	}

	private void CheckConditionsV2(LegsAnimator.LegsAnimatorCustomModuleHelper hlp, LegsAnimator.Leg leg)
	{
		LegHelper legHelper = legHelpers[leg.PlaymodeIndex];
		if (leg.G_Attached)
		{
			if (legHelper.FullyAttachedAt == -1f)
			{
				legHelper.FullyAttachedAt = Time.time;
				legHelper.DetachTrigger = false;
			}
		}
		else
		{
			legHelper.FullyAttachedAt = -1f;
		}
		bool g_CustomForceNOTDetach = leg.G_CustomForceNOTDetach;
		leg.G_CustomForceNOTDetach = false;
		bool flag = false;
		bool flag2 = false;
		if (leg.G_Attached && leg.Glue_CheckDetachement() && leg.Glue_CheckIdleDetachementConfirm())
		{
			flag2 = true;
		}
		if (flag2 && !legHelper.WasAttaching && !legHelper.DetachTrigger && AllowDetach(legHelper))
		{
			flag = true;
			g_CustomForceNOTDetach = false;
			legHelper.DetachTrigger = true;
			leg.G_CustomForceDetach = true;
			mainCulldown = _onStepCulldownV.GetFloat();
			if (leg.Side == LegsAnimator.ELegSide.Left)
			{
				sideRCulldown = _legSideCulldownV.GetFloat();
			}
			else if (leg.Side == LegsAnimator.ELegSide.Right)
			{
				sideLCulldown = _legSideCulldownV.GetFloat();
			}
		}
		leg.G_CustomForceNOTDetach = g_CustomForceNOTDetach;
		if (!flag)
		{
			legHelper.legRef.G_CustomForceNOTDetach = !AllowDetach(legHelper);
		}
		legHelper.WasAttaching = leg.G_DuringAttaching;
	}
}
