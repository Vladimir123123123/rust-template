using FIMSpace.FProceduralAnimation;
using UnityEngine;

public class LAM_SlopePusher : LegsAnimatorControlModuleBase
{
	private LegsAnimator.Variable _powerV;

	private LegsAnimator.Variable _thresV;

	private LegsAnimator.Variable _rapidV;

	private LegsAnimator.Variable _pushBackV;

	private Vector3 offsetV = Vector3.zero;

	private Vector3 _Sd_offsetV = Vector3.zero;

	public override void OnInit(LegsAnimator.LegsAnimatorCustomModuleHelper helper)
	{
		_powerV = helper.RequestVariable("Offset Power", 0.6f);
		_thresV = helper.RequestVariable("Push Threshold", 0.5f);
		_rapidV = helper.RequestVariable("Offset Rapidity", 0.5f);
		_pushBackV = helper.RequestVariable("Push Back", 0f);
	}

	public override void Leg_LateUpdate(LegsAnimator.LegsAnimatorCustomModuleHelper helper, LegsAnimator.Leg leg)
	{
		Vector3 zero = Vector3.zero;
		if (leg.A_WasAligning)
		{
			float num = base.LA.ScaleReferenceNoScale * 0.25f * _thresV.GetFloat();
			if (leg.groundHitRootSpacePos.y > num)
			{
				float num2 = Mathf.InverseLerp(5f, 50f, leg.raycastSlopeAngle);
				float num3 = (leg.groundHitRootSpacePos.y - num) / (num * 1.5f);
				Vector2 normalized = new Vector2(leg.groundHitRootSpacePos.x, leg.groundHitRootSpacePos.z).normalized;
				zero -= new Vector3(normalized.x, -0.033f, normalized.y) * (num3 * num) * _powerV.GetFloat() * 2f * num2;
			}
			if (_pushBackV.GetFloat() > 0f && base.LA.DesiredMovementDirection != Vector3.zero)
			{
				float num4 = _powerV.GetFloat();
				if (num4 <= 0f)
				{
					num4 = 1f;
				}
				float num5 = 0f - Vector3.Dot(zero.normalized, base.LA.DesiredMovementDirection.normalized);
				if (num5 < 0f)
				{
					zero *= Mathf.Max(-1f, num5 * 2f) * (_pushBackV.GetFloat() / num4);
				}
			}
		}
		offsetV = Vector3.SmoothDamp(offsetV, zero, ref _Sd_offsetV, 0.2f - _rapidV.GetFloat() * 0.199f, 1000000f, base.LA.DeltaTime);
		base.LA._Hips_Modules_ExtraWOffset += base.LA.RootToWorldSpaceVec(offsetV);
	}
}
