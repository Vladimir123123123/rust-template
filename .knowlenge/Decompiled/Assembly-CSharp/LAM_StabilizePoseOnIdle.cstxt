using FIMSpace.FProceduralAnimation;
using UnityEngine;

public class LAM_StabilizePoseOnIdle : LegsAnimatorControlModuleBase
{
	private Vector3 currentHeightAdjust = Vector3.zero;

	private Vector3 sd_currentHeightAdjust = Vector3.zero;

	private LegsAnimator.Variable _blendV;

	private LegsAnimator.Variable _adjSpeed;

	public override void OnInit(LegsAnimator.LegsAnimatorCustomModuleHelper helper)
	{
		_blendV = helper.RequestVariable("Blend", 1f);
		_adjSpeed = helper.RequestVariable("Adjusting Speed", 1f);
	}

	public override void OnReInitialize(LegsAnimator.LegsAnimatorCustomModuleHelper helper)
	{
		currentHeightAdjust = Vector3.zero;
		sd_currentHeightAdjust = Vector3.zero;
	}

	public override void OnLateUpdatePreApply(LegsAnimator.LegsAnimatorCustomModuleHelper helper)
	{
		if (base.LA.Legs.Count < 2)
		{
			return;
		}
		bool flag = false;
		if (!base.LA.IsMoving)
		{
			flag = true;
			if (base.LA.UseGluing)
			{
				for (int i = 0; i < base.LA.Legs.Count; i++)
				{
					if (!base.LA.Legs[i].G_Attached)
					{
						flag = false;
						break;
					}
				}
			}
		}
		if (flag)
		{
			LegsAnimator.Leg leg = base.LA.Legs[0];
			Vector3 vector = leg._PreviousFinalIKPos + leg.AnkleH.Bone.TransformVector(leg.AnkleToFeetEnd * 0.6f);
			for (int j = 1; j < base.LA.Legs.Count; j++)
			{
				leg = base.LA.Legs[j];
				Vector3 b = leg._PreviousFinalIKPos + leg.AnkleH.Bone.TransformVector(leg.AnkleToFeetEnd * 0.6f);
				vector = Vector3.LerpUnclamped(vector, b, 0.5f);
			}
			vector = base.LA.ToRootLocalSpace(vector);
			vector.y = 0f;
			Vector3 vector2 = base.LA.ToRootLocalSpace(base.LA._LastAppliedHipsFinalPosition);
			vector2.y = 0f;
			vector -= vector2;
			vector = base.LA.RootToWorldSpaceVec(vector);
			currentHeightAdjust = Vector3.SmoothDamp(currentHeightAdjust, vector, ref sd_currentHeightAdjust, 0.05f + _adjSpeed.GetFloat() * 0.3f, 1000000f, base.LA.DeltaTime);
		}
		else
		{
			currentHeightAdjust = Vector3.SmoothDamp(currentHeightAdjust, Vector3.zero, ref sd_currentHeightAdjust, 0.05f + _adjSpeed.GetFloat() * 0.3f, 1000000f, base.LA.DeltaTime);
		}
		base.LA.Hips.position += currentHeightAdjust * base.EffectBlend * _blendV.GetFloat() * base.LA._MainBlend;
		Vector3 vector3 = base.LA.BaseTransform.position + currentHeightAdjust + Vector3.up * 2.4f;
		vector3.y = base.LA._LastAppliedHipsFinalPosition.y + 2f;
	}
}
