using UnityEngine;

private class LegRedirectHelper
{
	private LAM_DirectionalMovement parent;

	private LegsAnimator.Leg leg;

	internal LegRedirectHelper oppositeHelper;

	private Vector3 computedPosLocal = Vector3.zero;

	private Quaternion _footRedirCache = Quaternion.identity;

	private LegsAnimator LA => parent.LA;

	public Vector3 LastComputedWorldSpaceLegPos { get; private set; }

	public LegRedirectHelper(LAM_DirectionalMovement parent, LegsAnimator.Leg leg)
	{
		this.parent = parent;
		this.leg = leg;
		LastComputedWorldSpaceLegPos = leg.BoneEnd.position;
		computedPosLocal = leg.Owner.ToRootLocalSpace(LastComputedWorldSpaceLegPos);
	}

	public Vector3 ComputeIKOffset(Vector3 localPos, float smoother = 1f)
	{
		float @float = parent._play_TrDur.GetFloat();
		Vector3 vector = parent._calc_LocalRotDir * localPos;
		float num = Vector3.Magnitude(vector - computedPosLocal);
		float num2 = num / leg.Owner.ScaleReferenceNoScale;
		float num3 = 0f;
		if (num > 0.2f)
		{
			num3 = Mathf.InverseLerp(0.2f, 1f, num);
			num3 *= 0.1f;
			if (@float < 0.1f)
			{
				num3 *= @float / 0.1f;
			}
		}
		if (parent._calc_toNegativeXProgress > 0f)
		{
			Vector3 vector2 = localPos;
			vector2.x *= -1f;
			Vector3 b = parent._calc_LocalRotDir * vector2;
			vector = Vector3.Lerp(vector, b, parent._calc_toNegativeXProgress);
		}
		float num4 = 0f;
		if (!(smoother >= 3f))
		{
			if (smoother > 0f)
			{
				if (num2 < 0.1f / smoother)
				{
					computedPosLocal = vector;
				}
				else
				{
					num4 = Mathf.InverseLerp(1.5f * smoother, 0.1f / smoother, num2) * 6f;
				}
				num4 = Mathf.Max(0f, num4);
			}
			else
			{
				computedPosLocal = vector;
			}
		}
		computedPosLocal = Vector3.Lerp(computedPosLocal, vector, LA.DeltaTime * (Mathf.Lerp(20f, 4f, (parent._calc_angleDiffFactor * @float + num3) * 1.5f) + num4));
		computedPosLocal.y = Mathf.Lerp(computedPosLocal.y, vector.y, 0.5f);
		if (parent._var_raiseLimit > 0f)
		{
			float c_AnimatedAnkleFlatHeight = leg.C_AnimatedAnkleFlatHeight;
			float num5 = 0f;
			if (leg.Side == LegsAnimator.ELegSide.Left)
			{
				num5 = Mathf.Lerp(0f, 0.5f, parent._calc_sideFactorR);
			}
			else if (leg.Side == LegsAnimator.ELegSide.Right)
			{
				num5 = Mathf.Lerp(0f, 0.5f, parent._calc_sideFactorL);
			}
			if (parent._calc_toNegativeXProgress > 0f)
			{
				num5 = Mathf.Lerp(num5, 1f, parent._calc_toNegativeXProgress);
			}
			computedPosLocal.y = Mathf.Lerp(computedPosLocal.y, c_AnimatedAnkleFlatHeight, num5 * parent._var_raiseLimit);
		}
		LastComputedWorldSpaceLegPos = LA.RootToWorldSpace(computedPosLocal);
		return computedPosLocal;
	}

	internal Quaternion FootRedirectSmoother(Quaternion target)
	{
		_footRedirCache = Quaternion.Lerp(_footRedirCache, target, parent._calc_deltaSpeedSlow);
		return _footRedirCache;
	}
}
