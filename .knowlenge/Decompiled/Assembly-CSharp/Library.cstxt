using System.Collections.Generic;

public class Library
{
	public bool clientside;

	public bool serverside;

	public Dictionary<uint, AttributeCollection> prefabs = new Dictionary<uint, AttributeCollection>();

	public Library(bool clientside, bool serverside)
	{
		this.clientside = clientside;
		this.serverside = serverside;
	}

	public AttributeCollection Find(uint prefabID, bool warmup = true)
	{
		if (prefabs.TryGetValue(prefabID, out var value))
		{
			return value;
		}
		value = new AttributeCollection();
		prefabs.Add(prefabID, value);
		if (warmup && (!clientside || serverside))
		{
			if (!clientside && serverside)
			{
				GameManager.server.FindPrefab(prefabID);
			}
			else if (clientside)
			{
				_ = serverside;
			}
		}
		return value;
	}

	public T Find<T>(uint prefabID) where T : PrefabAttribute
	{
		T[] array = Find(prefabID).Find<T>();
		if (array.Length == 0)
		{
			return null;
		}
		return array[0];
	}

	public bool Find<T>(uint prefabID, out T result) where T : PrefabAttribute
	{
		result = null;
		T[] array = Find(prefabID).Find<T>();
		if (array.Length == 0)
		{
			return false;
		}
		result = array[0];
		return true;
	}

	public T[] FindAll<T>(uint prefabID) where T : PrefabAttribute
	{
		return Find(prefabID).Find<T>();
	}

	public void Add(uint prefabID, PrefabAttribute attribute)
	{
		Find(prefabID, warmup: false).Add(attribute);
	}

	public void Invalidate(uint prefabID)
	{
		prefabs.Remove(prefabID);
	}
}
