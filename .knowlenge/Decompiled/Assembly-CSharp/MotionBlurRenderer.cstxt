using UnityEngine;
using UnityEngine.Rendering;
using UnityEngine.Rendering.PostProcessing;
using UnityEngine.Scripting;

[Preserve]
internal sealed class MotionBlurRenderer : PostProcessEffectRenderer<MotionBlur>
{
	private enum Pass
	{
		VelocitySetup,
		TileMax1,
		TileMax2,
		TileMaxV,
		NeighborMax,
		Reconstruction
	}

	public override DepthTextureMode GetCameraFlags()
	{
		return DepthTextureMode.Depth | DepthTextureMode.MotionVectors;
	}

	public override void Render(PostProcessRenderContext context)
	{
		CommandBuffer command = context.command;
		if (m_ResetHistory)
		{
			RuntimeUtilities.BlitFullscreenTriangle(command, context.source, context.destination, clear: false, null);
			m_ResetHistory = false;
			return;
		}
		RenderTextureFormat format = RenderTextureFormat.RGHalf;
		RenderTextureFormat format2 = (RenderTextureFormat.ARGB2101010.IsSupported() ? RenderTextureFormat.ARGB2101010 : RenderTextureFormat.ARGB32);
		PropertySheet propertySheet = context.propertySheets.Get(context.resources.shaders.motionBlur);
		command.BeginSample("MotionBlur");
		int num = (int)(5f * (float)context.height / 100f);
		int num2 = ((num - 1) / 8 + 1) * 8;
		float value = (float)base.settings.shutterAngle / 360f;
		propertySheet.properties.SetFloat(UnityEngine.Rendering.PostProcessing.ShaderIDs.VelocityScale, value);
		propertySheet.properties.SetFloat(UnityEngine.Rendering.PostProcessing.ShaderIDs.MaxBlurRadius, num);
		propertySheet.properties.SetFloat(UnityEngine.Rendering.PostProcessing.ShaderIDs.RcpMaxBlurRadius, 1f / (float)num);
		int velocityTex = UnityEngine.Rendering.PostProcessing.ShaderIDs.VelocityTex;
		command.GetTemporaryRT(velocityTex, context.width, context.height, 0, FilterMode.Point, format2, RenderTextureReadWrite.Linear);
		command.BlitFullscreenTriangle(BuiltinRenderTextureType.None, velocityTex, propertySheet, 0, clear: false, null);
		int tile2RT = UnityEngine.Rendering.PostProcessing.ShaderIDs.Tile2RT;
		command.GetTemporaryRT(tile2RT, context.width / 2, context.height / 2, 0, FilterMode.Point, format, RenderTextureReadWrite.Linear);
		command.BlitFullscreenTriangle(velocityTex, tile2RT, propertySheet, 1, clear: false, null);
		int tile4RT = UnityEngine.Rendering.PostProcessing.ShaderIDs.Tile4RT;
		command.GetTemporaryRT(tile4RT, context.width / 4, context.height / 4, 0, FilterMode.Point, format, RenderTextureReadWrite.Linear);
		command.BlitFullscreenTriangle(tile2RT, tile4RT, propertySheet, 2, clear: false, null);
		command.ReleaseTemporaryRT(tile2RT);
		int tile8RT = UnityEngine.Rendering.PostProcessing.ShaderIDs.Tile8RT;
		command.GetTemporaryRT(tile8RT, context.width / 8, context.height / 8, 0, FilterMode.Point, format, RenderTextureReadWrite.Linear);
		command.BlitFullscreenTriangle(tile4RT, tile8RT, propertySheet, 2, clear: false, null);
		command.ReleaseTemporaryRT(tile4RT);
		Vector2 vector = Vector2.one * ((float)num2 / 8f - 1f) * -0.5f;
		propertySheet.properties.SetVector(UnityEngine.Rendering.PostProcessing.ShaderIDs.TileMaxOffs, vector);
		propertySheet.properties.SetFloat(UnityEngine.Rendering.PostProcessing.ShaderIDs.TileMaxLoop, (int)((float)num2 / 8f));
		int tileVRT = UnityEngine.Rendering.PostProcessing.ShaderIDs.TileVRT;
		command.GetTemporaryRT(tileVRT, context.width / num2, context.height / num2, 0, FilterMode.Point, format, RenderTextureReadWrite.Linear);
		command.BlitFullscreenTriangle(tile8RT, tileVRT, propertySheet, 3, clear: false, null);
		command.ReleaseTemporaryRT(tile8RT);
		int neighborMaxTex = UnityEngine.Rendering.PostProcessing.ShaderIDs.NeighborMaxTex;
		int width = context.width / num2;
		int height = context.height / num2;
		command.GetTemporaryRT(neighborMaxTex, width, height, 0, FilterMode.Point, format, RenderTextureReadWrite.Linear);
		command.BlitFullscreenTriangle(tileVRT, neighborMaxTex, propertySheet, 4, clear: false, null);
		command.ReleaseTemporaryRT(tileVRT);
		propertySheet.properties.SetFloat(UnityEngine.Rendering.PostProcessing.ShaderIDs.LoopCount, Mathf.Clamp((int)base.settings.sampleCount / 2, 1, 64));
		command.BlitFullscreenTriangle(context.source, context.destination, propertySheet, 5, clear: false, null);
		command.ReleaseTemporaryRT(velocityTex);
		command.ReleaseTemporaryRT(neighborMaxTex);
		command.EndSample("MotionBlur");
	}
}
