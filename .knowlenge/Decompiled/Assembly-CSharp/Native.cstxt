using System.Runtime.InteropServices;

public static class Native
{
	[StructLayout(LayoutKind.Explicit)]
	public struct MonoImage
	{
		[FieldOffset(48)]
		public unsafe byte* AssemblyName;
	}

	[StructLayout(LayoutKind.Explicit)]
	public struct MonoClass
	{
		private const int ImageOffset = 64;

		[FieldOffset(64)]
		public unsafe MonoImage* Image;

		[FieldOffset(72)]
		public unsafe byte* Name;

		[FieldOffset(80)]
		public unsafe byte* Namespace;
	}

	[StructLayout(LayoutKind.Explicit)]
	public struct MonoMethod
	{
		[FieldOffset(8)]
		public unsafe MonoClass* Class;

		[FieldOffset(24)]
		public unsafe byte* Name;
	}

	[StructLayout(LayoutKind.Explicit)]
	public struct MonoVTable
	{
		[FieldOffset(0)]
		public unsafe MonoClass* Class;
	}

	[StructLayout(LayoutKind.Explicit)]
	public struct MonoObject
	{
		[FieldOffset(0)]
		public unsafe MonoVTable* VTable;
	}

	[DllImport("ServerProfiler.Core")]
	public static extern void Install();

	[DllImport("ServerProfiler.Core")]
	public static extern void StartRecording(byte frameCount);

	[DllImport("ServerProfiler.Core")]
	public static extern bool OnFrameEnd();

	[DllImport("ServerProfiler.Core")]
	public unsafe static extern void GetData(out Profile** profiles, out byte count);

	[DllImport("ServerProfiler.Core")]
	public unsafe static extern void GetMemoryUsage(out MemoryState* state);

	[DllImport("ServerProfiler.Core")]
	public static extern bool ReleaseResources();
}
