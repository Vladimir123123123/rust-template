using System;
using Rust.Instruments;

[Serializable]
public struct NoteData
{
	public SoundDefinition NoteSound;

	public SoundDefinition NoteStartSound;

	public Notes Note;

	public InstrumentKeyController.NoteType Type;

	public int MidiNoteNumber;

	public int NoteOctave;

	[InstrumentIKTarget]
	public InstrumentKeyController.IKNoteTarget NoteIKTarget;

	public InstrumentKeyController.AnimationSlot AnimationSlot;

	public int NoteSoundPositionTarget;

	public int[] AdditionalMidiTargets;

	public float PitchOffset;

	public bool MatchMidiCode(int code)
	{
		if (MidiNoteNumber == code)
		{
			return true;
		}
		if (AdditionalMidiTargets != null)
		{
			int[] additionalMidiTargets = AdditionalMidiTargets;
			for (int i = 0; i < additionalMidiTargets.Length; i++)
			{
				if (additionalMidiTargets[i] == code)
				{
					return true;
				}
			}
		}
		return false;
	}

	public string ToNoteString()
	{
		return string.Format("{0}{1}{2}", Note, (Type == InstrumentKeyController.NoteType.Sharp) ? "#" : string.Empty, NoteOctave);
	}
}
