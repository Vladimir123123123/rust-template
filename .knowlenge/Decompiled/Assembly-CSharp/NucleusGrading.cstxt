using System.Collections.Generic;

public static class NucleusGrading
{
	public enum NucleusGrade
	{
		Grade3,
		Grade2,
		Grade1
	}

	private static readonly Dictionary<NucleusGrade, float> NucleusXpThresholds = new Dictionary<NucleusGrade, float>
	{
		{
			NucleusGrade.Grade3,
			0f
		},
		{
			NucleusGrade.Grade2,
			200f
		},
		{
			NucleusGrade.Grade1,
			600f
		}
	};

	public static string GetGradeAsString(NucleusGrade grade)
	{
		return grade switch
		{
			NucleusGrade.Grade3 => "3", 
			NucleusGrade.Grade2 => "2", 
			NucleusGrade.Grade1 => "1", 
			_ => "0", 
		};
	}

	public static NucleusGrade XpToGrade(float xp)
	{
		if (xp >= NucleusXpThresholds[NucleusGrade.Grade1])
		{
			return NucleusGrade.Grade1;
		}
		if (xp >= NucleusXpThresholds[NucleusGrade.Grade2])
		{
			return NucleusGrade.Grade2;
		}
		return NucleusGrade.Grade3;
	}

	public static float XpToNextGrade(float currentXp)
	{
		NucleusGrade key;
		switch (XpToGrade(currentXp))
		{
		case NucleusGrade.Grade3:
			key = NucleusGrade.Grade2;
			break;
		case NucleusGrade.Grade2:
			key = NucleusGrade.Grade1;
			break;
		default:
			return 0f;
		}
		return NucleusXpThresholds[key] - currentXp;
	}
}
