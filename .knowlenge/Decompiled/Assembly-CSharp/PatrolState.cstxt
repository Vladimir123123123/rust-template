using UnityEngine;

public class PatrolState : BasePatrolState
{
	protected float patrolApproachDist = 75f;

	public override void StateEnter(BaseAIBrain brain, BaseEntity entity)
	{
		base.StateEnter(brain, entity);
		brain.mainInterestPoint = brain.PathFinder.GetRandomPatrolPoint();
	}

	public override StateStatus StateThink(float delta, BaseAIBrain brain, BaseEntity entity)
	{
		base.StateThink(delta, brain, entity);
		(entity as CH47HelicopterAIController).SetMoveTarget(brain.mainInterestPoint);
		return StateStatus.Running;
	}

	public bool AtPatrolDestination()
	{
		return Vector3Ex.Distance2D(GetDestination(), brain.transform.position) < patrolApproachDist;
	}

	public Vector3 GetDestination()
	{
		return brain.mainInterestPoint;
	}

	public override bool CanInterrupt()
	{
		if (base.CanInterrupt())
		{
			return AtPatrolDestination();
		}
		return false;
	}

	public override float GetWeight()
	{
		if (IsInState())
		{
			if (AtPatrolDestination() && base.TimeInState > 2f)
			{
				return 0f;
			}
			return 3f;
		}
		float num = Mathf.InverseLerp(70f, 120f, TimeSinceState()) * 5f;
		return 1f + num;
	}
}
