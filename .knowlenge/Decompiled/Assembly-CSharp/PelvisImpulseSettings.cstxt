using System;
using UnityEngine;

[Serializable]
public class PelvisImpulseSettings
{
	public string OptionalName = "Impulse";

	[Space(3f)]
	public float PowerMultiplier = 1f;

	[Tooltip("Duration of translation impulse in seconds")]
	public float ImpulseDuration = 0.5f;

	[Space(5f)]
	public Vector3 WorldTranslation = Vector3.zero;

	public Vector3 LocalTranslation = new Vector3(0f, -0.2f, 0.1f);

	[Space(5f)]
	public Vector3 HipsRotate = Vector3.zero;

	[Range(0f, 1f)]
	[Space(5f)]
	public float InheritElasticness = 0.75f;

	[FPD_FixedCurveWindow(0f, 0f, 1f, 1f, 0f, 1f, 1f, 1f)]
	public AnimationCurve ImpulseCurve = AnimationCurve.EaseInOut(0f, 1f, 1f, 0f);

	[FPD_FixedCurveWindow(0f, 0f, 1f, 1f, 0f, 1f, 1f, 1f)]
	public AnimationCurve YAxisMultiplyCurve = AnimationCurve.EaseInOut(0f, 1f, 1f, 1f);

	[Tooltip("Local Offset Z-forward will bo rotated to face the legs animator's current desired move direction value")]
	[Space(5f)]
	public bool AlignWithDesiredMoveDirection;

	public PelvisImpulseSettings Copy()
	{
		return (PelvisImpulseSettings)MemberwiseClone();
	}

	public PelvisImpulseSettings()
	{
		ImpulseCurve = GetDefaultCurveInstance();
	}

	public static AnimationCurve GetDefaultCurveInstance()
	{
		AnimationCurve animationCurve = AnimationCurve.EaseInOut(0f, 0f, 1f, 0f);
		animationCurve.AddKey(new Keyframe(0.2f, 1f));
		animationCurve.SmoothTangents(1, 0.5f);
		return animationCurve;
	}

	public PelvisImpulseSettings(Vector3 vector3, float duration, float power)
		: this()
	{
		LocalTranslation = vector3;
		ImpulseDuration = duration;
		PowerMultiplier = power;
	}
}
