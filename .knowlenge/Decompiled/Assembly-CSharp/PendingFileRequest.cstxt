using System;
using UnityEngine;

private readonly struct PendingFileRequest : IEquatable<PendingFileRequest>
{
	public readonly FileStorage.Type Type;

	public readonly uint NumId;

	public readonly uint Crc;

	public readonly IServerFileReceiver Receiver;

	public readonly float Time;

	public PendingFileRequest(FileStorage.Type type, uint numId, uint crc, IServerFileReceiver receiver)
	{
		Type = type;
		NumId = numId;
		Crc = crc;
		Receiver = receiver;
		Time = UnityEngine.Time.realtimeSinceStartup;
	}

	public bool Equals(PendingFileRequest other)
	{
		if (Type == other.Type && NumId == other.NumId && Crc == other.Crc)
		{
			return object.Equals(Receiver, other.Receiver);
		}
		return false;
	}

	public override bool Equals(object obj)
	{
		if (obj is PendingFileRequest other)
		{
			return Equals(other);
		}
		return false;
	}

	public override int GetHashCode()
	{
		return (int)(((((uint)((int)Type * 397) ^ NumId) * 397) ^ Crc) * 397) ^ ((Receiver != null) ? Receiver.GetHashCode() : 0);
	}
}
