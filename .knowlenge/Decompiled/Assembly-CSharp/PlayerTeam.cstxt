using System.Collections.Generic;
using CompanionServer;
using Facepunch;
using Facepunch.Rust;
using Network;
using UnityEngine;

public class PlayerTeam : Pool.IPooled
{
	public ulong teamID;

	public string teamName;

	public ulong teamLeader;

	public List<ulong> members = new List<ulong>();

	public List<ulong> invites = new List<ulong>();

	public float teamStartTime;

	public List<Network.Connection> onlineMemberConnections = new List<Network.Connection>();

	public float teamLifetime => Time.realtimeSinceStartup - teamStartTime;

	public BasePlayer GetLeader()
	{
		return FindByID(teamLeader);
	}

	public void SendInvite(BasePlayer player)
	{
		if (invites.Count > 8)
		{
			invites.RemoveRange(0, 1);
		}
		BasePlayer basePlayer = FindByID(teamLeader);
		if (!(basePlayer == null))
		{
			invites.Add(player.userID);
			player.ClientRPC(RpcTarget.Player("CLIENT_PendingInvite", player), basePlayer.displayName, teamLeader, teamID);
		}
	}

	public void AcceptInvite(BasePlayer player)
	{
		if (invites.Contains(player.userID))
		{
			invites.Remove(player.userID);
			AddPlayer(player);
			player.ClearPendingInvite();
		}
	}

	public void RejectInvite(BasePlayer player)
	{
		player.ClearPendingInvite();
		invites.Remove(player.userID);
	}

	public bool AddPlayer(BasePlayer player, bool skipDirtyUpdate = false)
	{
		ulong num = player.userID.Get();
		if (members.Contains(num))
		{
			return false;
		}
		if (player.currentTeam != 0L)
		{
			return false;
		}
		if (members.Count >= maxTeamSize)
		{
			return false;
		}
		player.currentTeam = teamID;
		bool num2 = members.Count == 0;
		members.Add(num);
		ServerInstance.playerToTeam.Add(num, this);
		if (!skipDirtyUpdate)
		{
			MarkDirty();
		}
		player.SendNetworkUpdate();
		if (!num2)
		{
			Analytics.Azure.OnTeamChanged("added", teamID, teamLeader, num, members);
		}
		return true;
	}

	public bool RemovePlayer(ulong playerID)
	{
		if (members.Contains(playerID))
		{
			members.Remove(playerID);
			ServerInstance.playerToTeam.Remove(playerID);
			BasePlayer basePlayer = FindByID(playerID);
			if (basePlayer != null)
			{
				basePlayer.ClearTeam();
				basePlayer.BroadcastAppTeamRemoval();
				basePlayer.SendNetworkUpdate();
			}
			if (teamLeader == playerID)
			{
				if (members.Count > 0)
				{
					SetTeamLeader(members[0]);
					Analytics.Azure.OnTeamChanged("removed", teamID, teamLeader, playerID, members);
				}
				else
				{
					Analytics.Azure.OnTeamChanged("disband", teamID, teamLeader, playerID, members);
					Disband();
				}
			}
			MarkDirty();
			return true;
		}
		return false;
	}

	public void SetTeamLeader(ulong newTeamLeader)
	{
		Analytics.Azure.OnTeamChanged("promoted", teamID, teamLeader, newTeamLeader, members);
		teamLeader = newTeamLeader;
		MarkDirty();
	}

	public void Disband()
	{
		ServerInstance.DisbandTeam(this);
		CompanionServer.Server.TeamChat.Remove(teamID);
	}

	public void MarkDirty()
	{
		foreach (ulong member in members)
		{
			BasePlayer basePlayer = FindByID(member);
			if (basePlayer != null)
			{
				basePlayer.UpdateTeam(teamID);
			}
		}
		this.BroadcastAppTeamUpdate();
	}

	public List<Network.Connection> GetOnlineMemberConnections()
	{
		if (members.Count == 0)
		{
			return null;
		}
		onlineMemberConnections.Clear();
		foreach (ulong member in members)
		{
			BasePlayer basePlayer = FindByID(member);
			if (!(basePlayer == null) && basePlayer.Connection != null)
			{
				onlineMemberConnections.Add(basePlayer.Connection);
			}
		}
		return onlineMemberConnections;
	}

	void Pool.IPooled.EnterPool()
	{
		teamID = 0uL;
		teamName = string.Empty;
		teamLeader = 0uL;
		teamStartTime = 0f;
		members.Clear();
		invites.Clear();
		onlineMemberConnections.Clear();
	}

	void Pool.IPooled.LeavePool()
	{
	}
}
