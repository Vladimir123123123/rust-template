using System;
using System.Collections.Generic;
using FIMSpace;
using FIMSpace.Generating;
using UnityEngine;

[Serializable]
public class PrefabReference
{
	[SerializeField]
	private GameObject Prefab;

	private GameObject tempReplacePrefab;

	[SerializeField]
	private Collider MainCollider;

	private Collider tempReplaceCollider;

	private int id;

	public int subID;

	private Texture tex;

	public static GUILayoutOption[] opt;

	public static GUILayoutOption[] opt2;

	public static GUILayoutOption[] opt3;

	public static bool StopReloadLayoutOptions;

	[HideInInspector]
	[SerializeField]
	protected Mesh _refMesh;

	[HideInInspector]
	[SerializeField]
	protected Collider _refCol;

	public GameObject CoreGameObject => Prefab;

	public Collider CoreCollider => MainCollider;

	public GameObject GameObject
	{
		get
		{
			if (tempReplacePrefab != null)
			{
				return tempReplacePrefab;
			}
			return Prefab;
		}
	}

	public Collider Collider
	{
		get
		{
			if (tempReplaceCollider != null)
			{
				return tempReplaceCollider;
			}
			return MainCollider;
		}
	}

	public Texture Preview
	{
		get
		{
			if (Prefab == null)
			{
				tex = null;
				return null;
			}
			if (tex == null || id != Prefab.GetInstanceID())
			{
				id = Prefab.GetInstanceID();
			}
			return tex;
		}
	}

	protected virtual void DrawGUIWithPrefab(Color color, int previewSize = 72, string predicate = "", Action clickCallback = null, Action removeCallback = null, bool drawThumbnail = true, bool drawPrefabField = true)
	{
	}

	protected virtual void DrawGUIWithoutPrefab(int previewSize = 72, string predicate = "", Action removeCallback = null, bool drawPrefabField = true)
	{
	}

	public virtual void OnPrefabChanges()
	{
	}

	public static void DrawPrefabField(PrefabReference prefabRef, Color defaultColor, string predicate = "", int previewSize = 72, Action clickCallback = null, Action removeCallback = null, bool drawThumbnail = true, UnityEngine.Object toDiry = null, bool drawPrefabField = true, bool drawAdditionalButtons = true)
	{
	}

	public static void DrawPrefabsList<T>(List<T> list, ref bool foldout, ref int selected, ref bool thumbnails, Color defaultC, Color selectedC, float viewWidth = 500f, int previewSize = 72, bool searchButtons = false, UnityEngine.Object toDirty = null, bool allowAdding = true) where T : PrefabReference, new()
	{
	}

	public Mesh GetMesh(bool refresh = false)
	{
		if (Prefab == null)
		{
			return null;
		}
		if (refresh)
		{
			_refMesh = null;
		}
		else if ((bool)_refMesh)
		{
			if (MainCollider == null)
			{
				GetCollider();
			}
			return _refMesh;
		}
		List<SkinnedMeshRenderer> list = FTransformMethods.FindComponentsInAllChildren<SkinnedMeshRenderer>(Prefab.transform);
		for (int i = 0; i < list.Count; i++)
		{
			if ((bool)list[i] && (bool)list[i].sharedMesh)
			{
				_refMesh = list[i].sharedMesh;
				if (MainCollider == null)
				{
					GetCollider();
				}
				return _refMesh;
			}
		}
		List<MeshFilter> list2 = FTransformMethods.FindComponentsInAllChildren<MeshFilter>(Prefab.transform);
		for (int j = 0; j < list2.Count; j++)
		{
			if ((bool)list2[j] && (bool)list2[j].sharedMesh)
			{
				_refMesh = list2[j].sharedMesh;
				if (MainCollider == null)
				{
					GetCollider();
				}
				return _refMesh;
			}
		}
		if (MainCollider == null)
		{
			MainCollider = FTransformMethods.FindComponentInAllChildren<Collider>(Prefab.transform);
		}
		return _refMesh;
	}

	public Collider GetCollider()
	{
		if (Prefab == null)
		{
			return null;
		}
		if ((bool)_refCol)
		{
			if (MainCollider == null)
			{
				MainCollider = _refCol;
			}
			return _refCol;
		}
		List<Collider> list = FTransformMethods.FindComponentsInAllChildren<Collider>(Prefab.transform);
		for (int i = 0; i < list.Count; i++)
		{
			if ((bool)list[i])
			{
				_refCol = list[i];
				if (MainCollider == null)
				{
					MainCollider = _refCol;
				}
				return _refCol;
			}
		}
		if (_refCol == null)
		{
			_refCol = Prefab.GetComponent<Collider>();
		}
		if (MainCollider == null)
		{
			MainCollider = _refCol;
		}
		return _refCol;
	}

	public void SetPrefab(GameObject pf)
	{
		Prefab = pf;
	}

	public void SetCollider(Collider pf)
	{
		MainCollider = pf;
	}

	public void TemporaryReplace(GameObject tempRepl)
	{
		if (tempRepl == null)
		{
			tempReplacePrefab = null;
			tempReplaceCollider = null;
		}
		else
		{
			tempReplacePrefab = tempRepl;
			tempReplaceCollider = tempRepl.GetComponentInChildren<Collider>();
		}
	}
}
