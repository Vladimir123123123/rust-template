using System;
using System.Collections.Generic;
using System.Net.Http;
using System.Text;
using System.Threading.Tasks;
using ConVar;
using Facepunch;
using Newtonsoft.Json;
using UnityEngine;

public static class PremiumUtil
{
	public struct PremiumCheckResult
	{
		public bool IsPremium;

		public bool Exception;

		public string FailReason;

		public PremiumCheckResult(bool isPremium, string failReason = null)
		{
			IsPremium = isPremium;
			FailReason = failReason;
			Exception = false;
		}
	}

	[JsonModel]
	private class PremiumCheckRequest
	{
		public List<ulong> SteamIds { get; set; }
	}

	[JsonModel]
	private class PremiumCheckResponse
	{
		public Dictionary<ulong, bool> Results { get; set; }
	}

	public const string KickReason = "premium_account_required";

	public static readonly Translate.Phrase KickPhrase = new Translate.Phrase("premium.kick_phrase", "Your account must have premium status to play on this server.");

	private static readonly HttpClient Http = new HttpClient();

	public static async Task<PremiumCheckResult> CheckIfPlayerIsPremium(ulong steamId)
	{
		try
		{
			List<ulong> players = Facepunch.Pool.Get<List<ulong>>();
			players.Add(steamId);
			Dictionary<ulong, bool> obj = await CheckIfPlayersArePremium(players);
			Facepunch.Pool.FreeUnmanaged(ref players);
			if (!obj.TryGetValue(steamId, out var value))
			{
				Debug.LogError($"Failed to check if user {steamId} is premium due to user not being in the results");
				return new PremiumCheckResult(isPremium: false, "Failed to validate premium status: Missing User in Results");
			}
			if (!value)
			{
				return new PremiumCheckResult(isPremium: false, "premium_account_required");
			}
			return new PremiumCheckResult(isPremium: true);
		}
		catch (HttpRequestException exception)
		{
			Debug.LogError($"Failed to check if user {steamId} is premium due to a network error");
			Debug.LogException(exception);
			PremiumCheckResult result = new PremiumCheckResult(isPremium: false, "Failed to validate premium status: Network Error");
			result.Exception = true;
			return result;
		}
		catch (Exception exception2)
		{
			Debug.LogError($"Failed to check if user {steamId} is premium due to an exception");
			Debug.LogException(exception2);
			PremiumCheckResult result = new PremiumCheckResult(isPremium: false, "Failed to validate premium status: Exception");
			result.Exception = true;
			return result;
		}
	}

	public static async Task<Dictionary<ulong, bool>> CheckIfPlayersArePremium(List<ulong> steamIds)
	{
		if (steamIds == null)
		{
			throw new ArgumentNullException("steamIds");
		}
		if (steamIds.Count == 0)
		{
			throw new ArgumentException("SteamIDs list cannot be empty", "steamIds");
		}
		string content = JsonConvert.SerializeObject((object)new PremiumCheckRequest
		{
			SteamIds = steamIds
		});
		using HttpRequestMessage request = new HttpRequestMessage(HttpMethod.Post, Server.premiumVerifyEndpoint);
		request.Content = new StringContent(content, Encoding.UTF8, "application/json");
		using HttpResponseMessage response = await Http.SendAsync(request);
		response.EnsureSuccessStatusCode();
		string text = await response.Content.ReadAsStringAsync();
		PremiumCheckResponse premiumCheckResponse = JsonConvert.DeserializeObject<PremiumCheckResponse>(text);
		if (premiumCheckResponse?.Results == null || premiumCheckResponse.Results.Count != steamIds.Count)
		{
			throw new Exception("Premium verify endpoint returned malformed response: " + text);
		}
		return premiumCheckResponse.Results;
	}
}
