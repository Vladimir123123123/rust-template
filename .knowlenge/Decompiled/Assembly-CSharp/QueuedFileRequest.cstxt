using System;

private readonly struct QueuedFileRequest : IEquatable<QueuedFileRequest>
{
	public readonly BaseEntity Entity;

	public readonly FileStorage.Type Type;

	public readonly uint Part;

	public readonly uint Crc;

	public readonly uint ResponseFunction;

	public readonly bool? RespondIfNotFound;

	public QueuedFileRequest(BaseEntity entity, FileStorage.Type type, uint part, uint crc, uint responseFunction, bool? respondIfNotFound)
	{
		Entity = entity;
		Type = type;
		Part = part;
		Crc = crc;
		ResponseFunction = responseFunction;
		RespondIfNotFound = respondIfNotFound;
	}

	public bool Equals(QueuedFileRequest other)
	{
		if (object.Equals(Entity, other.Entity) && Type == other.Type && Part == other.Part && Crc == other.Crc && ResponseFunction == other.ResponseFunction)
		{
			return RespondIfNotFound == other.RespondIfNotFound;
		}
		return false;
	}

	public override bool Equals(object obj)
	{
		if (obj is QueuedFileRequest other)
		{
			return Equals(other);
		}
		return false;
	}

	public override int GetHashCode()
	{
		return (int)(((((((((uint)(((Entity != null) ? Entity.GetHashCode() : 0) * 397) ^ (uint)Type) * 397) ^ Part) * 397) ^ Crc) * 397) ^ ResponseFunction) * 397) ^ RespondIfNotFound.GetHashCode();
	}
}
