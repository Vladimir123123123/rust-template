using System;
using System.Collections.Generic;
using System.Net;
using System.Net.Sockets;
using Oxide.Core;
using UnityEngine;

internal class RConListener
{
	private TcpListener server;

	private List<RConClient> clients = new List<RConClient>();

	internal RConListener()
	{
		IPAddress address = IPAddress.Any;
		if (!IPAddress.TryParse(Ip, out address))
		{
			address = IPAddress.Any;
		}
		server = new TcpListener(address, Port);
		try
		{
			server.Start();
		}
		catch (Exception ex)
		{
			Debug.LogWarning("Couldn't start RCON Listener: " + ex.Message);
			server = null;
		}
	}

	internal void Shutdown()
	{
		if (server != null)
		{
			server.Stop();
			server = null;
		}
	}

	internal void Cycle()
	{
		if (server != null)
		{
			ProcessConnections();
			RemoveDeadClients();
			UpdateClients();
		}
	}

	private void ProcessConnections()
	{
		if (!server.Pending())
		{
			return;
		}
		Socket socket = server.AcceptSocket();
		if (socket != null)
		{
			IPEndPoint iPEndPoint = socket.RemoteEndPoint as IPEndPoint;
			if (Interface.CallHook("OnRconConnection", iPEndPoint.Address) != null)
			{
				socket.Close();
			}
			else if (IsBanned(iPEndPoint.Address))
			{
				Debug.Log("[RCON] Ignoring connection - banned. " + iPEndPoint.Address.ToString());
				socket.Close();
			}
			else
			{
				clients.Add(new RConClient(socket));
			}
		}
	}

	private void UpdateClients()
	{
		foreach (RConClient client in clients)
		{
			client.Update();
		}
	}

	private void RemoveDeadClients()
	{
		clients.RemoveAll((RConClient x) => !x.IsValid());
	}
}
