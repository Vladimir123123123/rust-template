using UnityEngine;
using UnityEngine.Rendering;

public struct RendererInstance
{
	public bool IsVisible;

	public bool CastShadows;

	public bool Enabled;

	public bool RecieveShadows;

	public float Size;

	public float Distance;

	public int BoneCount;

	public int MaterialCount;

	public int VertexCount;

	public int TriangleCount;

	public int SubMeshCount;

	public int BlendShapeCount;

	public string RenderType;

	public string MeshName;

	public string ObjectName;

	public string EntityName;

	public ulong EntityId;

	public bool UpdateWhenOffscreen;

	public int ParticleCount;

	public static RendererInstance From(Renderer renderer)
	{
		RendererInstance result = default(RendererInstance);
		result.IsVisible = renderer.isVisible;
		result.CastShadows = renderer.shadowCastingMode != ShadowCastingMode.Off;
		result.RecieveShadows = renderer.receiveShadows;
		result.Enabled = renderer.enabled && renderer.gameObject.activeInHierarchy;
		result.Size = renderer.bounds.size.magnitude;
		result.Distance = Vector3.Distance(renderer.bounds.center, Camera.main.transform.position);
		result.MaterialCount = renderer.sharedMaterials.Length;
		result.RenderType = renderer.GetType().Name;
		BaseEntity baseEntity = GameObjectEx.ToBaseEntity(renderer.gameObject);
		if ((bool)baseEntity)
		{
			result.EntityName = baseEntity.PrefabName;
			if (baseEntity.net != null)
			{
				result.EntityId = baseEntity.net.ID.Value;
			}
		}
		else
		{
			result.ObjectName = TransformEx.GetRecursiveName(renderer.transform);
		}
		if (renderer is MeshRenderer)
		{
			result.BoneCount = 0;
			MeshFilter component = renderer.GetComponent<MeshFilter>();
			if ((bool)component)
			{
				result.ReadMesh(component.sharedMesh);
			}
		}
		if (renderer is SkinnedMeshRenderer)
		{
			SkinnedMeshRenderer skinnedMeshRenderer = renderer as SkinnedMeshRenderer;
			result.ReadMesh(skinnedMeshRenderer.sharedMesh);
			result.UpdateWhenOffscreen = skinnedMeshRenderer.updateWhenOffscreen;
		}
		if (renderer is ParticleSystemRenderer)
		{
			ParticleSystem component2 = renderer.GetComponent<ParticleSystem>();
			if ((bool)component2)
			{
				result.MeshName = component2.name;
				result.ParticleCount = component2.particleCount;
			}
		}
		return result;
	}

	public void ReadMesh(Mesh mesh)
	{
		if (mesh == null)
		{
			MeshName = "<NULL>";
			return;
		}
		VertexCount = mesh.vertexCount;
		SubMeshCount = mesh.subMeshCount;
		BlendShapeCount = mesh.blendShapeCount;
		MeshName = mesh.name;
	}
}
