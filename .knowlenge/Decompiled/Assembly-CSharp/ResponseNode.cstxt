using System;
using UnityEngine;

[Serializable]
public class ResponseNode
{
	public enum ActionType
	{
		Custom,
		None,
		AssignMission
	}

	public Translate.Phrase responseTextLocalized;

	public ConversationCondition[] conditions;

	public ActionType actionType;

	public string actionString;

	public BaseMission actionMission;

	public string resultingSpeechNode;

	public string responseText => responseTextLocalized.translated;

	public bool PassesConditions(BasePlayer player, IConversationProvider provider)
	{
		ConversationCondition[] array = conditions;
		for (int i = 0; i < array.Length; i++)
		{
			if (!array[i].Passes(player, provider))
			{
				return false;
			}
		}
		return true;
	}

	public string GetFailedSpeechNode(BasePlayer player, IConversationProvider provider)
	{
		ConversationCondition[] array = conditions;
		foreach (ConversationCondition conversationCondition in array)
		{
			if (!conversationCondition.Passes(player, provider))
			{
				return conversationCondition.failedSpeechNode;
			}
		}
		return "";
	}

	public string GetActionString()
	{
		switch (actionType)
		{
		case ActionType.None:
			return "";
		case ActionType.Custom:
			return actionString ?? "";
		case ActionType.AssignMission:
			if (!(actionMission != null) || string.IsNullOrWhiteSpace(actionMission.shortname))
			{
				return "";
			}
			return "assignmission " + actionMission.shortname;
		default:
			Debug.LogWarning($"Cannot get conversation action string! Unhandled action type: {actionType}");
			return "";
		}
	}
}
