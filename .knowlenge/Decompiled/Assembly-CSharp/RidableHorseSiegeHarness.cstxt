using UnityEngine;

[DefaultExecutionOrder(-1300)]
public class RidableHorseSiegeHarness : EntityComponent<RidableHorse2>, IClientComponent
{
	[SerializeField]
	private Transform[] targetBone;

	[SerializeField]
	private Transform[] constrainedBone;

	[SerializeField]
	private Vector3 rotationOffset;

	private void LookAtBone(int index)
	{
		if (targetBone != null && constrainedBone != null)
		{
			Vector3 vector = targetBone[index].position - constrainedBone[index].position;
			if (!(vector == Vector3.zero))
			{
				Quaternion quaternion = Quaternion.LookRotation(vector);
				Quaternion quaternion2 = Quaternion.Euler(rotationOffset);
				Quaternion rotation = quaternion * quaternion2;
				constrainedBone[index].rotation = rotation;
			}
		}
	}

	private void LateUpdate()
	{
		LookAtBone(0);
		LookAtBone(1);
	}
}
