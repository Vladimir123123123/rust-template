using UnityEngine;

public class RoamState : BasicAIState
{
	private StateStatus status = StateStatus.Error;

	public RoamState()
		: base(AIState.Roam)
	{
	}

	public override void StateLeave(BaseAIBrain brain, BaseEntity entity)
	{
		base.StateLeave(brain, entity);
		Stop();
	}

	public override void StateEnter(BaseAIBrain brain, BaseEntity entity)
	{
		base.StateEnter(brain, entity);
		status = StateStatus.Error;
		if (brain.PathFinder == null)
		{
			return;
		}
		ScarecrowNPC scarecrowNPC = entity as ScarecrowNPC;
		if (!(scarecrowNPC == null))
		{
			Vector3 vector = brain.Events.Memory.Position.Get(4);
			Vector3 vector2 = vector;
			vector2 = ((!scarecrowNPC.RoamAroundHomePoint) ? brain.PathFinder.GetBestRoamPosition(brain.Navigator, brain.Navigator.transform.position, brain.Events.Memory.Position.Get(4), 10f, brain.Navigator.BestRoamPointMaxDistance) : brain.PathFinder.GetBestRoamPositionFromAnchor(brain.Navigator, vector, vector, 1f, brain.Navigator.BestRoamPointMaxDistance));
			if (brain.Navigator.SetDestination(vector2, BaseNavigator.NavigationSpeed.Slow))
			{
				status = StateStatus.Running;
			}
			else
			{
				status = StateStatus.Error;
			}
		}
	}

	private void Stop()
	{
		brain.Navigator.Stop();
	}

	public override StateStatus StateThink(float delta, BaseAIBrain brain, BaseEntity entity)
	{
		base.StateThink(delta, brain, entity);
		if (status == StateStatus.Error)
		{
			return status;
		}
		if (brain.Navigator.Moving)
		{
			return StateStatus.Running;
		}
		return StateStatus.Finished;
	}
}
