using System.Collections.Generic;

public class SavedLoadout
{
	public struct SavedItem
	{
		public int id;

		public int amount;

		public ulong skin;

		public int[] containedItems;

		public int blueprintTarget;
	}

	public SavedItem[] belt;

	public SavedItem[] wear;

	public SavedItem[] main;

	public SavedItem[] backpack;

	public int heldItemIndex;

	public SavedLoadout()
	{
	}

	public SavedLoadout(BasePlayer player)
	{
		belt = SaveItems(player.inventory.containerBelt);
		wear = SaveItems(player.inventory.containerWear);
		main = SaveItems(player.inventory.containerMain);
		Item backpackWithInventory = player.inventory.GetBackpackWithInventory();
		if (backpackWithInventory != null)
		{
			backpack = SaveItems(backpackWithInventory.contents);
		}
		heldItemIndex = GetSlotIndex(player);
	}

	public SavedLoadout(PlayerInventoryProperties properties)
	{
		belt = SaveItems(properties.belt);
		wear = SaveItems(properties.wear);
		main = SaveItems(properties.main);
		heldItemIndex = 0;
	}

	private static SavedItem[] SaveItems(ItemContainer itemContainer)
	{
		List<SavedItem> list = new List<SavedItem>();
		for (int i = 0; i < itemContainer.capacity; i++)
		{
			Item slot = itemContainer.GetSlot(i);
			if (slot == null)
			{
				continue;
			}
			SavedItem savedItem = default(SavedItem);
			savedItem.id = slot.info.itemid;
			savedItem.amount = slot.amount;
			savedItem.skin = slot.skin;
			savedItem.blueprintTarget = slot.blueprintTarget;
			SavedItem item = savedItem;
			if (slot.contents != null && slot.contents.itemList != null)
			{
				List<int> list2 = new List<int>();
				foreach (Item item2 in slot.contents.itemList)
				{
					list2.Add(item2.info.itemid);
				}
				item.containedItems = list2.ToArray();
			}
			list.Add(item);
		}
		return list.ToArray();
	}

	private static SavedItem[] SaveItems(List<PlayerInventoryProperties.ItemAmountSkinned> items)
	{
		List<SavedItem> list = new List<SavedItem>();
		foreach (PlayerInventoryProperties.ItemAmountSkinned item2 in items)
		{
			SavedItem savedItem = default(SavedItem);
			savedItem.id = item2.itemid;
			savedItem.amount = (int)item2.amount;
			savedItem.skin = item2.skinOverride;
			SavedItem item = savedItem;
			if (item2.blueprint)
			{
				item.blueprintTarget = item.id;
				item.id = ItemManager.blueprintBaseDef.itemid;
			}
			list.Add(item);
		}
		return list.ToArray();
	}

	public void LoadItemsOnTo(BasePlayer player)
	{
		player.inventory.containerMain.Clear();
		player.inventory.containerBelt.Clear();
		player.inventory.containerWear.Clear();
		ItemManager.DoRemoves();
		LoadItems(belt, player.inventory.containerBelt);
		LoadItems(wear, player.inventory.containerWear);
		LoadItems(main, player.inventory.containerMain);
		if (backpack != null && backpack.Length != 0)
		{
			Item backpackWithInventory = player.inventory.GetBackpackWithInventory();
			if (backpackWithInventory != null)
			{
				backpackWithInventory.contents.Clear();
				LoadItems(backpack, backpackWithInventory.contents);
			}
		}
		EquipItemInSlot(player, heldItemIndex);
		player.inventory.SendSnapshot();
		void LoadItems(SavedItem[] items, ItemContainer container)
		{
			foreach (SavedItem item in items)
			{
				player.inventory.GiveItem(LoadItem(item), container);
			}
		}
	}

	private Item LoadItem(SavedItem item)
	{
		Item item2 = ItemManager.CreateByItemID(item.id, item.amount, item.skin);
		if (item.blueprintTarget != 0)
		{
			item2.blueprintTarget = item.blueprintTarget;
		}
		if (item.containedItems != null && item.containedItems.Length != 0)
		{
			int[] containedItems = item.containedItems;
			foreach (int itemID in containedItems)
			{
				item2.contents.AddItem(ItemManager.FindItemDefinition(itemID), 1, 0uL);
			}
		}
		return item2;
	}
}
