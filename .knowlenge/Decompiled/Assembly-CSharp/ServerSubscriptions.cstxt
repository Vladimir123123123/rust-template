using System;
using System.Collections.Generic;
using System.Text;
using ConVar;
using Facepunch;
using UnityEngine;

public static class ServerSubscriptions
{
	private static readonly Memoized<string, string> FoundationGrade = new Memoized<string, string>((string s) => s.Replace("Block", "").ToLower());

	private static readonly Memoized<string, string> FoundationType = new Memoized<string, string>((string s) => (!s.Contains("foundation.triangle")) ? "s" : "t");

	public static void StartSubscribeFeed()
	{
		InvokeHandler.InvokeRepeating(SingletonComponent<InvokeHandler>.Instance, SendPlayerPositions, 0f, 0.2f);
		InvokeHandler.InvokeRepeating(SingletonComponent<InvokeHandler>.Instance, SendFoundations, 0f, 5f);
	}

	public static void StopSubscribeFeed()
	{
		InvokeHandler.CancelInvoke(SingletonComponent<InvokeHandler>.Instance, SendPlayerPositions);
		InvokeHandler.CancelInvoke(SingletonComponent<InvokeHandler>.Instance, SendFoundations);
	}

	private static void SendFoundations()
	{
		if (!RCon.HasSubscribers)
		{
			return;
		}
		ListDictionary<uint, BuildingManager.Building> buildingDictionary = BuildingManager.server.buildingDictionary;
		StringBuilder obj = Facepunch.Pool.Get<StringBuilder>();
		foreach (KeyValuePair<uint, BuildingManager.Building> item in buildingDictionary)
		{
			foreach (BuildingBlock buildingBlock in item.Value.buildingBlocks)
			{
				if (buildingBlock.name.Contains("foundation"))
				{
					buildingBlock.gameObject.transform.GetPositionAndRotation(out var position, out var rotation);
					obj.AppendJoin(',', FoundationGrade.Get(buildingBlock.grade.ToString()), FoundationType.Get(buildingBlock.name), position.x.ToString("0.00"), position.y.ToString("0.00"), position.z.ToString("0.00"), rotation.eulerAngles.y.ToString("0.0"), buildingBlock.bounds.size.x);
					obj.Append("\n");
				}
			}
		}
		try
		{
			if (obj.Length > 0)
			{
				obj.Remove(obj.Length - 1, 1);
			}
			RCon.SendMessageToSubscribers(obj.ToString(), -64002);
		}
		catch (Exception exception)
		{
			Debug.LogException(exception);
		}
		Facepunch.Pool.FreeUnmanaged(ref obj);
	}

	private static void SendPlayerPositions()
	{
		if (!RCon.HasSubscribers)
		{
			return;
		}
		try
		{
			RCon.SendMessageToSubscribers(Server.GetPlayerListPosTable().ToJson(), -64001);
		}
		catch (Exception exception)
		{
			Debug.LogException(exception);
		}
	}
}
