using System;
using System.Collections.Generic;

public class SmartList
{
	private const int defaultCapacity = 16;

	private static readonly OccludeeState[] emptyList = new OccludeeState[0];

	private static readonly int[] emptySlots = new int[0];

	private OccludeeState[] list;

	private int[] slots;

	private Queue<int> recycled;

	private int count;

	public OccludeeState[] List => list;

	public int[] Slots => slots;

	public int Size => count;

	public int Count => count - recycled.Count;

	public OccludeeState this[int i]
	{
		get
		{
			return list[i];
		}
		set
		{
			list[i] = value;
		}
	}

	public int Capacity
	{
		get
		{
			return list.Length;
		}
		set
		{
			if (value == list.Length)
			{
				return;
			}
			if (value > 0)
			{
				OccludeeState[] destinationArray = new OccludeeState[value];
				int[] destinationArray2 = new int[value];
				if (count > 0)
				{
					Array.Copy(list, destinationArray, count);
					Array.Copy(slots, destinationArray2, count);
				}
				list = destinationArray;
				slots = destinationArray2;
			}
			else
			{
				list = emptyList;
				slots = emptySlots;
			}
		}
	}

	public SmartList(int capacity)
	{
		list = new OccludeeState[capacity];
		slots = new int[capacity];
		recycled = new Queue<int>();
		count = 0;
	}

	public void Add(OccludeeState value, int capacityGranularity = 16)
	{
		int num;
		if (recycled.Count > 0)
		{
			num = recycled.Dequeue();
			list[num] = value;
			slots[num] = value.slot;
		}
		else
		{
			num = count;
			if (num == list.Length)
			{
				EnsureCapacity(count + 1);
			}
			list[num] = value;
			slots[num] = value.slot;
			count++;
		}
		value.hashedListIndex = num;
	}

	public void Remove(OccludeeState value)
	{
		int hashedListIndex = value.hashedListIndex;
		list[hashedListIndex] = null;
		slots[hashedListIndex] = -1;
		recycled.Enqueue(hashedListIndex);
		value.hashedListIndex = -1;
	}

	public bool Contains(OccludeeState value)
	{
		int hashedListIndex = value.hashedListIndex;
		if (hashedListIndex >= 0)
		{
			return list[hashedListIndex] != null;
		}
		return false;
	}

	public void EnsureCapacity(int min)
	{
		if (list.Length < min)
		{
			int num = ((list.Length == 0) ? 16 : (list.Length * 2));
			num = ((num < min) ? min : num);
			Capacity = num;
		}
	}
}
