using System;
using Facepunch;
using UnityEngine;

[Serializable]
public class TargetInfo : Pool.IPooled
{
	public float damageReceivedFrom;

	public BaseEntity entity;

	public float lastSeenTime;

	public Vector3 lastSeenPosition;

	public void EnterPool()
	{
		entity = null;
		lastSeenPosition = Vector3.zero;
		lastSeenTime = 0f;
	}

	public void Setup(BaseEntity ent, float time)
	{
		entity = ent;
		lastSeenTime = time;
	}

	public void LeavePool()
	{
	}

	public float GetPriorityScore(BradleyAPC apc)
	{
		BasePlayer basePlayer = entity as BasePlayer;
		if ((bool)basePlayer)
		{
			float value = Vector3.Distance(entity.transform.position, apc.transform.position);
			float num = (1f - Mathf.InverseLerp(10f, 80f, value)) * 50f;
			float value2 = ((basePlayer.GetHeldEntity() == null) ? 0f : basePlayer.GetHeldEntity().hostileScore);
			float num2 = Mathf.InverseLerp(4f, 20f, value2) * 100f;
			float num3 = Mathf.InverseLerp(10f, 3f, Time.time - lastSeenTime) * 100f;
			float num4 = Mathf.InverseLerp(0f, 100f, damageReceivedFrom) * 50f;
			return num + num2 + num4 + num3;
		}
		return 0f;
	}

	public bool IsVisible()
	{
		if (lastSeenTime != -1f)
		{
			return Time.time - lastSeenTime < sightUpdateRate * 2f;
		}
		return false;
	}

	public bool IsValid()
	{
		return entity != null;
	}
}
