using ConVar;
using UnityEngine;

public class TowingAttachment<TEntity> : TowingAttachment where TEntity : BaseEntity, ITowing
{
	private readonly TEntity _entity;

	private readonly TowConfig _towingConfig;

	private ConfigurableJoint _towingJoint;

	private EntityRef<BaseEntity> _otherEntity;

	private float _lastBreakingForce;

	private float _idealBreakingForce;

	public TowingAttachment(TEntity entity)
	{
		_entity = entity;
		_towingConfig = PrefabAttribute.server.Find<TowConfig>(_entity.prefabID);
	}

	public void FixedUpdate()
	{
		BaseEntity baseEntity = _otherEntity.Get(serverside: true);
		if (_entity.IsTowing && (!baseEntity.IsValid() || baseEntity.IsDestroyed || _towingJoint == null))
		{
			Detach();
		}
		if (_entity.IsTowing)
		{
			MoveToNormalBreakForce();
		}
	}

	public void AttachTo<TTowableEntity>(TTowableEntity other) where TTowableEntity : ITowing
	{
		if (_entity.IsTowing)
		{
			Detach();
		}
		if (_towingJoint != null)
		{
			Object.Destroy(_towingJoint);
		}
		Rigidbody towBody = other.TowBody;
		BaseEntity towEntity = other.TowEntity;
		TowConfig towConfig = PrefabAttribute.server.Find<TowConfig>(towEntity.prefabID);
		if (towConfig == null)
		{
			Debug.LogError("Attaching to towable without TowConfig", towEntity);
			return;
		}
		TowConfig.Configuration configuration = _towingConfig.Combine(towConfig);
		_towingJoint = _entity.TowBody.gameObject.AddComponent<ConfigurableJoint>();
		_towingJoint.connectedBody = towBody;
		Matrix4x4 worldToLocalMatrix = _entity.TowBody.transform.worldToLocalMatrix;
		_towingJoint.autoConfigureConnectedAnchor = false;
		_towingJoint.anchor = worldToLocalMatrix.MultiplyPoint3x4(_entity.TowAnchor.position);
		_towingJoint.axis = worldToLocalMatrix.MultiplyVector(towBody.transform.right).normalized;
		_towingJoint.secondaryAxis = worldToLocalMatrix.MultiplyVector(towBody.transform.up).normalized;
		_towingJoint.swapBodies = false;
		Matrix4x4 worldToLocalMatrix2 = towBody.transform.worldToLocalMatrix;
		_towingJoint.connectedAnchor = worldToLocalMatrix2.MultiplyPoint3x4(other.TowAnchor.position);
		_towingJoint.xMotion = ConfigurableJointMotion.Limited;
		_towingJoint.yMotion = ConfigurableJointMotion.Limited;
		_towingJoint.zMotion = ConfigurableJointMotion.Limited;
		_towingJoint.linearLimitSpring = new SoftJointLimitSpring
		{
			spring = 100000f,
			damper = 100f
		};
		_towingJoint.linearLimit = new SoftJointLimit
		{
			limit = 0.2f
		};
		_towingJoint.enableCollision = true;
		_towingJoint.angularXMotion = ConfigurableJointMotion.Limited;
		_towingJoint.angularYMotion = ConfigurableJointMotion.Limited;
		_towingJoint.angularZMotion = ConfigurableJointMotion.Limited;
		_towingJoint.lowAngularXLimit = new SoftJointLimit
		{
			limit = configuration.AngularLimitsX.x
		};
		_towingJoint.highAngularXLimit = new SoftJointLimit
		{
			limit = configuration.AngularLimitsX.y
		};
		_towingJoint.angularYLimit = new SoftJointLimit
		{
			limit = configuration.AngularLimitY
		};
		_towingJoint.angularZLimit = new SoftJointLimit
		{
			limit = configuration.AngularLimitZ
		};
		_towingJoint.targetRotation = Quaternion.identity;
		_towingJoint.projectionMode = JointProjectionMode.PositionAndRotation;
		_towingJoint.breakForce = 1E+20f;
		_lastBreakingForce = _towingJoint.breakForce;
		float num = Mathf.Min(_entity.TowBody.isKinematic ? 10000f : _entity.TowBody.mass, towBody.isKinematic ? 10000f : towBody.mass);
		_idealBreakingForce = num * ConVar.Physics.towingmaxlinearaccelfromjoint;
		_otherEntity.Set(towEntity);
		_entity.SetFlag(BaseEntity.Flags.Reserved14, b: true);
		towEntity.SetFlag(BaseEntity.Flags.Reserved14, b: true);
		_entity.OnTowAttach();
		other.OnTowAttach();
	}

	public void Detach()
	{
		if (_towingJoint != null)
		{
			Object.Destroy(_towingJoint);
		}
		_entity.SetFlag(BaseEntity.Flags.Reserved14, b: false);
		BaseEntity baseEntity = _otherEntity.Get(serverside: true);
		bool num = baseEntity == null;
		if (!num)
		{
			baseEntity.SetFlag(BaseEntity.Flags.Reserved14, b: false);
		}
		_otherEntity = default(EntityRef<BaseEntity>);
		_entity.OnTowDetach();
		if (!num && baseEntity is ITowing towing)
		{
			towing.OnTowDetach();
		}
	}

	private void MoveToNormalBreakForce()
	{
		if (Mathf.Approximately(_lastBreakingForce, _idealBreakingForce))
		{
			if (!_towingJoint.swapBodies)
			{
				_towingJoint.swapBodies = true;
			}
		}
		else
		{
			float num = Mathf.Lerp(_towingJoint.breakForce, _idealBreakingForce, UnityEngine.Time.fixedDeltaTime * 10f);
			_towingJoint.breakForce = num;
			_lastBreakingForce = num;
		}
	}
}
