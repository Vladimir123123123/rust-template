using System.Collections.Generic;
using UnityEngine;

public class TreeNode
{
	public FSMStateBase state;

	public List<(FSMTransitionBase transition, TreeNode dstState)> tickTransitions;

	public List<(FSMTransitionBase transition, TreeNode dstState, EFSMStateStatus status)> endTransitions;

	public List<TreeNode> children;

	public TreeNode parent;

	public TreeNode(FSMStateBase state = null)
	{
		this.state = state;
	}

	public bool IsLeaf()
	{
		return children == null;
	}

	public TreeNode GetFirstChildLeaf()
	{
		if (IsLeaf())
		{
			return this;
		}
		foreach (TreeNode child in children)
		{
			if (child.IsLeaf())
			{
				return child;
			}
			TreeNode firstChildLeaf = child.GetFirstChildLeaf();
			if (firstChildLeaf != null)
			{
				return firstChildLeaf;
			}
		}
		return null;
	}

	public void GetAllNestedStates(HashSet<FSMStateBase> nestedStates)
	{
		if (IsLeaf())
		{
			return;
		}
		foreach (TreeNode child in children)
		{
			if (child.IsLeaf())
			{
				nestedStates.Add(child.state);
			}
			else
			{
				child.GetAllNestedStates(nestedStates);
			}
		}
	}

	public TreeNode AddEndTransition(TreeNode dstState, FSMTransitionBase transition = null)
	{
		if (endTransitions == null)
		{
			endTransitions = new List<(FSMTransitionBase, TreeNode, EFSMStateStatus)>();
		}
		endTransitions.Add((transition, dstState, EFSMStateStatus.Success | EFSMStateStatus.Failure));
		return this;
	}

	public TreeNode AddFailureTransition(TreeNode dstState)
	{
		if (endTransitions == null)
		{
			endTransitions = new List<(FSMTransitionBase, TreeNode, EFSMStateStatus)>();
		}
		endTransitions.Add((null, dstState, EFSMStateStatus.Failure));
		return this;
	}

	public TreeNode AddTickTransition(TreeNode dstState, FSMTransitionBase transition)
	{
		if (tickTransitions == null)
		{
			tickTransitions = new List<(FSMTransitionBase, TreeNode)>();
		}
		tickTransitions.Add((transition, dstState));
		return this;
	}

	public TreeNode AddTickBranchingTrans(TreeNode dstState1, FSMTransitionBase sharedTransition, TreeNode dstState2, FSMTransitionBase dstState2Trans)
	{
		if (tickTransitions == null)
		{
			tickTransitions = new List<(FSMTransitionBase, TreeNode)>();
		}
		tickTransitions.Add((new Trans_And { sharedTransition, dstState2Trans }, dstState2));
		tickTransitions.Add((sharedTransition, dstState1));
		return this;
	}

	public TreeNode AddChild(TreeNode child)
	{
		if (state != null)
		{
			Debug.LogError("Can't add children to node with a state");
		}
		if (children == null)
		{
			children = new List<TreeNode>();
		}
		children.Add(child);
		child.parent = this;
		return child;
	}

	public TreeNode AddChildren(TreeNode child1, TreeNode child2 = null, TreeNode child3 = null, TreeNode child4 = null, TreeNode child5 = null, TreeNode child6 = null, TreeNode child7 = null, TreeNode child8 = null, TreeNode child9 = null, TreeNode child10 = null)
	{
		AddChild(child1);
		if (child2 != null)
		{
			AddChild(child2);
		}
		if (child3 != null)
		{
			AddChild(child3);
		}
		if (child4 != null)
		{
			AddChild(child4);
		}
		if (child5 != null)
		{
			AddChild(child5);
		}
		if (child6 != null)
		{
			AddChild(child6);
		}
		if (child7 != null)
		{
			AddChild(child7);
		}
		if (child8 != null)
		{
			AddChild(child8);
		}
		if (child9 != null)
		{
			AddChild(child9);
		}
		if (child10 != null)
		{
			AddChild(child10);
		}
		return this;
	}
}
