using Rust;
using UnityEngine;

public static class client
{
	public static void Run(Type fxtype, BaseEntity ent, uint boneID = 0u, Vector3 posLocal = default(Vector3), Vector3 normLocal = default(Vector3))
	{
	}

	public static void Run(string strName, BaseEntity ent, uint boneID = 0u, Vector3 posLocal = default(Vector3), Vector3 normLocal = default(Vector3))
	{
		string.IsNullOrEmpty(strName);
	}

	public static void Run(Type fxtype, Vector3 posWorld = default(Vector3), Vector3 normWorld = default(Vector3), Vector3 up = default(Vector3))
	{
	}

	public static void Run(string strName, Vector3 posWorld = default(Vector3), Vector3 normWorld = default(Vector3), Vector3 up = default(Vector3), Type overrideType = Type.Generic)
	{
		string.IsNullOrEmpty(strName);
	}

	public static void Run(string strName, GameObject obj)
	{
		string.IsNullOrEmpty(strName);
	}

	public static void DoAdditiveImpactEffect(HitInfo info, string effectName)
	{
		if (info.HitEntity.IsValid())
		{
			Run(effectName, info.HitEntity, info.HitBone, info.HitPositionLocal + info.HitNormalLocal * 0.1f, info.HitNormalLocal);
		}
		else
		{
			Run(effectName, info.HitPositionWorld + info.HitNormalWorld * 0.1f, info.HitNormalWorld);
		}
	}

	private static bool CanPlayImpactEffect(HitInfo info)
	{
		if (TerrainMeta.WaterMap != null && info.HitMaterial != Projectile.WaterMaterialID() && info.HitMaterial != Projectile.FleshMaterialID() && WaterLevel.Test(info.HitPositionWorld, waves: false, volumes: false))
		{
			return false;
		}
		return true;
	}

	private static Type GetOverrideType(HitInfo info)
	{
		return Type.Generic;
	}

	private static void HandleAdditiveEffects(HitInfo info)
	{
		if (info.damageTypes.Has(DamageType.Explosion))
		{
			DoAdditiveImpactEffect(info, "assets/bundled/prefabs/fx/impacts/additive/explosion.prefab");
		}
		if (info.damageTypes.Has(DamageType.Heat))
		{
			DoAdditiveImpactEffect(info, "assets/bundled/prefabs/fx/impacts/additive/fire.prefab");
		}
	}

	public static void ImpactEffect(HitInfo info, string customEffect = null)
	{
		if (!info.DoHitEffects)
		{
			return;
		}
		string materialName = StringPool.Get(info.HitMaterial);
		string strName = customEffect ?? EffectDictionary.GetParticle(info.damageTypes.GetMajorityDamageType(), materialName);
		string decal = EffectDictionary.GetDecal(info.damageTypes.GetMajorityDamageType(), materialName);
		if (!CanPlayImpactEffect(info))
		{
			return;
		}
		if (info.HitEntity.IsValid())
		{
			if (customEffect == null)
			{
				GameObjectRef impactEffect = info.HitEntity.GetImpactEffect(info);
				if (impactEffect.isValid)
				{
					strName = impactEffect.resourcePath;
				}
			}
			Run(strName, info.HitEntity, info.HitBone, info.HitPositionLocal, info.HitNormalLocal);
			if (info.DoDecals)
			{
				Run(decal, info.HitEntity, info.HitBone, info.HitPositionLocal, info.HitNormalLocal);
			}
		}
		else
		{
			Type overrideType = GetOverrideType(info);
			Run(strName, info.HitPositionWorld, info.HitNormalWorld, default(Vector3), overrideType);
			Run(decal, info.HitPositionWorld, info.HitNormalWorld, default(Vector3), overrideType);
		}
		if (info.WeaponPrefab is BaseMelee baseMelee)
		{
			string strikeEffectPath = baseMelee.GetStrikeEffectPath(materialName);
			if (info.HitEntity.IsValid())
			{
				Run(strikeEffectPath, info.HitEntity, info.HitBone, info.HitPositionLocal, info.HitNormalLocal);
			}
			else
			{
				Run(strikeEffectPath, info.HitPositionWorld, info.HitNormalWorld);
			}
		}
		HandleAdditiveEffects(info);
	}
}
