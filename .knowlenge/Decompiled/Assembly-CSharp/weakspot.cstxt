using System;
using System.Collections.Generic;
using Rust;
using UnityEngine;

[Serializable]
public class weakspot
{
	[NonSerialized]
	public PatrolHelicopter body;

	public string[] bonenames;

	public float maxHealth;

	public float health;

	public float healthFractionOnDestroyed = 0.5f;

	public GameObjectRef destroyedParticles;

	public GameObjectRef damagedParticles;

	public GameObject damagedEffect;

	public GameObject destroyedEffect;

	public List<BasePlayer> attackers;

	private bool isDestroyed;

	public float HealthFraction()
	{
		return health / maxHealth;
	}

	public void Hurt(float amount, HitInfo info)
	{
		if (!isDestroyed)
		{
			health -= amount;
			Effect.server.Run(damagedParticles.resourcePath, body, StringPool.Get(bonenames[UnityEngine.Random.Range(0, bonenames.Length)]), Vector3.zero, Vector3.up, null, broadcast: true);
			if (health <= 0f)
			{
				health = 0f;
				WeakspotDestroyed();
			}
		}
	}

	public void Heal(float amount)
	{
		health += amount;
	}

	public void WeakspotDestroyed()
	{
		isDestroyed = true;
		Effect.server.Run(destroyedParticles.resourcePath, body, StringPool.Get(bonenames[UnityEngine.Random.Range(0, bonenames.Length)]), Vector3.zero, Vector3.up, null, broadcast: true);
		body.Hurt(body.MaxHealth() * healthFractionOnDestroyed, DamageType.Generic, null, useProtection: false);
	}
}
