using Facepunch.BurstCloth;
using UnityEngine;
using UnityEngine.Serialization;

[CreateAssetMenu(fileName = "BurstClothMaterial", menuName = "Facepunch.BurstCloth/Material")]
public class BurstClothMaterial : ScriptableObject
{
	[Header("Relaxation\n [0,1]\tUnder-tuned - generally gives best results\n[1, 1.5]\tOver-tuned - can work well with low iteration counts")]
	[SerializeField]
	[Range(0.25f, 1.5f)]
	[Tooltip("Relaxation factor on alignment with parent")]
	private float lengthRelaxation = 1f;

	[SerializeField]
	[Range(0f, 15f)]
	[Tooltip("Speed at which a bone returns to its original orientation")]
	private float shapeRelaxation;

	[SerializeField]
	[Range(0f, 1.5f)]
	[Tooltip("Relaxation factor on alignment with siblings (very low values work best)")]
	private float siblingRelaxation;

	[SerializeField]
	[Range(0f, 0.99f)]
	[Tooltip("Controls how quickly movements come to rest.")]
	private float _damping = 0.2f;

	[Space]
	[Header("Depth Weighting Curves")]
	[SerializeField]
	[BurstClothCurveRect(0f, 0f, 1f, 1f)]
	[Tooltip("Multiplier for tweaking damping according to depth in the chain.")]
	private AnimationCurve _dampingCurve = AnimationCurve.EaseInOut(0f, 1f, 1f, 1f);

	[FormerlySerializedAs("_lengthWeightCurve")]
	[SerializeField]
	[BurstClothCurveRect(0f, 0f, 1f, 1f)]
	[Tooltip("Multiplier for tweaking length weight according to depth in the chain.")]
	private AnimationCurve _lengthRelaxationCurve = AnimationCurve.Linear(0f, 1f, 1f, 1f);

	[SerializeField]
	[BurstClothCurveRect(0f, 0f, 1f, 1f)]
	[Tooltip("Multiplier for tweaking shape weight according to depth in the chain.")]
	private AnimationCurve _shapeRelaxationCurve = AnimationCurve.Linear(0f, 1f, 1f, 1f);

	[SerializeField]
	[BurstClothCurveRect(0f, 0f, 1f, 1f)]
	[Tooltip("Multiplier for tweaking sibling constraint weight according to depth in the chain.")]
	private AnimationCurve _siblingConstraintWeightCurve = AnimationCurve.Linear(0f, 1f, 1f, 1f);

	[Space]
	[Header("Debug - can hurt editor performance")]
	[SerializeField]
	private bool _forceSyncInEditor;

	private static BurstClothMaterial _defaultMaterial;

	public bool ForceSyncInEditor => _forceSyncInEditor;

	public static BurstClothMaterial DefaultMaterial
	{
		get
		{
			if (_defaultMaterial == null)
			{
				_defaultMaterial = ScriptableObject.CreateInstance<BurstClothMaterial>();
			}
			_defaultMaterial.name = "BurstCloth_Default";
			return _defaultMaterial;
		}
	}

	public float GetLengthRelaxation(float t)
	{
		return lengthRelaxation * _lengthRelaxationCurve.Evaluate(t);
	}

	public float GetShapeRelaxation(float t)
	{
		return shapeRelaxation * _shapeRelaxationCurve.Evaluate(t);
	}

	public float GetSiblingRelaxation(float t)
	{
		return siblingRelaxation * _siblingConstraintWeightCurve.Evaluate(t);
	}

	public float GetDamping(float t)
	{
		return _damping * _dampingCurve.Evaluate(t);
	}
}
