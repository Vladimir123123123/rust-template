using System;
using System.Linq;
using Facepunch.Extend;
using Network;
using Newtonsoft.Json;
using UnityEngine;

public class Arg
{
	public Option Option;

	public Command cmd;

	public string RawCommand;

	public string FullString = "";

	public string[] Args;

	public bool Invalid = true;

	public string Reply = "";

	public bool Silent;

	public bool IsClientside => Option.IsClient;

	public bool IsServerside => Option.IsServer;

	public Connection Connection => Option.Connection;

	public bool IsConnectionAdmin
	{
		get
		{
			if (Option.Connection != null && Option.Connection.connected && Option.Connection.authLevel != 0)
			{
				if (Option.Connection.encryptionLevel > 1)
				{
					return Option.Connection.trusted;
				}
				return true;
			}
			return false;
		}
	}

	public bool IsAdmin
	{
		get
		{
			if (!IsConnectionAdmin)
			{
				return IsRcon;
			}
			return true;
		}
	}

	public bool IsRcon => Option.FromRcon;

	public Arg(Option options, string rconCommand)
	{
		Option = options;
		BuildCommand(rconCommand);
	}

	internal void BuildCommand(string command)
	{
		RawCommand = command;
		if (string.IsNullOrEmpty(command))
		{
			Invalid = true;
			return;
		}
		if (command.IndexOf('.') <= 0 || command.IndexOf(' ', 0, command.IndexOf('.')) != -1)
		{
			command = "global." + command;
		}
		int num = command.IndexOf('.');
		if (num <= 0)
		{
			return;
		}
		string text = command.Substring(0, num);
		if (text.Length < 1)
		{
			return;
		}
		text = text.Trim().ToLower();
		string text2 = command.Substring(num + 1);
		if (text2.Length >= 1)
		{
			int num2 = text2.IndexOf(' ');
			if (num2 > 0)
			{
				FullString = text2.Substring(num2 + 1);
				FullString = FullString.Trim();
				Args = FullString.SplitQuotesStrings(16);
				text2 = text2.Substring(0, num2);
			}
			text2 = text2.Trim().ToLower();
			if (cmd == null && Option.IsClient)
			{
				cmd = Index.Client.Find(text + "." + text2);
			}
			if (cmd == null && Option.IsServer)
			{
				cmd = Index.Server.Find(text + "." + text2);
			}
			Invalid = cmd == null;
		}
	}

	internal bool HasPermission()
	{
		if (cmd == null)
		{
			return false;
		}
		if (Option.IsUnrestricted)
		{
			return true;
		}
		if (IsClientside)
		{
			if (cmd.ClientAdmin)
			{
				if (ClientCanRunAdminCommands != null)
				{
					return ClientCanRunAdminCommands();
				}
				return false;
			}
			if (Option.IsFromServer && !cmd.AllowRunFromServer)
			{
				Debug.Log("Server tried to run command \"" + FullString + "\", but we blocked it.");
				return false;
			}
			return cmd.Client;
		}
		if (cmd.ServerAdmin)
		{
			if (IsRcon)
			{
				return true;
			}
			if (IsAdmin)
			{
				return true;
			}
		}
		if (cmd.ServerUser && Connection != null)
		{
			return true;
		}
		return false;
	}

	internal bool CanSeeInFind(Command command)
	{
		if (command == null)
		{
			return false;
		}
		if (Option.IsUnrestricted)
		{
			return true;
		}
		if (IsClientside)
		{
			return command.Client;
		}
		if (IsServerside)
		{
			return command.Server;
		}
		return false;
	}

	public void ReplyWith(string strValue)
	{
		Reply = strValue;
	}

	public void ReplyWith(object obj)
	{
		Reply = JsonConvert.SerializeObject(obj, (Formatting)1);
	}

	public bool HasArgs(int iMinimum = 1)
	{
		if (Args == null)
		{
			return false;
		}
		return Args.Length >= iMinimum;
	}

	public bool HasArg(string value, bool remove = false)
	{
		if (Args == null)
		{
			return false;
		}
		if (Array.IndexOf(Args, value) == -1)
		{
			return false;
		}
		if (remove)
		{
			Args = Args.Where((string x) => x != value).ToArray();
		}
		return true;
	}

	public string GetString(int iArg, string def = "")
	{
		if (HasArgs(iArg + 1))
		{
			return Args[iArg];
		}
		return def;
	}

	public int GetInt(int iArg, int def = 0)
	{
		string @string = GetString(iArg, null);
		if (@string == null)
		{
			return def;
		}
		if (int.TryParse(@string, out var result))
		{
			return result;
		}
		return def;
	}

	public long GetLong(int iArg, long def = 0L)
	{
		string @string = GetString(iArg, null);
		if (@string == null)
		{
			return def;
		}
		if (long.TryParse(@string, out var result))
		{
			return result;
		}
		return def;
	}

	public ulong GetULong(int iArg, ulong def = 0uL)
	{
		string @string = GetString(iArg, null);
		if (@string == null)
		{
			return def;
		}
		if (ulong.TryParse(@string, out var result))
		{
			return result;
		}
		return def;
	}

	public bool TryGetUInt(int iArg, out uint value)
	{
		string @string = GetString(iArg, null);
		if (@string == null)
		{
			value = 0u;
			return false;
		}
		return uint.TryParse(@string, out value);
	}

	public uint GetUInt(int iArg, uint def = 0u)
	{
		if (!TryGetUInt(iArg, out var value))
		{
			return def;
		}
		return value;
	}

	public ulong GetUInt64(int iArg, ulong def = 0uL)
	{
		string @string = GetString(iArg, null);
		if (@string == null)
		{
			return def;
		}
		if (ulong.TryParse(@string, out var result))
		{
			return result;
		}
		return def;
	}

	public float GetFloat(int iArg, float def = 0f)
	{
		string @string = GetString(iArg, null);
		if (@string == null)
		{
			return def;
		}
		if (float.TryParse(@string, out var result))
		{
			return result;
		}
		return def;
	}

	public bool GetBool(int iArg, bool def = false)
	{
		string @string = GetString(iArg, null);
		if (@string == null)
		{
			return def;
		}
		if (@string == string.Empty || @string == "0")
		{
			return false;
		}
		if (@string.Equals("f", StringComparison.InvariantCultureIgnoreCase))
		{
			return false;
		}
		if (@string.Equals("false", StringComparison.InvariantCultureIgnoreCase))
		{
			return false;
		}
		if (@string.Equals("no", StringComparison.InvariantCultureIgnoreCase))
		{
			return false;
		}
		if (@string.Equals("none", StringComparison.InvariantCultureIgnoreCase))
		{
			return false;
		}
		if (@string.Equals("null", StringComparison.InvariantCultureIgnoreCase))
		{
			return false;
		}
		return true;
	}

	public long GetTimestamp(int iArg, long def = 0L)
	{
		string text = GetString(iArg, null);
		if (text == null)
		{
			return def;
		}
		int num = 3600;
		if (text.Length > 1 && char.IsLetter(text[text.Length - 1]))
		{
			switch (text[text.Length - 1])
			{
			case 's':
				num = 1;
				break;
			case 'm':
				num = 60;
				break;
			case 'h':
				num = 3600;
				break;
			case 'd':
				num = 86400;
				break;
			case 'w':
				num = 604800;
				break;
			case 'M':
				num = 2592000;
				break;
			case 'Y':
				num = 31536000;
				break;
			}
			text = text.Substring(0, text.Length - 1);
		}
		if (long.TryParse(text, out var result))
		{
			if (result > 0 && result <= 315360000)
			{
				return DateTimeOffset.UtcNow.ToUnixTimeSeconds() + result * num;
			}
			return result;
		}
		return def;
	}

	public long GetTicks(int iArg, long def = 0L)
	{
		string text = GetString(iArg, null);
		if (text == null)
		{
			return def;
		}
		int num = 3600;
		if (text.Length > 1 && char.IsLetter(text[text.Length - 1]))
		{
			switch (text[text.Length - 1])
			{
			case 's':
				num = 1;
				break;
			case 'm':
				num = 60;
				break;
			case 'h':
				num = 3600;
				break;
			case 'd':
				num = 86400;
				break;
			case 'w':
				num = 604800;
				break;
			case 'M':
				num = 2592000;
				break;
			case 'Y':
				num = 31536000;
				break;
			}
			text = text.Substring(0, text.Length - 1);
		}
		if (long.TryParse(text, out var result))
		{
			return result * num * 10000000;
		}
		return def;
	}

	public void ReplyWithObject(object rval)
	{
		if (rval != null)
		{
			if (rval is string)
			{
				ReplyWith((string)rval);
				return;
			}
			string strValue = JsonConvert.SerializeObject(rval, (Formatting)1);
			ReplyWith(strValue);
		}
	}

	public Vector3 GetVector3(int iArg, Vector3 def = default(Vector3))
	{
		return GetString(iArg, null)?.ToVector3() ?? def;
	}

	public Color GetColor(int iArg, Color def = default(Color))
	{
		return GetString(iArg, null)?.ToColor() ?? def;
	}
}
