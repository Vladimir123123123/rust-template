using Network;

public struct Option
{
	public static Option Unrestricted
	{
		get
		{
			Option result = default(Option);
			result.IsServer = true;
			result.IsClient = true;
			result.ForwardtoServerOnMissing = true;
			result.PrintOutput = true;
			result.IsUnrestricted = true;
			return result;
		}
	}

	public static Option Client
	{
		get
		{
			Option result = default(Option);
			result.IsClient = true;
			result.ForwardtoServerOnMissing = true;
			result.PrintOutput = true;
			return result;
		}
	}

	public static Option Server
	{
		get
		{
			Option result = default(Option);
			result.IsServer = true;
			result.PrintOutput = true;
			result.FromRcon = true;
			return result;
		}
	}

	public bool IsServer { get; set; }

	public bool IsClient { get; set; }

	public bool ForwardtoServerOnMissing { get; set; }

	public bool PrintOutput { get; set; }

	public bool IsUnrestricted { get; set; }

	public bool FromRcon { get; set; }

	public bool PrintValueOnly { get; set; }

	public int RconConnectionId { get; set; }

	public bool IsFromServer { get; set; }

	public Connection Connection { get; set; }

	public Option Quiet()
	{
		PrintOutput = false;
		return this;
	}

	public Option WithRconId(int id)
	{
		RconConnectionId = id;
		return this;
	}

	public Option PrintValue()
	{
		PrintValueOnly = true;
		return this;
	}

	public Option FromServer()
	{
		IsFromServer = true;
		return this;
	}

	public Option FromConnection(Connection connection)
	{
		FromRcon = false;
		Connection = connection;
		return this;
	}
}
