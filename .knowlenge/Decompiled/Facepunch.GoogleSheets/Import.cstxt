using System;
using System.Collections.Generic;
using System.Linq;
using System.Net;
using System.Net.Security;
using System.Reflection;
using System.Security.Cryptography.X509Certificates;
using System.Text.RegularExpressions;

public static class Import
{
	private static Regex regex = new Regex("(?<=^|,)(\"(?:[^\"]|\"\")*\"|[^,]*)");

	public static T[] FromUrl<T>(string sheetId) where T : new()
	{
		MonoSecurityBullshitHack();
		string address = $"http://docs.google.com/spreadsheets/d/{sheetId}/pub?output=csv";
		string text = new WebClient().DownloadString(address);
		Console.WriteLine(text);
		string[] source = text.Split(new char[1] { '\n' }, StringSplitOptions.RemoveEmptyEntries);
		PropertyInfo[] properties = typeof(T).GetProperties(BindingFlags.Instance | BindingFlags.Public | BindingFlags.NonPublic);
		string[] columnNames = GetCSVColumns(source.First());
		List<T> list = new List<T>();
		foreach (string item in source.Skip(1))
		{
			string[] cSVColumns = GetCSVColumns(item);
			T val = new T();
			int i;
			for (i = 0; i < cSVColumns.Length; i++)
			{
				foreach (PropertyInfo item2 in properties.Where((PropertyInfo x) => x.Name.Equals(columnNames[i], StringComparison.CurrentCultureIgnoreCase)))
				{
					item2.SetValue(val, Convert.ChangeType(cSVColumns[i], item2.PropertyType), null);
				}
			}
			list.Add(val);
		}
		return list.ToArray();
	}

	private static string[] GetCSVColumns(string line)
	{
		line = line.Trim('\n', '\r');
		return regex.Matches(line).Cast<Match>().Select(delegate(Match x)
		{
			string text = x.Value.Replace("\"\"", "\"");
			if (text.EndsWith("\"") && text.StartsWith("\""))
			{
				text = text.Substring(1, text.Length - 2);
			}
			return text;
		})
			.ToArray();
	}

	private static void MonoSecurityBullshitHack()
	{
		ServicePointManager.ServerCertificateValidationCallback = (object a, X509Certificate b, X509Chain c, SslPolicyErrors d) => true;
	}
}
