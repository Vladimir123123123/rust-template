using System;
using Facepunch;
using Network;
using Network.Visibility;

public class Client : BaseNetwork
{
	public static int MaxReceiveTime = 10;

	public static int MaxReadQueueLength = 500;

	public static int MaxWriteQueueLength = 500;

	public static int MaxDecryptQueueLength = 500;

	public static int MaxReadQueueBytes = 52428800;

	public static int MaxWriteQueueBytes = 52428800;

	public static int MaxDecryptQueueBytes = 52428800;

	public static int MaxMainThreadWait = 100;

	public static int MaxReadThreadWait = 100;

	public static int MaxWriteThreadWait = 100;

	public static int MaxDecryptThreadWait = 100;

	public Manager visibility;

	public static string disconnectReason;

	public Stats IncomingStats = new Stats();

	public IClientCallback callbackHandler;

	public override bool SupportsServerDemos => false;

	protected override int MaxReceiveTimeValue => MaxReceiveTime;

	protected override int MaxReadQueueLengthValue => MaxReadQueueLength;

	protected override int MaxWriteQueueLengthValue => MaxWriteQueueLength;

	protected override int MaxDecryptQueueLengthValue => MaxDecryptQueueLength;

	protected override int MaxReadQueueBytesValue => MaxReadQueueBytes;

	protected override int MaxWriteQueueBytesValue => MaxWriteQueueBytes;

	protected override int MaxDecryptQueueBytesValue => MaxDecryptQueueBytes;

	protected override int MaxMainThreadWaitValue => MaxMainThreadWait;

	protected override int MaxReadThreadWaitValue => MaxReadThreadWait;

	protected override int MaxWriteThreadWaitValue => MaxWriteThreadWait;

	protected override int MaxDecryptThreadWaitValue => MaxDecryptThreadWait;

	public Connection Connection { get; protected set; }

	public virtual bool IsPlaying { get; }

	public string ConnectedAddress { get; set; } = "unset";

	public int ConnectedPort { get; set; }

	public string ServerName { get; set; }

	public bool IsOfficialServer { get; set; }

	public bool IsRecording
	{
		get
		{
			if (Connection == null)
			{
				return false;
			}
			return Connection.IsRecording;
		}
	}

	public string RecordFilename => Connection.RecordFilename;

	public TimeSpan RecordTimeElapsed => Connection.RecordTimeElapsed;

	public virtual bool Connect(string strURL, int port)
	{
		disconnectReason = "Disconnected";
		return true;
	}

	public virtual void Flush()
	{
	}

	public virtual void Disconnect(string reason, bool sendReasonToServer = true)
	{
	}

	protected void OnDisconnected(string str)
	{
		if (callbackHandler != null)
		{
			callbackHandler.OnClientDisconnected(str);
		}
	}

	public Networkable CreateNetworkable(NetworkableId networkID, uint networkGroup)
	{
		Networkable networkable = Pool.Get<Networkable>();
		networkable.ID = networkID;
		networkable.SwitchGroup(visibility.Get(networkGroup));
		return networkable;
	}

	public void DestroyNetworkable(ref Networkable networkable)
	{
		networkable.Destroy();
		Pool.Free(ref networkable);
	}

	public void SetupNetworkable(Networkable net)
	{
		net.cl = this;
	}

	public virtual int GetLastPing()
	{
		return 0;
	}

	public bool StartRecording(string targetFilename, IDemoHeader header)
	{
		return Connection.StartRecording(targetFilename, header);
	}

	public void StopRecording()
	{
		Connection.StopRecording();
	}
}
