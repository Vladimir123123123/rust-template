using System;
using System.Collections.Generic;
using Network;
using Network.Visibility;
using UnityEngine;

public class Group : IDisposable
{
	protected Manager manager;

	public uint ID;

	public Bounds bounds;

	public bool restricted;

	public ListHashSet<Networkable> networkables = new ListHashSet<Networkable>();

	public List<Connection> subscribers = new List<Connection>();

	public bool isGlobal => ID == 0;

	public Group(Manager m, uint id)
	{
		manager = m;
		ID = id;
	}

	public virtual void Dispose()
	{
		networkables = null;
		subscribers = null;
		manager = null;
		ID = 0u;
	}

	public void Join(Networkable nw)
	{
		if (networkables != null)
		{
			if (networkables.Contains(nw))
			{
				Debug.LogWarning("Insert: Network Group already contains networkable!");
			}
			else
			{
				networkables.Add(nw);
			}
		}
	}

	public void Leave(Networkable nw)
	{
		if (networkables != null)
		{
			if (!networkables.Contains(nw))
			{
				Debug.LogWarning("Leave: Network Group doesn't contain networkable!");
			}
			else
			{
				networkables.Remove(nw);
			}
		}
	}

	public void AddSubscriber(Connection cn)
	{
		subscribers.Add(cn);
	}

	public void RemoveSubscriber(Connection cn)
	{
		if (subscribers != null)
		{
			subscribers.Remove(cn);
		}
	}

	public bool HasSubscribers()
	{
		return subscribers.Count > 0;
	}

	public override string ToString()
	{
		return "NWGroup" + ID;
	}
}
