using System;
using System.Collections.Generic;
using Facepunch;
using Network;
using Network.Visibility;
using UnityEngine;

public class Manager : IDisposable
{
	public Dictionary<uint, Group> groups = new Dictionary<uint, Group>();

	public Provider provider;

	public virtual void Dispose()
	{
		foreach (KeyValuePair<uint, Group> group in groups)
		{
			group.Value.Dispose();
		}
		groups.Clear();
		provider = null;
	}

	public Manager(Provider p)
	{
		if (groups.Count > 0 && p != null)
		{
			Debug.LogWarning("SetProvider should be called before anything else! " + groups.Count + " groups have already been registered!");
		}
		provider = p;
	}

	public Group TryGet(uint ID)
	{
		if (groups.TryGetValue(ID, out var value))
		{
			return value;
		}
		return null;
	}

	public Group Get(uint ID)
	{
		if (groups.TryGetValue(ID, out var value))
		{
			return value;
		}
		value = new Group(this, ID);
		groups.Add(ID, value);
		if (provider != null)
		{
			provider.OnGroupAdded(value);
		}
		return value;
	}

	public Subscriber CreateSubscriber(Connection connection)
	{
		Subscriber subscriber = Pool.Get<Subscriber>();
		subscriber.manager = this;
		subscriber.connection = connection;
		return subscriber;
	}

	public void DestroySubscriber(ref Subscriber subscriber)
	{
		subscriber.Destroy();
		Pool.Free(ref subscriber);
	}

	public bool IsInside(Group group, Vector3 vPos)
	{
		if (provider == null)
		{
			return false;
		}
		if (group == null)
		{
			return false;
		}
		return provider.IsInside(group, vPos);
	}

	public Group GetGroup(Vector3 vPos)
	{
		if (provider == null)
		{
			return Get(0u);
		}
		return provider.GetGroup(vPos);
	}

	public void GetVisibleFromFar(Group center, List<Group> groups)
	{
		if (provider != null && center != null)
		{
			provider.GetVisibleFromFar(center, groups);
		}
	}

	public void GetVisibleFromNear(Group center, List<Group> groups)
	{
		if (provider != null && center != null)
		{
			provider.GetVisibleFromNear(center, groups);
		}
	}
}
