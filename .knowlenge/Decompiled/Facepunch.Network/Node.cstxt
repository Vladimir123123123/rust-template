using System.Collections.Generic;
using Facepunch;
using Facepunch.Extend;

public class Node : Pool.IPooled
{
	public Dictionary<string, Node> Children;

	public long Bytes;

	public long Count;

	internal Node Add(string category, long bytes)
	{
		if (Children == null)
		{
			Children = Pool.Get<Dictionary<string, Node>>();
		}
		Node orCreatePooled = Children.GetOrCreatePooled(category);
		orCreatePooled.Bytes += bytes;
		orCreatePooled.Count++;
		return orCreatePooled;
	}

	internal void Clear()
	{
		Bytes = 0L;
		Count = 0L;
		if (Children == null)
		{
			return;
		}
		foreach (KeyValuePair<string, Node> child in Children)
		{
			Node obj = child.Value;
			Pool.Free(ref obj);
		}
		Children.Clear();
	}

	public void EnterPool()
	{
		Clear();
	}

	public void LeavePool()
	{
		Clear();
	}
}
