using System.Runtime.CompilerServices;
using Network;

public static class PacketProfiler
{
	public static class AnalyticsKeys
	{
		public static string[] MessageType;

		static AnalyticsKeys()
		{
			MessageType = new string[27];
			for (int i = 0; i < 27; i++)
			{
				MessageType[i] = ((Message.Type)i/*cast due to .constrained prefix*/).ToString();
			}
		}
	}

	public static bool enabled = false;

	public static int[] inboundCount = new int[27];

	public static int[] inboundBytes = new int[27];

	public static int[] outboundCount = new int[27];

	public static int[] outboundSum = new int[27];

	public static int[] outboundBytes = new int[27];

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void LogInbound(Message.Type type, int length)
	{
		if (enabled && (int)type < 27)
		{
			inboundCount[(uint)type]++;
			inboundBytes[(uint)type] += length;
		}
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void LogOutbound(int type, int connectionCount, int length)
	{
		if (enabled && type < 27)
		{
			outboundCount[type]++;
			outboundSum[type] += connectionCount;
			outboundBytes[type] += connectionCount * length;
		}
	}

	public static void Reset()
	{
		for (int i = 0; i < 27; i++)
		{
			inboundCount[i] = 0;
			inboundBytes[i] = 0;
			outboundCount[i] = 0;
			outboundSum[i] = 0;
			outboundBytes[i] = 0;
		}
	}
}
