using System.Collections.Generic;
using Network;

public class TimeAverageValueLookup<T>
{
	public Dictionary<T, TimeAverageValue> dict = new Dictionary<T, TimeAverageValue>();

	public bool TryIncrement(T id, ulong limit)
	{
		if (!dict.TryGetValue(id, out var value))
		{
			value = new TimeAverageValue();
			dict.Add(id, value);
			value.Increment();
			return true;
		}
		if (value.Calculate() >= limit)
		{
			return false;
		}
		value.Increment();
		return true;
	}

	public void Increment(T id)
	{
		if (!dict.TryGetValue(id, out var value))
		{
			value = new TimeAverageValue();
			dict.Add(id, value);
		}
		value.Increment();
	}

	public ulong Calculate(T id)
	{
		if (!dict.TryGetValue(id, out var value))
		{
			return 0uL;
		}
		return value.Calculate();
	}

	public void Clear()
	{
		dict.Clear();
	}
}
