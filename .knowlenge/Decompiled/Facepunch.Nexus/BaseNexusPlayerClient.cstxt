using System;
using System.Threading;
using System.Threading.Tasks;
using Facepunch.Nexus;
using Facepunch.Nexus.Connector;
using Facepunch.Nexus.Models;
using Facepunch.Nexus.Time;

public abstract class BaseNexusPlayerClient : BaseNexusClient
{
	private protected readonly VariableContainer NexusVariables;

	private protected readonly VariableContainer ZoneVariables;

	private protected readonly VariableContainer PlayerVariables;

	public int NexusId { get; protected set; }

	public string ZoneKey { get; protected set; }

	public NexusDetails Nexus { get; protected set; }

	public NexusZoneDetails Zone => FindZone(Nexus, ZoneKey);

	public PlayerDetails Player { get; protected set; }

	protected override bool ShouldUpdateVariables
	{
		get
		{
			if (base.ShouldUpdateVariables)
			{
				return NexusId > 0;
			}
			return false;
		}
	}

	internal BaseNexusPlayerClient(INexusConnector connector, IClockProvider clock, double updateInterval)
		: base(connector, clock, updateInterval)
	{
		NexusVariables = new VariableContainer();
		ZoneVariables = new VariableContainer();
		PlayerVariables = new VariableContainer();
	}

	protected internal abstract ValueTask<PlayerDetails> GetPlayerDetails(int nexusId);

	public async ValueTask<PlayerDetails> SelectNexus(int nexusId)
	{
		if (nexusId <= 0)
		{
			throw new ArgumentOutOfRangeException("nexusId");
		}
		if (NexusId > 0)
		{
			throw new InvalidOperationException("A nexus has already been selected");
		}
		Reset();
		try
		{
			NexusDetails nexus = await GetNexusDetails(nexusId).ConfigureAwait(continueOnCapturedContext: false);
			PlayerDetails playerDetails = await GetPlayerDetails(nexusId).ConfigureAwait(continueOnCapturedContext: false);
			NexusZoneDetails nexusZoneDetails = FindZone(nexus, playerDetails.ConnectZoneKey);
			UpdateVariables(NexusVariables, nexus.Variables);
			UpdateVariables(ZoneVariables, nexusZoneDetails?.Variables);
			UpdateVariables(PlayerVariables, playerDetails.Variables);
			NexusId = nexusId;
			ZoneKey = nexusZoneDetails?.Key;
			Nexus = nexus;
			Player = playerDetails;
			return playerDetails;
		}
		catch
		{
			Reset();
			throw;
		}
	}

	protected override ValueTask Initialize(CancellationToken ct)
	{
		if (NexusId <= 0)
		{
			throw new InvalidOperationException("Must select a nexus before starting the client");
		}
		return default(ValueTask);
	}

	protected virtual void Reset()
	{
		NexusId = 0;
		ZoneKey = null;
		Nexus = null;
		Player = null;
		NexusVariables.Clear();
		ZoneVariables.Clear();
		PlayerVariables.Clear();
	}

	public bool TryGetNexusVariable(string key, out Variable variable)
	{
		return NexusVariables.TryGet(key, out variable);
	}

	public bool TryGetZoneVariable(string key, out Variable variable)
	{
		return ZoneVariables.TryGet(key, out variable);
	}

	public bool TryGetPlayerVariable(string key, out Variable variable)
	{
		return PlayerVariables.TryGet(key, out variable);
	}

	protected override void OnNexusDetailsUpdated(int nexusId, NexusDetails details)
	{
		base.OnNexusDetailsUpdated(nexusId, details);
		if (nexusId == NexusId)
		{
			NexusZoneDetails nexusZoneDetails = FindZone(details, ZoneKey);
			UpdateVariables(NexusVariables, details.Variables);
			UpdateVariables(ZoneVariables, nexusZoneDetails?.Variables);
		}
	}

	private static NexusZoneDetails FindZone(NexusDetails nexus, string zoneKey)
	{
		if (nexus == null || string.IsNullOrEmpty(zoneKey))
		{
			return null;
		}
		foreach (NexusZoneDetails zone in nexus.Zones)
		{
			if (string.Equals(zone.Key, zoneKey, StringComparison.InvariantCultureIgnoreCase))
			{
				return zone;
			}
		}
		return null;
	}
}
