using System;
using System.Collections.Generic;
using Facepunch.Nexus;
using Facepunch.Nexus.Time;

internal class CachedValue<TKey, TValue> : CachedValue where TKey : IEquatable<TKey>
{
	private readonly Dictionary<TKey, (TValue Value, double Expiry)> _values = new Dictionary<TKey, (TValue, double)>();

	public CachedValue(IClockProvider clock)
		: base(clock)
	{
	}

	public bool TryGetValue(in TKey key, out TValue value)
	{
		if (!_values.TryGetValue(key, out (TValue, double) value2) || Clock.Timestamp >= value2.Item2)
		{
			value = default(TValue);
			return false;
		}
		(value, _) = value2;
		return true;
	}

	public ref readonly TValue Update(in TKey key, in TValue value)
	{
		if (value != null)
		{
			_values[key] = (value, Clock.Timestamp + 30.0);
		}
		else
		{
			Invalidate(in key);
		}
		return ref value;
	}

	public void Invalidate(in TKey key)
	{
		_values.Remove(key);
	}
}
