using System;
using System.Collections.Generic;
using System.Threading.Tasks;
using Facepunch.Nexus;
using Facepunch.Nexus.Connector;
using Facepunch.Nexus.Models;

internal interface INexusZoneConnector : INexusConnector
{
	Task<ZoneDetails> GetZoneDetails();

	Task<ZonePlayerDetails> GetPlayerDetails(string playerId);

	Task<ZonePlayerLogin> PlayerLogin(string playerId);

	Task Assign(string playerId, string toZone);

	Task RegisterTransfers(string toZone, IEnumerable<string> playerIds);

	Task CompleteTransfers(IEnumerable<string> playerIds);

	Task SendMessage(string toZone, Guid id, string message, int? ttl, string contentType = "text/plain");

	Task SendMessage(string toZone, Guid id, Memory<byte> message, int? ttl, string contentType = "application/octet-stream");

	Task SetNexusVariable(string key, string value, bool transient, bool secret);

	Task SetNexusVariable(string key, Memory<byte> value, bool transient, bool secret);

	Task SetZoneVariable(string key, string value, bool transient, bool secret);

	Task SetZoneVariable(string key, Memory<byte> value, bool transient, bool secret);

	Task SetPlayerVariable(string playerId, string key, string value, bool transient, bool secret);

	Task SetPlayerVariable(string playerId, string key, Memory<byte> value, bool transient, bool secret);

	Task<List<string>> FindPlayersWithVariable(string key, string value);

	Task<ZoneMapCheckResult> CheckUploadedMap();

	Task UploadMap(string key, byte[] pngMapImage);

	Task<ApiResult<ClanDetails>> CreateClan(ClanCreateParameters parameters);

	Task<ApiResult<ClanDetails>> GetClan(long clanId);

	Task<ApiResult<ClanDetails>> GetClanByMember(string playerId);

	Task<ApiResult> DisbandClan(long clanId, string byPlayerId);

	Task<ApiResult<ClanDetails>> UpdateClanVariables(long clanId, ClanVariablesUpdate update);

	Task<ApiResult<List<ClanLeaderboardEntry>>> GetClanLeaderboard(int limit = 100);

	Task<ApiResult<ClanDetails>> CreateRole(long clanId, ClanRoleParameters parameters, string byPlayerId);

	Task<ApiResult<ClanDetails>> UpdateRole(long clanId, int roleId, ClanRoleParameters parameters, string byPlayerId);

	Task<ApiResult<ClanDetails>> DeleteRole(long clanId, int roleId, string byPlayerId);

	Task<ApiResult<ClanDetails>> SwapRoleRanks(long clanId, int roleIdA, int roleIdB, string byPlayerId);

	Task<ApiResult<ClanDetails>> CreateInvite(long clanId, string playerId, string byPlayerId);

	Task<ApiResult<ClanDetails>> AcceptInvite(long clanId, string playerId);

	Task<ApiResult<ClanDetails>> CancelInvite(long clanId, string playerId, string byPlayerId);

	Task<ApiResult<ClanDetails>> Kick(long clanId, string playerId, string byPlayerId);

	Task<ApiResult<List<ClanInvitation>>> ListInvitations(string playerId);

	Task<ApiResult> UpdateLastSeen(long clanId, string playerId);

	Task<ApiResult<ClanDetails>> UpdatePlayerClanVariables(long clanId, string playerId, ClanVariablesUpdate update);

	Task<ApiResult<ClanDetails>> SetPlayerRole(long clanId, string playerId, int roleId, string byPlayerId);

	Task<ApiResult<List<ClanLogEntry>>> GetClanLogs(long clanId, string byPlayerId, int limit = 100);

	Task<ApiResult> AddClanLog(long clanId, string eventKey, string arg1 = null, string arg2 = null, string arg3 = null, string arg4 = null);

	Task<ApiResult<List<ClanScoreEventEntry>>> GetClanScoreEvents(long clanId, string byPlayerId, int limit = 100);

	Task<ApiResult> AddClanScoreEvent(long clanId, NewClanScoreEventEntry entry);

	Task<ApiResult> AddClanScoreEventBatch(List<NewClanScoreEventBatchEntry> entries);
}
