using System;
using System.Collections.Generic;
using System.Threading.Tasks;
using Facepunch.Nexus;
using Facepunch.Nexus.Connector;
using Facepunch.Nexus.Logging;
using Facepunch.Nexus.Models;
using Facepunch.Nexus.Time;

public class NexusAnonymousClient
{
	private readonly INexusConnector _connector;

	private readonly CachedValue<List<Nexus>> _cachedNexusList;

	private readonly CachedValue<int, NexusDetails> _cachedNexusDetails;

	public NexusAnonymousClient(INexusLogger logger, IClockProvider clock, string baseUrl)
		: this(new NexusConnector(logger, baseUrl), clock)
	{
	}

	internal NexusAnonymousClient(INexusConnector connector, IClockProvider clock)
	{
		_connector = connector ?? throw new ArgumentNullException("connector");
		_cachedNexusList = new CachedValue<List<Nexus>>(clock);
		_cachedNexusDetails = new CachedValue<int, NexusDetails>(clock);
	}

	public async ValueTask<IEnumerable<Nexus>> GetNexusList(string publicKey, NexusRealm realm)
	{
		if (!_cachedNexusList.TryGetValue(out var value))
		{
			NexusListing nexusListing = await _connector.ListNexuses(publicKey, realm).ConfigureAwait(continueOnCapturedContext: false);
			value = _cachedNexusList.Update(nexusListing.Nexuses);
		}
		return value;
	}

	public async ValueTask<NexusDetails> GetNexusDetails(int nexusId)
	{
		if (nexusId <= 0)
		{
			throw new ArgumentOutOfRangeException("nexusId");
		}
		if (!_cachedNexusDetails.TryGetValue(in nexusId, out var value))
		{
			NexusDetails value2 = await _connector.GetNexus(nexusId).ConfigureAwait(continueOnCapturedContext: false);
			value = _cachedNexusDetails.Update(in nexusId, in value2);
			OnNexusDetailsUpdated(nexusId, value);
		}
		return value;
	}

	protected virtual void OnNexusDetailsUpdated(int nexusId, NexusDetails details)
	{
	}
}
