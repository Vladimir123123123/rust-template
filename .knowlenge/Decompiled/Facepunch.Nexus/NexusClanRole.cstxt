using System.Collections.Generic;
using Facepunch.Nexus;
using Facepunch.Nexus.Models;

public class NexusClanRole
{
	private readonly VariableContainer _variables;

	public int RoleId { get; set; }

	public int Rank { get; set; }

	public string Name { get; set; }

	public bool CanInvite { get; set; }

	public bool CanKick { get; set; }

	public bool CanPromote { get; set; }

	public bool CanDemote { get; set; }

	public bool CanAccessLogs { get; set; }

	public bool CanAccessScoreEvents { get; set; }

	public IEnumerable<KeyValuePair<string, Variable>> Variables => _variables;

	public NexusClanRole(ClanRole details)
	{
		_variables = new VariableContainer();
		UpdateFromModel(details);
	}

	public bool TryGetVariable(string key, out Variable variable)
	{
		return _variables.TryGet(key, out variable);
	}

	internal bool UpdateFromModel(ClanRole details)
	{
		bool changed = false;
		RoleId = Util.Update<int>(RoleId, details.RoleId, ref changed);
		Rank = Util.Update<int>(Rank, details.Rank, ref changed);
		Name = Util.Update<string>(Name, details.Name, ref changed);
		CanInvite = Util.Update<bool>(CanInvite, details.CanInvite, ref changed);
		CanKick = Util.Update<bool>(CanKick, details.CanKick, ref changed);
		CanPromote = Util.Update<bool>(CanPromote, details.CanPromote, ref changed);
		CanDemote = Util.Update<bool>(CanDemote, details.CanDemote, ref changed);
		CanAccessLogs = Util.Update<bool>(CanAccessLogs, details.CanAccessLogs, ref changed);
		CanAccessScoreEvents = Util.Update<bool>(CanAccessScoreEvents, details.CanAccessScoreEvents, ref changed);
		return changed | _variables.UpdateFromModel(details.Variables);
	}
}
