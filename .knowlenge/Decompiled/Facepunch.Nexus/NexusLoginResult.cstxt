using System;
using System.Collections.Generic;
using Facepunch.Nexus.Models;

public readonly struct NexusLoginResult
{
	private readonly ZonePlayerLogin _login;

	public string PlayerId => _login.PlayerId;

	public long LastSeen => _login.LastSeen;

	public Dictionary<string, VariableData> Variables => _login.Variables;

	public string AssignedZoneKey => _login.AssignedZoneKey;

	public bool IsRedirect
	{
		get
		{
			if (_login.RedirectIpAddress == null && !_login.RedirectGamePort.HasValue)
			{
				return _login.RedirectQueryPort.HasValue;
			}
			return true;
		}
	}

	public string RedirectIpAddress
	{
		get
		{
			if (!IsRedirect)
			{
				throw new InvalidOperationException("Result is not a redirect");
			}
			return _login.RedirectIpAddress ?? throw new InvalidOperationException("Redirect IP address was not set");
		}
	}

	public int RedirectGamePort
	{
		get
		{
			if (!IsRedirect)
			{
				throw new InvalidOperationException("Result is not a redirect");
			}
			return _login.RedirectGamePort ?? throw new InvalidOperationException("Redirect game port was not set");
		}
	}

	public int RedirectQueryPort
	{
		get
		{
			if (!IsRedirect)
			{
				throw new InvalidOperationException("Result is not a redirect");
			}
			return _login.RedirectQueryPort ?? throw new InvalidOperationException("Redirect query port was not set");
		}
	}

	internal NexusLoginResult(ZonePlayerLogin login)
	{
		_login = login ?? throw new ArgumentNullException("login");
	}
}
