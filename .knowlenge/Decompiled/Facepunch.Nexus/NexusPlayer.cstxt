using System;
using System.Collections.Generic;
using System.Threading.Tasks;
using Facepunch.Nexus;
using Facepunch.Nexus.Connector;
using Facepunch.Nexus.Logging;
using Facepunch.Nexus.Models;
using Facepunch.Nexus.Time;

public class NexusPlayer
{
	private const double RefreshInterval = 120.0;

	private readonly INexusLogger _logger;

	private readonly INexusZoneConnector _zoneConnector;

	private readonly IClockProvider _clockProvider;

	private readonly VariableContainer _variables;

	private double _lastRefreshed;

	public string PlayerId { get; }

	public string AssignedZoneKey { get; private set; }

	public IEnumerable<KeyValuePair<string, Variable>> Variables => _variables;

	internal NexusPlayer(INexusLogger logger, INexusZoneConnector zoneConnector, IClockProvider clockProvider, string playerId)
	{
		_logger = logger ?? throw new ArgumentNullException("logger");
		_zoneConnector = zoneConnector ?? throw new ArgumentNullException("zoneConnector");
		_clockProvider = clockProvider ?? throw new ArgumentNullException("clockProvider");
		_variables = new VariableContainer();
		_lastRefreshed = _clockProvider.Timestamp;
		if (string.IsNullOrWhiteSpace(playerId))
		{
			throw new ArgumentNullException("playerId");
		}
		PlayerId = playerId;
	}

	public bool TryGetVariable(string key, out Variable variable)
	{
		return _variables.TryGet(key, out variable);
	}

	public async Task SetVariable(string key, string value, bool isTransient = true, bool isSecret = true)
	{
		if (!_variables.TryGet(key, out var variable) || variable != value)
		{
			await _zoneConnector.SetPlayerVariable(PlayerId, key, value, isTransient, isSecret).ConfigureAwait(continueOnCapturedContext: false);
			_variables.Set(key, value);
		}
	}

	public async Task SetVariable(string key, byte[] value, bool isTransient = true, bool isSecret = true)
	{
		if (!_variables.TryGet(key, out var variable) || variable != value)
		{
			await _zoneConnector.SetPlayerVariable(PlayerId, key, value, isTransient, isSecret).ConfigureAwait(continueOnCapturedContext: false);
			_variables.Set(key, value);
		}
	}

	internal void RefreshIfNeeded()
	{
		double timestamp = _clockProvider.Timestamp;
		if (timestamp - _lastRefreshed > 120.0)
		{
			_lastRefreshed = timestamp;
			RefreshInBackground();
		}
	}

	internal async void RefreshInBackground()
	{
		try
		{
			await Refresh();
		}
		catch (Exception exception)
		{
			_logger.LogError("Failed to refresh player " + PlayerId, exception);
		}
	}

	internal async Task Refresh()
	{
		ZonePlayerDetails zonePlayerDetails = await _zoneConnector.GetPlayerDetails(PlayerId);
		UpdateZone(zonePlayerDetails.AssignedZoneKey);
		UpdateVariables(zonePlayerDetails.Variables);
	}

	internal void UpdateZone(string assignedZoneKey)
	{
		AssignedZoneKey = assignedZoneKey;
	}

	internal void UpdateVariables(Dictionary<string, VariableData> variables)
	{
		_variables.UpdateFromModel(variables);
	}
}
