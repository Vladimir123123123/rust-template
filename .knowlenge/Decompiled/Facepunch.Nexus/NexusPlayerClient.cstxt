using System;
using System.Threading;
using System.Threading.Tasks;
using Facepunch.Nexus;
using Facepunch.Nexus.Connector;
using Facepunch.Nexus.Logging;
using Facepunch.Nexus.Models;
using Facepunch.Nexus.Time;

public sealed class NexusPlayerClient : BaseNexusPlayerClient
{
	public delegate ValueTask<string> AuthHandler();

	private readonly INexusPlayerConnector _connector;

	private readonly AuthHandler _authHandler;

	private readonly CachedValue<int, PlayerDetails> _cachedPlayerInfo;

	public NexusPlayerClient(INexusLogger logger, string baseUrl, AuthHandler authHandler)
		: this(new NexusPlayerConnector(logger, baseUrl), DefaultClockProvider.Instance, 300.0, authHandler)
	{
	}

	internal NexusPlayerClient(INexusPlayerConnector connector, IClockProvider clock, double updateInterval, AuthHandler authHandler)
		: base(connector, clock, updateInterval)
	{
		_connector = connector ?? throw new ArgumentNullException("connector");
		_authHandler = authHandler ?? throw new ArgumentNullException("authHandler");
		_cachedPlayerInfo = new CachedValue<int, PlayerDetails>(clock);
	}

	protected override async ValueTask Update(CancellationToken ct)
	{
		if (base.NexusId > 0)
		{
			base.Nexus = await GetNexusDetails(base.NexusId);
			base.Player = await GetPlayerDetails(base.NexusId);
		}
	}

	protected internal override async ValueTask<PlayerDetails> GetPlayerDetails(int nexusId)
	{
		if (nexusId <= 0)
		{
			throw new ArgumentOutOfRangeException("nexusId");
		}
		if (!_cachedPlayerInfo.TryGetValue(in nexusId, out var value))
		{
			string playerAuthToken = await _authHandler();
			PlayerDetails value2 = await _connector.GetPlayerDetails(nexusId, playerAuthToken);
			value = _cachedPlayerInfo.Update(in nexusId, in value2);
			if (nexusId == base.NexusId)
			{
				UpdateVariables(PlayerVariables, value.Variables);
			}
		}
		return value;
	}
}
