using System;
using System.Linq;
using Facepunch.Nexus;
using Facepunch.Nexus.Models;

public class Variable
{
	private string _rawValue;

	private byte[] _binaryValue;

	public VariableType Type { get; private set; }

	public long LastUpdated { get; private set; }

	internal bool Set(string value, long lastUpdated = 0L)
	{
		if (lastUpdated <= 0)
		{
			lastUpdated = DateTimeOffset.UtcNow.ToUnixTimeSeconds();
		}
		if (value == null)
		{
			value = "";
		}
		int num;
		if (Type == VariableType.String && LastUpdated == lastUpdated)
		{
			num = ((GetAsString() != value) ? 1 : 0);
			if (num == 0)
			{
				goto IL_005e;
			}
		}
		else
		{
			num = 1;
		}
		Type = VariableType.String;
		LastUpdated = lastUpdated;
		_rawValue = value;
		_binaryValue = null;
		goto IL_005e;
		IL_005e:
		return (byte)num != 0;
	}

	internal bool Set(byte[] value, long lastUpdated = 0L)
	{
		if (lastUpdated <= 0)
		{
			lastUpdated = DateTimeOffset.UtcNow.ToUnixTimeSeconds();
		}
		int num;
		if (Type == VariableType.Binary && LastUpdated == lastUpdated && (GetAsBinary() == null || GetAsBinary().Length == 0) == (value == null || value.Length == 0))
		{
			if (value != null)
			{
				num = ((!GetAsBinary().SequenceEqual(value)) ? 1 : 0);
				if (num != 0)
				{
					goto IL_0062;
				}
			}
			else
			{
				num = 0;
			}
			goto IL_0091;
		}
		num = 1;
		goto IL_0062;
		IL_0091:
		return (byte)num != 0;
		IL_0062:
		Type = VariableType.Binary;
		LastUpdated = lastUpdated;
		_rawValue = "*none*";
		_binaryValue = ((value == null) ? Array.Empty<byte>() : value.ToArray());
		goto IL_0091;
	}

	internal bool UpdateFromModel(VariableData data)
	{
		bool result = data.Type != Type || data.LastUpdated != LastUpdated || data.Value != _rawValue;
		Type = data.Type;
		LastUpdated = data.LastUpdated;
		_rawValue = data.Value;
		_binaryValue = null;
		return result;
	}

	public string GetAsString()
	{
		if (Type != VariableType.String)
		{
			throw new InvalidOperationException("Cannot get string value of binary variable");
		}
		if (_rawValue == null)
		{
			throw new InvalidOperationException("Variable has no value to return");
		}
		return _rawValue;
	}

	public byte[] GetAsBinary()
	{
		if (Type != 0)
		{
			throw new InvalidOperationException("Cannot get binary value of string variable");
		}
		if (_rawValue == null)
		{
			throw new InvalidOperationException("Variable has no value to return");
		}
		if (_binaryValue == null)
		{
			_binaryValue = Convert.FromBase64String(_rawValue);
		}
		return _binaryValue;
	}

	public static bool operator ==(Variable variable, string value)
	{
		if (variable.Type == VariableType.String)
		{
			return variable.GetAsString() == (value ?? "");
		}
		return false;
	}

	public static bool operator !=(Variable variable, string value)
	{
		return !(variable == value);
	}

	public static bool operator ==(Variable variable, byte[] value)
	{
		if (variable.Type == VariableType.Binary)
		{
			return variable.GetAsBinary().SequenceEqual(value ?? Array.Empty<byte>());
		}
		return false;
	}

	public static bool operator !=(Variable variable, byte[] value)
	{
		return !(variable == value);
	}
}
