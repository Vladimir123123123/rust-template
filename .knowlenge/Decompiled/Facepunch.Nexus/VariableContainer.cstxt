using System;
using System.Collections;
using System.Collections.Generic;
using Facepunch.Nexus;
using Facepunch.Nexus.Models;

internal class VariableContainer : IEnumerable<KeyValuePair<string, Variable>>, IEnumerable
{
	private readonly Dictionary<string, Variable> _variables;

	public int Count => _variables.Count;

	public VariableContainer()
	{
		_variables = new Dictionary<string, Variable>(StringComparer.InvariantCultureIgnoreCase);
	}

	public bool UpdateFromModel(Dictionary<string, VariableData> data, HashSet<string> changedKeys = null)
	{
		if (data == null || data.Count == 0)
		{
			return false;
		}
		bool result = false;
		foreach (KeyValuePair<string, VariableData> datum in data)
		{
			if (UpdateFromModel(datum.Key, datum.Value))
			{
				changedKeys?.Add(datum.Key);
				result = true;
			}
		}
		return result;
	}

	public bool UpdateFromModel(string key, VariableData data)
	{
		if (_variables.TryGetValue(key, out var value))
		{
			return value.UpdateFromModel(data);
		}
		value = new Variable();
		value.UpdateFromModel(data);
		_variables.Add(key, value);
		return true;
	}

	public bool TryGet(string key, out Variable variable)
	{
		return _variables.TryGetValue(key, out variable);
	}

	public bool Set(string key, string value)
	{
		if (!_variables.TryGetValue(key, out var value2))
		{
			value2 = new Variable();
			_variables.Add(key, value2);
		}
		return value2.Set(value, 0L);
	}

	public bool Set(string key, byte[] value)
	{
		if (!_variables.TryGetValue(key, out var value2))
		{
			value2 = new Variable();
			_variables.Add(key, value2);
		}
		return value2.Set(value, 0L);
	}

	public void Remove(string key)
	{
		_variables.Remove(key);
	}

	public void Clear()
	{
		_variables.Clear();
	}

	public Dictionary<string, Variable>.Enumerator GetEnumerator()
	{
		return _variables.GetEnumerator();
	}

	IEnumerator<KeyValuePair<string, Variable>> IEnumerable<KeyValuePair<string, Variable>>.GetEnumerator()
	{
		return _variables.GetEnumerator();
	}

	IEnumerator IEnumerable.GetEnumerator()
	{
		return GetEnumerator();
	}
}
