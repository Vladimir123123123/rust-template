using System;
using System.Buffers;
using Facepunch.Nexus.Models;

public readonly struct VariableUpdate
{
	private readonly Memory<byte> _binaryValue;

	private readonly string _stringValue;

	public string Key { get; }

	public VariableType Type { get; }

	public bool? Transient { get; }

	public bool? Secret { get; }

	public string Value
	{
		get
		{
			if (Type == VariableType.String)
			{
				return _stringValue;
			}
			byte[] array = ArrayPool<byte>.Shared.Rent(_binaryValue.Length);
			try
			{
				_binaryValue.CopyTo(array);
				return Convert.ToBase64String(array, 0, _binaryValue.Length);
			}
			finally
			{
				ArrayPool<byte>.Shared.Return(array);
			}
		}
	}

	public VariableUpdate(string key, Memory<byte> value, bool? transient = null, bool? secret = null)
	{
		Key = key ?? throw new ArgumentNullException("key");
		Type = VariableType.Binary;
		_binaryValue = value;
		_stringValue = null;
		Transient = transient;
		Secret = secret;
	}

	public VariableUpdate(string key, string value, bool? transient = null, bool? secret = null)
	{
		Key = key ?? throw new ArgumentNullException("key");
		Type = VariableType.String;
		_binaryValue = default(Memory<byte>);
		_stringValue = value;
		Transient = transient;
		Secret = secret;
	}
}
