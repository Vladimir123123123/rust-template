using System;
using System.Net;

public struct IPNetwork : IEquatable<IPNetwork>
{
	public uint Address;

	public uint Mask;

	public byte PrefixLength;

	public IPNetwork(string networkAddress)
	{
		if (networkAddress.Contains("/"))
		{
			string[] array = networkAddress.Split('/');
			Address = BitConverter.ToUInt32(IPAddress.Parse(array[0]).GetAddressBytes(), 0);
			PrefixLength = byte.Parse(array[1]);
			if (PrefixLength > 32)
			{
				throw new Exception($"Invalid prefix length {PrefixLength}");
			}
		}
		else
		{
			Address = BitConverter.ToUInt32(IPAddress.Parse(networkAddress).GetAddressBytes(), 0);
			PrefixLength = 32;
		}
		Mask = ((PrefixLength > 0) ? (uint.MaxValue >> 32 - PrefixLength) : 0u);
	}

	public static bool operator ==(IPNetwork a, IPNetwork b)
	{
		if (a.Address == b.Address)
		{
			return a.Mask == b.Mask;
		}
		return false;
	}

	public static bool operator !=(IPNetwork a, IPNetwork b)
	{
		return !(a == b);
	}

	public override int GetHashCode()
	{
		return (Address, Mask).GetHashCode();
	}

	public bool Equals(IPNetwork other)
	{
		if (Address == other.Address)
		{
			return Mask == other.Mask;
		}
		return false;
	}

	public override bool Equals(object obj)
	{
		if (obj == null)
		{
			return false;
		}
		if (obj is IPNetwork other)
		{
			return Equals(other);
		}
		return false;
	}

	public IPAddress NetworkAddress()
	{
		return new IPAddress(Address);
	}

	public IPAddress Netmask()
	{
		return new IPAddress(Mask);
	}

	public bool Contains(IPNetwork network)
	{
		return Contains(network.NetworkAddress());
	}

	public bool Contains(IPAddress ip)
	{
		uint num = BitConverter.ToUInt32(ip.GetAddressBytes(), 0);
		return (Address & Mask) == (num & Mask);
	}

	public override string ToString()
	{
		return $"{NetworkAddress()}/{PrefixLength}";
	}
}
