using System;
using Facepunch;
using Facepunch.Rust.Profiling;
using Fleck;

public static class RconProfiler
{
	public static int mode;

	public static int ClampedMessageLength = 512;

	public static TimeSpan ExecutionTime;

	private static RconProfilerStats currentStats = new RconProfilerStats();

	private static int lastClientCount;

	private static object Lock = new object();

	public static void OnRconMessage(string ip, int port, int connectionId, string message)
	{
		if (mode == 0)
		{
			return;
		}
		lock (Lock)
		{
			currentStats.MessageCount++;
			currentStats.MessageLengthSum += message.Length;
		}
		if (mode < 3)
		{
			return;
		}
		RconMessageStats rconMessageStats = default(RconMessageStats);
		rconMessageStats.MessageLength = message.Length;
		rconMessageStats.Message = ((message.Length <= ClampedMessageLength) ? message : message.Substring(ClampedMessageLength));
		rconMessageStats.ConnectionId = connectionId;
		rconMessageStats.IP = ip;
		rconMessageStats.Port = port;
		RconMessageStats item = rconMessageStats;
		lock (Lock)
		{
			currentStats.Messages.Add(item);
		}
	}

	public static void OnNewConnection(IWebSocketConnection socket, int connectionId)
	{
		LogConnection(socket, connectionId, success: true, null);
	}

	public static void OnFailedConnection(IWebSocketConnection socket, string passwordAttempt)
	{
		LogConnection(socket, 0, success: false, passwordAttempt);
	}

	public static void OnDisconnect(string ip, int port, int connectionId)
	{
		if (mode < 2)
		{
			return;
		}
		RconDisconnects rconDisconnects = default(RconDisconnects);
		rconDisconnects.ConnectionId = connectionId;
		rconDisconnects.IP = ip;
		rconDisconnects.Port = port;
		RconDisconnects item = rconDisconnects;
		lock (Lock)
		{
			currentStats.Disconnects.Add(item);
		}
	}

	public static void OnError(IWebSocketConnection socket)
	{
		if (mode == 0)
		{
			return;
		}
		lock (Lock)
		{
			currentStats.ErrorCount++;
		}
	}

	public static void UpdateClientCount(int count)
	{
		lock (Lock)
		{
			lastClientCount = count;
		}
	}

	private static void LogConnection(IWebSocketConnection socket, int connectionId, bool success, string passwordAttempt)
	{
		if (mode == 0)
		{
			return;
		}
		lock (Lock)
		{
			if (success)
			{
				currentStats.NewConnectionCount++;
			}
			else
			{
				currentStats.FailedConnectionCount++;
			}
		}
		if (mode < 2)
		{
			return;
		}
		RconConnectionAttempt rconConnectionAttempt = default(RconConnectionAttempt);
		rconConnectionAttempt.IP = socket.ConnectionInfo.ClientIpAddress.ToString();
		rconConnectionAttempt.Port = socket.ConnectionInfo.ClientPort;
		rconConnectionAttempt.ConnectionId = connectionId;
		rconConnectionAttempt.Success = success;
		rconConnectionAttempt.PasswordAttempt = passwordAttempt;
		RconConnectionAttempt item = rconConnectionAttempt;
		lock (Lock)
		{
			currentStats.ConnectionAttempts.Add(item);
		}
	}

	public static RconProfilerStats GetCurrentStats(bool reset = true)
	{
		if (mode == 0)
		{
			return RconProfilerStats.Default;
		}
		lock (Lock)
		{
			RconProfilerStats rconProfilerStats = currentStats;
			rconProfilerStats.ConnectionCount = lastClientCount;
			if (reset)
			{
				currentStats = Pool.Get<RconProfilerStats>();
			}
			return rconProfilerStats;
		}
	}

	public static void Reset()
	{
		ExecutionTime = TimeSpan.Zero;
	}
}
