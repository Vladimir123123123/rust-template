using Facepunch;
using UnityEngine;

[AddComponentMenu("Facepunch/SkeletonSkin")]
[ExecuteInEditMode]
public class SkeletonSkin : MonoBehaviour
{
	public SkinnedMeshRenderer SkinnedMeshRenderer;

	public SkeletonDefinition SkeletonDefinition;

	public int LOD;

	public int RootBone;

	public int[] TargetBones;

	public Transform[] BoneTransforms;

	public void Retarget(Skeleton target)
	{
		if (TargetBones == null || BoneTransforms == null)
		{
			return;
		}
		SkinnedMeshRenderer.rootBone = target.GetTransform(RootBone);
		bool flag = SkeletonDefinition != target.Source;
		for (int i = 0; i < BoneTransforms.Length; i++)
		{
			Transform transform = (flag ? target.GetTransformSlow(SkeletonDefinition.Bones[TargetBones[i]].Name) : target.GetTransform(TargetBones[i]));
			if (transform == null)
			{
				Debug.LogWarning("Skeleton retarget didn't find a bone: " + SkeletonDefinition.Bones[TargetBones[i]].Name);
			}
			BoneTransforms[i] = transform;
		}
		SkinnedMeshRenderer.bones = BoneTransforms;
		for (int j = 0; j < BoneTransforms.Length; j++)
		{
			BoneTransforms[j] = null;
		}
	}

	public SkinnedMeshRenderer DuplicateAndRetarget(GameObject host, Skeleton target)
	{
		SkinnedMeshRenderer skinnedMeshRenderer = host.AddComponent<SkinnedMeshRenderer>();
		skinnedMeshRenderer.receiveShadows = SkinnedMeshRenderer.receiveShadows;
		skinnedMeshRenderer.skinnedMotionVectors = SkinnedMeshRenderer.skinnedMotionVectors;
		skinnedMeshRenderer.motionVectorGenerationMode = SkinnedMeshRenderer.motionVectorGenerationMode;
		skinnedMeshRenderer.updateWhenOffscreen = SkinnedMeshRenderer.updateWhenOffscreen;
		skinnedMeshRenderer.localBounds = SkinnedMeshRenderer.localBounds;
		skinnedMeshRenderer.shadowCastingMode = SkinnedMeshRenderer.shadowCastingMode;
		skinnedMeshRenderer.sharedMesh = SkinnedMeshRenderer.sharedMesh;
		skinnedMeshRenderer.sharedMaterials = SkinnedMeshRenderer.sharedMaterials;
		skinnedMeshRenderer.rootBone = target.GetTransform(RootBone);
		Transform[] array = new Transform[TargetBones.Length];
		for (int i = 0; i < array.Length; i++)
		{
			array[i] = target.GetTransform(TargetBones[i]);
		}
		skinnedMeshRenderer.bones = array;
		return skinnedMeshRenderer;
	}
}
