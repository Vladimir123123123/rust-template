using System;
using System.Runtime.InteropServices;

internal static class Interop
{
	internal const int SQLITE_OK = 0;

	internal const int SQLITE_BUSY = 5;

	internal const int SQLITE_ROW = 100;

	internal const int SQLITE_DONE = 101;

	internal const int SQLITE_INTEGER = 1;

	internal const int SQLITE_FLOAT = 2;

	internal const int SQLITE_TEXT = 3;

	internal const int SQLITE_BLOB = 4;

	internal const int SQLITE_NULL = 5;

	internal const int SQLITE_PREPARE_PERSISTENT = 1;

	internal static IntPtr SQLITE_STATIC = new IntPtr(0);

	internal static IntPtr SQLITE_TRANSIENT = new IntPtr(-1);

	[DllImport("sqlite3")]
	internal static extern int sqlite3_open(string filename, out IntPtr db);

	[DllImport("sqlite3")]
	internal static extern int sqlite3_close(IntPtr db);

	[DllImport("sqlite3")]
	internal static extern int sqlite3_extended_result_codes(IntPtr db, int onoff);

	[DllImport("sqlite3")]
	internal static extern int sqlite3_prepare_v3(IntPtr db, string zSql, int nByte, uint prepFlags, out IntPtr ppStmpt, IntPtr pzTail);

	[DllImport("sqlite3")]
	internal static extern int sqlite3_step(IntPtr stmHandle);

	[DllImport("sqlite3")]
	internal static extern int sqlite3_finalize(IntPtr stmHandle);

	[DllImport("sqlite3")]
	internal static extern int sqlite3_reset(IntPtr stmHandle);

	[DllImport("sqlite3")]
	internal static extern int sqlite3_clear_bindings(IntPtr stmHandle);

	[DllImport("sqlite3")]
	internal static extern IntPtr sqlite3_errmsg(IntPtr db);

	[DllImport("sqlite3")]
	internal static extern int sqlite3_changes(IntPtr db);

	[DllImport("sqlite3")]
	internal static extern long sqlite3_last_insert_rowid(IntPtr db);

	[DllImport("sqlite3")]
	internal static extern int sqlite3_column_count(IntPtr stmHandle);

	[DllImport("sqlite3")]
	internal static extern IntPtr sqlite3_column_name(IntPtr stmHandle, int iCol);

	[DllImport("sqlite3")]
	internal static extern int sqlite3_column_type(IntPtr stmHandle, int iCol);

	[DllImport("sqlite3")]
	internal static extern long sqlite3_column_int64(IntPtr stmHandle, int iCol);

	[DllImport("sqlite3")]
	internal static extern IntPtr sqlite3_column_text16(IntPtr stmHandle, int iCol);

	[DllImport("sqlite3")]
	internal static extern IntPtr sqlite3_column_blob(IntPtr stmHandle, int iCol);

	[DllImport("sqlite3")]
	internal static extern int sqlite3_column_bytes(IntPtr stmHandle, int iCol);

	[DllImport("sqlite3")]
	internal static extern double sqlite3_column_double(IntPtr stmHandle, int iCol);

	[DllImport("sqlite3")]
	internal static extern int sqlite3_bind_text16(IntPtr stmHandle, int i, IntPtr str, int len, IntPtr dest);

	[DllImport("sqlite3")]
	internal static extern int sqlite3_bind_int64(IntPtr stmHandle, int i, long val);

	[DllImport("sqlite3")]
	internal static extern int sqlite3_bind_blob(IntPtr stmHandle, int i, IntPtr str, int len, IntPtr dest);

	[DllImport("sqlite3")]
	internal static extern int sqlite3_bind_double(IntPtr stmHandle, int i, double val);

	[DllImport("sqlite3")]
	internal static extern int sqlite3_bind_null(IntPtr stmHandle, int i);

	public static string GetTypeName(int sqliteType)
	{
		return sqliteType switch
		{
			1 => "SQLITE_INTEGER", 
			2 => "SQLITE_FLOAT", 
			4 => "SQLITE_BLOB", 
			5 => "SQLITE_NULL", 
			3 => "SQLITE_TEXT", 
			_ => $"UNKNOWN ({sqliteType})", 
		};
	}
}
