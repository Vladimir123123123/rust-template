using System;
using System.Collections.Generic;
using System.Runtime.InteropServices;
using System.Text;
using Steamworks;

internal static class Helpers
{
	internal struct Memory : IDisposable
	{
		private const int MaxBagSize = 4;

		private static readonly Queue<IntPtr> BufferBag = new Queue<IntPtr>();

		public IntPtr Ptr { get; private set; }

		public static implicit operator IntPtr(in Memory m)
		{
			return m.Ptr;
		}

		internal unsafe static Memory Take()
		{
			IntPtr intPtr;
			lock (BufferBag)
			{
				intPtr = ((BufferBag.Count > 0) ? BufferBag.Dequeue() : Marshal.AllocHGlobal(32768));
			}
			*(sbyte*)(void*)intPtr = 0;
			Memory result = default(Memory);
			result.Ptr = intPtr;
			return result;
		}

		public void Dispose()
		{
			if (Ptr == IntPtr.Zero)
			{
				return;
			}
			lock (BufferBag)
			{
				if (BufferBag.Count < 4)
				{
					BufferBag.Enqueue(Ptr);
				}
				else
				{
					Marshal.FreeHGlobal(Ptr);
				}
			}
			Ptr = IntPtr.Zero;
		}
	}

	public const int MemoryBufferSize = 32768;

	private static byte[][] BufferPool = new byte[4][];

	private static int BufferPoolIndex;

	public static Memory TakeMemory()
	{
		return Memory.Take();
	}

	public static byte[] TakeBuffer(int minSize)
	{
		lock (BufferPool)
		{
			BufferPoolIndex++;
			if (BufferPoolIndex >= BufferPool.Length)
			{
				BufferPoolIndex = 0;
			}
			if (BufferPool[BufferPoolIndex] == null)
			{
				BufferPool[BufferPoolIndex] = new byte[262144];
			}
			if (BufferPool[BufferPoolIndex].Length < minSize)
			{
				BufferPool[BufferPoolIndex] = new byte[minSize + 1024];
			}
			return BufferPool[BufferPoolIndex];
		}
	}

	internal unsafe static string MemoryToString(IntPtr ptr)
	{
		int num = 0;
		for (num = 0; num < 32768 && ((byte*)(void*)ptr)[num] != 0; num++)
		{
		}
		if (num == 0)
		{
			return string.Empty;
		}
		return Encoding.UTF8.GetString((byte*)(void*)ptr, num);
	}

	internal static string BuildVersionString(params string[] interfaceVersions)
	{
		StringBuilder stringBuilder = new StringBuilder();
		foreach (string value in interfaceVersions)
		{
			stringBuilder.Append(value).Append('\0');
		}
		stringBuilder.Append('\0');
		return stringBuilder.ToString();
	}
}
