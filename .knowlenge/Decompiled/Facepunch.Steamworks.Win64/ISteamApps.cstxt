using System;
using System.Runtime.InteropServices;
using Steamworks;
using Steamworks.Data;

internal class ISteamApps : SteamInterface
{
	public const string Version = "STEAMAPPS_INTERFACE_VERSION008";

	internal ISteamApps(bool IsGameServer)
	{
		SetupInterface(IsGameServer);
	}

	[DllImport("steam_api64", CallingConvention = CallingConvention.Cdecl)]
	internal static extern IntPtr SteamAPI_SteamApps_v008();

	public override IntPtr GetUserInterfacePointer()
	{
		return SteamAPI_SteamApps_v008();
	}

	[DllImport("steam_api64", CallingConvention = CallingConvention.Cdecl, EntryPoint = "SteamAPI_ISteamApps_BIsSubscribed")]
	[return: MarshalAs(UnmanagedType.I1)]
	private static extern bool _BIsSubscribed(IntPtr self);

	internal bool BIsSubscribed()
	{
		return _BIsSubscribed(Self);
	}

	[DllImport("steam_api64", CallingConvention = CallingConvention.Cdecl, EntryPoint = "SteamAPI_ISteamApps_BIsLowViolence")]
	[return: MarshalAs(UnmanagedType.I1)]
	private static extern bool _BIsLowViolence(IntPtr self);

	internal bool BIsLowViolence()
	{
		return _BIsLowViolence(Self);
	}

	[DllImport("steam_api64", CallingConvention = CallingConvention.Cdecl, EntryPoint = "SteamAPI_ISteamApps_BIsCybercafe")]
	[return: MarshalAs(UnmanagedType.I1)]
	private static extern bool _BIsCybercafe(IntPtr self);

	internal bool BIsCybercafe()
	{
		return _BIsCybercafe(Self);
	}

	[DllImport("steam_api64", CallingConvention = CallingConvention.Cdecl, EntryPoint = "SteamAPI_ISteamApps_BIsVACBanned")]
	[return: MarshalAs(UnmanagedType.I1)]
	private static extern bool _BIsVACBanned(IntPtr self);

	internal bool BIsVACBanned()
	{
		return _BIsVACBanned(Self);
	}

	[DllImport("steam_api64", CallingConvention = CallingConvention.Cdecl, EntryPoint = "SteamAPI_ISteamApps_GetCurrentGameLanguage")]
	private static extern Utf8StringPointer _GetCurrentGameLanguage(IntPtr self);

	internal string GetCurrentGameLanguage()
	{
		return _GetCurrentGameLanguage(Self);
	}

	[DllImport("steam_api64", CallingConvention = CallingConvention.Cdecl, EntryPoint = "SteamAPI_ISteamApps_GetAvailableGameLanguages")]
	private static extern Utf8StringPointer _GetAvailableGameLanguages(IntPtr self);

	internal string GetAvailableGameLanguages()
	{
		return _GetAvailableGameLanguages(Self);
	}

	[DllImport("steam_api64", CallingConvention = CallingConvention.Cdecl, EntryPoint = "SteamAPI_ISteamApps_BIsSubscribedApp")]
	[return: MarshalAs(UnmanagedType.I1)]
	private static extern bool _BIsSubscribedApp(IntPtr self, AppId appID);

	internal bool BIsSubscribedApp(AppId appID)
	{
		return _BIsSubscribedApp(Self, appID);
	}

	[DllImport("steam_api64", CallingConvention = CallingConvention.Cdecl, EntryPoint = "SteamAPI_ISteamApps_BIsDlcInstalled")]
	[return: MarshalAs(UnmanagedType.I1)]
	private static extern bool _BIsDlcInstalled(IntPtr self, AppId appID);

	internal bool BIsDlcInstalled(AppId appID)
	{
		return _BIsDlcInstalled(Self, appID);
	}

	[DllImport("steam_api64", CallingConvention = CallingConvention.Cdecl, EntryPoint = "SteamAPI_ISteamApps_GetEarliestPurchaseUnixTime")]
	private static extern uint _GetEarliestPurchaseUnixTime(IntPtr self, AppId nAppID);

	internal uint GetEarliestPurchaseUnixTime(AppId nAppID)
	{
		return _GetEarliestPurchaseUnixTime(Self, nAppID);
	}

	[DllImport("steam_api64", CallingConvention = CallingConvention.Cdecl, EntryPoint = "SteamAPI_ISteamApps_BIsSubscribedFromFreeWeekend")]
	[return: MarshalAs(UnmanagedType.I1)]
	private static extern bool _BIsSubscribedFromFreeWeekend(IntPtr self);

	internal bool BIsSubscribedFromFreeWeekend()
	{
		return _BIsSubscribedFromFreeWeekend(Self);
	}

	[DllImport("steam_api64", CallingConvention = CallingConvention.Cdecl, EntryPoint = "SteamAPI_ISteamApps_GetDLCCount")]
	private static extern int _GetDLCCount(IntPtr self);

	internal int GetDLCCount()
	{
		return _GetDLCCount(Self);
	}

	[DllImport("steam_api64", CallingConvention = CallingConvention.Cdecl, EntryPoint = "SteamAPI_ISteamApps_BGetDLCDataByIndex")]
	[return: MarshalAs(UnmanagedType.I1)]
	private static extern bool _BGetDLCDataByIndex(IntPtr self, int iDLC, ref AppId pAppID, [MarshalAs(UnmanagedType.U1)] ref bool pbAvailable, IntPtr pchName, int cchNameBufferSize);

	internal bool BGetDLCDataByIndex(int iDLC, ref AppId pAppID, [MarshalAs(UnmanagedType.U1)] ref bool pbAvailable, out string pchName)
	{
		Helpers.Memory m = Helpers.TakeMemory();
		try
		{
			bool result = _BGetDLCDataByIndex(Self, iDLC, ref pAppID, ref pbAvailable, m, 32768);
			pchName = Helpers.MemoryToString(m);
			return result;
		}
		finally
		{
			((IDisposable)m/*cast due to .constrained prefix*/).Dispose();
		}
	}

	[DllImport("steam_api64", CallingConvention = CallingConvention.Cdecl, EntryPoint = "SteamAPI_ISteamApps_InstallDLC")]
	private static extern void _InstallDLC(IntPtr self, AppId nAppID);

	internal void InstallDLC(AppId nAppID)
	{
		_InstallDLC(Self, nAppID);
	}

	[DllImport("steam_api64", CallingConvention = CallingConvention.Cdecl, EntryPoint = "SteamAPI_ISteamApps_UninstallDLC")]
	private static extern void _UninstallDLC(IntPtr self, AppId nAppID);

	internal void UninstallDLC(AppId nAppID)
	{
		_UninstallDLC(Self, nAppID);
	}

	[DllImport("steam_api64", CallingConvention = CallingConvention.Cdecl, EntryPoint = "SteamAPI_ISteamApps_RequestAppProofOfPurchaseKey")]
	private static extern void _RequestAppProofOfPurchaseKey(IntPtr self, AppId nAppID);

	internal void RequestAppProofOfPurchaseKey(AppId nAppID)
	{
		_RequestAppProofOfPurchaseKey(Self, nAppID);
	}

	[DllImport("steam_api64", CallingConvention = CallingConvention.Cdecl, EntryPoint = "SteamAPI_ISteamApps_GetCurrentBetaName")]
	[return: MarshalAs(UnmanagedType.I1)]
	private static extern bool _GetCurrentBetaName(IntPtr self, IntPtr pchName, int cchNameBufferSize);

	internal bool GetCurrentBetaName(out string pchName)
	{
		Helpers.Memory m = Helpers.TakeMemory();
		try
		{
			bool result = _GetCurrentBetaName(Self, m, 32768);
			pchName = Helpers.MemoryToString(m);
			return result;
		}
		finally
		{
			((IDisposable)m/*cast due to .constrained prefix*/).Dispose();
		}
	}

	[DllImport("steam_api64", CallingConvention = CallingConvention.Cdecl, EntryPoint = "SteamAPI_ISteamApps_MarkContentCorrupt")]
	[return: MarshalAs(UnmanagedType.I1)]
	private static extern bool _MarkContentCorrupt(IntPtr self, [MarshalAs(UnmanagedType.U1)] bool bMissingFilesOnly);

	internal bool MarkContentCorrupt([MarshalAs(UnmanagedType.U1)] bool bMissingFilesOnly)
	{
		return _MarkContentCorrupt(Self, bMissingFilesOnly);
	}

	[DllImport("steam_api64", CallingConvention = CallingConvention.Cdecl, EntryPoint = "SteamAPI_ISteamApps_GetInstalledDepots")]
	private static extern uint _GetInstalledDepots(IntPtr self, AppId appID, [In][Out] DepotId_t[] pvecDepots, uint cMaxDepots);

	internal uint GetInstalledDepots(AppId appID, [In][Out] DepotId_t[] pvecDepots, uint cMaxDepots)
	{
		return _GetInstalledDepots(Self, appID, pvecDepots, cMaxDepots);
	}

	[DllImport("steam_api64", CallingConvention = CallingConvention.Cdecl, EntryPoint = "SteamAPI_ISteamApps_GetAppInstallDir")]
	private static extern uint _GetAppInstallDir(IntPtr self, AppId appID, IntPtr pchFolder, uint cchFolderBufferSize);

	internal uint GetAppInstallDir(AppId appID, out string pchFolder)
	{
		Helpers.Memory m = Helpers.TakeMemory();
		try
		{
			uint result = _GetAppInstallDir(Self, appID, m, 32768u);
			pchFolder = Helpers.MemoryToString(m);
			return result;
		}
		finally
		{
			((IDisposable)m/*cast due to .constrained prefix*/).Dispose();
		}
	}

	[DllImport("steam_api64", CallingConvention = CallingConvention.Cdecl, EntryPoint = "SteamAPI_ISteamApps_BIsAppInstalled")]
	[return: MarshalAs(UnmanagedType.I1)]
	private static extern bool _BIsAppInstalled(IntPtr self, AppId appID);

	internal bool BIsAppInstalled(AppId appID)
	{
		return _BIsAppInstalled(Self, appID);
	}

	[DllImport("steam_api64", CallingConvention = CallingConvention.Cdecl, EntryPoint = "SteamAPI_ISteamApps_GetAppOwner")]
	private static extern SteamId _GetAppOwner(IntPtr self);

	internal SteamId GetAppOwner()
	{
		return _GetAppOwner(Self);
	}

	[DllImport("steam_api64", CallingConvention = CallingConvention.Cdecl, EntryPoint = "SteamAPI_ISteamApps_GetLaunchQueryParam")]
	private static extern Utf8StringPointer _GetLaunchQueryParam(IntPtr self, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalType = "Steamworks.Utf8StringToNative")] string pchKey);

	internal string GetLaunchQueryParam([MarshalAs(UnmanagedType.CustomMarshaler, MarshalType = "Steamworks.Utf8StringToNative")] string pchKey)
	{
		return _GetLaunchQueryParam(Self, pchKey);
	}

	[DllImport("steam_api64", CallingConvention = CallingConvention.Cdecl, EntryPoint = "SteamAPI_ISteamApps_GetDlcDownloadProgress")]
	[return: MarshalAs(UnmanagedType.I1)]
	private static extern bool _GetDlcDownloadProgress(IntPtr self, AppId nAppID, ref ulong punBytesDownloaded, ref ulong punBytesTotal);

	internal bool GetDlcDownloadProgress(AppId nAppID, ref ulong punBytesDownloaded, ref ulong punBytesTotal)
	{
		return _GetDlcDownloadProgress(Self, nAppID, ref punBytesDownloaded, ref punBytesTotal);
	}

	[DllImport("steam_api64", CallingConvention = CallingConvention.Cdecl, EntryPoint = "SteamAPI_ISteamApps_GetAppBuildId")]
	private static extern int _GetAppBuildId(IntPtr self);

	internal int GetAppBuildId()
	{
		return _GetAppBuildId(Self);
	}

	[DllImport("steam_api64", CallingConvention = CallingConvention.Cdecl, EntryPoint = "SteamAPI_ISteamApps_RequestAllProofOfPurchaseKeys")]
	private static extern void _RequestAllProofOfPurchaseKeys(IntPtr self);

	internal void RequestAllProofOfPurchaseKeys()
	{
		_RequestAllProofOfPurchaseKeys(Self);
	}

	[DllImport("steam_api64", CallingConvention = CallingConvention.Cdecl, EntryPoint = "SteamAPI_ISteamApps_GetFileDetails")]
	private static extern SteamAPICall_t _GetFileDetails(IntPtr self, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalType = "Steamworks.Utf8StringToNative")] string pszFileName);

	internal CallResult<FileDetailsResult_t> GetFileDetails([MarshalAs(UnmanagedType.CustomMarshaler, MarshalType = "Steamworks.Utf8StringToNative")] string pszFileName)
	{
		return new CallResult<FileDetailsResult_t>(_GetFileDetails(Self, pszFileName), base.IsServer);
	}

	[DllImport("steam_api64", CallingConvention = CallingConvention.Cdecl, EntryPoint = "SteamAPI_ISteamApps_GetLaunchCommandLine")]
	private static extern int _GetLaunchCommandLine(IntPtr self, IntPtr pszCommandLine, int cubCommandLine);

	internal int GetLaunchCommandLine(out string pszCommandLine)
	{
		Helpers.Memory m = Helpers.TakeMemory();
		try
		{
			int result = _GetLaunchCommandLine(Self, m, 32768);
			pszCommandLine = Helpers.MemoryToString(m);
			return result;
		}
		finally
		{
			((IDisposable)m/*cast due to .constrained prefix*/).Dispose();
		}
	}

	[DllImport("steam_api64", CallingConvention = CallingConvention.Cdecl, EntryPoint = "SteamAPI_ISteamApps_BIsSubscribedFromFamilySharing")]
	[return: MarshalAs(UnmanagedType.I1)]
	private static extern bool _BIsSubscribedFromFamilySharing(IntPtr self);

	internal bool BIsSubscribedFromFamilySharing()
	{
		return _BIsSubscribedFromFamilySharing(Self);
	}

	[DllImport("steam_api64", CallingConvention = CallingConvention.Cdecl, EntryPoint = "SteamAPI_ISteamApps_BIsTimedTrial")]
	[return: MarshalAs(UnmanagedType.I1)]
	private static extern bool _BIsTimedTrial(IntPtr self, ref uint punSecondsAllowed, ref uint punSecondsPlayed);

	internal bool BIsTimedTrial(ref uint punSecondsAllowed, ref uint punSecondsPlayed)
	{
		return _BIsTimedTrial(Self, ref punSecondsAllowed, ref punSecondsPlayed);
	}

	[DllImport("steam_api64", CallingConvention = CallingConvention.Cdecl, EntryPoint = "SteamAPI_ISteamApps_SetDlcContext")]
	[return: MarshalAs(UnmanagedType.I1)]
	private static extern bool _SetDlcContext(IntPtr self, AppId nAppID);

	internal bool SetDlcContext(AppId nAppID)
	{
		return _SetDlcContext(Self, nAppID);
	}

	[DllImport("steam_api64", CallingConvention = CallingConvention.Cdecl, EntryPoint = "SteamAPI_ISteamApps_GetNumBetas")]
	private static extern int _GetNumBetas(IntPtr self, ref int pnAvailable, ref int pnPrivate);

	internal int GetNumBetas(ref int pnAvailable, ref int pnPrivate)
	{
		return _GetNumBetas(Self, ref pnAvailable, ref pnPrivate);
	}

	[DllImport("steam_api64", CallingConvention = CallingConvention.Cdecl, EntryPoint = "SteamAPI_ISteamApps_GetBetaInfo")]
	[return: MarshalAs(UnmanagedType.I1)]
	private static extern bool _GetBetaInfo(IntPtr self, int iBetaIndex, ref uint punFlags, ref uint punBuildID, IntPtr pchBetaName, int cchBetaName, IntPtr pchDescription, int cchDescription);

	internal bool GetBetaInfo(int iBetaIndex, ref uint punFlags, ref uint punBuildID, out string pchBetaName, out string pchDescription)
	{
		Helpers.Memory m = Helpers.TakeMemory();
		try
		{
			Helpers.Memory m2 = Helpers.TakeMemory();
			try
			{
				bool result = _GetBetaInfo(Self, iBetaIndex, ref punFlags, ref punBuildID, m, 32768, m2, 32768);
				pchBetaName = Helpers.MemoryToString(m);
				pchDescription = Helpers.MemoryToString(m2);
				return result;
			}
			finally
			{
				((IDisposable)m2/*cast due to .constrained prefix*/).Dispose();
			}
		}
		finally
		{
			((IDisposable)m/*cast due to .constrained prefix*/).Dispose();
		}
	}

	[DllImport("steam_api64", CallingConvention = CallingConvention.Cdecl, EntryPoint = "SteamAPI_ISteamApps_SetActiveBeta")]
	[return: MarshalAs(UnmanagedType.I1)]
	private static extern bool _SetActiveBeta(IntPtr self, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalType = "Steamworks.Utf8StringToNative")] string pchBetaName);

	internal bool SetActiveBeta([MarshalAs(UnmanagedType.CustomMarshaler, MarshalType = "Steamworks.Utf8StringToNative")] string pchBetaName)
	{
		return _SetActiveBeta(Self, pchBetaName);
	}
}
