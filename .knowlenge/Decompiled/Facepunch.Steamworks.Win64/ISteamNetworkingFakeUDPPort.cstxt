using System;
using System.Runtime.InteropServices;
using Steamworks;
using Steamworks.Data;

internal class ISteamNetworkingFakeUDPPort : SteamInterface
{
	internal ISteamNetworkingFakeUDPPort(bool IsGameServer)
	{
		SetupInterface(IsGameServer);
	}

	[DllImport("steam_api64", CallingConvention = CallingConvention.Cdecl, EntryPoint = "SteamAPI_ISteamNetworkingFakeUDPPort_DestroyFakeUDPPort")]
	private static extern void _DestroyFakeUDPPort(IntPtr self);

	internal void DestroyFakeUDPPort()
	{
		_DestroyFakeUDPPort(Self);
	}

	[DllImport("steam_api64", CallingConvention = CallingConvention.Cdecl, EntryPoint = "SteamAPI_ISteamNetworkingFakeUDPPort_SendMessageToFakeIP")]
	private static extern Result _SendMessageToFakeIP(IntPtr self, ref NetAddress remoteAddress, IntPtr pData, uint cbData, int nSendFlags);

	internal Result SendMessageToFakeIP(ref NetAddress remoteAddress, IntPtr pData, uint cbData, int nSendFlags)
	{
		return _SendMessageToFakeIP(Self, ref remoteAddress, pData, cbData, nSendFlags);
	}

	[DllImport("steam_api64", CallingConvention = CallingConvention.Cdecl, EntryPoint = "SteamAPI_ISteamNetworkingFakeUDPPort_ReceiveMessages")]
	private static extern int _ReceiveMessages(IntPtr self, IntPtr ppOutMessages, int nMaxMessages);

	internal int ReceiveMessages(IntPtr ppOutMessages, int nMaxMessages)
	{
		return _ReceiveMessages(Self, ppOutMessages, nMaxMessages);
	}

	[DllImport("steam_api64", CallingConvention = CallingConvention.Cdecl, EntryPoint = "SteamAPI_ISteamNetworkingFakeUDPPort_ScheduleCleanup")]
	private static extern void _ScheduleCleanup(IntPtr self, ref NetAddress remoteAddress);

	internal void ScheduleCleanup(ref NetAddress remoteAddress)
	{
		_ScheduleCleanup(Self, ref remoteAddress);
	}
}
