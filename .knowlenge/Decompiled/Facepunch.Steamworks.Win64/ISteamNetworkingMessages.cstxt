using System;
using System.Runtime.InteropServices;
using Steamworks;
using Steamworks.Data;

internal class ISteamNetworkingMessages : SteamInterface
{
	public const string Version = "SteamNetworkingMessages002";

	internal ISteamNetworkingMessages(bool IsGameServer)
	{
		SetupInterface(IsGameServer);
	}

	[DllImport("steam_api64", CallingConvention = CallingConvention.Cdecl)]
	internal static extern IntPtr SteamAPI_SteamNetworkingMessages_SteamAPI_v002();

	public override IntPtr GetUserInterfacePointer()
	{
		return SteamAPI_SteamNetworkingMessages_SteamAPI_v002();
	}

	[DllImport("steam_api64", CallingConvention = CallingConvention.Cdecl)]
	internal static extern IntPtr SteamAPI_SteamGameServerNetworkingMessages_SteamAPI_v002();

	public override IntPtr GetServerInterfacePointer()
	{
		return SteamAPI_SteamGameServerNetworkingMessages_SteamAPI_v002();
	}

	[DllImport("steam_api64", CallingConvention = CallingConvention.Cdecl, EntryPoint = "SteamAPI_ISteamNetworkingMessages_SendMessageToUser")]
	private static extern Result _SendMessageToUser(IntPtr self, ref NetIdentity identityRemote, [In][Out] IntPtr[] pubData, uint cubData, int nSendFlags, int nRemoteChannel);

	internal Result SendMessageToUser(ref NetIdentity identityRemote, [In][Out] IntPtr[] pubData, uint cubData, int nSendFlags, int nRemoteChannel)
	{
		return _SendMessageToUser(Self, ref identityRemote, pubData, cubData, nSendFlags, nRemoteChannel);
	}

	[DllImport("steam_api64", CallingConvention = CallingConvention.Cdecl, EntryPoint = "SteamAPI_ISteamNetworkingMessages_ReceiveMessagesOnChannel")]
	private static extern int _ReceiveMessagesOnChannel(IntPtr self, int nLocalChannel, IntPtr ppOutMessages, int nMaxMessages);

	internal int ReceiveMessagesOnChannel(int nLocalChannel, IntPtr ppOutMessages, int nMaxMessages)
	{
		return _ReceiveMessagesOnChannel(Self, nLocalChannel, ppOutMessages, nMaxMessages);
	}

	[DllImport("steam_api64", CallingConvention = CallingConvention.Cdecl, EntryPoint = "SteamAPI_ISteamNetworkingMessages_AcceptSessionWithUser")]
	[return: MarshalAs(UnmanagedType.I1)]
	private static extern bool _AcceptSessionWithUser(IntPtr self, ref NetIdentity identityRemote);

	internal bool AcceptSessionWithUser(ref NetIdentity identityRemote)
	{
		return _AcceptSessionWithUser(Self, ref identityRemote);
	}

	[DllImport("steam_api64", CallingConvention = CallingConvention.Cdecl, EntryPoint = "SteamAPI_ISteamNetworkingMessages_CloseSessionWithUser")]
	[return: MarshalAs(UnmanagedType.I1)]
	private static extern bool _CloseSessionWithUser(IntPtr self, ref NetIdentity identityRemote);

	internal bool CloseSessionWithUser(ref NetIdentity identityRemote)
	{
		return _CloseSessionWithUser(Self, ref identityRemote);
	}

	[DllImport("steam_api64", CallingConvention = CallingConvention.Cdecl, EntryPoint = "SteamAPI_ISteamNetworkingMessages_CloseChannelWithUser")]
	[return: MarshalAs(UnmanagedType.I1)]
	private static extern bool _CloseChannelWithUser(IntPtr self, ref NetIdentity identityRemote, int nLocalChannel);

	internal bool CloseChannelWithUser(ref NetIdentity identityRemote, int nLocalChannel)
	{
		return _CloseChannelWithUser(Self, ref identityRemote, nLocalChannel);
	}

	[DllImport("steam_api64", CallingConvention = CallingConvention.Cdecl, EntryPoint = "SteamAPI_ISteamNetworkingMessages_GetSessionConnectionInfo")]
	private static extern ConnectionState _GetSessionConnectionInfo(IntPtr self, ref NetIdentity identityRemote, ref ConnectionInfo pConnectionInfo, ref ConnectionStatus pQuickStatus);

	internal ConnectionState GetSessionConnectionInfo(ref NetIdentity identityRemote, ref ConnectionInfo pConnectionInfo, ref ConnectionStatus pQuickStatus)
	{
		return _GetSessionConnectionInfo(Self, ref identityRemote, ref pConnectionInfo, ref pQuickStatus);
	}
}
