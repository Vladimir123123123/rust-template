using System;
using System.Runtime.InteropServices;
using Steamworks;
using Steamworks.Data;

internal class ISteamTimeline : SteamInterface
{
	public const string Version = "STEAMTIMELINE_INTERFACE_V004";

	internal ISteamTimeline(bool IsGameServer)
	{
		SetupInterface(IsGameServer);
	}

	[DllImport("steam_api64", CallingConvention = CallingConvention.Cdecl)]
	internal static extern IntPtr SteamAPI_SteamTimeline_v004();

	public override IntPtr GetUserInterfacePointer()
	{
		return SteamAPI_SteamTimeline_v004();
	}

	[DllImport("steam_api64", CallingConvention = CallingConvention.Cdecl, EntryPoint = "SteamAPI_ISteamTimeline_SetTimelineTooltip")]
	private static extern void _SetTimelineTooltip(IntPtr self, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalType = "Steamworks.Utf8StringToNative")] string pchDescription, float flTimeDelta);

	internal void SetTimelineTooltip([MarshalAs(UnmanagedType.CustomMarshaler, MarshalType = "Steamworks.Utf8StringToNative")] string pchDescription, float flTimeDelta)
	{
		_SetTimelineTooltip(Self, pchDescription, flTimeDelta);
	}

	[DllImport("steam_api64", CallingConvention = CallingConvention.Cdecl, EntryPoint = "SteamAPI_ISteamTimeline_ClearTimelineTooltip")]
	private static extern void _ClearTimelineTooltip(IntPtr self, float flTimeDelta);

	internal void ClearTimelineTooltip(float flTimeDelta)
	{
		_ClearTimelineTooltip(Self, flTimeDelta);
	}

	[DllImport("steam_api64", CallingConvention = CallingConvention.Cdecl, EntryPoint = "SteamAPI_ISteamTimeline_SetTimelineGameMode")]
	private static extern void _SetTimelineGameMode(IntPtr self, TimelineGameMode eMode);

	internal void SetTimelineGameMode(TimelineGameMode eMode)
	{
		_SetTimelineGameMode(Self, eMode);
	}

	[DllImport("steam_api64", CallingConvention = CallingConvention.Cdecl, EntryPoint = "SteamAPI_ISteamTimeline_AddInstantaneousTimelineEvent")]
	private static extern TimelineEventHandle _AddInstantaneousTimelineEvent(IntPtr self, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalType = "Steamworks.Utf8StringToNative")] string pchTitle, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalType = "Steamworks.Utf8StringToNative")] string pchDescription, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalType = "Steamworks.Utf8StringToNative")] string pchIcon, uint unIconPriority, float flStartOffsetSeconds, TimelineEventClipPriority ePossibleClip);

	internal TimelineEventHandle AddInstantaneousTimelineEvent([MarshalAs(UnmanagedType.CustomMarshaler, MarshalType = "Steamworks.Utf8StringToNative")] string pchTitle, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalType = "Steamworks.Utf8StringToNative")] string pchDescription, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalType = "Steamworks.Utf8StringToNative")] string pchIcon, uint unIconPriority, float flStartOffsetSeconds, TimelineEventClipPriority ePossibleClip)
	{
		return _AddInstantaneousTimelineEvent(Self, pchTitle, pchDescription, pchIcon, unIconPriority, flStartOffsetSeconds, ePossibleClip);
	}

	[DllImport("steam_api64", CallingConvention = CallingConvention.Cdecl, EntryPoint = "SteamAPI_ISteamTimeline_AddRangeTimelineEvent")]
	private static extern TimelineEventHandle _AddRangeTimelineEvent(IntPtr self, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalType = "Steamworks.Utf8StringToNative")] string pchTitle, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalType = "Steamworks.Utf8StringToNative")] string pchDescription, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalType = "Steamworks.Utf8StringToNative")] string pchIcon, uint unIconPriority, float flStartOffsetSeconds, float flDuration, TimelineEventClipPriority ePossibleClip);

	internal TimelineEventHandle AddRangeTimelineEvent([MarshalAs(UnmanagedType.CustomMarshaler, MarshalType = "Steamworks.Utf8StringToNative")] string pchTitle, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalType = "Steamworks.Utf8StringToNative")] string pchDescription, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalType = "Steamworks.Utf8StringToNative")] string pchIcon, uint unIconPriority, float flStartOffsetSeconds, float flDuration, TimelineEventClipPriority ePossibleClip)
	{
		return _AddRangeTimelineEvent(Self, pchTitle, pchDescription, pchIcon, unIconPriority, flStartOffsetSeconds, flDuration, ePossibleClip);
	}

	[DllImport("steam_api64", CallingConvention = CallingConvention.Cdecl, EntryPoint = "SteamAPI_ISteamTimeline_StartRangeTimelineEvent")]
	private static extern TimelineEventHandle _StartRangeTimelineEvent(IntPtr self, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalType = "Steamworks.Utf8StringToNative")] string pchTitle, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalType = "Steamworks.Utf8StringToNative")] string pchDescription, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalType = "Steamworks.Utf8StringToNative")] string pchIcon, uint unPriority, float flStartOffsetSeconds, TimelineEventClipPriority ePossibleClip);

	internal TimelineEventHandle StartRangeTimelineEvent([MarshalAs(UnmanagedType.CustomMarshaler, MarshalType = "Steamworks.Utf8StringToNative")] string pchTitle, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalType = "Steamworks.Utf8StringToNative")] string pchDescription, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalType = "Steamworks.Utf8StringToNative")] string pchIcon, uint unPriority, float flStartOffsetSeconds, TimelineEventClipPriority ePossibleClip)
	{
		return _StartRangeTimelineEvent(Self, pchTitle, pchDescription, pchIcon, unPriority, flStartOffsetSeconds, ePossibleClip);
	}

	[DllImport("steam_api64", CallingConvention = CallingConvention.Cdecl, EntryPoint = "SteamAPI_ISteamTimeline_UpdateRangeTimelineEvent")]
	private static extern void _UpdateRangeTimelineEvent(IntPtr self, TimelineEventHandle ulEvent, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalType = "Steamworks.Utf8StringToNative")] string pchTitle, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalType = "Steamworks.Utf8StringToNative")] string pchDescription, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalType = "Steamworks.Utf8StringToNative")] string pchIcon, uint unPriority, TimelineEventClipPriority ePossibleClip);

	internal void UpdateRangeTimelineEvent(TimelineEventHandle ulEvent, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalType = "Steamworks.Utf8StringToNative")] string pchTitle, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalType = "Steamworks.Utf8StringToNative")] string pchDescription, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalType = "Steamworks.Utf8StringToNative")] string pchIcon, uint unPriority, TimelineEventClipPriority ePossibleClip)
	{
		_UpdateRangeTimelineEvent(Self, ulEvent, pchTitle, pchDescription, pchIcon, unPriority, ePossibleClip);
	}

	[DllImport("steam_api64", CallingConvention = CallingConvention.Cdecl, EntryPoint = "SteamAPI_ISteamTimeline_EndRangeTimelineEvent")]
	private static extern void _EndRangeTimelineEvent(IntPtr self, TimelineEventHandle ulEvent, float flEndOffsetSeconds);

	internal void EndRangeTimelineEvent(TimelineEventHandle ulEvent, float flEndOffsetSeconds)
	{
		_EndRangeTimelineEvent(Self, ulEvent, flEndOffsetSeconds);
	}

	[DllImport("steam_api64", CallingConvention = CallingConvention.Cdecl, EntryPoint = "SteamAPI_ISteamTimeline_RemoveTimelineEvent")]
	private static extern void _RemoveTimelineEvent(IntPtr self, TimelineEventHandle ulEvent);

	internal void RemoveTimelineEvent(TimelineEventHandle ulEvent)
	{
		_RemoveTimelineEvent(Self, ulEvent);
	}

	[DllImport("steam_api64", CallingConvention = CallingConvention.Cdecl, EntryPoint = "SteamAPI_ISteamTimeline_DoesEventRecordingExist")]
	private static extern SteamAPICall_t _DoesEventRecordingExist(IntPtr self, TimelineEventHandle ulEvent);

	internal CallResult<SteamTimelineEventRecordingExists_t> DoesEventRecordingExist(TimelineEventHandle ulEvent)
	{
		return new CallResult<SteamTimelineEventRecordingExists_t>(_DoesEventRecordingExist(Self, ulEvent), base.IsServer);
	}

	[DllImport("steam_api64", CallingConvention = CallingConvention.Cdecl, EntryPoint = "SteamAPI_ISteamTimeline_StartGamePhase")]
	private static extern void _StartGamePhase(IntPtr self);

	internal void StartGamePhase()
	{
		_StartGamePhase(Self);
	}

	[DllImport("steam_api64", CallingConvention = CallingConvention.Cdecl, EntryPoint = "SteamAPI_ISteamTimeline_EndGamePhase")]
	private static extern void _EndGamePhase(IntPtr self);

	internal void EndGamePhase()
	{
		_EndGamePhase(Self);
	}

	[DllImport("steam_api64", CallingConvention = CallingConvention.Cdecl, EntryPoint = "SteamAPI_ISteamTimeline_SetGamePhaseID")]
	private static extern void _SetGamePhaseID(IntPtr self, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalType = "Steamworks.Utf8StringToNative")] string pchPhaseID);

	internal void SetGamePhaseID([MarshalAs(UnmanagedType.CustomMarshaler, MarshalType = "Steamworks.Utf8StringToNative")] string pchPhaseID)
	{
		_SetGamePhaseID(Self, pchPhaseID);
	}

	[DllImport("steam_api64", CallingConvention = CallingConvention.Cdecl, EntryPoint = "SteamAPI_ISteamTimeline_DoesGamePhaseRecordingExist")]
	private static extern SteamAPICall_t _DoesGamePhaseRecordingExist(IntPtr self, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalType = "Steamworks.Utf8StringToNative")] string pchPhaseID);

	internal CallResult<SteamTimelineGamePhaseRecordingExists_t> DoesGamePhaseRecordingExist([MarshalAs(UnmanagedType.CustomMarshaler, MarshalType = "Steamworks.Utf8StringToNative")] string pchPhaseID)
	{
		return new CallResult<SteamTimelineGamePhaseRecordingExists_t>(_DoesGamePhaseRecordingExist(Self, pchPhaseID), base.IsServer);
	}

	[DllImport("steam_api64", CallingConvention = CallingConvention.Cdecl, EntryPoint = "SteamAPI_ISteamTimeline_AddGamePhaseTag")]
	private static extern void _AddGamePhaseTag(IntPtr self, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalType = "Steamworks.Utf8StringToNative")] string pchTagName, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalType = "Steamworks.Utf8StringToNative")] string pchTagIcon, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalType = "Steamworks.Utf8StringToNative")] string pchTagGroup, uint unPriority);

	internal void AddGamePhaseTag([MarshalAs(UnmanagedType.CustomMarshaler, MarshalType = "Steamworks.Utf8StringToNative")] string pchTagName, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalType = "Steamworks.Utf8StringToNative")] string pchTagIcon, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalType = "Steamworks.Utf8StringToNative")] string pchTagGroup, uint unPriority)
	{
		_AddGamePhaseTag(Self, pchTagName, pchTagIcon, pchTagGroup, unPriority);
	}

	[DllImport("steam_api64", CallingConvention = CallingConvention.Cdecl, EntryPoint = "SteamAPI_ISteamTimeline_SetGamePhaseAttribute")]
	private static extern void _SetGamePhaseAttribute(IntPtr self, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalType = "Steamworks.Utf8StringToNative")] string pchAttributeGroup, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalType = "Steamworks.Utf8StringToNative")] string pchAttributeValue, uint unPriority);

	internal void SetGamePhaseAttribute([MarshalAs(UnmanagedType.CustomMarshaler, MarshalType = "Steamworks.Utf8StringToNative")] string pchAttributeGroup, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalType = "Steamworks.Utf8StringToNative")] string pchAttributeValue, uint unPriority)
	{
		_SetGamePhaseAttribute(Self, pchAttributeGroup, pchAttributeValue, unPriority);
	}

	[DllImport("steam_api64", CallingConvention = CallingConvention.Cdecl, EntryPoint = "SteamAPI_ISteamTimeline_OpenOverlayToGamePhase")]
	private static extern void _OpenOverlayToGamePhase(IntPtr self, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalType = "Steamworks.Utf8StringToNative")] string pchPhaseID);

	internal void OpenOverlayToGamePhase([MarshalAs(UnmanagedType.CustomMarshaler, MarshalType = "Steamworks.Utf8StringToNative")] string pchPhaseID)
	{
		_OpenOverlayToGamePhase(Self, pchPhaseID);
	}

	[DllImport("steam_api64", CallingConvention = CallingConvention.Cdecl, EntryPoint = "SteamAPI_ISteamTimeline_OpenOverlayToTimelineEvent")]
	private static extern void _OpenOverlayToTimelineEvent(IntPtr self, TimelineEventHandle ulEvent);

	internal void OpenOverlayToTimelineEvent(TimelineEventHandle ulEvent)
	{
		_OpenOverlayToTimelineEvent(Self, ulEvent);
	}
}
