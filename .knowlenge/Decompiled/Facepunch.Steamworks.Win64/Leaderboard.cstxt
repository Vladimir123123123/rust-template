using System;
using System.Threading.Tasks;
using Steamworks;
using Steamworks.Data;

public struct Leaderboard
{
	internal SteamLeaderboard_t Id;

	private static int[] detailsBuffer = new int[64];

	private static int[] noDetails = Array.Empty<int>();

	public string Name => SteamUserStats.Internal.GetLeaderboardName(Id);

	public LeaderboardSort Sort => SteamUserStats.Internal.GetLeaderboardSortMethod(Id);

	public LeaderboardDisplay Display => SteamUserStats.Internal.GetLeaderboardDisplayType(Id);

	public int EntryCount => SteamUserStats.Internal.GetLeaderboardEntryCount(Id);

	public async Task<LeaderboardUpdate?> ReplaceScore(int score, int[] details = null)
	{
		if (details == null)
		{
			details = noDetails;
		}
		LeaderboardScoreUploaded_t? leaderboardScoreUploaded_t = await SteamUserStats.Internal.UploadLeaderboardScore(Id, LeaderboardUploadScoreMethod.ForceUpdate, score, details, details.Length);
		if (!leaderboardScoreUploaded_t.HasValue)
		{
			return null;
		}
		return LeaderboardUpdate.From(leaderboardScoreUploaded_t.Value);
	}

	public async Task<LeaderboardUpdate?> SubmitScoreAsync(int score, int[] details = null)
	{
		if (details == null)
		{
			details = noDetails;
		}
		LeaderboardScoreUploaded_t? leaderboardScoreUploaded_t = await SteamUserStats.Internal.UploadLeaderboardScore(Id, LeaderboardUploadScoreMethod.KeepBest, score, details, details.Length);
		if (!leaderboardScoreUploaded_t.HasValue)
		{
			return null;
		}
		return LeaderboardUpdate.From(leaderboardScoreUploaded_t.Value);
	}

	public async Task<Result> AttachUgc(Ugc file)
	{
		LeaderboardUGCSet_t? leaderboardUGCSet_t = await SteamUserStats.Internal.AttachLeaderboardUGC(Id, file.Handle);
		if (!leaderboardUGCSet_t.HasValue)
		{
			return Result.Fail;
		}
		return leaderboardUGCSet_t.Value.Result;
	}

	public async Task<LeaderboardEntry[]> GetScoresForUsersAsync(SteamId[] users)
	{
		if (users == null || users.Length == 0)
		{
			return null;
		}
		LeaderboardScoresDownloaded_t? leaderboardScoresDownloaded_t = await SteamUserStats.Internal.DownloadLeaderboardEntriesForUsers(Id, users, users.Length);
		if (!leaderboardScoresDownloaded_t.HasValue)
		{
			return null;
		}
		return await LeaderboardResultToEntries(leaderboardScoresDownloaded_t.Value);
	}

	public async Task<LeaderboardEntry[]> GetScoresAsync(int count, int offset = 1)
	{
		if (offset <= 0)
		{
			throw new ArgumentException("Should be 1+", "offset");
		}
		LeaderboardScoresDownloaded_t? leaderboardScoresDownloaded_t = await SteamUserStats.Internal.DownloadLeaderboardEntries(Id, LeaderboardDataRequest.Global, offset, offset + count - 1);
		if (!leaderboardScoresDownloaded_t.HasValue)
		{
			return null;
		}
		return await LeaderboardResultToEntries(leaderboardScoresDownloaded_t.Value);
	}

	public async Task<LeaderboardEntry[]> GetScoresAroundUserAsync(int start = -10, int end = 10)
	{
		LeaderboardScoresDownloaded_t? leaderboardScoresDownloaded_t = await SteamUserStats.Internal.DownloadLeaderboardEntries(Id, LeaderboardDataRequest.GlobalAroundUser, start, end);
		if (!leaderboardScoresDownloaded_t.HasValue)
		{
			return null;
		}
		return await LeaderboardResultToEntries(leaderboardScoresDownloaded_t.Value);
	}

	public async Task<LeaderboardEntry[]> GetScoresFromFriendsAsync()
	{
		LeaderboardScoresDownloaded_t? leaderboardScoresDownloaded_t = await SteamUserStats.Internal.DownloadLeaderboardEntries(Id, LeaderboardDataRequest.Friends, 0, 0);
		if (!leaderboardScoresDownloaded_t.HasValue)
		{
			return null;
		}
		return await LeaderboardResultToEntries(leaderboardScoresDownloaded_t.Value);
	}

	internal async Task<LeaderboardEntry[]> LeaderboardResultToEntries(LeaderboardScoresDownloaded_t r)
	{
		if (r.CEntryCount <= 0)
		{
			return null;
		}
		LeaderboardEntry[] output = new LeaderboardEntry[r.CEntryCount];
		LeaderboardEntry_t pLeaderboardEntry = default(LeaderboardEntry_t);
		for (int i = 0; i < output.Length; i++)
		{
			if (SteamUserStats.Internal.GetDownloadedLeaderboardEntry(r.SteamLeaderboardEntries, i, ref pLeaderboardEntry, detailsBuffer, detailsBuffer.Length))
			{
				output[i] = LeaderboardEntry.From(pLeaderboardEntry, detailsBuffer);
			}
		}
		await WaitForUserNames(output);
		return output;
	}

	internal static async Task WaitForUserNames(LeaderboardEntry[] entries)
	{
		bool gotAll = false;
		while (!gotAll)
		{
			gotAll = true;
			for (int i = 0; i < entries.Length; i++)
			{
				LeaderboardEntry leaderboardEntry = entries[i];
				if ((ulong)leaderboardEntry.User.Id != 0L && SteamFriends.Internal.RequestUserInformation(leaderboardEntry.User.Id, bRequireNameOnly: true))
				{
					gotAll = false;
				}
			}
			await Task.Delay(1);
		}
	}
}
