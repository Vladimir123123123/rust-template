using System;
using System.Collections.Generic;
using System.Runtime.InteropServices;

internal struct Memory : IDisposable
{
	private const int MaxBagSize = 4;

	private static readonly Queue<IntPtr> BufferBag = new Queue<IntPtr>();

	public IntPtr Ptr { get; private set; }

	public static implicit operator IntPtr(in Memory m)
	{
		return m.Ptr;
	}

	internal unsafe static Memory Take()
	{
		IntPtr intPtr;
		lock (BufferBag)
		{
			intPtr = ((BufferBag.Count > 0) ? BufferBag.Dequeue() : Marshal.AllocHGlobal(32768));
		}
		*(sbyte*)(void*)intPtr = 0;
		Memory result = default(Memory);
		result.Ptr = intPtr;
		return result;
	}

	public void Dispose()
	{
		if (Ptr == IntPtr.Zero)
		{
			return;
		}
		lock (BufferBag)
		{
			if (BufferBag.Count < 4)
			{
				BufferBag.Enqueue(Ptr);
			}
			else
			{
				Marshal.FreeHGlobal(Ptr);
			}
		}
		Ptr = IntPtr.Zero;
	}
}
