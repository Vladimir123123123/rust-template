using System;
using System.Threading;

private sealed class ReferenceCounter
{
	private int _count;

	public IntPtr Pointer { get; private set; }

	public int Size { get; private set; }

	public void Set(IntPtr ptr, int size, int referenceCount)
	{
		if (ptr == IntPtr.Zero)
		{
			throw new ArgumentNullException("ptr");
		}
		if (size <= 0)
		{
			throw new ArgumentOutOfRangeException("size");
		}
		if (referenceCount <= 0)
		{
			throw new ArgumentOutOfRangeException("referenceCount");
		}
		Pointer = ptr;
		Size = size;
		Interlocked.Exchange(ref _count, referenceCount);
	}

	public bool Decrement()
	{
		int num = Interlocked.Decrement(ref _count);
		if (num < 0)
		{
			SteamNetworkingUtils.LogDebugMessage(NetDebugOutput.Bug, "Prevented double free of BufferManager pointer");
			return false;
		}
		return num == 0;
	}
}
