using System;
using System.Collections.Generic;
using Steamworks;
using Steamworks.Data;
using Steamworks.Ugc;

public struct ResultPage : IDisposable
{
	internal UGCQueryHandle_t Handle;

	public int ResultCount;

	public int TotalCount;

	public bool CachedData;

	internal bool ReturnsKeyValueTags;

	internal bool ReturnsDefaultStats;

	internal bool ReturnsMetadata;

	internal bool ReturnsChildren;

	internal bool ReturnsAdditionalPreviews;

	public IEnumerable<Item> Entries
	{
		get
		{
			SteamUGCDetails_t details = default(SteamUGCDetails_t);
			for (uint i = 0u; i < ResultCount; i++)
			{
				if (!SteamUGC.Internal.GetQueryUGCResult(Handle, i, ref details))
				{
					continue;
				}
				Item item = Item.From(details);
				if (ReturnsDefaultStats)
				{
					item.NumSubscriptions = GetStat(i, ItemStatistic.NumSubscriptions);
					item.NumFavorites = GetStat(i, ItemStatistic.NumFavorites);
					item.NumFollowers = GetStat(i, ItemStatistic.NumFollowers);
					item.NumUniqueSubscriptions = GetStat(i, ItemStatistic.NumUniqueSubscriptions);
					item.NumUniqueFavorites = GetStat(i, ItemStatistic.NumUniqueFavorites);
					item.NumUniqueFollowers = GetStat(i, ItemStatistic.NumUniqueFollowers);
					item.NumUniqueWebsiteViews = GetStat(i, ItemStatistic.NumUniqueWebsiteViews);
					item.ReportScore = GetStat(i, ItemStatistic.ReportScore);
					item.NumSecondsPlayed = GetStat(i, ItemStatistic.NumSecondsPlayed);
					item.NumPlaytimeSessions = GetStat(i, ItemStatistic.NumPlaytimeSessions);
					item.NumComments = GetStat(i, ItemStatistic.NumComments);
					item.NumSecondsPlayedDuringTimePeriod = GetStat(i, ItemStatistic.NumSecondsPlayedDuringTimePeriod);
					item.NumPlaytimeSessionsDuringTimePeriod = GetStat(i, ItemStatistic.NumPlaytimeSessionsDuringTimePeriod);
				}
				if (SteamUGC.Internal.GetQueryUGCPreviewURL(Handle, i, out var pchURL))
				{
					item.PreviewImageUrl = pchURL;
				}
				if (ReturnsKeyValueTags)
				{
					uint queryUGCNumKeyValueTags = SteamUGC.Internal.GetQueryUGCNumKeyValueTags(Handle, i);
					item.KeyValueTags = new Dictionary<string, string>((int)queryUGCNumKeyValueTags);
					for (uint num = 0u; num < queryUGCNumKeyValueTags; num++)
					{
						if (SteamUGC.Internal.GetQueryUGCKeyValueTag(Handle, i, num, out var pchKey, out var pchValue))
						{
							item.KeyValueTags[pchKey] = pchValue;
						}
					}
				}
				if (ReturnsMetadata && SteamUGC.Internal.GetQueryUGCMetadata(Handle, i, out var pchMetadata))
				{
					item.Metadata = pchMetadata;
				}
				uint numChildren = item.details.NumChildren;
				if (ReturnsChildren && numChildren != 0)
				{
					PublishedFileId[] array = new PublishedFileId[numChildren];
					if (SteamUGC.Internal.GetQueryUGCChildren(Handle, i, array, numChildren))
					{
						item.Children = array;
					}
				}
				if (ReturnsAdditionalPreviews)
				{
					uint queryUGCNumAdditionalPreviews = SteamUGC.Internal.GetQueryUGCNumAdditionalPreviews(Handle, i);
					if (queryUGCNumAdditionalPreviews != 0)
					{
						item.AdditionalPreviews = new UgcAdditionalPreview[queryUGCNumAdditionalPreviews];
						for (uint num2 = 0u; num2 < queryUGCNumAdditionalPreviews; num2++)
						{
							ItemPreviewType pPreviewType = ItemPreviewType.Image;
							if (SteamUGC.Internal.GetQueryUGCAdditionalPreview(Handle, i, num2, out var pchURLOrVideoID, out var pchOriginalFileName, ref pPreviewType))
							{
								item.AdditionalPreviews[num2] = new UgcAdditionalPreview(pchURLOrVideoID, pchOriginalFileName, pPreviewType);
							}
						}
					}
				}
				yield return item;
			}
		}
	}

	private ulong GetStat(uint index, ItemStatistic stat)
	{
		ulong pStatValue = 0uL;
		if (!SteamUGC.Internal.GetQueryUGCStatistic(Handle, index, stat, ref pStatValue))
		{
			return 0uL;
		}
		return pStatValue;
	}

	public void Dispose()
	{
		if ((ulong)Handle != 0)
		{
			SteamUGC.Internal.ReleaseQueryUGCRequest(Handle);
			Handle = 0uL;
		}
	}
}
