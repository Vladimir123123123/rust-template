using System;
using System.Runtime.InteropServices;
using Steamworks.Data;

internal struct ServerFilterMarshaler : IDisposable
{
	private static readonly int SizeOfPointer = Marshal.SizeOf<IntPtr>();

	private static readonly int SizeOfKeyValuePair = Marshal.SizeOf<MatchMakingKeyValuePair>();

	private IntPtr _arrayPtr;

	private IntPtr _itemsPtr;

	public int Count { get; private set; }

	public IntPtr Pointer => _arrayPtr;

	public ServerFilterMarshaler(MatchMakingKeyValuePair[] filters)
	{
		if (filters == null || filters.Length == 0)
		{
			Count = 0;
			_arrayPtr = IntPtr.Zero;
			_itemsPtr = IntPtr.Zero;
			return;
		}
		Count = filters.Length;
		_arrayPtr = Marshal.AllocHGlobal(SizeOfPointer * filters.Length);
		_itemsPtr = Marshal.AllocHGlobal(SizeOfKeyValuePair * filters.Length);
		IntPtr arrayPtr = _arrayPtr;
		IntPtr itemsPtr = _itemsPtr;
		foreach (MatchMakingKeyValuePair structure in filters)
		{
			Marshal.WriteIntPtr(arrayPtr, itemsPtr);
			arrayPtr += SizeOfPointer;
			Marshal.StructureToPtr(structure, itemsPtr, fDeleteOld: false);
			itemsPtr += SizeOfKeyValuePair;
		}
	}

	public void Dispose()
	{
		if (_arrayPtr != IntPtr.Zero)
		{
			Marshal.FreeHGlobal(_arrayPtr);
			_arrayPtr = IntPtr.Zero;
		}
		if (_itemsPtr != IntPtr.Zero)
		{
			Marshal.FreeHGlobal(_itemsPtr);
			_itemsPtr = IntPtr.Zero;
		}
	}
}
