using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Net;
using System.Net.Sockets;
using System.Threading.Tasks;
using Steamworks;
using Steamworks.Data;

internal static class SourceServerQuery
{
	private static readonly byte[] A2S_SERVERQUERY_GETCHALLENGE = new byte[5] { 85, 255, 255, 255, 255 };

	private const byte A2S_RULES = 86;

	private static readonly Dictionary<IPEndPoint, Task<Dictionary<string, string>>> PendingQueries = new Dictionary<IPEndPoint, Task<Dictionary<string, string>>>();

	internal static Task<Dictionary<string, string>> GetRules(ServerInfo server)
	{
		IPEndPoint endpoint = new IPEndPoint(server.Address, server.QueryPort);
		lock (PendingQueries)
		{
			if (PendingQueries.TryGetValue(endpoint, out var value))
			{
				return value;
			}
			Task<Dictionary<string, string>> task = GetRulesImpl(endpoint).ContinueWith(delegate(Task<Dictionary<string, string>> t)
			{
				lock (PendingQueries)
				{
					PendingQueries.Remove(endpoint);
					return t;
				}
			}).Unwrap();
			PendingQueries.Add(endpoint, task);
			return task;
		}
	}

	private static async Task<Dictionary<string, string>> GetRulesImpl(IPEndPoint endpoint)
	{
		try
		{
			using UdpClient client = new UdpClient();
			client.Client.SendTimeout = 3000;
			client.Client.ReceiveTimeout = 3000;
			client.Connect(endpoint);
			return await GetRules(client);
		}
		catch (Exception)
		{
			return null;
		}
	}

	private static async Task<Dictionary<string, string>> GetRules(UdpClient client)
	{
		byte[] array = await GetChallengeData(client);
		array[0] = 86;
		await Send(client, array);
		byte[] buffer = await Receive(client);
		Dictionary<string, string> dictionary = new Dictionary<string, string>();
		using BinaryReader binaryReader = new BinaryReader(new MemoryStream(buffer));
		if (binaryReader.ReadByte() != 69)
		{
			throw new Exception("Invalid data received in response to A2S_RULES request");
		}
		ushort num = binaryReader.ReadUInt16();
		for (int i = 0; i < num; i++)
		{
			dictionary.Add(binaryReader.ReadNullTerminatedUTF8String(), binaryReader.ReadNullTerminatedUTF8String());
		}
		return dictionary;
	}

	private static async Task<byte[]> Receive(UdpClient client)
	{
		byte[][] packets = null;
		do
		{
			byte[] buffer = (await client.ReceiveAsync()).Buffer;
			using BinaryReader binaryReader = new BinaryReader(new MemoryStream(buffer));
			switch (binaryReader.ReadInt32())
			{
			case -1:
			{
				byte[] array2 = new byte[buffer.Length - binaryReader.BaseStream.Position];
				Buffer.BlockCopy(buffer, (int)binaryReader.BaseStream.Position, array2, 0, array2.Length);
				return array2;
			}
			case -2:
			{
				binaryReader.ReadInt32();
				byte b = binaryReader.ReadByte();
				byte b2 = binaryReader.ReadByte();
				binaryReader.ReadInt32();
				if (packets == null)
				{
					packets = new byte[b2][];
				}
				byte[] array = new byte[buffer.Length - binaryReader.BaseStream.Position];
				Buffer.BlockCopy(buffer, (int)binaryReader.BaseStream.Position, array, 0, array.Length);
				packets[b] = array;
				break;
			}
			default:
				throw new Exception("Invalid Header");
			}
		}
		while (packets.Any((byte[] p) => p == null));
		return Combine(packets);
	}

	private static async Task<byte[]> GetChallengeData(UdpClient client)
	{
		await Send(client, A2S_SERVERQUERY_GETCHALLENGE);
		byte[] obj = await Receive(client);
		if (obj[0] != 65)
		{
			throw new Exception("Invalid Challenge");
		}
		return obj;
	}

	private static async Task Send(UdpClient client, byte[] message)
	{
		byte[] array = new byte[message.Length + 4];
		array[0] = byte.MaxValue;
		array[1] = byte.MaxValue;
		array[2] = byte.MaxValue;
		array[3] = byte.MaxValue;
		Buffer.BlockCopy(message, 0, array, 4, message.Length);
		await client.SendAsync(array, message.Length + 4);
	}

	private static byte[] Combine(byte[][] arrays)
	{
		byte[] array = new byte[arrays.Sum((byte[] a) => a.Length)];
		int num = 0;
		foreach (byte[] array2 in arrays)
		{
			Buffer.BlockCopy(array2, 0, array, num, array2.Length);
			num += array2.Length;
		}
		return array;
	}
}
