using System;
using System.Collections.Generic;
using System.Threading.Tasks;
using Steamworks;
using Steamworks.Data;

public class SteamFriends : SteamClientClass<SteamFriends>
{
	private static Dictionary<string, string> richPresence;

	private static bool _listenForFriendsMessages;

	internal static ISteamFriends Internal => SteamClientClass<SteamFriends>.Interface as ISteamFriends;

	public static bool ListenForFriendsMessages
	{
		get
		{
			return _listenForFriendsMessages;
		}
		set
		{
			_listenForFriendsMessages = value;
			Internal.SetListenForFriendsMessages(value);
		}
	}

	public static event Action<Friend, string, string> OnChatMessage;

	public static event Action<Friend, string, string> OnClanChatMessage;

	public static event Action<Friend> OnPersonaStateChange;

	public static event Action<Friend, string> OnGameRichPresenceJoinRequested;

	public static event Action<bool> OnGameOverlayActivated;

	public static event Action<string, string> OnGameServerChangeRequested;

	public static event Action<Lobby, SteamId> OnGameLobbyJoinRequested;

	public static event Action<Friend> OnFriendRichPresenceUpdate;

	public static event Action<string> OnOverlayBrowserProtocol;

	internal override bool InitializeInterface(bool server)
	{
		SetInterface(server, new ISteamFriends(server));
		if (SteamClientClass<SteamFriends>.Interface.Self == IntPtr.Zero)
		{
			return false;
		}
		richPresence = new Dictionary<string, string>();
		InstallEvents();
		return true;
	}

	internal void InstallEvents()
	{
		Dispatch.Install(delegate(PersonaStateChange_t x)
		{
			SteamFriends.OnPersonaStateChange?.Invoke(new Friend(x.SteamID));
		});
		Dispatch.Install(delegate(GameRichPresenceJoinRequested_t x)
		{
			SteamFriends.OnGameRichPresenceJoinRequested?.Invoke(new Friend(x.SteamIDFriend), x.ConnectUTF8());
		});
		Dispatch.Install<GameConnectedFriendChatMsg_t>(OnFriendChatMessage);
		Dispatch.Install<GameConnectedClanChatMsg_t>(OnGameConnectedClanChatMessage);
		Dispatch.Install(delegate(GameOverlayActivated_t x)
		{
			SteamFriends.OnGameOverlayActivated?.Invoke(x.Active != 0);
		});
		Dispatch.Install(delegate(GameServerChangeRequested_t x)
		{
			SteamFriends.OnGameServerChangeRequested?.Invoke(x.ServerUTF8(), x.PasswordUTF8());
		});
		Dispatch.Install(delegate(GameLobbyJoinRequested_t x)
		{
			SteamFriends.OnGameLobbyJoinRequested?.Invoke(new Lobby(x.SteamIDLobby), x.SteamIDFriend);
		});
		Dispatch.Install(delegate(FriendRichPresenceUpdate_t x)
		{
			SteamFriends.OnFriendRichPresenceUpdate?.Invoke(new Friend(x.SteamIDFriend));
		});
		Dispatch.Install(delegate(OverlayBrowserProtocolNavigation_t x)
		{
			SteamFriends.OnOverlayBrowserProtocol?.Invoke(x.RgchURIUTF8());
		});
	}

	private static void OnFriendChatMessage(GameConnectedFriendChatMsg_t data)
	{
		if (SteamFriends.OnChatMessage == null)
		{
			return;
		}
		Friend arg = new Friend(data.SteamIDUser);
		Helpers.Memory m = Helpers.TakeMemory();
		try
		{
			ChatEntryType peChatEntryType = ChatEntryType.ChatMsg;
			if (Internal.GetFriendMessage(data.SteamIDUser, data.MessageID, m, 32768, ref peChatEntryType) != 0 || peChatEntryType != 0)
			{
				string arg2 = peChatEntryType.ToString();
				string arg3 = Helpers.MemoryToString(m);
				SteamFriends.OnChatMessage(arg, arg2, arg3);
			}
		}
		finally
		{
			((IDisposable)m/*cast due to .constrained prefix*/).Dispose();
		}
	}

	private static void OnGameConnectedClanChatMessage(GameConnectedClanChatMsg_t data)
	{
		if (SteamFriends.OnClanChatMessage == null)
		{
			return;
		}
		Friend arg = new Friend(data.SteamIDUser);
		Helpers.Memory m = Helpers.TakeMemory();
		try
		{
			ChatEntryType peChatEntryType = ChatEntryType.ChatMsg;
			SteamId psteamidChatter = data.SteamIDUser;
			if (Internal.GetClanChatMessage(data.SteamIDClanChat, data.MessageID, m, 32768, ref peChatEntryType, ref psteamidChatter) != 0 || peChatEntryType != 0)
			{
				string arg2 = peChatEntryType.ToString();
				string arg3 = Helpers.MemoryToString(m);
				SteamFriends.OnClanChatMessage(arg, arg2, arg3);
			}
		}
		finally
		{
			((IDisposable)m/*cast due to .constrained prefix*/).Dispose();
		}
	}

	private static IEnumerable<Friend> GetFriendsWithFlag(FriendFlags flag)
	{
		for (int i = 0; i < Internal.GetFriendCount((int)flag); i++)
		{
			yield return new Friend(Internal.GetFriendByIndex(i, (int)flag));
		}
	}

	public static IEnumerable<Friend> GetFriends()
	{
		return GetFriendsWithFlag(FriendFlags.Immediate);
	}

	public static IEnumerable<Friend> GetBlocked()
	{
		return GetFriendsWithFlag(FriendFlags.Blocked);
	}

	public static IEnumerable<Friend> GetFriendsRequested()
	{
		return GetFriendsWithFlag(FriendFlags.FriendshipRequested);
	}

	public static IEnumerable<Friend> GetFriendsClanMembers()
	{
		return GetFriendsWithFlag(FriendFlags.ClanMember);
	}

	public static IEnumerable<Friend> GetFriendsOnGameServer()
	{
		return GetFriendsWithFlag(FriendFlags.OnGameServer);
	}

	public static IEnumerable<Friend> GetFriendsRequestingFriendship()
	{
		return GetFriendsWithFlag(FriendFlags.RequestingFriendship);
	}

	public static IEnumerable<Friend> GetPlayedWith()
	{
		for (int i = 0; i < Internal.GetCoplayFriendCount(); i++)
		{
			yield return new Friend(Internal.GetCoplayFriend(i));
		}
	}

	public static IEnumerable<Friend> GetFromSource(SteamId steamid)
	{
		for (int i = 0; i < Internal.GetFriendCountFromSource(steamid); i++)
		{
			yield return new Friend(Internal.GetFriendFromSourceByIndex(steamid, i));
		}
	}

	public static IEnumerable<Clan> GetClans()
	{
		for (int i = 0; i < Internal.GetClanCount(); i++)
		{
			yield return new Clan(Internal.GetClanByIndex(i));
		}
	}

	public static void OpenOverlay(string type)
	{
		Internal.ActivateGameOverlay(type);
	}

	public static void OpenUserOverlay(SteamId id, string type)
	{
		Internal.ActivateGameOverlayToUser(type, id);
	}

	public static void OpenStoreOverlay(AppId id, OverlayToStoreFlag overlayToStoreFlag = OverlayToStoreFlag.None)
	{
		Internal.ActivateGameOverlayToStore(id.Value, overlayToStoreFlag);
	}

	public static void OpenWebOverlay(string url, bool modal = false)
	{
		Internal.ActivateGameOverlayToWebPage(url, modal ? ActivateGameOverlayToWebPageMode.Modal : ActivateGameOverlayToWebPageMode.Default);
	}

	public static void OpenGameInviteOverlay(SteamId lobby)
	{
		Internal.ActivateGameOverlayInviteDialog(lobby);
	}

	public static void SetPlayedWith(SteamId steamid)
	{
		Internal.SetPlayedWith(steamid);
	}

	public static bool RequestUserInformation(SteamId steamid, bool nameonly = true)
	{
		return Internal.RequestUserInformation(steamid, nameonly);
	}

	internal static async Task CacheUserInformationAsync(SteamId steamid, bool nameonly)
	{
		if (RequestUserInformation(steamid, nameonly))
		{
			await Task.Delay(100);
			while (RequestUserInformation(steamid, nameonly))
			{
				await Task.Delay(50);
			}
			await Task.Delay(500);
		}
	}

	public static async Task<Image?> GetSmallAvatarAsync(SteamId steamid)
	{
		await CacheUserInformationAsync(steamid, nameonly: false);
		return SteamUtils.GetImage(Internal.GetSmallFriendAvatar(steamid));
	}

	public static async Task<Image?> GetMediumAvatarAsync(SteamId steamid)
	{
		await CacheUserInformationAsync(steamid, nameonly: false);
		return SteamUtils.GetImage(Internal.GetMediumFriendAvatar(steamid));
	}

	public static async Task<Image?> GetLargeAvatarAsync(SteamId steamid)
	{
		await CacheUserInformationAsync(steamid, nameonly: false);
		int largeFriendAvatar;
		for (largeFriendAvatar = Internal.GetLargeFriendAvatar(steamid); largeFriendAvatar == -1; largeFriendAvatar = Internal.GetLargeFriendAvatar(steamid))
		{
			await Task.Delay(50);
		}
		return SteamUtils.GetImage(largeFriendAvatar);
	}

	public static string GetRichPresence(string key)
	{
		if (richPresence.TryGetValue(key, out var value))
		{
			return value;
		}
		return null;
	}

	public static bool SetRichPresence(string key, string value)
	{
		bool num = Internal.SetRichPresence(key, value);
		if (num)
		{
			richPresence[key] = value;
		}
		return num;
	}

	public static void ClearRichPresence()
	{
		richPresence.Clear();
		Internal.ClearRichPresence();
	}

	public static async Task<bool> IsFollowing(SteamId steamID)
	{
		return (await Internal.IsFollowing(steamID)).Value.IsFollowing;
	}

	public static async Task<int> GetFollowerCount(SteamId steamID)
	{
		return (await Internal.GetFollowerCount(steamID)).Value.Count;
	}

	public static async Task<SteamId[]> GetFollowingList()
	{
		int resultCount = 0;
		List<SteamId> steamIds = new List<SteamId>();
		FriendsEnumerateFollowingList_t? friendsEnumerateFollowingList_t;
		do
		{
			FriendsEnumerateFollowingList_t? friendsEnumerateFollowingList_t2 = (friendsEnumerateFollowingList_t = await Internal.EnumerateFollowingList((uint)resultCount));
			if (!friendsEnumerateFollowingList_t2.HasValue)
			{
				continue;
			}
			resultCount += friendsEnumerateFollowingList_t.Value.ResultsReturned;
			Array.ForEach(friendsEnumerateFollowingList_t.Value.GSteamID, delegate(ulong id)
			{
				if (id != 0)
				{
					steamIds.Add(id);
				}
			});
		}
		while (friendsEnumerateFollowingList_t.HasValue && resultCount < friendsEnumerateFollowingList_t.Value.TotalResultCount);
		return steamIds.ToArray();
	}

	public static bool RegisterProtocolInOverlayBrowser(string protocol)
	{
		return Internal.RegisterProtocolInOverlayBrowser(protocol);
	}

	public static async Task<bool> JoinClanChatRoom(SteamId chatId)
	{
		JoinClanChatRoomCompletionResult_t? joinClanChatRoomCompletionResult_t = await Internal.JoinClanChatRoom(chatId);
		if (!joinClanChatRoomCompletionResult_t.HasValue)
		{
			return false;
		}
		return joinClanChatRoomCompletionResult_t.Value.ChatRoomEnterResponse == RoomEnter.Success;
	}

	public static bool SendClanChatRoomMessage(SteamId chatId, string message)
	{
		return Internal.SendClanChatMessage(chatId, message);
	}
}
