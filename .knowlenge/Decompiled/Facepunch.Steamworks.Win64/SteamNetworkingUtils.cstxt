using System;
using System.Collections.Concurrent;
using System.Text;
using System.Threading.Tasks;
using Steamworks;
using Steamworks.Data;

public class SteamNetworkingUtils : SteamSharedClass<SteamNetworkingUtils>
{
	private struct DebugMessage
	{
		public NetDebugOutput Type;

		public string Msg;
	}

	private static NetDebugOutput _debugLevel;

	private static NetDebugFunc _debugFunc;

	private static ConcurrentQueue<DebugMessage> debugMessages = new ConcurrentQueue<DebugMessage>();

	internal static ISteamNetworkingUtils Internal => SteamSharedClass<SteamNetworkingUtils>.Interface as ISteamNetworkingUtils;

	public static SteamNetworkingAvailability Status { get; private set; }

	public static NetPingLocation? LocalPingLocation
	{
		get
		{
			NetPingLocation result = default(NetPingLocation);
			if (Internal.GetLocalPingLocation(ref result) < 0f)
			{
				return null;
			}
			return result;
		}
	}

	public static long LocalTimestamp => Internal.GetLocalTimestamp();

	public static float FakeSendPacketLoss
	{
		get
		{
			return GetConfigFloat(NetConfig.FakePacketLoss_Send);
		}
		set
		{
			SetConfigFloat(NetConfig.FakePacketLoss_Send, value);
		}
	}

	public static float FakeRecvPacketLoss
	{
		get
		{
			return GetConfigFloat(NetConfig.FakePacketLoss_Recv);
		}
		set
		{
			SetConfigFloat(NetConfig.FakePacketLoss_Recv, value);
		}
	}

	public static float FakeSendPacketLag
	{
		get
		{
			return GetConfigFloat(NetConfig.FakePacketLag_Send);
		}
		set
		{
			SetConfigFloat(NetConfig.FakePacketLag_Send, value);
		}
	}

	public static float FakeRecvPacketLag
	{
		get
		{
			return GetConfigFloat(NetConfig.FakePacketLag_Recv);
		}
		set
		{
			SetConfigFloat(NetConfig.FakePacketLag_Recv, value);
		}
	}

	public static int ConnectionTimeout
	{
		get
		{
			return GetConfigInt(NetConfig.TimeoutInitial);
		}
		set
		{
			SetConfigInt(NetConfig.TimeoutInitial, value);
		}
	}

	public static int Timeout
	{
		get
		{
			return GetConfigInt(NetConfig.TimeoutConnected);
		}
		set
		{
			SetConfigInt(NetConfig.TimeoutConnected, value);
		}
	}

	public static int SendBufferSize
	{
		get
		{
			return GetConfigInt(NetConfig.SendBufferSize);
		}
		set
		{
			SetConfigInt(NetConfig.SendBufferSize, value);
		}
	}

	public static int SendRateMin
	{
		get
		{
			return GetConfigInt(NetConfig.SendRateMin);
		}
		set
		{
			SetConfigInt(NetConfig.SendRateMin, value);
		}
	}

	public static int SendRateMax
	{
		get
		{
			return GetConfigInt(NetConfig.SendRateMax);
		}
		set
		{
			SetConfigInt(NetConfig.SendRateMax, value);
		}
	}

	public static int NagleTime
	{
		get
		{
			return GetConfigInt(NetConfig.NagleTime);
		}
		set
		{
			SetConfigInt(NetConfig.NagleTime, value);
		}
	}

	public static int AllowWithoutAuth
	{
		get
		{
			return GetConfigInt(NetConfig.IP_AllowWithoutAuth);
		}
		set
		{
			SetConfigInt(NetConfig.IP_AllowWithoutAuth, value);
		}
	}

	public static int Unencrypted
	{
		get
		{
			return GetConfigInt(NetConfig.Unencrypted);
		}
		set
		{
			SetConfigInt(NetConfig.Unencrypted, value);
		}
	}

	public static int DebugLevelAckRTT
	{
		get
		{
			return GetConfigInt(NetConfig.LogLevel_AckRTT);
		}
		set
		{
			SetConfigInt(NetConfig.LogLevel_AckRTT, value);
		}
	}

	public static int DebugLevelPacketDecode
	{
		get
		{
			return GetConfigInt(NetConfig.LogLevel_PacketDecode);
		}
		set
		{
			SetConfigInt(NetConfig.LogLevel_PacketDecode, value);
		}
	}

	public static int DebugLevelMessage
	{
		get
		{
			return GetConfigInt(NetConfig.LogLevel_Message);
		}
		set
		{
			SetConfigInt(NetConfig.LogLevel_Message, value);
		}
	}

	public static int DebugLevelPacketGaps
	{
		get
		{
			return GetConfigInt(NetConfig.LogLevel_PacketGaps);
		}
		set
		{
			SetConfigInt(NetConfig.LogLevel_PacketGaps, value);
		}
	}

	public static int DebugLevelP2PRendezvous
	{
		get
		{
			return GetConfigInt(NetConfig.LogLevel_P2PRendezvous);
		}
		set
		{
			SetConfigInt(NetConfig.LogLevel_P2PRendezvous, value);
		}
	}

	public static int DebugLevelSDRRelayPings
	{
		get
		{
			return GetConfigInt(NetConfig.LogLevel_SDRRelayPings);
		}
		set
		{
			SetConfigInt(NetConfig.LogLevel_SDRRelayPings, value);
		}
	}

	public static NetDebugOutput DebugLevel
	{
		get
		{
			return _debugLevel;
		}
		set
		{
			_debugLevel = value;
			_debugFunc = OnDebugMessage;
			Internal.SetDebugOutputFunction(value, _debugFunc);
		}
	}

	public static event Action<NetDebugOutput, string> OnDebugOutput;

	internal override bool InitializeInterface(bool server)
	{
		SetInterface(server, new ISteamNetworkingUtils(server));
		if (SteamSharedClass<SteamNetworkingUtils>.Interface.Self == IntPtr.Zero)
		{
			return false;
		}
		InstallCallbacks(server);
		return true;
	}

	private static void InstallCallbacks(bool server)
	{
		Dispatch.Install(delegate(SteamRelayNetworkStatus_t x)
		{
			Status = x.Avail;
		}, server);
	}

	public static void InitRelayNetworkAccess()
	{
		Internal.InitRelayNetworkAccess();
	}

	public static int EstimatePingTo(NetPingLocation target)
	{
		return Internal.EstimatePingTimeFromLocalHost(ref target);
	}

	public static async Task WaitForPingDataAsync(float maxAgeInSeconds = 300f)
	{
		if (!Internal.CheckPingDataUpToDate(maxAgeInSeconds))
		{
			SteamRelayNetworkStatus_t status = default(SteamRelayNetworkStatus_t);
			while (Internal.GetRelayNetworkStatus(ref status) != SteamNetworkingAvailability.Current)
			{
				await Task.Delay(10);
			}
		}
	}

	[MonoPInvokeCallback]
	private static void OnDebugMessage(NetDebugOutput nType, IntPtr str)
	{
		debugMessages.Enqueue(new DebugMessage
		{
			Type = nType,
			Msg = Helpers.MemoryToString(str)
		});
	}

	internal static void LogDebugMessage(NetDebugOutput type, string message)
	{
		debugMessages.Enqueue(new DebugMessage
		{
			Type = type,
			Msg = message
		});
	}

	internal static void OutputDebugMessages()
	{
		if (!debugMessages.IsEmpty)
		{
			DebugMessage result;
			while (debugMessages.TryDequeue(out result))
			{
				SteamNetworkingUtils.OnDebugOutput?.Invoke(result.Type, result.Msg);
			}
		}
	}

	internal unsafe static NetMsg* AllocateMessage()
	{
		return Internal.AllocateMessage(0);
	}

	internal unsafe static bool SetConfigInt(NetConfig type, int value)
	{
		int* ptr = &value;
		return Internal.SetConfigValue(type, NetConfigScope.Global, IntPtr.Zero, NetConfigType.Int32, (IntPtr)ptr);
	}

	internal unsafe static int GetConfigInt(NetConfig type)
	{
		int result = 0;
		NetConfigType pOutDataType = NetConfigType.Int32;
		int* ptr = &result;
		UIntPtr cbResult = new UIntPtr(4u);
		if (Internal.GetConfigValue(type, NetConfigScope.Global, IntPtr.Zero, ref pOutDataType, (IntPtr)ptr, ref cbResult) != NetConfigResult.OK)
		{
			return 0;
		}
		return result;
	}

	internal unsafe static bool SetConfigFloat(NetConfig type, float value)
	{
		float* ptr = &value;
		return Internal.SetConfigValue(type, NetConfigScope.Global, IntPtr.Zero, NetConfigType.Float, (IntPtr)ptr);
	}

	internal unsafe static float GetConfigFloat(NetConfig type)
	{
		float result = 0f;
		NetConfigType pOutDataType = NetConfigType.Float;
		float* ptr = &result;
		UIntPtr cbResult = new UIntPtr(4u);
		if (Internal.GetConfigValue(type, NetConfigScope.Global, IntPtr.Zero, ref pOutDataType, (IntPtr)ptr, ref cbResult) != NetConfigResult.OK)
		{
			return 0f;
		}
		return result;
	}

	internal unsafe static bool SetConfigString(NetConfig type, string value)
	{
		fixed (byte* bytes = Encoding.UTF8.GetBytes(value))
		{
			return Internal.SetConfigValue(type, NetConfigScope.Global, IntPtr.Zero, NetConfigType.String, (IntPtr)bytes);
		}
	}
}
