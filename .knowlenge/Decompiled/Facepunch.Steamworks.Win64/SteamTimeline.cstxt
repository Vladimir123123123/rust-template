using System;
using System.Threading.Tasks;
using Steamworks;
using Steamworks.Data;

public class SteamTimeline : SteamClientClass<SteamTimeline>
{
	internal static ISteamTimeline Internal => SteamClientClass<SteamTimeline>.Interface as ISteamTimeline;

	internal override bool InitializeInterface(bool server)
	{
		SetInterface(server, new ISteamTimeline(server));
		if (SteamClientClass<SteamTimeline>.Interface.Self == IntPtr.Zero)
		{
			return false;
		}
		InstallEvents();
		return true;
	}

	internal static void InstallEvents()
	{
	}

	public static void SetTimelineTooltip(string description, float timeOffsetSeconds)
	{
		Internal.SetTimelineTooltip(description, timeOffsetSeconds);
	}

	public static void ClearTimelineTooltip(float timeOffsetSeconds)
	{
		Internal.ClearTimelineTooltip(timeOffsetSeconds);
	}

	public static TimelineEventHandle AddInstantaneousTimelineEvent(string title, string description, string icon, uint priority, float startOffsetSeconds, TimelineEventClipPriority possibleClip)
	{
		return Internal.AddInstantaneousTimelineEvent(title, description, icon, priority, startOffsetSeconds, possibleClip);
	}

	public static TimelineEventHandle AddRangeTimelineEvent(string title, string description, string icon, uint priority, float startOffsetSeconds, float durationSeconds, TimelineEventClipPriority possibleClip)
	{
		return Internal.AddRangeTimelineEvent(title, description, icon, priority, startOffsetSeconds, durationSeconds, possibleClip);
	}

	public static TimelineEventHandle StartRangeTimelineEvent(string title, string description, string icon, uint priority, float startOffsetSeconds, TimelineEventClipPriority possibleClip)
	{
		return Internal.StartRangeTimelineEvent(title, description, icon, priority, startOffsetSeconds, possibleClip);
	}

	public static void UpdateRangeTimelineEvent(TimelineEventHandle handle, string title, string description, string icon, uint priority, TimelineEventClipPriority possibleClip)
	{
		Internal.UpdateRangeTimelineEvent(handle, title, description, icon, priority, possibleClip);
	}

	public static void EndRangeTimelineEvent(TimelineEventHandle handle, float endOffsetSeconds)
	{
		Internal.EndRangeTimelineEvent(handle, endOffsetSeconds);
	}

	public static void RemoveTimelineEvent(TimelineEventHandle handle)
	{
		Internal.RemoveTimelineEvent(handle);
	}

	public static async Task<bool> DoesEventRecordingExist(TimelineEventHandle handle)
	{
		return (await Internal.DoesEventRecordingExist(handle))?.RecordingExists ?? false;
	}

	public static void StartGamePhase()
	{
		Internal.StartGamePhase();
	}

	public static void EndGamePhase()
	{
		Internal.EndGamePhase();
	}

	public static void SetGamePhaseId(string phaseId)
	{
		Internal.SetGamePhaseID(phaseId);
	}

	public static async Task<GamePhaseRecordingInfo?> DoesGamePhaseRecordingExist(string phaseId)
	{
		SteamTimelineGamePhaseRecordingExists_t? steamTimelineGamePhaseRecordingExists_t = await Internal.DoesGamePhaseRecordingExist(phaseId);
		if (!steamTimelineGamePhaseRecordingExists_t.HasValue)
		{
			return null;
		}
		SteamTimelineGamePhaseRecordingExists_t value = steamTimelineGamePhaseRecordingExists_t.Value;
		GamePhaseRecordingInfo value2 = default(GamePhaseRecordingInfo);
		value2.PhaseId = value.PhaseIDUTF8();
		value2.RecordingMs = value.RecordingMS;
		value2.LongestClipMs = value.LongestClipMS;
		value2.ClipCount = value.ClipCount;
		value2.ScreenshotCount = value.ScreenshotCount;
		return value2;
	}

	public static void AddGamePhaseTag(string tagName, string icon, string tagGroup, uint priority)
	{
		Internal.AddGamePhaseTag(tagName, icon, tagGroup, priority);
	}

	public static void SetGamePhaseAttribute(string attributeGroup, string attributeValue, uint priority)
	{
		Internal.SetGamePhaseAttribute(attributeGroup, attributeValue, priority);
	}

	public static void SetTimelineGameMode(TimelineGameMode gameMode)
	{
		Internal.SetTimelineGameMode(gameMode);
	}

	public static void OpenOverlayToGamePhase(string phaseId)
	{
		Internal.OpenOverlayToGamePhase(phaseId);
	}

	public static void OpenOverlayToTimelineEvent(TimelineEventHandle handle)
	{
		Internal.OpenOverlayToTimelineEvent(handle);
	}
}
