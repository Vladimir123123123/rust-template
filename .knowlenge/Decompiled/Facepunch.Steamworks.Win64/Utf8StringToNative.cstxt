using System;
using System.Runtime.InteropServices;
using System.Text;
using Steamworks;

internal class Utf8StringToNative : ICustomMarshaler
{
	internal static readonly Encoding Utf8NoBom = new UTF8Encoding(encoderShouldEmitUTF8Identifier: false, throwOnInvalidBytes: false);

	public unsafe IntPtr MarshalManagedToNative(object managedObj)
	{
		if (managedObj == null)
		{
			return IntPtr.Zero;
		}
		if (managedObj is string text)
		{
			fixed (char* chars = text)
			{
				int byteCount = Utf8NoBom.GetByteCount(text);
				IntPtr intPtr = Marshal.AllocHGlobal(byteCount + 1);
				int bytes = Utf8NoBom.GetBytes(chars, text.Length, (byte*)(void*)intPtr, byteCount + 1);
				((byte*)(void*)intPtr)[bytes] = 0;
				return intPtr;
			}
		}
		return IntPtr.Zero;
	}

	public object MarshalNativeToManaged(IntPtr pNativeData)
	{
		throw new NotImplementedException();
	}

	public void CleanUpNativeData(IntPtr pNativeData)
	{
		Marshal.FreeHGlobal(pNativeData);
	}

	public void CleanUpManagedData(object managedObj)
	{
		throw new NotImplementedException();
	}

	public int GetNativeDataSize()
	{
		return -1;
	}

	[Preserve]
	public static ICustomMarshaler GetInstance(string cookie)
	{
		return new Utf8StringToNative();
	}
}
