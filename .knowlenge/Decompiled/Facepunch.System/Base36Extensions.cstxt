using System;
using System.Collections.Generic;
using System.Linq;

public static class Base36Extensions
{
	private const string CharList = "0123456789abcdefghijklmnopqrstuvwxyz";

	private static char[] CharArray = "0123456789abcdefghijklmnopqrstuvwxyz".ToCharArray();

	public static string ToBase36<T>(this T i) where T : struct, IComparable, IComparable<T>, IConvertible, IEquatable<T>, IFormattable
	{
		long num = (long)Convert.ToDecimal(i);
		if (num < 0)
		{
			throw new ArgumentOutOfRangeException("input", num, "input cannot be negative");
		}
		Stack<char> stack = new Stack<char>();
		while (num != 0L)
		{
			stack.Push(CharArray[num % 36]);
			num /= 36;
		}
		return new string(stack.ToArray());
	}

	public static long FromBase36(this string input)
	{
		IEnumerable<char> enumerable = input.ToLower().Reverse();
		long num = 0L;
		int num2 = 0;
		foreach (char item in enumerable)
		{
			num += "0123456789abcdefghijklmnopqrstuvwxyz".IndexOf(item) * (long)Math.Pow(36.0, num2);
			num2++;
		}
		return num;
	}
}
