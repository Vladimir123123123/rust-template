using System;
using System.IO;

public class ByteArrayStream : Stream
{
	private byte[] _data;

	private int _base;

	private int _length;

	private int _position;

	public override bool CanRead => true;

	public override bool CanSeek => true;

	public override bool CanWrite => false;

	public override long Length => _length;

	public override long Position
	{
		get
		{
			return _position - _base;
		}
		set
		{
			Seek(value, SeekOrigin.Begin);
		}
	}

	public ByteArrayStream()
	{
		_data = Array.Empty<byte>();
		_base = 0;
		_length = 0;
	}

	public void SetData(byte[] data, int offset, int length)
	{
		if (data == null)
		{
			throw new ArgumentNullException("data");
		}
		if (offset < 0 || offset >= data.Length)
		{
			throw new ArgumentOutOfRangeException("offset");
		}
		if (length < 0 || offset + length > data.Length)
		{
			throw new ArgumentOutOfRangeException("length");
		}
		_data = data;
		_base = offset;
		_length = length;
		_position = _base;
	}

	public override int Read(byte[] buffer, int offset, int count)
	{
		if (buffer == null)
		{
			throw new ArgumentNullException("buffer");
		}
		if (offset < 0 || offset >= buffer.Length)
		{
			throw new ArgumentOutOfRangeException("offset");
		}
		if (count < 0 || count > buffer.Length - offset)
		{
			throw new ArgumentOutOfRangeException("count");
		}
		int num = Math.Min(_position + count, _base + _length) - _position;
		if (num <= 0)
		{
			return 0;
		}
		Buffer.BlockCopy(_data, _position, buffer, offset, num);
		_position += num;
		return num;
	}

	public override int ReadByte()
	{
		if (_position < _base || _position >= _base + _length)
		{
			return -1;
		}
		return _data[_position++];
	}

	public override void Write(byte[] buffer, int offset, int count)
	{
		if (buffer == null)
		{
			throw new ArgumentNullException("buffer");
		}
		if (offset < 0 || offset >= buffer.Length)
		{
			throw new ArgumentOutOfRangeException("offset");
		}
		if (count < 0 || count > buffer.Length - offset)
		{
			throw new ArgumentOutOfRangeException("count");
		}
		if (_position + count >= _base + _length)
		{
			throw new IOException("Tried to write beyond the buffer bounds");
		}
		Buffer.BlockCopy(buffer, offset, _data, _position, count);
		_position += count;
	}

	public override void WriteByte(byte value)
	{
		if (_position < _base || _position >= _base + _length)
		{
			throw new IOException("Tried to write beyond the buffer bounds");
		}
		_data[_position++] = value;
	}

	public override long Seek(long offset, SeekOrigin origin)
	{
		int num = origin switch
		{
			SeekOrigin.Current => _position + (int)offset, 
			SeekOrigin.End => _base + _length + (int)offset, 
			_ => _base + (int)offset, 
		};
		if (num < _base || num > _base + _length)
		{
			throw new ArgumentOutOfRangeException("offset");
		}
		_position = num;
		return Position;
	}

	public override void Flush()
	{
	}

	public override void SetLength(long value)
	{
		throw new NotSupportedException();
	}
}
