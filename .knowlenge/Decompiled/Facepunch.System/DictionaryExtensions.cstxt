using System.Collections.Generic;
using Facepunch;

public static class DictionaryExtensions
{
	public static TValue GetOrCreate<TKey, TValue>(this Dictionary<TKey, TValue> dict, TKey key) where TValue : new()
	{
		if (dict.TryGetValue(key, out var value))
		{
			return value;
		}
		value = new TValue();
		dict.Add(key, value);
		return value;
	}

	public static TValue GetOrCreatePooled<TKey, TValue>(this Dictionary<TKey, TValue> dict, TKey key) where TValue : class, new()
	{
		if (dict.TryGetValue(key, out var value))
		{
			return value;
		}
		value = Pool.Get<TValue>();
		dict.Add(key, value);
		return value;
	}

	public static Dictionary<TKey, TValue> Clone<TKey, TValue>(this Dictionary<TKey, TValue> dict)
	{
		Dictionary<TKey, TValue> dictionary = new Dictionary<TKey, TValue>(dict.Count, dict.Comparer);
		foreach (KeyValuePair<TKey, TValue> item in dict)
		{
			dictionary.Add(item.Key, item.Value);
		}
		return dictionary;
	}
}
