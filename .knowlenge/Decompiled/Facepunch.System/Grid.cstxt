using System;
using System.Collections.Generic;
using Spatial;

public class Grid<T>
{
	internal class Node
	{
		public HashSet<T> Contents = new HashSet<T>();

		public void Add(T obj)
		{
			Contents.Add(obj);
		}

		public bool Remove(T obj)
		{
			return Contents.Remove(obj);
		}
	}

	private float CenterX;

	private float CenterY;

	private Node[,] Nodes;

	private Dictionary<T, Node> Lookup;

	public int CellCount { get; private set; }

	public int CellSize { get; private set; }

	public Grid(int CellSize, float WorldSize)
	{
		this.CellSize = CellSize;
		CellCount = (int)(WorldSize / (float)CellSize + 0.5f);
		CenterX = WorldSize * 0.5f;
		CenterY = WorldSize * 0.5f;
		Nodes = new Node[CellCount, CellCount];
		Lookup = new Dictionary<T, Node>(512);
	}

	public int Query(float x, float y, float radius, T[] result, Func<T, bool> filter = null)
	{
		int num = Clamp((x + CenterX - radius) / (float)CellSize);
		int num2 = Clamp((x + CenterX + radius) / (float)CellSize);
		int num3 = Clamp((y + CenterY - radius) / (float)CellSize);
		int num4 = Clamp((y + CenterY + radius) / (float)CellSize);
		int num5 = 0;
		for (int i = num; i <= num2; i++)
		{
			for (int j = num3; j <= num4; j++)
			{
				if (Nodes[i, j] == null)
				{
					continue;
				}
				foreach (T content in Nodes[i, j].Contents)
				{
					if (filter == null || filter(content))
					{
						result[num5] = content;
						num5++;
						if (num5 >= result.Length)
						{
							return num5;
						}
					}
				}
			}
		}
		return num5;
	}

	public void Query<U>(float x, float y, float radius, List<U> result) where U : class
	{
		if (result == null)
		{
			return;
		}
		int num = Clamp((x + CenterX - radius) / (float)CellSize);
		int num2 = Clamp((x + CenterX + radius) / (float)CellSize);
		int num3 = Clamp((y + CenterY - radius) / (float)CellSize);
		int num4 = Clamp((y + CenterY + radius) / (float)CellSize);
		for (int i = num; i <= num2; i++)
		{
			for (int j = num3; j <= num4; j++)
			{
				if (Nodes[i, j] == null)
				{
					continue;
				}
				foreach (T content in Nodes[i, j].Contents)
				{
					if (content is U item)
					{
						result.Add(item);
					}
				}
			}
		}
	}

	private int Clamp(float input)
	{
		int num = (int)input;
		if (num < 0)
		{
			return 0;
		}
		if (num > CellCount - 1)
		{
			return CellCount - 1;
		}
		return num;
	}

	private Node GetNode(float x, float y, bool create = true)
	{
		x += CenterX;
		y += CenterY;
		int num = Clamp(x / (float)CellSize);
		int num2 = Clamp(y / (float)CellSize);
		Node node = Nodes[num, num2];
		if (node == null && create)
		{
			node = new Node();
			Nodes[num, num2] = node;
		}
		return node;
	}

	public void Add(T obj, float x, float y)
	{
		Node node = GetNode(x, y);
		node.Add(obj);
		Lookup.Add(obj, node);
	}

	public void Move(T obj, float x, float y)
	{
		Node node = GetNode(x, y);
		Node value = null;
		if (Lookup.TryGetValue(obj, out value) && node != value)
		{
			value.Remove(obj);
			node.Add(obj);
			Lookup[obj] = node;
		}
	}

	public bool Remove(T obj)
	{
		Node value = null;
		if (Lookup.TryGetValue(obj, out value))
		{
			value.Remove(obj);
			Lookup.Remove(obj);
			return true;
		}
		return false;
	}
}
