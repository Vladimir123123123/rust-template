using System;
using System.Collections.Generic;
using Facepunch;
using Facepunch.Extend;

public static class List
{
	private struct PtrHash<T> : IComparable<PtrHash<T>> where T : class
	{
		private T obj;

		private int hash;

		public T Object => obj;

		public PtrHash(T obj)
		{
			this.obj = obj;
			hash = obj.GetHashCode();
		}

		int IComparable<PtrHash<T>>.CompareTo(PtrHash<T> other)
		{
			return CompareTo(other);
		}

		public int CompareTo(PtrHash<T> other)
		{
			return hash.CompareTo(other.hash);
		}
	}

	public static void Compare<T, TListA, TListB>(this TListA a, TListB b, List<T> added, List<T> removed, List<T> remained) where T : class where TListA : IList<T> where TListB : IList<T>
	{
		if (a == null && b == null)
		{
			return;
		}
		if (a == null)
		{
			added?.AddRange(b);
		}
		else if (b == null)
		{
			removed?.AddRange(a);
		}
		else
		{
			if (a.Count == 0 && b.Count == 0)
			{
				return;
			}
			List<PtrHash<T>> obj = Pool.Get<List<PtrHash<T>>>();
			List<PtrHash<T>> obj2 = Pool.Get<List<PtrHash<T>>>();
			foreach (T item in a)
			{
				obj.Add(new PtrHash<T>(item));
			}
			foreach (T item2 in b)
			{
				obj2.Add(new PtrHash<T>(item2));
			}
			obj.Sort();
			obj2.Sort();
			int aIndex2 = 0;
			int bIndex2 = 0;
			while (aIndex2 < obj.Count && bIndex2 < obj2.Count)
			{
				PtrHash<T> ptrHash = obj[aIndex2];
				PtrHash<T> other = obj2[bIndex2];
				switch (ptrHash.CompareTo(other))
				{
				case 1:
					added?.Add(other.Object);
					bIndex2++;
					break;
				case -1:
					removed?.Add(ptrHash.Object);
					aIndex2++;
					break;
				case 0:
					SameHashCompare(obj, obj2, ref aIndex2, ref bIndex2, added, removed, remained);
					break;
				}
			}
			if (removed != null)
			{
				while (aIndex2 < obj.Count)
				{
					removed.Add(obj[aIndex2++].Object);
				}
			}
			if (added != null)
			{
				while (bIndex2 < obj2.Count)
				{
					added.Add(obj2[bIndex2++].Object);
				}
			}
			Pool.FreeUnmanaged(ref obj);
			Pool.FreeUnmanaged(ref obj2);
		}
		static void SameHashCompare(List<PtrHash<T>> sortedA, List<PtrHash<T>> sortedB, ref int aIndex, ref int bIndex, List<T> added, List<T> removed, List<T> remained)
		{
			if (sortedA[aIndex].Object == sortedB[bIndex].Object)
			{
				remained?.Add(sortedA[aIndex].Object);
				aIndex++;
				bIndex++;
			}
			else
			{
				int i = aIndex + 1;
				int j = bIndex + 1;
				PtrHash<T> ptrHash2;
				for (ptrHash2 = sortedA[aIndex]; i < sortedA.Count && ptrHash2.CompareTo(sortedA[i]) == 0; i++)
				{
				}
				for (; j < sortedB.Count && ptrHash2.CompareTo(sortedB[j]) == 0; j++)
				{
				}
				int num = i - aIndex;
				int num2 = j - bIndex;
				for (int k = 0; k < num; k++)
				{
					bool flag = false;
					PtrHash<T> ptrHash3 = sortedA[aIndex + k];
					for (int l = 0; l < num2; l++)
					{
						PtrHash<T> ptrHash4 = sortedB[bIndex + l];
						if (ptrHash3.Object == ptrHash4.Object)
						{
							flag = true;
							break;
						}
					}
					if (flag)
					{
						remained?.Add(ptrHash3.Object);
					}
					else
					{
						removed?.Add(ptrHash3.Object);
					}
				}
				for (int m = 0; m < num2; m++)
				{
					bool flag2 = false;
					PtrHash<T> ptrHash5 = sortedB[bIndex + m];
					for (int n = 0; n < num; n++)
					{
						if (sortedA[aIndex + n].Object == ptrHash5.Object)
						{
							flag2 = true;
							break;
						}
					}
					if (!flag2)
					{
						added?.Add(ptrHash5.Object);
					}
				}
				aIndex = i;
				bIndex = j;
			}
		}
	}

	public static void Compare<TListA, TListB, TItemA, TItemB, TKey>(this TListA a, TListB b, HashSet<TKey> added, HashSet<TKey> removed, HashSet<TKey> remained, Func<TItemA, TKey> selectorA, Func<TItemB, TKey> selectorB) where TListA : IEnumerable<TItemA> where TListB : IEnumerable<TItemB> where TKey : IEquatable<TKey>
	{
		if (a == null)
		{
			throw new ArgumentNullException("a");
		}
		if (b == null)
		{
			throw new ArgumentNullException("b");
		}
		if (added == null)
		{
			throw new ArgumentNullException("added");
		}
		if (removed == null)
		{
			throw new ArgumentNullException("removed");
		}
		if (remained == null)
		{
			throw new ArgumentNullException("remained");
		}
		added.Clear();
		foreach (TItemB item in b)
		{
			added.Add(selectorB(item));
		}
		removed.Clear();
		foreach (TItemA item2 in a)
		{
			removed.Add(selectorA(item2));
		}
		remained.Clear();
		foreach (TKey item3 in removed)
		{
			if (added.Contains(item3))
			{
				remained.Add(item3);
			}
		}
		added.ExceptWith(remained);
		removed.ExceptWith(remained);
	}

	public static TItem FindWith<TItem, TKey>(this IReadOnlyCollection<TItem> items, Func<TItem, TKey> selector, TKey search, IEqualityComparer<TKey> comparer = null)
	{
		comparer = comparer ?? EqualityComparer<TKey>.Default;
		foreach (TItem item in items)
		{
			if (comparer.Equals(selector(item), search))
			{
				return item;
			}
		}
		return default(TItem);
	}

	public static TItem? TryFindWith<TItem, TKey>(this IReadOnlyCollection<TItem> items, Func<TItem, TKey> selector, TKey search, IEqualityComparer<TKey> comparer = null) where TItem : struct
	{
		comparer = comparer ?? EqualityComparer<TKey>.Default;
		foreach (TItem item in items)
		{
			if (comparer.Equals(selector(item), search))
			{
				return item;
			}
		}
		return null;
	}

	public static int FindIndexWith<TItem, TKey>(this IReadOnlyList<TItem> items, Func<TItem, TKey> selector, TKey search, IEqualityComparer<TKey> comparer = null) where TKey : IEquatable<TKey>
	{
		comparer = comparer ?? EqualityComparer<TKey>.Default;
		for (int i = 0; i < items.Count; i++)
		{
			TItem arg = items[i];
			if (comparer.Equals(search, selector(arg)))
			{
				return i;
			}
		}
		return -1;
	}

	public static int FindIndex<TItem>(this IReadOnlyList<TItem> items, TItem search, IEqualityComparer<TItem> comparer = null)
	{
		comparer = comparer ?? EqualityComparer<TItem>.Default;
		for (int i = 0; i < items.Count; i++)
		{
			TItem y = items[i];
			if (comparer.Equals(search, y))
			{
				return i;
			}
		}
		return -1;
	}

	public static List<T> ShallowClonePooled<T>(this List<T> items)
	{
		if (items == null)
		{
			return null;
		}
		List<T> list = Pool.Get<List<T>>();
		foreach (T item in items)
		{
			list.Add(item);
		}
		return list;
	}

	public static bool Resize<T>(this List<T> list, int newCount)
	{
		if (list == null)
		{
			throw new ArgumentNullException("list");
		}
		if (newCount < 0)
		{
			throw new ArgumentOutOfRangeException("newCount");
		}
		if (list.Count == newCount)
		{
			return false;
		}
		if (list.Count > newCount)
		{
			while (list.Count > newCount)
			{
				list.RemoveAt(list.Count - 1);
			}
		}
		else
		{
			while (list.Count < newCount)
			{
				list.Add(default(T));
			}
		}
		return true;
	}
}
