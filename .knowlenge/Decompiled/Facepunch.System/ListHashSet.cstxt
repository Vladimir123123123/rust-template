using System;
using System.Collections;
using System.Collections.Generic;

public class ListHashSet<T> : IEnumerable<T>, IEnumerable, IList<T>, ICollection<T>
{
	public struct Enumerator : IEnumerator<T>, IEnumerator, IDisposable
	{
		private readonly BufferList<T> list;

		private int index;

		public T Current => list[index];

		object IEnumerator.Current => Current;

		public Enumerator(ListHashSet<T> set)
		{
			list = set.vals;
			index = -1;
		}

		public bool MoveNext()
		{
			index++;
			return index < list.Count;
		}

		public void Reset()
		{
			index = -1;
		}

		public void Dispose()
		{
		}
	}

	private Dictionary<T, int> val2idx;

	private Dictionary<int, T> idx2val;

	private BufferList<T> vals;

	public BufferList<T> Values => vals;

	public int Count => vals.Count;

	public bool IsReadOnly => false;

	public T this[int index]
	{
		get
		{
			return vals[index];
		}
		set
		{
			vals[index] = value;
		}
	}

	public ListHashSet(int capacity = 8)
	{
		val2idx = new Dictionary<T, int>(capacity);
		idx2val = new Dictionary<int, T>(capacity);
		vals = new BufferList<T>(capacity);
	}

	public void Add(T val)
	{
		int count = vals.Count;
		val2idx.Add(val, count);
		idx2val.Add(count, val);
		vals.Add(val);
	}

	public bool TryAdd(T val)
	{
		if (Contains(val))
		{
			return false;
		}
		Add(val);
		return true;
	}

	public void AddRange(List<T> list)
	{
		for (int i = 0; i < list.Count; i++)
		{
			Add(list[i]);
		}
	}

	public bool Contains(T val)
	{
		return val2idx.ContainsKey(val);
	}

	public bool Remove(T val)
	{
		if (!val2idx.TryGetValue(val, out var value))
		{
			return false;
		}
		Remove(value, val);
		return true;
	}

	public void RemoveAt(int idx)
	{
		if (idx2val.TryGetValue(idx, out var value))
		{
			Remove(idx, value);
		}
	}

	public int IndexOf(T item)
	{
		if (!val2idx.TryGetValue(item, out var value))
		{
			return -1;
		}
		return value;
	}

	public void Insert(int index, T item)
	{
		T key = vals[index];
		val2idx.Remove(key);
		val2idx.Add(item, index);
		vals[index] = item;
		idx2val[index] = item;
	}

	public void Clear()
	{
		if (Count != 0)
		{
			val2idx.Clear();
			idx2val.Clear();
			vals.Clear();
		}
	}

	private void Remove(int idx_remove, T val_remove)
	{
		int key = vals.Count - 1;
		T val = idx2val[key];
		vals.RemoveUnordered(idx_remove);
		val2idx[val] = idx_remove;
		idx2val[idx_remove] = val;
		val2idx.Remove(val_remove);
		idx2val.Remove(key);
	}

	public void CopyTo(T[] array, int arrayIndex)
	{
		for (int i = 0; i < vals.Count; i++)
		{
			array[arrayIndex + i] = vals[i];
		}
	}

	public Enumerator GetEnumerator()
	{
		return new Enumerator(this);
	}

	IEnumerator<T> IEnumerable<T>.GetEnumerator()
	{
		return GetEnumerator();
	}

	IEnumerator IEnumerable.GetEnumerator()
	{
		return GetEnumerator();
	}
}
