using System;
using System.IO;
using Unity.Collections;
using UnityEngine;

public class NativeMemoryStream : Stream
{
	private NativeArray<byte> _buffer;

	private int _capacity;

	private int _length;

	private int _position;

	private bool _disposeArray;

	private Allocator _allocator;

	public const int MaxSupportedCapacity = 2000000000;

	public NativeArray<byte> Buffer => _buffer;

	public override bool CanRead => true;

	public override bool CanSeek => true;

	public override bool CanWrite => true;

	public override long Length => _length;

	public override long Position
	{
		get
		{
			return _position;
		}
		set
		{
			_position = (int)value;
		}
	}

	public NativeMemoryStream(int capacity, Allocator allocator = Allocator.Persistent, bool disposeArray = true)
	{
		_allocator = allocator;
		_buffer = new NativeArray<byte>(capacity, allocator);
		_capacity = capacity;
		_disposeArray = disposeArray;
	}

	public override void Flush()
	{
	}

	public override int Read(byte[] buffer, int offset, int count)
	{
		if (buffer.Length - offset < count)
		{
			throw new ArgumentException("Buffer is too small");
		}
		int num = _length - _position;
		if (num > count)
		{
			num = count;
		}
		if (num <= 0)
		{
			return 0;
		}
		NativeArray<byte>.Copy(_buffer, _position, buffer, offset, count);
		_position += count;
		return count;
	}

	public override long Seek(long offset, SeekOrigin origin)
	{
		switch (origin)
		{
		case SeekOrigin.Current:
			_position += (int)offset;
			break;
		case SeekOrigin.Begin:
			_position = (int)offset;
			break;
		case SeekOrigin.End:
			_position = _length + (int)offset;
			break;
		}
		_position = Mathf.Clamp(_position, 0, _length);
		return _position;
	}

	public override void SetLength(long value)
	{
		_length = (int)value;
	}

	public override void Write(byte[] buffer, int offset, int count)
	{
		EnsureCapacity(_position + count);
		NativeArray<byte>.Copy(buffer, offset, _buffer, _position, count);
		_position += count;
		if (_length < _position)
		{
			_length = _position;
		}
	}

	private void EnsureCapacity(int capacity)
	{
		if (capacity > _capacity)
		{
			if (capacity >= 2000000000)
			{
				throw new InvalidOperationException("Capacity is too large");
			}
			int num = (int)Math.Min(2000000000L, (long)capacity * 2L);
			NativeArray<byte> nativeArray = new NativeArray<byte>(num, _allocator);
			NativeArray<byte>.Copy(_buffer, nativeArray, _length);
			_buffer.Dispose();
			_buffer = nativeArray;
			_capacity = num;
		}
	}

	protected override void Dispose(bool disposing)
	{
		base.Dispose(disposing);
		if (_disposeArray && _buffer.IsCreated)
		{
			_buffer.Dispose();
			_buffer = default(NativeArray<byte>);
		}
	}
}
