using System;

public static class NumberExtensions
{
	public static string FormatBytes<T>(this T input, bool shortFormat = false) where T : struct, IComparable, IComparable<T>, IConvertible, IEquatable<T>, IFormattable
	{
		ulong num = (ulong)Convert.ChangeType(input, typeof(ulong));
		double num2 = num;
		string text;
		if (num >= 1152921504606846976L)
		{
			text = "eb";
			num2 = num >> 50;
		}
		else if (num >= 1125899906842624L)
		{
			text = "pb";
			num2 = num >> 40;
		}
		else if (num >= 1099511627776L)
		{
			text = "tb";
			num2 = num >> 30;
		}
		else if (num >= 1073741824)
		{
			text = "gb";
			num2 = num >> 20;
		}
		else if (num >= 1048576)
		{
			text = "mb";
			num2 = num >> 10;
		}
		else
		{
			if (num < 1024)
			{
				return num.ToString("0b");
			}
			text = "kb";
			num2 = num;
		}
		return (num2 / 1024.0).ToString(shortFormat ? "0" : "0.00") + text;
	}

	public static T Clamp<T>(this T input, T min, T max) where T : struct, IComparable, IComparable<T>, IConvertible, IEquatable<T>, IFormattable
	{
		if (input.CompareTo(min) < 0)
		{
			return min;
		}
		if (input.CompareTo(max) > 0)
		{
			return max;
		}
		return input;
	}

	public static string FormatSeconds(this ulong i)
	{
		return FormatSeconds((long)i);
	}

	public static string FormatSeconds(this long s)
	{
		double num = Math.Floor((float)s / 60f);
		double num2 = Math.Floor((float)num / 60f);
		double num3 = Math.Floor((float)num2 / 24f);
		double num4 = Math.Floor((float)num3 / 7f);
		if (s < 60)
		{
			return $"{s}s";
		}
		if (num < 60.0)
		{
			return string.Format("{1}m{0}s", s % 60, num, num2, num3, num4);
		}
		if (num2 < 48.0)
		{
			return string.Format("{2}h{1}m{0}s", s % 60, num % 60.0, num2, num3, num4);
		}
		if (num3 < 7.0)
		{
			return string.Format("{3}d{2}h{1}m{0}s", s % 60, num % 60.0, num2 % 24.0, num3 % 7.0, num4);
		}
		return string.Format("{4}w{3}d{2}h{1}m{0}s", s % 60, num % 60.0, num2 % 24.0, num3 % 7.0, num4);
	}

	public static string FormatSecondsLong(this ulong i)
	{
		return FormatSecondsLong((long)i);
	}

	public static string FormatSecondsLong(this long s)
	{
		double num = Math.Floor((float)s / 60f);
		double num2 = Math.Floor((float)num / 60f);
		double num3 = Math.Floor((float)num2 / 24f);
		double num4 = Math.Floor((float)num3 / 7f);
		if (s < 60)
		{
			return $"{s} seconds";
		}
		if (num < 60.0)
		{
			return string.Format("{1} minutes", s % 60, num, num2, num3, num4);
		}
		if (num2 < 48.0)
		{
			return string.Format("{2} hours", s % 60, num % 60.0, num2, num3, num4);
		}
		if (num3 < 2.0)
		{
			return string.Format("{3} days, {2} hours", s % 60, num % 60.0, num2 % 24.0, num3 % 7.0, num4);
		}
		return string.Format("{3} days", s % 60, num % 60.0, num2 % 24.0, num3, num4);
	}

	public static string FormatNumberShort(this ulong i)
	{
		return FormatNumberShort((long)i);
	}

	public static string FormatNumberShort(this long num)
	{
		if (num >= 1000000000)
		{
			return ((double)num / 1000000000.0).ToString("0.#") + "B";
		}
		if (num >= 1000000)
		{
			return ((double)num / 1000000.0).ToString("0.#") + "M";
		}
		if (num >= 1000)
		{
			return ((double)num / 1000.0).ToString("0.#") + "K";
		}
		return num.ToString("#,0");
	}

	public static string FormatDistance(this float num)
	{
		return $"{num:F1}m";
	}
}
