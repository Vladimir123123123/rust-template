using System;

public class PoolCollection<T> : IPoolCollection where T : class, new()
{
	private static readonly object collectionLock = new object();

	private BufferList<T> buffer;

	public long ItemsCapacity { get; private set; }

	public long ItemsInStack { get; private set; }

	public long ItemsInUse { get; private set; }

	public long ItemsCreated { get; private set; }

	public long ItemsTaken { get; private set; }

	public long ItemsSpilled { get; private set; }

	public long MaxItemsInUse { get; private set; }

	public PoolCollection()
	{
		Resize(512);
	}

	public void Reset()
	{
		Resize((int)ItemsCapacity);
	}

	public void ResetMaxUsageCounter()
	{
		lock (collectionLock)
		{
			MaxItemsInUse = ItemsInUse;
		}
	}

	public void Resize(int size)
	{
		lock (collectionLock)
		{
			buffer = new BufferList<T>(size);
			ItemsCapacity = size;
			ItemsInStack = 0L;
			ItemsInUse = 0L;
			ItemsCreated = 0L;
			ItemsTaken = 0L;
			ItemsSpilled = 0L;
			MaxItemsInUse = 0L;
		}
	}

	public void Add(T obj)
	{
		if (obj is IPooled pooled)
		{
			pooled.EnterPool();
		}
		lock (collectionLock)
		{
			ItemsInUse--;
			if (ItemsInStack < ItemsCapacity)
			{
				buffer.Push(obj);
				ItemsInStack++;
			}
			else
			{
				ItemsSpilled++;
			}
		}
	}

	public T Take()
	{
		T val;
		lock (collectionLock)
		{
			ItemsInUse++;
			MaxItemsInUse = Math.Max(ItemsInUse, MaxItemsInUse);
			if (ItemsInStack > 0)
			{
				val = buffer.Pop();
				ItemsInStack--;
				ItemsTaken++;
			}
			else
			{
				val = new T();
				ItemsCreated++;
			}
		}
		if (val is IPooled pooled)
		{
			pooled.LeavePool();
		}
		return val;
	}

	public void Fill()
	{
		long num = ItemsCapacity - ItemsInStack;
		for (int i = 0; i < num; i++)
		{
			T val = new T();
			if (val is IPooled pooled)
			{
				pooled.EnterPool();
			}
			lock (collectionLock)
			{
				buffer.Push(val);
				ItemsInStack++;
			}
		}
	}

	void IPoolCollection.Add(object obj)
	{
		Add((T)obj);
	}
}
