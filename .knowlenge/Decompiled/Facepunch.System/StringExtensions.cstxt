using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Text.RegularExpressions;
using Facepunch.Extend;

public static class StringExtensions
{
	private static readonly Regex regexSplitQuotes = new Regex("\"([^\"]+)\"|'([^']+)'|\\S+");

	private static char[] spaceOrQuote = new char[2] { ' ', '"' };

	private static StringBuilder _quoteSafeBuilder = new StringBuilder();

	private static char[] FilenameDelim = new char[2] { '/', '\\' };

	private static readonly char[] _badCharacters = new char[73]
	{
		'\0', '\u0001', '\u0002', '\u0003', '\u0004', '\u0005', '\u0006', '\a', '\b', '\t',
		'\v', '\f', '\r', '\u000e', '\u000f', '\u0010', '\u0012', '\u0013', '\u0014', '\u0016',
		'\u0017', '\u0018', '\u0019', '\u001a', '\u001b', '\u001c', '\u001d', '\u001e', '\u001f', '\u00a0',
		'\u00ad', '\u2000', '\u2001', '\u2002', '\u2003', '\u2004', '\u2005', '\u2006', '\u2007', '\u2008',
		'\u2009', '\u200a', '\u200b', '\u200c', '\u200d', '\u200e', '\u200f', '‐', '‑', '‒',
		'–', '—', '―', '‖', '‗', '‘', '’', '‚', '‛', '“',
		'”', '„', '‟', '\u2028', '\u2029', '\u202f', '\u205f', '\u2060', '␠', '␢',
		'␣', '\u3000', '\ufeff'
	};

	public static string QuoteSafe(this string str)
	{
		lock (_quoteSafeBuilder)
		{
			_quoteSafeBuilder.Clear();
			_quoteSafeBuilder.QuoteSafe(str);
			return _quoteSafeBuilder.ToString();
		}
	}

	public static string[] SplitQuotesStrings(this string input, int maxCount = int.MaxValue)
	{
		input = input.Replace("\\\"", "&qute;");
		List<string> list = new List<string>();
		Match match = regexSplitQuotes.Match(input);
		for (int i = 0; i < maxCount; i++)
		{
			if (!match.Success)
			{
				break;
			}
			string value = match.Value;
			value = value.Trim(spaceOrQuote);
			value = value.Replace("&qute;", "\"");
			list.Add(value);
			match = match.NextMatch();
		}
		return list.ToArray();
	}

	public static decimal ToDecimal(this string str, decimal Default = 0m)
	{
		decimal result = Default;
		decimal.TryParse(str, out result);
		return result;
	}

	public static float ToFloat(this string str, float Default = 0f)
	{
		return (float)str.ToDecimal((decimal)Default);
	}

	public static int ToInt(this string str, int Default = 0)
	{
		decimal num = str.ToDecimal(Default);
		if (!(num <= -2147483648m))
		{
			if (!(num >= 2147483647m))
			{
				return (int)num;
			}
			return int.MaxValue;
		}
		return int.MinValue;
	}

	public static long ToLong(this string str, long Default = 0L)
	{
		decimal num = str.ToDecimal(Default);
		if (!(num <= -9223372036854775808m))
		{
			if (!(num >= 9223372036854775807m))
			{
				return (long)num;
			}
			return long.MaxValue;
		}
		return long.MinValue;
	}

	public static bool ToBool(this string str)
	{
		if (string.IsNullOrWhiteSpace(str))
		{
			return false;
		}
		switch (str)
		{
		case "0":
			return false;
		case "1":
			return true;
		case "False":
			return false;
		case "True":
			return true;
		default:
			str = str.Trim();
			str = str.ToLower();
			return str switch
			{
				"true" => true, 
				"t" => true, 
				"yes" => true, 
				"y" => true, 
				_ => false, 
			};
		}
	}

	public static string Truncate(this string str, int maxLength, string appendage = null)
	{
		if (string.IsNullOrEmpty(str))
		{
			return str;
		}
		if (str.Length <= maxLength)
		{
			return str;
		}
		if (appendage != null)
		{
			maxLength -= appendage.Length;
		}
		str = str.Substring(0, maxLength);
		if (appendage == null)
		{
			return str;
		}
		return str + appendage;
	}

	public static string TruncateFilename(this string str, int maxLength, string appendage = null)
	{
		if (string.IsNullOrEmpty(str))
		{
			return str;
		}
		if (str.Length <= maxLength)
		{
			return str;
		}
		maxLength -= 3;
		string text = str;
		int num = 0;
		while (num++ < 100)
		{
			List<string> list = str.Split(FilenameDelim).ToList();
			list.RemoveRange(list.Count - 1 - num, num);
			if (list.Count == 1)
			{
				return list.Last();
			}
			list.Insert(list.Count - 1, "...");
			text = string.Join("/", list.ToArray());
			if (text.Length < maxLength)
			{
				return text;
			}
		}
		return str.Split(FilenameDelim).ToList().Last();
	}

	public static bool Contains(this string source, string toCheck, StringComparison comp)
	{
		return source.IndexOf(toCheck, comp) >= 0;
	}

	public static string Snippet(this string source, string find, int padding)
	{
		if (string.IsNullOrEmpty(find))
		{
			return string.Empty;
		}
		StringBuilder stringBuilder = new StringBuilder();
		int num;
		for (num = 0; num < source.Length; num += find.Length)
		{
			num = source.IndexOf(find, num, StringComparison.InvariantCultureIgnoreCase);
			if (num == -1)
			{
				break;
			}
			int num2 = (num - padding).Clamp(0, source.Length);
			int num3 = (num2 + find.Length + padding * 2).Clamp(0, source.Length);
			num = num3;
			if (stringBuilder.Length > 0)
			{
				stringBuilder.Append(" ... ");
			}
			stringBuilder.Append(source.Substring(num2, num3 - num2));
		}
		return stringBuilder.ToString();
	}

	public static string RemoveBadCharacters(this string str)
	{
		str = new string(str.Where((char x) => !_badCharacters.Contains(x)).ToArray());
		return str;
	}

	public static string Base64Encode(this string plainText)
	{
		return Convert.ToBase64String(Encoding.UTF8.GetBytes(plainText));
	}

	public static string Base64Decode(this string base64EncodedData)
	{
		byte[] bytes = Convert.FromBase64String(base64EncodedData);
		return Encoding.UTF8.GetString(bytes);
	}
}
