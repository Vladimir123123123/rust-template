using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.IO;
using System.Threading.Tasks;
using Facepunch;
using Facepunch.Models;
using Newtonsoft.Json;
using UnityEngine;

[JsonModel]
public class BenchmarkData
{
	public static BenchmarkData Current;

	public Dictionary<string, float> Results = new Dictionary<string, float>();

	public string ComputerName;

	public string BuildDate;

	public string BranchName;

	public string Changeset;

	public string BuildId;

	public bool Auto;

	public int Version;

	public AppInfo AppInfo;

	public SystemInformation SystemInfo;

	private int frames;

	private int hitches;

	private int freezes;

	private float lastTime;

	private double frameTimes;

	private float AvgMilliseconds => (float)(frameTimes / (double)frames * 1000.0);

	private float avgFrameRate => 1000f / AvgMilliseconds;

	public static BenchmarkData New()
	{
		return new BenchmarkData
		{
			ComputerName = Environment.MachineName,
			BuildDate = BuildInfo.Current.BuildDate.ToString(),
			BranchName = BuildInfo.Current.Scm.Branch,
			Changeset = BuildInfo.Current.Scm.ChangeId,
			BuildId = BuildInfo.Current.Build.Id,
			Auto = CommandLine.HasSwitch("+autobench"),
			Version = 2
		};
	}

	public void WriteTimersToResults()
	{
		foreach (KeyValuePair<string, Stopwatch> item in BenchmarkTimer.All)
		{
			Results[item.Key] = (float)item.Value.Elapsed.TotalSeconds;
		}
	}

	public async Task<string> Upload()
	{
		if (string.IsNullOrEmpty(Facepunch.Application.Manifest.BenchmarkUrl))
		{
			return null;
		}
		return await WebUtil.PostDataAsync(Facepunch.Application.Manifest.BenchmarkUrl, this);
	}

	public string WriteJSON()
	{
		if (!Directory.Exists("benchmark"))
		{
			Directory.CreateDirectory("benchmark");
		}
		string text = "benchmark/" + DateTime.Now.ToString("MM-dd-yyyy-h-mm-ss") + ".json";
		string value = JsonConvert.SerializeObject((object)Results, (Formatting)1);
		using FileStream stream = new FileStream(text, FileMode.OpenOrCreate);
		using StreamWriter streamWriter = new StreamWriter(stream);
		streamWriter.Write(value);
		return text;
	}

	public void ResetCounters()
	{
		frames = 0;
		hitches = 0;
		freezes = 0;
		lastTime = 0f;
		frameTimes = 0.0;
	}

	public void Frame()
	{
		float realtimeSinceStartup = Time.realtimeSinceStartup;
		if (lastTime > 0f)
		{
			float num = realtimeSinceStartup - lastTime;
			frameTimes += num;
			if ((double)num > 0.1)
			{
				hitches++;
			}
			if (num > 1f)
			{
				freezes++;
			}
		}
		frames++;
		lastTime = realtimeSinceStartup;
	}

	public void CompleteDemoBenchmark(string benchmarkLabel = "")
	{
		Results[benchmarkLabel + "frames"] = frames;
		Results[benchmarkLabel + "hitches"] = hitches;
		Results[benchmarkLabel + "freezes"] = freezes;
		Results[benchmarkLabel + "avgms"] = AvgMilliseconds;
		Results[benchmarkLabel + "avgfps"] = avgFrameRate;
		Results[benchmarkLabel + "gccollects"] = GC.CollectionCount(0);
		Results[benchmarkLabel + "gc;collects"] = GC.CollectionCount(0);
		Results[benchmarkLabel + "gc;totalmemory"] = (float)GC.GetTotalMemory(forceFullCollection: false) / 1000000f;
	}
}
