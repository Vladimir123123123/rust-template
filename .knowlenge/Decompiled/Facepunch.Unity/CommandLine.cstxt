using System;
using System.Collections.Generic;
using Facepunch.Extend;

public static class CommandLine
{
	private static bool initialized = false;

	private static string commandline = "";

	private static Dictionary<string, string> switches = new Dictionary<string, string>();

	public static string Full
	{
		get
		{
			Initalize();
			return commandline;
		}
	}

	public static void Force(string val)
	{
		commandline = val;
		initialized = false;
	}

	private static void Initalize()
	{
		if (initialized)
		{
			return;
		}
		initialized = true;
		string[] commandLineArgs;
		if (commandline == "")
		{
			commandLineArgs = Environment.GetCommandLineArgs();
			foreach (string text in commandLineArgs)
			{
				commandline = commandline + "\"" + text + "\" ";
			}
		}
		if (commandline == "")
		{
			return;
		}
		string text2 = "";
		commandLineArgs = commandline.SplitQuotesStrings();
		foreach (string text3 in commandLineArgs)
		{
			if (text3.Length == 0)
			{
				continue;
			}
			if (text3[0] == '-' || text3[0] == '+')
			{
				if (text2 != "" && !switches.ContainsKey(text2))
				{
					switches.Add(text2, "");
				}
				text2 = text3;
			}
			else if (text2 != "")
			{
				if (!switches.ContainsKey(text2))
				{
					switches.Add(text2, text3);
				}
				text2 = "";
			}
		}
		if (text2 != "" && !switches.ContainsKey(text2))
		{
			switches.Add(text2, "");
		}
	}

	public static bool HasSwitch(string strName)
	{
		Initalize();
		return switches.ContainsKey(strName);
	}

	public static string GetSwitch(string strName, string strDefault)
	{
		Initalize();
		string value = "";
		if (!switches.TryGetValue(strName, out value))
		{
			return strDefault;
		}
		return value;
	}

	public static int GetSwitchInt(string strName, int iDefault)
	{
		Initalize();
		string value = "";
		if (!switches.TryGetValue(strName, out value))
		{
			return iDefault;
		}
		int result = iDefault;
		if (!int.TryParse(value, out result))
		{
			return iDefault;
		}
		return result;
	}

	public static Dictionary<string, string> GetSwitches()
	{
		Initalize();
		return switches;
	}
}
