using UnityEngine;

public static class ComponentExtensions
{
	public static T Duplicate<T>(this T obj) where T : Component
	{
		return Object.Instantiate(obj.gameObject, obj.transform.parent).GetComponent<T>();
	}

	public static T[] Duplicate<T>(this T obj, int amount, bool includeOriginalInArray = false) where T : Component
	{
		if (includeOriginalInArray)
		{
			amount++;
		}
		T[] array = new T[amount];
		for (int i = 0; i < amount; i++)
		{
			if (includeOriginalInArray && i == 0)
			{
				array[i] = obj;
			}
			else
			{
				array[i] = Duplicate(obj);
			}
		}
		return array;
	}

	public static void SetActive<T>(this T obj, bool active) where T : Component
	{
		obj.gameObject.SetActive(active);
	}

	public static Vector2 WorldToRectTransform<T>(this T obj, Vector2 worldPos) where T : Component
	{
		Rect worldRect = GetWorldRect(obj);
		worldPos.x = (worldPos.x - worldRect.xMin) / worldRect.width;
		worldPos.y = (worldPos.y - worldRect.yMin) / worldRect.height;
		return worldPos;
	}

	public static Rect GetWorldRect<T>(this T obj) where T : Component
	{
		Vector3[] array = new Vector3[4];
		((RectTransform)obj.transform).GetWorldCorners(array);
		return new Rect(array[0], array[2] - array[0]);
	}

	public static bool GetComponent<T, U>(this T obj, out U value) where T : Component
	{
		value = obj.GetComponent<U>();
		return value != null;
	}

	public static bool GetComponentInParent<T, U>(this T obj, out U value) where T : Component
	{
		value = obj.GetComponentInParent<U>();
		return value != null;
	}

	public static bool GetComponentInChildren<T, U>(this T obj, out U value) where T : Component
	{
		value = obj.GetComponentInChildren<U>();
		return value != null;
	}
}
