using System;
using System.Diagnostics;
using Facepunch;

public static class Performance
{
	public static Func<int> GetMemoryUsage = null;

	public static Func<int> GetGarbageCollections = null;

	private static Stopwatch Stopwatch = Stopwatch.StartNew();

	private static int frames;

	public static int TargetFrameRate = 60;

	private static int[] frameBuckets = new int[6];

	private static float[] frameBucketFractions = new float[6];

	public static FrameRateCategory FrameRateCategory => CategorizeFrameRate(FrameCountLastSecond);

	public static int FrameCountLastSecond { get; private set; }

	public static double AvgFrameTimeLastSecond => (FrameCountLastSecond > 0) ? ((float)(1000 / FrameCountLastSecond)) : 1f;

	public static int MemoryUsage { get; private set; }

	public static int GarbageCollections { get; private set; }

	public static float SecondsSinceLastConnection { get; private set; }

	public static int[] CategorizedFrameCount => frameBuckets;

	internal static void Frame()
	{
		frames++;
		if (Stopwatch.Elapsed.TotalSeconds >= 1.0)
		{
			OneSecond(Stopwatch.Elapsed.TotalSeconds);
			Stopwatch.Reset();
			Stopwatch.Start();
		}
	}

	private static void OneSecond(double timelapse)
	{
		FrameCountLastSecond = frames;
		frames = 0;
		MemoryUsage = (int)((GetMemoryUsage != null) ? GetMemoryUsage() : (GC.GetTotalMemory(forceFullCollection: false) / 1024 / 1024));
		GarbageCollections = ((GetGarbageCollections != null) ? GetGarbageCollections() : GC.CollectionCount(0));
		UpdateFrameBuckets();
	}

	private static FrameRateCategory CategorizeFrameRate(int i)
	{
		if (i < TargetFrameRate / 4)
		{
			return FrameRateCategory.Unplayable;
		}
		if (i < TargetFrameRate / 2)
		{
			return FrameRateCategory.VeryBad;
		}
		if (i < TargetFrameRate - 10)
		{
			return FrameRateCategory.Bad;
		}
		if (i < TargetFrameRate + 10)
		{
			return FrameRateCategory.Average;
		}
		if (i < TargetFrameRate + 30)
		{
			return FrameRateCategory.Good;
		}
		return FrameRateCategory.VeryGood;
	}

	private static void UpdateFrameBuckets()
	{
		frameBuckets[(int)FrameRateCategory]++;
		int num = 0;
		for (int i = 0; i < frameBuckets.Length; i++)
		{
			num += frameBuckets[i];
		}
		for (int j = 0; j < frameBuckets.Length; j++)
		{
			frameBucketFractions[j] = (float)frameBuckets[j] / (float)num;
		}
	}

	public static int GetFrameCount(FrameRateCategory category)
	{
		return frameBuckets[(int)category];
	}

	public static float GetFrameFraction(FrameRateCategory category)
	{
		return frameBucketFractions[(int)category];
	}
}
