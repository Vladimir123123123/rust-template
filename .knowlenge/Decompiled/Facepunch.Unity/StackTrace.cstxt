using System;
using System.Diagnostics;
using System.Linq;
using System.Reflection;

[JsonModel]
public class StackTrace
{
	[JsonModel]
	public class StackFrame
	{
		public int colno { get; set; }

		public string filename { get; private set; }

		public string function { get; private set; }

		public int lineno { get; private set; }

		public string module { get; private set; }

		public string context_line { get; private set; }

		public bool in_app { get; private set; }

		public StackFrame(System.Diagnostics.StackFrame x)
		{
			if (x != null)
			{
				lineno = x.GetFileLineNumber();
				colno = x.GetFileColumnNumber();
				if (lineno == 0)
				{
					lineno = x.GetILOffset();
				}
				MethodBase method = x.GetMethod();
				if (method != null)
				{
					module = ((method.DeclaringType != null) ? method.DeclaringType.FullName : null);
					function = method.Name;
					context_line = method.ToString();
				}
				else
				{
					module = "(unknown)";
					function = "(unknown)";
					context_line = "(unknown)";
				}
				filename = x.GetFileName();
				in_app = !IsSystemModuleName(module);
			}
		}

		public StackFrame(string x)
		{
			function = x;
		}

		private static bool IsSystemModuleName(string moduleName)
		{
			if (!string.IsNullOrEmpty(moduleName))
			{
				if (!moduleName.StartsWith("System.", StringComparison.Ordinal))
				{
					return moduleName.StartsWith("Microsoft.", StringComparison.Ordinal);
				}
				return true;
			}
			return false;
		}
	}

	public StackFrame[] frames { get; set; }

	public StackTrace()
	{
		System.Diagnostics.StackTrace stackTrace = new System.Diagnostics.StackTrace(0, fNeedFileInfo: true);
		frames = (from x in stackTrace.GetFrames()
			select new StackFrame(x)).ToArray();
	}

	public StackTrace(string unityStack)
	{
		frames = (from x in unityStack.Split(new char[2] { '\n', '\r' }, StringSplitOptions.RemoveEmptyEntries).Reverse()
			select new StackFrame(x)).ToArray();
	}
}
