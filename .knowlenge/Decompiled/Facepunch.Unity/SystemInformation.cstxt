using System;
using System.Runtime.InteropServices;
using Facepunch;
using UnityEngine;

[JsonModel]
public struct SystemInformation
{
	[StructLayout(LayoutKind.Sequential, Size = 1)]
	[JsonModel]
	public struct Hardware
	{
		public string deviceName => SystemInfo.deviceName;

		public string operatingSystem => SystemInfo.operatingSystem;

		public string processorType => SystemInfo.processorType;

		public string processorCount => SystemInfo.processorCount.ToString();

		public string systemMemorySize => SystemInfo.systemMemorySize + "MB";

		public string graphicsDeviceName => SystemInfo.graphicsDeviceName;

		public string graphicsDeviceVersion => SystemInfo.graphicsDeviceVersion;

		public string graphicsMemorySize => SystemInfo.graphicsMemorySize + "MB";

		public string graphicsShaderLevel => SystemInfo.graphicsShaderLevel.ToString();

		public string graphicsDeviceType => SystemInfo.graphicsDeviceType.ToString();

		public string deviceUniqueIdentifier => SystemInfo.deviceUniqueIdentifier;

		public string graphicsDeviceVendor => SystemInfo.graphicsDeviceVendor;

		public bool graphicsMultiThreaded => SystemInfo.graphicsMultiThreaded;

		public int processorFrequency => SystemInfo.processorFrequency;

		public string processorArchitecture
		{
			get
			{
				if (IntPtr.Size == 4)
				{
					return "x86";
				}
				return "x64";
			}
		}
	}

	[StructLayout(LayoutKind.Sequential, Size = 1)]
	[JsonModel]
	public struct Environment
	{
		public string unityVersion => UnityEngine.Application.unityVersion;

		public string version => UnityEngine.Application.version;

		public string companyName => UnityEngine.Application.companyName;

		public bool isEditor => UnityEngine.Application.isEditor;

		public bool isPlayer => !UnityEngine.Application.isEditor;

		public string systemLanguage => UnityEngine.Application.systemLanguage.ToString();

		public int targetFrameRate => UnityEngine.Application.targetFrameRate;

		public Resolution currentResolution => Screen.currentResolution;

		public int screenWidth => Screen.width;

		public int screenHeight => Screen.height;

		public bool fullScreen => Screen.fullScreen;

		public string anisotropicFiltering => QualitySettings.anisotropicFiltering.ToString();

		public string antiAliasing => QualitySettings.antiAliasing.ToString();

		public string qualityLevel => QualitySettings.GetQualityLevel().ToString();

		public string globalMaximumLOD => Shader.globalMaximumLOD.ToString();

		public string lodBias => QualitySettings.lodBias.ToString();

		public string maximumLODLevel => QualitySettings.maximumLODLevel.ToString();

		public string particleRaycastBudget => QualitySettings.particleRaycastBudget.ToString();

		public string pixelLightCount => QualitySettings.pixelLightCount.ToString();

		public string realtimeReflectionProbes => QualitySettings.realtimeReflectionProbes.ToString();

		public string shadowCascades => QualitySettings.shadowCascades.ToString();

		public string shadowDistance => QualitySettings.shadowDistance.ToString();

		public string softVegetation => QualitySettings.softVegetation.ToString();

		public string vSyncCount => QualitySettings.vSyncCount.ToString();
	}

	public Hardware hardware;

	public Environment environment;
}
