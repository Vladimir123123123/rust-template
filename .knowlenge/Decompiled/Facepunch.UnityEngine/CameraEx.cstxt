using System;
using System.IO;
using UnityEngine;

public static class CameraEx
{
	public static void FocusOnRenderer(this Camera cam, GameObject obj, Vector3 lookDirection, Vector3 Up, int layerMask = -1)
	{
		Vector3 position = obj.transform.position;
		Quaternion rotation = obj.transform.rotation;
		obj.transform.SetPositionAndRotation(Vector3.one, Quaternion.identity);
		obj.transform.SetPositionAndRotation(Vector3.zero, Quaternion.identity);
		Bounds bounds = new Bounds(Vector3.zero, Vector3.one * 0.01f);
		bool flag = true;
		Renderer[] componentsInChildren = obj.GetComponentsInChildren<Renderer>();
		foreach (Renderer renderer in componentsInChildren)
		{
			if (renderer.enabled && renderer.gameObject.activeInHierarchy && !(renderer is ParticleSystemRenderer) && !renderer.gameObject.name.EndsWith("lod01", StringComparison.InvariantCultureIgnoreCase) && !renderer.gameObject.name.EndsWith("lod02", StringComparison.InvariantCultureIgnoreCase) && !renderer.gameObject.name.EndsWith("lod03", StringComparison.InvariantCultureIgnoreCase) && !renderer.gameObject.name.EndsWith("lod04", StringComparison.InvariantCultureIgnoreCase) && !renderer.gameObject.name.EndsWith("lod1", StringComparison.InvariantCultureIgnoreCase) && !renderer.gameObject.name.EndsWith("lod2", StringComparison.InvariantCultureIgnoreCase) && !renderer.gameObject.name.EndsWith("lod3", StringComparison.InvariantCultureIgnoreCase) && !renderer.gameObject.name.EndsWith("lod4", StringComparison.InvariantCultureIgnoreCase) && (layerMask & (1 << renderer.gameObject.layer)) != 0)
			{
				if (flag)
				{
					bounds = renderer.bounds;
					flag = false;
				}
				else
				{
					bounds.Encapsulate(renderer.bounds);
				}
			}
		}
		float num = bounds.size.magnitude * 0.33f / Mathf.Tan(cam.fieldOfView * 0.5f * (MathF.PI / 180f));
		Vector3 point = obj.transform.worldToLocalMatrix.MultiplyPoint(bounds.center);
		obj.transform.SetPositionAndRotation(position, rotation);
		point = obj.transform.localToWorldMatrix.MultiplyPoint(point);
		cam.transform.position = point + obj.transform.TransformDirection(lookDirection.normalized) * num;
		cam.transform.LookAt(point, obj.transform.TransformDirection(Up.normalized));
	}

	public static void SaveScreenshot(this Camera cam, string name, int width, int height, bool transparent, int SuperSampleSize, Color? background = null)
	{
		RenderTexture temporary = RenderTexture.GetTemporary(width * SuperSampleSize, height * SuperSampleSize, 24, RenderTextureFormat.ARGB32, RenderTextureReadWrite.sRGB);
		Color backgroundColor = cam.backgroundColor;
		CameraClearFlags clearFlags = cam.clearFlags;
		RenderTexture targetTexture = cam.targetTexture;
		int antiAliasing = QualitySettings.antiAliasing;
		AnisotropicFiltering anisotropicFiltering = QualitySettings.anisotropicFiltering;
		bool sRGBWrite = GL.sRGBWrite;
		GameObject obj = new GameObject();
		cam.forceIntoRenderTexture = true;
		cam.targetTexture = temporary;
		cam.aspect = 1f;
		cam.renderingPath = RenderingPath.UsePlayerSettings;
		cam.rect = new Rect(0f, 0f, 1f, 1f);
		cam.allowHDR = true;
		Texture.SetGlobalAnisotropicFilteringLimits(16, 16);
		QualitySettings.anisotropicFiltering = AnisotropicFiltering.ForceEnable;
		QualitySettings.antiAliasing = 8;
		if (transparent)
		{
			cam.clearFlags = CameraClearFlags.Depth;
			cam.backgroundColor = background ?? new Color(0f, 0f, 0f, 0f);
		}
		RenderTexture.active = temporary;
		GL.Clear(clearDepth: true, clearColor: true, background ?? new Color(0f, 0f, 0f, 0f));
		GL.sRGBWrite = true;
		cam.Render();
		RenderTexture.active = null;
		RenderTexture.active = temporary;
		Texture2D texture2D = new Texture2D(temporary.width, temporary.height, TextureFormat.ARGB32, mipChain: true);
		texture2D.ReadPixels(new Rect(0f, 0f, temporary.width, temporary.height), 0, 0, recalculateMipMaps: true);
		texture2D.filterMode = FilterMode.Trilinear;
		texture2D.anisoLevel = 32;
		RenderTexture.active = null;
		cam.targetTexture = targetTexture;
		QualitySettings.antiAliasing = antiAliasing;
		QualitySettings.anisotropicFiltering = anisotropicFiltering;
		Texture.SetGlobalAnisotropicFilteringLimits(1, 16);
		if (SuperSampleSize != 1)
		{
			texture2D.Apply();
			RenderTexture renderTexture = (RenderTexture.active = RenderTexture.GetTemporary(width, height, 24, RenderTextureFormat.ARGB32, RenderTextureReadWrite.sRGB));
			GL.Clear(clearDepth: true, clearColor: true, new Color(0f, 0f, 0f, 0f));
			GL.sRGBWrite = true;
			Graphics.Blit(texture2D, renderTexture);
			texture2D.Resize(width, height);
			texture2D.ReadPixels(new Rect(0f, 0f, width, height), 0, 0);
			RenderTexture.active = null;
			texture2D.Apply();
			RenderTexture.ReleaseTemporary(renderTexture);
		}
		byte[] bytes = texture2D.EncodeToPNG();
		string directoryName = Path.GetDirectoryName(name);
		if (!Directory.Exists(directoryName))
		{
			Directory.CreateDirectory(directoryName);
		}
		File.WriteAllBytes(name, bytes);
		UnityEngine.Object.DestroyImmediate(texture2D, allowDestroyingAssets: true);
		RenderTexture.ReleaseTemporary(temporary);
		UnityEngine.Object.DestroyImmediate(obj, allowDestroyingAssets: true);
		if (transparent)
		{
			cam.clearFlags = clearFlags;
			cam.backgroundColor = backgroundColor;
		}
		GL.sRGBWrite = sRGBWrite;
	}
}
