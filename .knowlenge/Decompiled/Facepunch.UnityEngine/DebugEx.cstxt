using UnityEngine;

public static class DebugEx
{
	private static float startTime;

	public static void Log(object message, StackTraceLogType stacktrace = StackTraceLogType.None)
	{
		StackTraceLogType stackTraceLogType = Application.GetStackTraceLogType(LogType.Log);
		Application.SetStackTraceLogType(LogType.Log, stacktrace);
		Debug.Log(message);
		Application.SetStackTraceLogType(LogType.Log, stackTraceLogType);
	}

	public static void Log(object message, Object context, StackTraceLogType stacktrace = StackTraceLogType.None)
	{
		StackTraceLogType stackTraceLogType = Application.GetStackTraceLogType(LogType.Log);
		Application.SetStackTraceLogType(LogType.Log, stacktrace);
		Debug.Log(message, context);
		Application.SetStackTraceLogType(LogType.Log, stackTraceLogType);
	}

	public static void LogWarning(object message, StackTraceLogType stacktrace = StackTraceLogType.None)
	{
		StackTraceLogType stackTraceLogType = Application.GetStackTraceLogType(LogType.Log);
		Application.SetStackTraceLogType(LogType.Log, stacktrace);
		Debug.LogWarning(message);
		Application.SetStackTraceLogType(LogType.Log, stackTraceLogType);
	}

	public static void LogWarning(object message, Object context, StackTraceLogType stacktrace = StackTraceLogType.None)
	{
		StackTraceLogType stackTraceLogType = Application.GetStackTraceLogType(LogType.Log);
		Application.SetStackTraceLogType(LogType.Log, stacktrace);
		Debug.LogWarning(message, context);
		Application.SetStackTraceLogType(LogType.Log, stackTraceLogType);
	}

	public static void DrawWireCube(Vector3 centre, Vector3 size, Color colour, float duration)
	{
		DrawWireCube(centre, size, Quaternion.identity, colour, duration);
	}

	public static void DrawWireCube(Vector3 centre, Vector3 size, Quaternion rotation, Color colour, float duration)
	{
		Vector3 vector = centre - size / 2f;
		Vector3 vector2 = centre + size / 2f;
		Vector3[] array = new Vector3[8]
		{
			new Vector3(vector.x, vector.y, vector.z),
			new Vector3(vector2.x, vector.y, vector.z),
			new Vector3(vector.x, vector2.y, vector.z),
			new Vector3(vector.x, vector.y, vector2.z),
			new Vector3(vector2.x, vector.y, vector2.z),
			new Vector3(vector2.x, vector2.y, vector.z),
			new Vector3(vector.x, vector2.y, vector2.z),
			new Vector3(vector2.x, vector2.y, vector2.z)
		};
		if (rotation != Quaternion.identity)
		{
			for (int i = 0; i < 8; i++)
			{
				array[i] = centre + rotation * (array[i] - centre);
			}
		}
		DrawWireCube(array, colour, duration);
	}

	public static void DrawWireCube(Vector3[] points, Color colour, float duration)
	{
		if (points.Length != 8)
		{
			Debug.LogError("DrawWireCube: Expected eight points.");
			return;
		}
		Debug.DrawLine(points[0], points[1], colour, duration);
		Debug.DrawLine(points[0], points[3], colour, duration);
		Debug.DrawLine(points[3], points[4], colour, duration);
		Debug.DrawLine(points[1], points[4], colour, duration);
		Debug.DrawLine(points[2], points[5], colour, duration);
		Debug.DrawLine(points[2], points[6], colour, duration);
		Debug.DrawLine(points[6], points[7], colour, duration);
		Debug.DrawLine(points[5], points[7], colour, duration);
		Debug.DrawLine(points[0], points[2], colour, duration);
		Debug.DrawLine(points[1], points[5], colour, duration);
		Debug.DrawLine(points[3], points[6], colour, duration);
		Debug.DrawLine(points[4], points[7], colour, duration);
	}

	public static void StartTiming()
	{
		startTime = Time.realtimeSinceStartup;
	}

	public static void StopTiming()
	{
		Debug.Log("Time: " + (Time.realtimeSinceStartup - startTime) * 1000f + "ms");
	}
}
