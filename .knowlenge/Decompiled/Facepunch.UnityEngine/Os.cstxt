using System;
using System.IO;
using System.Runtime.InteropServices;
using Facepunch.Utility;
using UnityEngine;

public static class Os
{
	internal struct PROCESS_INFORMATION
	{
		public IntPtr hProcess;

		public IntPtr hThread;

		public int dwProcessId;

		public int dwThreadId;
	}

	[StructLayout(LayoutKind.Sequential, CharSet = CharSet.Auto)]
	private struct STARTUPINFO
	{
		public int cb;

		public IntPtr lpReserved;

		public IntPtr lpDesktop;

		public IntPtr lpTitle;

		public int dwX;

		public int dwY;

		public int dwXSize;

		public int dwYSize;

		public int dwXCountChars;

		public int dwYCountChars;

		public int dwFillAttribute;

		public int dwFlags;

		public short wShowWindow;

		public short cbReserved2;

		public IntPtr lpReserved2;

		public IntPtr hStdInput;

		public IntPtr hStdOutput;

		public IntPtr hStdError;
	}

	public struct SECURITY_ATTRIBUTES
	{
		public int nLength;

		public IntPtr lpSecurityDescriptor;

		public int bInheritHandle;
	}

	public static void OpenFolder(string folder)
	{
		if (Directory.Exists(folder))
		{
			Application.OpenURL(folder);
		}
		else
		{
			StartProcess(Environment.GetEnvironmentVariable("windir") + "\\explorer.exe", "/select," + folder.Replace("/", "\\"));
		}
	}

	public static bool StartProcess(string executable, string arguments)
	{
		PROCESS_INFORMATION lpProcessInformation = default(PROCESS_INFORMATION);
		STARTUPINFO lpStartupInfo = default(STARTUPINFO);
		SECURITY_ATTRIBUTES lpProcessAttributes = default(SECURITY_ATTRIBUTES);
		SECURITY_ATTRIBUTES lpThreadAttributes = default(SECURITY_ATTRIBUTES);
		lpProcessAttributes.nLength = Marshal.SizeOf(lpProcessAttributes);
		lpThreadAttributes.nLength = Marshal.SizeOf(lpThreadAttributes);
		return CreateProcess(executable, " " + arguments, ref lpProcessAttributes, ref lpThreadAttributes, bInheritHandles: false, 32u, IntPtr.Zero, null, ref lpStartupInfo, out lpProcessInformation);
	}

	[DllImport("kernel32.dll", CharSet = CharSet.Auto, SetLastError = true)]
	private static extern bool CreateProcess(string lpApplicationName, string lpCommandLine, ref SECURITY_ATTRIBUTES lpProcessAttributes, ref SECURITY_ATTRIBUTES lpThreadAttributes, bool bInheritHandles, uint dwCreationFlags, IntPtr lpEnvironment, string lpCurrentDirectory, [In] ref STARTUPINFO lpStartupInfo, out PROCESS_INFORMATION lpProcessInformation);
}
