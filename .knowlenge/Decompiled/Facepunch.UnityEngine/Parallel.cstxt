using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine;

public static class Parallel
{
	public static int MaxThreads;

	public static void ForEach<T>(IList<T> data, Action<T> action)
	{
		ForEach(data, Environment.ProcessorCount, action);
	}

	public static void ForEach<T>(IList<T> data, int threads, Action<T> action)
	{
		For(0, data.Count, threads, delegate(int i)
		{
			action(data[i]);
		});
	}

	public static void For(int fromInclusive, int toExclusive, Action<int> action)
	{
		For(fromInclusive, toExclusive, Environment.ProcessorCount, action);
	}

	public static void For(int fromInclusive, int toExclusive, int threads, Action<int> action)
	{
		if (MaxThreads > 0)
		{
			threads = Mathf.Min(threads, MaxThreads);
		}
		int num = toExclusive - fromInclusive;
		int chunk_size = num / threads;
		if (threads * chunk_size < num)
		{
			chunk_size++;
		}
		Action<int> action2 = delegate(int thread_id)
		{
			int num2 = fromInclusive + thread_id * chunk_size;
			int num3 = Mathf.Min(num2 + chunk_size, toExclusive);
			for (int i = num2; i < num3; i++)
			{
				action(i);
			}
		};
		IAsyncResult[] array = new IAsyncResult[threads];
		for (int j = 0; j < threads; j++)
		{
			array[j] = action2.BeginInvoke(j, null, null);
		}
		for (int k = 0; k < threads; k++)
		{
			action2.EndInvoke(array[k]);
		}
	}

	public static void Call(Action<int, int> action)
	{
		Call(Environment.ProcessorCount, action);
	}

	public static void Call(int threads, Action<int, int> action)
	{
		if (MaxThreads > 0)
		{
			threads = Mathf.Min(threads, MaxThreads);
		}
		Action<int> action2 = delegate(int thread_id)
		{
			action(thread_id, threads);
		};
		IAsyncResult[] array = new IAsyncResult[threads];
		for (int i = 0; i < threads; i++)
		{
			array[i] = action2.BeginInvoke(i, null, null);
		}
		for (int j = 0; j < threads; j++)
		{
			action2.EndInvoke(array[j]);
		}
	}

	public static IEnumerator Coroutine(Action action)
	{
		IAsyncResult asyncResult = action.BeginInvoke(null, null);
		while (!asyncResult.IsCompleted)
		{
			yield return null;
		}
		action.EndInvoke(asyncResult);
	}
}
