using System;
using System.IO;
using UnityEngine;

public static class Texture
{
	public static void CompressNormals(this Texture2D tex)
	{
		Color color = default(Color);
		for (int i = 0; i < tex.width; i++)
		{
			for (int j = 0; j < tex.height; j++)
			{
				Color pixel = tex.GetPixel(i, j);
				color.r = pixel.g;
				color.g = pixel.g;
				color.b = pixel.g;
				color.a = pixel.r;
				tex.SetPixel(i, j, color);
			}
		}
		tex.Apply(updateMipmaps: true);
	}

	public static void DecompressNormals(this Texture2D tex)
	{
		Color color = default(Color);
		for (int i = 0; i < tex.width; i++)
		{
			for (int j = 0; j < tex.height; j++)
			{
				Color pixel = tex.GetPixel(i, j);
				color.r = pixel.a;
				color.g = Mathf.GammaToLinearSpace(pixel.g);
				color.b = 1f;
				color.a = 1f;
				tex.SetPixel(i, j, color);
			}
		}
		tex.Apply(updateMipmaps: true);
	}

	public static bool SaveAsPng(this Texture texture, string fileName)
	{
		Texture2D texture2D = texture as Texture2D;
		if (texture2D == null)
		{
			return false;
		}
		byte[] array = null;
		try
		{
			array = texture2D.EncodeToPNG();
		}
		catch (Exception)
		{
		}
		if (array == null)
		{
			Texture2D texture2D2 = CreateReadableCopy(texture2D);
			array = texture2D2.EncodeToPNG();
			UnityEngine.Object.DestroyImmediate(texture2D2);
		}
		if (array == null)
		{
			return false;
		}
		if (File.Exists(fileName))
		{
			File.Delete(fileName);
		}
		File.WriteAllBytes(fileName, array);
		return true;
	}

	public static Texture2D CreateReadableCopy(Texture2D texture, int width = 0, int height = 0)
	{
		if (width <= 0)
		{
			width = texture.width;
		}
		if (height <= 0)
		{
			height = texture.height;
		}
		RenderTexture renderTexture = new RenderTexture(width, height, 24, RenderTextureFormat.ARGB32);
		Texture2D obj = new Texture2D(width, height, TextureFormat.ARGB32, texture.mipmapCount > 0)
		{
			name = texture.name
		};
		Graphics.Blit(texture, renderTexture);
		RenderTexture.active = renderTexture;
		obj.ReadPixels(new Rect(0f, 0f, width, height), 0, 0, recalculateMipMaps: true);
		RenderTexture.active = null;
		obj.Apply(updateMipmaps: true);
		UnityEngine.Object.DestroyImmediate(renderTexture);
		return obj;
	}

	public static Texture2D LimitSize(Texture2D tex, int w, int h)
	{
		if (tex.width <= w && tex.height <= h)
		{
			return tex;
		}
		int num = tex.width;
		int num2 = tex.height;
		if (num > w)
		{
			double num3 = (double)w / (double)num;
			num = (int)((double)num * num3);
			num2 = (int)((double)num2 * num3);
		}
		if (num2 > h)
		{
			double num4 = (double)h / (double)num2;
			num = (int)((double)num * num4);
			num2 = (int)((double)num2 * num4);
		}
		return CreateReadableCopy(tex, num, num2);
	}

	public static Texture2D LimitSize(Texture2D tex, object maxTextureSize1, object maxTextureSize2)
	{
		throw new NotImplementedException();
	}
}
