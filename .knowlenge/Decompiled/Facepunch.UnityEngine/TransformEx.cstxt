using System.Collections.Generic;
using Facepunch;
using UnityEngine;
using UnityEngine.EventSystems;

public static class TransformEx
{
	private static PointerEventData _pointerEvent;

	public static Transform FindChildRecursive(this Transform transform, string name)
	{
		Transform transform2 = transform.Find(name);
		for (int i = 0; i < transform.childCount; i++)
		{
			if (!(transform2 == null))
			{
				break;
			}
			transform2 = FindChildRecursive(transform.GetChild(i), name);
		}
		return transform2;
	}

	public static T GetOrAddComponent<T>(this Transform transform) where T : Component
	{
		T val = transform.GetComponent<T>();
		if (val == null)
		{
			val = transform.gameObject.AddComponent<T>();
		}
		return val;
	}

	public static void DestroyAllChildren(this Transform transform, bool immediate = false)
	{
		for (int num = transform.childCount; num > 0; num--)
		{
			Transform child = transform.GetChild(num - 1);
			if (!child.CompareTag("persist"))
			{
				if (immediate)
				{
					Object.DestroyImmediate(child.gameObject);
				}
				else
				{
					Object.Destroy(child.gameObject);
				}
			}
		}
	}

	public static float AngleToPos(this Transform transform, Vector3 targetPos)
	{
		float y = transform.eulerAngles.y;
		Vector3 vector = targetPos - transform.position;
		float num = Mathf.Atan2(vector.x, vector.z) * 57.29578f - y;
		if (num > 180f)
		{
			num -= 360f;
		}
		else if (num < -180f)
		{
			num += 360f;
		}
		return num;
	}

	public static int GetDepth(this Transform transform)
	{
		int num = 0;
		Transform parent = transform.parent;
		while (parent != null)
		{
			num++;
			parent = parent.parent;
		}
		return num;
	}

	public static bool ClickedInsideTransformOrChild(this Transform t, int? mouseButton = null)
	{
		if (mouseButton.HasValue && !Input.GetMouseButton(mouseButton.Value))
		{
			return false;
		}
		EventSystem current = EventSystem.current;
		if (current == null)
		{
			return false;
		}
		if (_pointerEvent == null)
		{
			_pointerEvent = new PointerEventData(current);
		}
		_pointerEvent.position = Input.mousePosition;
		List<RaycastResult> obj = Pool.Get<List<RaycastResult>>();
		EventSystem.current.RaycastAll(_pointerEvent, obj);
		foreach (RaycastResult item in obj)
		{
			if (item.gameObject.transform.IsChildOf(t))
			{
				Pool.FreeUnmanaged(ref obj);
				return true;
			}
		}
		Pool.FreeUnmanaged(ref obj);
		return false;
	}
}
