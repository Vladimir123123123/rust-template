using System;
using System.Collections.Generic;
using System.IO;
using ObjectStream.Data;
using Oxide.CSharp.Patching;

[Serializable]
public class CompilerFile
{
	[NonSerialized]
	internal static readonly Dictionary<string, CompilerFile> FileCache = new Dictionary<string, CompilerFile>(StringComparer.InvariantCultureIgnoreCase);

	[NonSerialized]
	internal DateTime LastRead;

	[NonSerialized]
	internal bool KeepCached;

	public string Name { get; set; }

	public byte[] Data { get; set; }

	public static CompilerFile CachedReadFile(string directory, string fileName, byte[] data = null)
	{
		string text = Path.Combine(directory, fileName);
		CompilerFile value;
		lock (FileCache)
		{
			if (FileCache.TryGetValue(text, out value))
			{
				if (data != null)
				{
					value.Data = data;
				}
				value.LastRead = DateTime.Now;
				return value;
			}
		}
		bool patched = false;
		if (data == null && File.Exists(text))
		{
			data = Patcher.Run(File.ReadAllBytes(text), out patched);
		}
		if (data == null)
		{
			return null;
		}
		value = new CompilerFile(fileName, data);
		value.LastRead = DateTime.Now;
		value.KeepCached = patched;
		lock (FileCache)
		{
			FileCache[text] = value;
			return value;
		}
	}

	internal CompilerFile(string name, byte[] data)
	{
		Name = name;
		Data = data;
	}

	internal CompilerFile(string directory, string name)
	{
		Name = name;
		Data = File.ReadAllBytes(Path.Combine(directory, Name));
	}

	internal CompilerFile(string path)
	{
		Name = Path.GetFileName(path);
		Data = File.ReadAllBytes(path);
	}
}
