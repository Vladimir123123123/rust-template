using System;
using System.Linq;
using Mono.Cecil;
using Mono.Collections.Generic;
using Oxide.CSharp.Patching.Validation;

public class HasAttributeAttribute : HasNameAttribute
{
	public HasAttributeAttribute(string rule, StringValidationType type = StringValidationType.StartsWith, StringComparison comparison = StringComparison.InvariantCultureIgnoreCase)
		: base(rule, type, comparison)
	{
	}

	protected override bool IsValid(object item)
	{
		if (item is CustomAttribute customAttribute)
		{
			return base.IsValid((object)customAttribute.AttributeType.FullName);
		}
		if (item is Collection<CustomAttribute> source)
		{
			return source.Any((CustomAttribute a) => base.IsValid((object)a.AttributeType.FullName));
		}
		if (item is AssemblyDefinition { HasCustomAttributes: not false } assemblyDefinition)
		{
			return assemblyDefinition.CustomAttributes.Any((CustomAttribute a) => base.IsValid((object)a.AttributeType.FullName));
		}
		if (item is ModuleDefinition { HasCustomAttributes: not false } moduleDefinition)
		{
			return moduleDefinition.CustomAttributes.Any((CustomAttribute a) => base.IsValid((object)a.AttributeType.FullName));
		}
		if (item is IMemberDefinition { HasCustomAttributes: not false } memberDefinition)
		{
			return memberDefinition.CustomAttributes.Any((CustomAttribute a) => base.IsValid((object)a.AttributeType.FullName));
		}
		return false;
	}
}
