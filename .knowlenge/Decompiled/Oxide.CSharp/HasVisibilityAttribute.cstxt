using Mono.Cecil;
using Oxide.CSharp.Patching.Validation;

public class HasVisibilityAttribute : PatchValidationAttribute
{
	public bool IsPublic { get; }

	public bool? IsStatic { get; set; }

	public HasVisibilityAttribute(bool isPublic)
	{
		IsPublic = isPublic;
	}

	protected override bool IsValid(object item)
	{
		if (item is TypeDefinition typeDefinition)
		{
			if (typeDefinition.IsNested)
			{
				if (typeDefinition.IsNestedPublic != IsPublic)
				{
					return false;
				}
			}
			else if (typeDefinition.IsPublic != IsPublic)
			{
				return false;
			}
			if (IsStatic.HasValue && (typeDefinition.IsAbstract && typeDefinition.IsSealed) != IsStatic.Value)
			{
				return false;
			}
			return true;
		}
		if (item is PropertyDefinition propertyDefinition)
		{
			if (IsPublic)
			{
				if (propertyDefinition.SetMethod == null)
				{
					return IsValid(propertyDefinition.GetMethod);
				}
				if (IsValid(propertyDefinition.GetMethod))
				{
					return IsValid(propertyDefinition.SetMethod);
				}
				return false;
			}
			if (propertyDefinition.SetMethod == null)
			{
				return IsValid(propertyDefinition.GetMethod);
			}
			if (!IsValid(propertyDefinition.GetMethod))
			{
				return IsValid(propertyDefinition.SetMethod);
			}
			return true;
		}
		if (item is EventDefinition eventDefinition)
		{
			if (eventDefinition.AddMethod != null)
			{
				return IsValid(eventDefinition.AddMethod);
			}
			return false;
		}
		if (item is MethodDefinition methodDefinition)
		{
			if (IsStatic.HasValue && methodDefinition.IsStatic != IsStatic.Value)
			{
				return false;
			}
			return methodDefinition.IsPublic == IsPublic;
		}
		if (item is FieldDefinition fieldDefinition)
		{
			if (IsStatic.HasValue && fieldDefinition.IsStatic != IsStatic.Value)
			{
				return false;
			}
			return fieldDefinition.IsPublic == IsPublic;
		}
		if (item is IMemberDefinition)
		{
			bool? propertyValue = PatchValidationAttribute.GetPropertyValue<bool?>(item, "IsPublic", null);
			if (!propertyValue.HasValue || propertyValue.Value != IsPublic)
			{
				return false;
			}
			if (IsStatic.HasValue)
			{
				bool? propertyValue2 = PatchValidationAttribute.GetPropertyValue<bool?>(item, "IsStatic", null);
				if (!propertyValue2.HasValue || propertyValue2.Value != IsStatic.Value)
				{
					return false;
				}
			}
			return true;
		}
		return false;
	}
}
