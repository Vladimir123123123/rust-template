using System;
using System.IO;
using ObjectStream;
using ObjectStream.Threading;

public class ObjectStreamClient<TRead, TWrite> where TRead : class where TWrite : class
{
	private readonly Stream _inStream;

	private readonly Stream _outStream;

	private ObjectStreamConnection<TRead, TWrite> _connection;

	public event ConnectionMessageEventHandler<TRead, TWrite> Message;

	public event StreamExceptionEventHandler Error;

	public ObjectStreamClient(Stream inStream, Stream outStream)
	{
		_inStream = inStream;
		_outStream = outStream;
	}

	public void Start()
	{
		Worker worker = new Worker();
		worker.Error += OnError;
		worker.DoWork(ListenSync);
	}

	public void PushMessage(TWrite message)
	{
		if (_connection != null)
		{
			_connection.PushMessage(message);
		}
	}

	public void Stop()
	{
		if (_connection != null)
		{
			_connection.Close();
		}
	}

	private void ListenSync()
	{
		_connection = ConnectionFactory.CreateConnection<TRead, TWrite>(_inStream, _outStream);
		_connection.ReceiveMessage += OnReceiveMessage;
		_connection.Error += ConnectionOnError;
		_connection.Open();
	}

	private void OnReceiveMessage(ObjectStreamConnection<TRead, TWrite> connection, TRead message)
	{
		if (this.Message != null)
		{
			this.Message(connection, message);
		}
	}

	private void ConnectionOnError(ObjectStreamConnection<TRead, TWrite> connection, Exception exception)
	{
		OnError(exception);
	}

	private void OnError(Exception exception)
	{
		if (this.Error != null)
		{
			this.Error(exception);
		}
	}
}
