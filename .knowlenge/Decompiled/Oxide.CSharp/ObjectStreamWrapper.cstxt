using System;
using System.IO;
using System.Linq;
using System.Net;
using System.Runtime.Serialization.Formatters;
using System.Runtime.Serialization.Formatters.Binary;
using System.Text;
using ObjectStream.IO;

public class ObjectStreamWrapper<TRead, TWrite> where TRead : class where TWrite : class
{
	private readonly BinaryFormatter _binaryFormatter = new BinaryFormatter
	{
		Binder = new BindChanger(),
		AssemblyFormat = FormatterAssemblyStyle.Simple
	};

	private readonly Stream _inStream;

	private readonly Stream _outStream;

	private bool _run;

	public bool CanRead
	{
		get
		{
			if (_run)
			{
				return _inStream.CanRead;
			}
			return false;
		}
	}

	public bool CanWrite
	{
		get
		{
			if (_run)
			{
				return _outStream.CanWrite;
			}
			return false;
		}
	}

	public ObjectStreamWrapper(Stream inStream, Stream outStream)
	{
		_inStream = inStream;
		_outStream = outStream;
		_run = true;
	}

	public void Close()
	{
		if (!_run)
		{
			return;
		}
		_run = false;
		try
		{
			_outStream.Close();
		}
		catch (Exception)
		{
		}
		try
		{
			_inStream.Close();
		}
		catch (Exception)
		{
		}
	}

	public TRead ReadObject()
	{
		int num = ReadLength();
		if (num != 0)
		{
			return ReadObject(num);
		}
		return null;
	}

	private int ReadLength()
	{
		byte[] array = new byte[4];
		int num = _inStream.Read(array, 0, 4);
		switch (num)
		{
		case 0:
			return 0;
		default:
			Array.Resize(ref array, Encoding.UTF8.GetPreamble().Length);
			if (Encoding.UTF8.GetPreamble().SequenceEqual(array))
			{
				return ReadLength();
			}
			throw new IOException($"Expected {4} bytes but read {num}");
		case 4:
			return IPAddress.NetworkToHostOrder(BitConverter.ToInt32(array, 0));
		}
	}

	private TRead ReadObject(int len)
	{
		byte[] buffer = new byte[len];
		int num;
		for (int i = 0; len - i > 0; i += num)
		{
			if ((num = _inStream.Read(buffer, i, len - i)) <= 0)
			{
				break;
			}
		}
		using MemoryStream serializationStream = new MemoryStream(buffer);
		return (TRead)_binaryFormatter.Deserialize(serializationStream);
	}

	public void WriteObject(TWrite obj)
	{
		byte[] array = Serialize(obj);
		WriteLength(array.Length);
		WriteObject(array);
		Flush();
	}

	private byte[] Serialize(TWrite obj)
	{
		using MemoryStream memoryStream = new MemoryStream();
		_binaryFormatter.Serialize(memoryStream, obj);
		return memoryStream.ToArray();
	}

	private void WriteLength(int len)
	{
		byte[] bytes = BitConverter.GetBytes(IPAddress.HostToNetworkOrder(len));
		_outStream.Write(bytes, 0, bytes.Length);
	}

	private void WriteObject(byte[] data)
	{
		_outStream.Write(data, 0, data.Length);
	}

	private void Flush()
	{
		_outStream.Flush();
	}
}
