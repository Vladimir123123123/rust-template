using System;
using System.Reflection;

[AttributeUsage(AttributeTargets.Class | AttributeTargets.Method | AttributeTargets.Interface, AllowMultiple = true, Inherited = true)]
public abstract class PatchValidationAttribute : Attribute
{
	public bool InverseCheck { get; set; }

	protected abstract bool IsValid(object item);

	public bool Validate(object item)
	{
		if (!InverseCheck)
		{
			return IsValid(item);
		}
		return !IsValid(item);
	}

	protected static T GetPropertyValue<T>(object instance, string name, T defaultValue = default(T), BindingFlags flags = BindingFlags.Instance | BindingFlags.Public)
	{
		if (instance == null || string.IsNullOrEmpty(name))
		{
			return defaultValue;
		}
		PropertyInfo property = instance.GetType().GetProperty(name, flags);
		if (property == null)
		{
			return defaultValue;
		}
		object value = property.GetValue(instance, null);
		if (value is T)
		{
			return (T)value;
		}
		return defaultValue;
	}
}
