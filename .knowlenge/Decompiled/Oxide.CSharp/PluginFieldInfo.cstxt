using System;
using System.Collections.Generic;
using System.Reflection;
using Oxide.Core.Plugins;

public class PluginFieldInfo
{
	public Plugin Plugin;

	public FieldInfo Field;

	public Type FieldType;

	public Type[] GenericArguments;

	public Dictionary<string, MethodInfo> Methods = new Dictionary<string, MethodInfo>();

	public object Value => Field.GetValue(Plugin);

	public PluginFieldInfo(Plugin plugin, FieldInfo field)
	{
		Plugin = plugin;
		Field = field;
		FieldType = field.FieldType;
		GenericArguments = FieldType.GetGenericArguments();
	}

	public bool HasValidConstructor(params Type[] argument_types)
	{
		Type type = GenericArguments[1];
		if (!(type.GetConstructor(new Type[0]) != null))
		{
			return type.GetConstructor(argument_types) != null;
		}
		return true;
	}

	public bool LookupMethod(string method_name, params Type[] argument_types)
	{
		MethodInfo method = FieldType.GetMethod(method_name, argument_types);
		if (method == null)
		{
			return false;
		}
		Methods[method_name] = method;
		return true;
	}

	public object Call(string method_name, params object[] args)
	{
		if (!Methods.TryGetValue(method_name, out var value))
		{
			value = FieldType.GetMethod(method_name, BindingFlags.Instance | BindingFlags.Public);
			Methods[method_name] = value;
		}
		if (value == null)
		{
			throw new MissingMethodException(FieldType.Name, method_name);
		}
		return value.Invoke(Value, args);
	}
}
