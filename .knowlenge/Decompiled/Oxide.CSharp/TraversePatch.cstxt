using System;
using System.Collections.Generic;
using System.Linq;
using System.Reflection;
using Mono.Cecil;
using Oxide;
using Oxide.Core;
using Oxide.Core.Logging;
using Oxide.CSharp.Patching;
using Oxide.CSharp.Patching.Validation;
using Oxide.Logging;

public abstract class TraversePatch : IPatch
{
	protected virtual string Name { get; }

	protected IEnumerable<PatchValidationAttribute> TypeValidators { get; }

	protected IEnumerable<PatchValidationAttribute> PropertyValidators { get; }

	protected IEnumerable<PatchValidationAttribute> FieldValidators { get; }

	protected IEnumerable<PatchValidationAttribute> MethodValidators { get; }

	protected IEnumerable<PatchValidationAttribute> EventValidators { get; }

	protected IEnumerable<PatchValidationAttribute> MemberValidators { get; }

	protected TraversePatch()
	{
		Type type = GetType();
		Name = type.Name;
		TypeValidators = GetValidationRules("OnTypeDefinition", type);
		PropertyValidators = GetValidationRules("OnPropertyDefinition", type);
		FieldValidators = GetValidationRules("OnFieldDefinition", type);
		MethodValidators = GetValidationRules("OnMethodDefinition", type);
		EventValidators = GetValidationRules("OnEventDefinition", type);
		MemberValidators = GetValidationRules("OnMemberDefinition", type);
	}

	public void Patch(PatchContext context)
	{
		List<TypeDefinition> list = context.Assembly.MainModule.GetTypes().ToList();
		for (int i = 0; i < list.Count; i++)
		{
			TypeDefinition type = list[i];
			RecurseType(type, context);
		}
		OnPatchFinished(context);
	}

	private void RecurseType(TypeDefinition type, PatchContext context)
	{
		if (RunValidation(type, MemberValidators) && OnMemberDefinition(type))
		{
			context.IncrementPatches();
		}
		if (type.HasProperties)
		{
			for (int i = 0; i < type.Properties.Count; i++)
			{
				PropertyDefinition member = type.Properties[i];
				if (RunValidation(member, MemberValidators) && OnMemberDefinition(member))
				{
					context.IncrementPatches();
				}
			}
		}
		if (type.HasFields)
		{
			for (int j = 0; j < type.Fields.Count; j++)
			{
				FieldDefinition member2 = type.Fields[j];
				if (RunValidation(member2, MemberValidators) && OnMemberDefinition(member2))
				{
					context.IncrementPatches();
				}
			}
		}
		if (type.HasMethods)
		{
			for (int k = 0; k < type.Methods.Count; k++)
			{
				MethodDefinition member3 = type.Methods[k];
				if (RunValidation(member3, MemberValidators) && OnMemberDefinition(member3))
				{
					context.IncrementPatches();
				}
			}
		}
		if (type.HasEvents)
		{
			for (int l = 0; l < type.Events.Count; l++)
			{
				EventDefinition member4 = type.Events[l];
				if (RunValidation(member4, MemberValidators) && OnMemberDefinition(member4))
				{
					context.IncrementPatches();
				}
			}
		}
		if (type.HasNestedTypes)
		{
			for (int m = 0; m < type.NestedTypes.Count; m++)
			{
				RecurseType(type.NestedTypes[m], context);
			}
		}
	}

	protected virtual bool OnMemberDefinition(IMemberDefinition member)
	{
		if (member is TypeDefinition type)
		{
			if (RunValidation(member, TypeValidators))
			{
				return OnTypeDefinition(type);
			}
			return false;
		}
		if (member is PropertyDefinition property)
		{
			if (RunValidation(member, PropertyValidators))
			{
				return OnPropertyDefinition(property);
			}
			return false;
		}
		if (member is FieldDefinition field)
		{
			if (RunValidation(member, FieldValidators))
			{
				return OnFieldDefinition(field);
			}
			return false;
		}
		if (member is MethodDefinition methodDefinition)
		{
			if (RunValidation(methodDefinition, MethodValidators))
			{
				return OnMethodDefinition(methodDefinition);
			}
			return false;
		}
		if (member is EventDefinition eventDefinition)
		{
			if (RunValidation(eventDefinition, EventValidators))
			{
				return OnEventDefinition(eventDefinition);
			}
			return false;
		}
		return false;
	}

	protected virtual bool OnTypeDefinition(TypeDefinition type)
	{
		return false;
	}

	protected virtual bool OnPropertyDefinition(PropertyDefinition property)
	{
		return false;
	}

	protected virtual bool OnFieldDefinition(FieldDefinition field)
	{
		return false;
	}

	protected virtual bool OnMethodDefinition(MethodDefinition method)
	{
		return false;
	}

	protected virtual bool OnEventDefinition(EventDefinition @event)
	{
		return false;
	}

	protected virtual void OnPatchFinished(PatchContext context)
	{
	}

	protected bool RunValidation(IMemberDefinition member, IEnumerable<PatchValidationAttribute> validations)
	{
		if (member == null)
		{
			return false;
		}
		if (validations == null)
		{
			return true;
		}
		foreach (PatchValidationAttribute validation in validations)
		{
			if (!validation.Validate(member))
			{
				return false;
			}
		}
		return true;
	}

	protected void Log(string message, LogType logType = LogType.Info, Exception e = null)
	{
		Interface.Oxide.RootLogger.WriteDebug(logType, LogEvent.Patch, Name, message, e);
	}

	private static IEnumerable<PatchValidationAttribute> GetValidationRules(string methodName, Type type)
	{
		MethodInfo[] methods = type.GetMethods(BindingFlags.Instance | BindingFlags.Public | BindingFlags.NonPublic);
		Type typeFromHandle = typeof(bool);
		foreach (MethodInfo methodInfo in methods)
		{
			if (methodInfo.Name.Equals(methodName) && methodInfo.ReturnType == typeFromHandle && methodInfo.IsVirtual)
			{
				return Patcher.GetValidationRules(methodInfo.GetCustomAttributes(inherit: true));
			}
		}
		return null;
	}
}
