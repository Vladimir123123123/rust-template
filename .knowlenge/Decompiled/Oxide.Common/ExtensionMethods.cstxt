using System;
using System.Collections.Generic;
using System.Linq;
using System.Reflection;

public static class ExtensionMethods
{
	public static AssemblyMetadataAttribute[] Metadata(this Assembly assembly)
	{
		return Attribute.GetCustomAttributes(assembly, typeof(AssemblyMetadataAttribute), inherit: false) as AssemblyMetadataAttribute[];
	}

	public static string[] Metadata(this Assembly assembly, string key)
	{
		return (from meta in Metadata(assembly)
			where meta.Key.Equals(key, StringComparison.InvariantCultureIgnoreCase)
			select meta.Value).ToArray();
	}

	public static HashSet<T> ToHashSet<T>(this IEnumerable<T> collection)
	{
		HashSet<T> hashSet = new HashSet<T>();
		foreach (T item in collection)
		{
			hashSet.Add(item);
		}
		return hashSet;
	}

	public static bool TryPop<T>(this Stack<T> stack, out T value)
	{
		if (stack.Count > 0)
		{
			value = stack.Pop();
			return true;
		}
		value = default(T);
		return false;
	}

	public static bool TryPeek<T>(this Stack<T> stack, out T value)
	{
		if (stack.Count > 0)
		{
			value = stack.Peek();
			return true;
		}
		value = default(T);
		return false;
	}

	public static bool TryDequeue<T>(this Queue<T> queue, out T value)
	{
		if (queue.Count > 0)
		{
			value = queue.Dequeue();
			return true;
		}
		value = default(T);
		return false;
	}

	public static bool TryPeek<T>(this Queue<T> queue, out T value)
	{
		if (queue.Count > 0)
		{
			value = queue.Peek();
			return true;
		}
		value = default(T);
		return false;
	}
}
