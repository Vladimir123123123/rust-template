using System;
using Oxide.Pooling;

public static class PoolingExtensions
{
	public static IArrayPoolProvider<T> GetArrayProvider<T>(this IPoolFactory factory)
	{
		return factory.GetProvider<T[]>() as IArrayPoolProvider<T>;
	}

	public static T[] PooledCopy<T>(this IArrayPoolProvider<T> provider, T[] source, int offset, int count)
	{
		if (source == null)
		{
			throw new ArgumentNullException("source");
		}
		T[] array = provider?.Take(count) ?? throw new ArgumentNullException("provider");
		try
		{
			for (int i = 0; i < array.Length; i++)
			{
				array[i] = source[offset];
				offset++;
			}
			return array;
		}
		catch
		{
			provider.Return(array);
			throw;
		}
	}

	public static T[] PooledCopy<T>(this IPoolFactory factory, T[] source, int offset, int count)
	{
		if (factory == null)
		{
			throw new ArgumentNullException("factory");
		}
		return (factory.GetProvider<T[]>() as IArrayPoolProvider<T>).PooledCopy(source, offset, count);
	}
}
