using System;
using System.Collections.Generic;
using Oxide;
using Oxide.Pooling;

internal class BaseArrayPoolProvider<T> : IArrayPoolProvider<T>, IPoolProvider<T[]>, IPoolProvider
{
	private readonly int maxSetCapacity;

	private readonly int maxArrayLength;

	private readonly T[] empty;

	private readonly Stack<T[]>[] pooledArrays;

	public BaseArrayPoolProvider(int poolCapacity, int arrayMaxLength)
	{
		maxSetCapacity = poolCapacity;
		maxArrayLength = arrayMaxLength;
		empty = InstantiateArray(0);
		pooledArrays = new Stack<T[]>[maxArrayLength];
		for (int i = 0; i < pooledArrays.Length; i++)
		{
			pooledArrays[i] = new Stack<T[]>(maxSetCapacity);
		}
	}

	public BaseArrayPoolProvider()
		: this(100, 50)
	{
	}

	public T[] Take()
	{
		return empty;
	}

	public T[] Take(int length)
	{
		if (length == 0)
		{
			return empty;
		}
		if (length > maxArrayLength)
		{
			return InstantiateArray(length);
		}
		if (length < 0)
		{
			throw new ArgumentOutOfRangeException("length", length, "must be at least zero");
		}
		Stack<T[]> stack = pooledArrays[length - 1];
		T[] value;
		lock (stack)
		{
			if (!ExtensionMethods.TryPop(stack, out value))
			{
				value = InstantiateArray(length);
			}
		}
		OnTake(value);
		return value;
	}

	public void Return(object item)
	{
		if (!(item is T[] array) || array.Length == 0 || array.Length > maxArrayLength || !OnReturn(array))
		{
			return;
		}
		Stack<T[]> stack = pooledArrays[array.Length - 1];
		lock (stack)
		{
			if (stack.Count < maxSetCapacity)
			{
				stack.Push(array);
			}
		}
	}

	protected virtual void OnTake(T[] array)
	{
	}

	protected virtual bool OnReturn(T[] array)
	{
		for (int i = 0; i < array.Length; i++)
		{
			array[i] = default(T);
		}
		return true;
	}

	protected virtual T[] InstantiateArray(int length)
	{
		return new T[length];
	}
}
