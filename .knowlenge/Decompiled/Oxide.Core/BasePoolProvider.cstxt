using System.Collections.Generic;
using Oxide;
using Oxide.Pooling;

internal abstract class BasePoolProvider<T> : IPoolProvider<T>, IPoolProvider
{
	private readonly Stack<T> pooledData;

	private int MaxPoolSize { get; }

	protected BasePoolProvider()
	{
		MaxPoolSize = 50;
		pooledData = new Stack<T>(MaxPoolSize);
	}

	public T Take()
	{
		T value;
		lock (pooledData)
		{
			if (!ExtensionMethods.TryPop(pooledData, out value))
			{
				value = InstantiateItem();
			}
		}
		OnTake(value);
		return value;
	}

	public void Return(object item)
	{
		if (!(item is T item2) || !OnReturn(item2))
		{
			return;
		}
		lock (pooledData)
		{
			if (pooledData.Count < MaxPoolSize)
			{
				pooledData.Push(item2);
			}
		}
	}

	protected abstract T InstantiateItem();

	protected virtual void OnTake(T item)
	{
	}

	protected virtual bool OnReturn(T item)
	{
		return true;
	}
}
