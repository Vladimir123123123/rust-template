using System;

public class Callback<T1, T2, T3, T4, T5>
{
	public Action<T1, T2, T3, T4, T5> Invoke;

	internal Callback<T1, T2, T3, T4, T5> Previous;

	internal Callback<T1, T2, T3, T4, T5> Next;

	internal Event<T1, T2, T3, T4, T5> Handler;

	public Callback(Action<T1, T2, T3, T4, T5> callback)
	{
		Invoke = callback;
	}

	public void Call(T1 arg0, T2 arg1, T3 arg2, T4 arg3, T5 arg4)
	{
		Action<T1, T2, T3, T4, T5> invoke = Invoke;
		if (invoke == null)
		{
			return;
		}
		try
		{
			invoke(arg0, arg1, arg2, arg3, arg4);
		}
		catch (Exception ex)
		{
			Interface.Oxide.LogException("Exception while invoking event handler", ex);
		}
	}

	public void Remove()
	{
		Event<T1, T2, T3, T4, T5> handler = Handler;
		Callback<T1, T2, T3, T4, T5> next = Next;
		Callback<T1, T2, T3, T4, T5> previous = Previous;
		if (previous == null)
		{
			handler.First = next;
		}
		else
		{
			previous.Next = next;
			if (next == null)
			{
				handler.Last = previous;
			}
		}
		if (next == null)
		{
			handler.Last = previous;
		}
		else
		{
			next.Previous = previous;
			if (previous == null)
			{
				handler.First = next;
			}
		}
		if (handler.Invoking)
		{
			handler.RemovedQueue.Enqueue(this);
		}
		else
		{
			Previous = null;
			Next = null;
		}
		Invoke = null;
		Handler = null;
	}
}
