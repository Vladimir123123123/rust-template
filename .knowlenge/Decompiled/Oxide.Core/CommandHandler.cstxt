using System;
using System.Collections.Generic;
using System.Text;
using Oxide.Core;
using Oxide.Core.Libraries.Covalence;

public sealed class CommandHandler
{
	private CommandCallback callback;

	private Func<string, bool> commandFilter;

	public CommandHandler(CommandCallback callback, Func<string, bool> commandFilter)
	{
		this.callback = callback;
		this.commandFilter = commandFilter;
	}

	public static string GetChatCommandPrefix(string message)
	{
		foreach (string item in Interface.Oxide.Config.Commands.ChatPrefix)
		{
			if (message.StartsWith(item, StringComparison.OrdinalIgnoreCase))
			{
				return item;
			}
		}
		return null;
	}

	public bool HandleChatMessage(IPlayer player, string message)
	{
		if (message.Length == 0)
		{
			return false;
		}
		string chatCommandPrefix = GetChatCommandPrefix(message);
		if (chatCommandPrefix == null)
		{
			return false;
		}
		message = message.Substring(chatCommandPrefix.Length);
		ParseCommand(message, out var cmd, out var args);
		player.LastCommand = CommandType.Chat;
		if (cmd != null)
		{
			return HandleCommand(player, cmd, args);
		}
		return false;
	}

	public bool HandleConsoleMessage(IPlayer player, string message)
	{
		if (message.StartsWith("global."))
		{
			message = message.Substring(7);
		}
		ParseCommand(message, out var cmd, out var args);
		player.LastCommand = CommandType.Console;
		if (cmd != null)
		{
			return HandleCommand(player, cmd, args);
		}
		return false;
	}

	private bool HandleCommand(IPlayer player, string command, string[] args)
	{
		if ((commandFilter == null || commandFilter(command)) && callback != null)
		{
			return callback(player, command, args);
		}
		return false;
	}

	private void ParseCommand(string argstr, out string cmd, out string[] args)
	{
		List<string> list = new List<string>();
		StringBuilder stringBuilder = new StringBuilder();
		bool flag = false;
		foreach (char c in argstr)
		{
			if (c == '"')
			{
				if (flag)
				{
					string text = stringBuilder.ToString().Trim();
					if (!string.IsNullOrEmpty(text))
					{
						list.Add(text);
					}
					stringBuilder = new StringBuilder();
					flag = false;
				}
				else
				{
					flag = true;
				}
			}
			else if (char.IsWhiteSpace(c) && !flag)
			{
				string text2 = stringBuilder.ToString().Trim();
				if (!string.IsNullOrEmpty(text2))
				{
					list.Add(text2);
				}
				stringBuilder = new StringBuilder();
			}
			else
			{
				stringBuilder.Append(c);
			}
		}
		if (stringBuilder.Length > 0)
		{
			string text3 = stringBuilder.ToString().Trim();
			if (!string.IsNullOrEmpty(text3))
			{
				list.Add(text3);
			}
		}
		if (list.Count == 0)
		{
			cmd = null;
			args = null;
		}
		else
		{
			cmd = list[0].ToLowerInvariant();
			list.RemoveAt(0);
			args = list.ToArray();
		}
	}
}
