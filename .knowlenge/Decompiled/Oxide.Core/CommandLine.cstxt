using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Text.RegularExpressions;

public sealed class CommandLine
{
	private readonly Dictionary<string, string> variables = new Dictionary<string, string>();

	public CommandLine(string[] commandline)
	{
		string text = string.Empty;
		string text2 = string.Empty;
		string[] array = commandline;
		foreach (string text3 in array)
		{
			text = text + "\"" + text3.Trim('/', '\\') + "\"";
		}
		array = Split(text);
		foreach (string text4 in array)
		{
			if (text4.Length <= 0)
			{
				continue;
			}
			string text5 = text4;
			if (text4[0] == '-' || text4[0] == '+')
			{
				if (text2 != string.Empty && !variables.ContainsKey(text2))
				{
					variables.Add(text2, string.Empty);
				}
				text2 = text5.Substring(1);
			}
			else
			{
				if (!(text2 != string.Empty))
				{
					continue;
				}
				if (!variables.ContainsKey(text2))
				{
					if (text2.Contains("dir"))
					{
						text5 = text5.Replace('/', '\\');
					}
					variables.Add(text2, text5);
				}
				text2 = string.Empty;
			}
		}
		if (text2 != string.Empty && !variables.ContainsKey(text2))
		{
			variables.Add(text2, string.Empty);
		}
	}

	public static string[] Split(string input)
	{
		input = input.Replace("\\\"", "&quot;");
		MatchCollection matchCollection = new Regex("\"([^\"]+)\"|'([^']+)'|\\S+").Matches(input);
		string[] array = new string[matchCollection.Count];
		for (int i = 0; i < matchCollection.Count; i++)
		{
			char[] trimChars = new char[2] { ' ', '"' };
			array[i] = matchCollection[i].Groups[0].Value.Trim(trimChars);
			array[i] = array[i].Replace("&quot;", "\"");
		}
		return array;
	}

	public bool HasVariable(string name)
	{
		return variables.Any((KeyValuePair<string, string> v) => v.Key == name);
	}

	public string GetVariable(string name)
	{
		try
		{
			return variables.Single((KeyValuePair<string, string> v) => v.Key == name).Value;
		}
		catch (Exception)
		{
			return null;
		}
	}

	public void GetArgument(string var, out string varname, out string format)
	{
		string variable = GetVariable(var);
		StringBuilder stringBuilder = new StringBuilder();
		StringBuilder stringBuilder2 = new StringBuilder();
		int num = 0;
		string text = variable;
		foreach (char c in text)
		{
			switch (c)
			{
			case '{':
				num++;
				break;
			case '}':
				num--;
				if (num == 0)
				{
					stringBuilder2.Append("{0}");
				}
				break;
			default:
				if (num == 0)
				{
					stringBuilder2.Append(c);
				}
				else
				{
					stringBuilder.Append(c);
				}
				break;
			}
		}
		varname = stringBuilder.ToString();
		format = stringBuilder2.ToString();
	}
}
