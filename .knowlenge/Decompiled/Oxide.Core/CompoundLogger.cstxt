using System.Collections.Generic;
using Oxide.Core.Logging;

public sealed class CompoundLogger : Logger
{
	private readonly HashSet<Logger> subloggers;

	private readonly List<LogMessage> messagecache;

	private bool usecache;

	private readonly object Lock = new object();

	public CompoundLogger()
		: base(processImediately: true)
	{
		subloggers = new HashSet<Logger>();
		messagecache = new List<LogMessage>();
		usecache = true;
	}

	public void AddLogger(Logger logger)
	{
		subloggers.Add(logger);
		lock (Lock)
		{
			foreach (LogMessage item in messagecache)
			{
				logger.Write(item);
			}
		}
	}

	public void RemoveLogger(Logger logger)
	{
		logger.OnRemoved();
		subloggers.Remove(logger);
	}

	public void Shutdown()
	{
		foreach (Logger sublogger in subloggers)
		{
			sublogger.OnRemoved();
		}
		subloggers.Clear();
	}

	public override void Write(LogType type, string format, params object[] args)
	{
		foreach (Logger sublogger in subloggers)
		{
			sublogger.Write(type, format, args);
		}
		if (usecache)
		{
			lock (Lock)
			{
				messagecache.Add(CreateLogMessage(type, format, args));
			}
		}
	}

	public void DisableCache()
	{
		usecache = false;
		lock (Lock)
		{
			messagecache.Clear();
		}
	}
}
