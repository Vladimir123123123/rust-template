using System;
using System.Collections.Generic;
using System.Linq;
using Oxide.Core;

public class ConsoleInput
{
	private string inputString = string.Empty;

	private readonly List<string> inputHistory = new List<string>();

	private int inputHistoryIndex;

	private float nextUpdate;

	internal readonly string[] StatusTextLeft = new string[4]
	{
		string.Empty,
		string.Empty,
		string.Empty,
		string.Empty
	};

	internal readonly string[] StatusTextRight = new string[4]
	{
		string.Empty,
		string.Empty,
		string.Empty,
		string.Empty
	};

	internal readonly ConsoleColor[] StatusTextLeftColor = new ConsoleColor[4]
	{
		ConsoleColor.White,
		ConsoleColor.White,
		ConsoleColor.White,
		ConsoleColor.White
	};

	internal readonly ConsoleColor[] StatusTextRightColor = new ConsoleColor[4]
	{
		ConsoleColor.White,
		ConsoleColor.White,
		ConsoleColor.White,
		ConsoleColor.White
	};

	public Func<string, string[]> Completion;

	public int LineWidth => Console.BufferWidth;

	public bool Valid => Console.BufferWidth > 0;

	internal event Action<string> OnInputText;

	public void ClearLine(int numLines)
	{
		Console.CursorLeft = 0;
		Console.Write(new string(' ', LineWidth * numLines));
		Console.CursorTop -= numLines;
		Console.CursorLeft = 0;
	}

	public void RedrawInputLine()
	{
		if (nextUpdate - 0.45f > Interface.Oxide.Now || LineWidth <= 0)
		{
			return;
		}
		try
		{
			Console.CursorTop++;
			for (int i = 0; i < StatusTextLeft.Length; i++)
			{
				if (!Interface.Oxide.Config.Console.ShowStatusBar)
				{
					break;
				}
				Console.CursorLeft = 0;
				Console.ForegroundColor = StatusTextLeftColor[i];
				Console.Write(StatusTextLeft[i].Substring(0, Math.Min(StatusTextLeft[i].Length, LineWidth - 1)));
				Console.ForegroundColor = StatusTextRightColor[i];
				Console.Write(StatusTextRight[i].PadRight(LineWidth));
			}
			Console.CursorTop -= ((!Interface.Oxide.Config.Console.ShowStatusBar) ? 1 : (StatusTextLeft.Length + 1));
			Console.CursorLeft = 0;
			Console.BackgroundColor = ConsoleColor.Black;
			Console.ForegroundColor = ConsoleColor.Green;
			ClearLine(1);
			if (inputString.Length == 0)
			{
				Console.ForegroundColor = ConsoleColor.Gray;
				return;
			}
			Console.Write((inputString.Length >= LineWidth - 2) ? inputString.Substring(inputString.Length - (LineWidth - 2)) : inputString);
			Console.ForegroundColor = ConsoleColor.Gray;
		}
		catch (Exception ex)
		{
			Interface.Oxide.LogException("RedrawInputLine: ", ex);
		}
	}

	public void Update()
	{
		if (!Valid)
		{
			return;
		}
		if (nextUpdate < Interface.Oxide.Now)
		{
			RedrawInputLine();
			nextUpdate = Interface.Oxide.Now + 0.5f;
		}
		try
		{
			if (!Console.KeyAvailable)
			{
				return;
			}
		}
		catch (Exception)
		{
			return;
		}
		ConsoleKeyInfo consoleKeyInfo = Console.ReadKey();
		if (consoleKeyInfo.Key != ConsoleKey.DownArrow && consoleKeyInfo.Key != ConsoleKey.UpArrow)
		{
			inputHistoryIndex = 0;
		}
		switch (consoleKeyInfo.Key)
		{
		case ConsoleKey.Enter:
		{
			ClearLine((!Interface.Oxide.Config.Console.ShowStatusBar) ? 1 : StatusTextLeft.Length);
			Console.ForegroundColor = ConsoleColor.Green;
			Console.WriteLine("> " + inputString);
			inputHistory.Insert(0, inputString);
			if (inputHistory.Count > 50)
			{
				inputHistory.RemoveRange(50, inputHistory.Count - 50);
			}
			string obj = inputString;
			inputString = string.Empty;
			this.OnInputText?.Invoke(obj);
			RedrawInputLine();
			break;
		}
		case ConsoleKey.Backspace:
			if (inputString.Length >= 1)
			{
				inputString = inputString.Substring(0, inputString.Length - 1);
				RedrawInputLine();
			}
			break;
		case ConsoleKey.Escape:
			inputString = string.Empty;
			RedrawInputLine();
			break;
		case ConsoleKey.UpArrow:
			if (inputHistory.Count != 0)
			{
				if (inputHistoryIndex < 0)
				{
					inputHistoryIndex = 0;
				}
				if (inputHistoryIndex >= inputHistory.Count - 1)
				{
					inputHistoryIndex = inputHistory.Count - 1;
					inputString = inputHistory[inputHistoryIndex];
					RedrawInputLine();
				}
				else
				{
					inputString = inputHistory[inputHistoryIndex++];
					RedrawInputLine();
				}
			}
			break;
		case ConsoleKey.DownArrow:
			if (inputHistory.Count != 0)
			{
				if (inputHistoryIndex >= inputHistory.Count - 1)
				{
					inputHistoryIndex = inputHistory.Count - 2;
				}
				inputString = ((inputHistoryIndex < 0) ? string.Empty : inputHistory[inputHistoryIndex--]);
				RedrawInputLine();
			}
			break;
		case ConsoleKey.Tab:
		{
			string[] array = Completion?.Invoke(inputString);
			if (array == null || array.Length == 0)
			{
				break;
			}
			if (array.Length > 1)
			{
				ClearLine((!Interface.Oxide.Config.Console.ShowStatusBar) ? 1 : (StatusTextLeft.Length + 1));
				Console.ForegroundColor = ConsoleColor.Yellow;
				int num = array.Max((string r) => r.Length);
				for (int i = 0; i < array.Length; i++)
				{
					string text = array[i];
					if (i > 0)
					{
						int firstDiffIndex = GetFirstDiffIndex(array[0], text);
						if (firstDiffIndex > 0 && firstDiffIndex < num)
						{
							num = firstDiffIndex;
						}
					}
					Console.WriteLine(text);
				}
				if (num > 0)
				{
					inputString = array[0].Substring(0, num);
				}
				RedrawInputLine();
			}
			else
			{
				inputString = array[0];
				RedrawInputLine();
			}
			break;
		}
		default:
			if (consoleKeyInfo.KeyChar != 0)
			{
				inputString += consoleKeyInfo.KeyChar;
				RedrawInputLine();
			}
			break;
		}
	}

	private static int GetFirstDiffIndex(string str1, string str2)
	{
		if (str1 == null || str2 == null)
		{
			return -1;
		}
		int num = Math.Min(str1.Length, str2.Length);
		for (int i = 0; i < num; i++)
		{
			if (str1[i] != str2[i])
			{
				return i;
			}
		}
		return num;
	}
}
