using System;
using System.IO;
using System.Runtime.InteropServices;
using System.Text;
using Microsoft.Win32.SafeHandles;

public class ConsoleWindow
{
	private const uint ATTACH_PARENT_PROCESS = uint.MaxValue;

	private const int STD_OUTPUT_HANDLE = -11;

	private TextWriter oldOutput;

	private Encoding oldEncoding;

	[DllImport("kernel32.dll", SetLastError = true)]
	private static extern bool AllocConsole();

	[DllImport("kernel32.dll", SetLastError = true)]
	private static extern bool AttachConsole(uint dwProcessId);

	[DllImport("kernel32.dll", SetLastError = true)]
	private static extern bool FreeConsole();

	[DllImport("kernel32.dll")]
	private static extern IntPtr GetConsoleWindow();

	[DllImport("kernel32.dll")]
	private static extern bool SetConsoleOutputCP(uint wCodePageId);

	[DllImport("kernel32.dll")]
	private static extern bool SetConsoleTitle(string lpConsoleTitle);

	[DllImport("kernel32.dll", CharSet = CharSet.Auto)]
	private static extern IntPtr GetModuleHandle(string lpModuleName);

	[DllImport("kernel32.dll", CharSet = CharSet.Ansi, ExactSpelling = true, SetLastError = true)]
	private static extern IntPtr GetProcAddress(IntPtr hModule, string procName);

	[DllImport("kernel32.dll", SetLastError = true)]
	private static extern IntPtr GetStdHandle(int nStdHandle);

	public static bool Check(bool force = false)
	{
		PlatformID platform = Environment.OSVersion.Platform;
		if ((uint)platform <= 2u)
		{
			IntPtr moduleHandle = GetModuleHandle("ntdll.dll");
			if (moduleHandle == IntPtr.Zero)
			{
				return false;
			}
			if (GetProcAddress(moduleHandle, "wine_get_version") == IntPtr.Zero)
			{
				if (!force)
				{
					return GetConsoleWindow() == IntPtr.Zero;
				}
				return true;
			}
			return false;
		}
		return false;
	}

	public void SetTitle(string title)
	{
		if (title != null)
		{
			SetConsoleTitle(title);
		}
	}

	public bool Initialize()
	{
		if (!AttachConsole(uint.MaxValue))
		{
			AllocConsole();
		}
		if (GetConsoleWindow() == IntPtr.Zero)
		{
			FreeConsole();
			return false;
		}
		oldOutput = Console.Out;
		oldEncoding = Console.OutputEncoding;
		UTF8Encoding uTF8Encoding = new UTF8Encoding(encoderShouldEmitUTF8Identifier: false);
		SetConsoleOutputCP((uint)uTF8Encoding.CodePage);
		Console.OutputEncoding = uTF8Encoding;
		Stream stream;
		try
		{
			stream = new FileStream(new SafeFileHandle(GetStdHandle(-11), ownsHandle: true), FileAccess.Write);
		}
		catch (Exception)
		{
			stream = Console.OpenStandardOutput();
		}
		Console.SetOut(new StreamWriter(stream, uTF8Encoding)
		{
			AutoFlush = true
		});
		return true;
	}

	public void Shutdown()
	{
		if (oldOutput != null)
		{
			Console.SetOut(oldOutput);
		}
		if (oldEncoding != null)
		{
			SetConsoleOutputCP((uint)oldEncoding.CodePage);
			Console.OutputEncoding = oldEncoding;
		}
		FreeConsole();
	}
}
