using System;
using System.Collections.Generic;
using System.Text;
using Oxide.Pooling;

internal class CorePoolFactory : IPoolFactory
{
	private class ProviderExpirationToken : IDisposable
	{
		private readonly Type key;

		private readonly CorePoolFactory instance;

		public ProviderExpirationToken(Type key, CorePoolFactory instance)
		{
			this.key = key;
			this.instance = instance;
		}

		~ProviderExpirationToken()
		{
			Dispose(disposing: false);
		}

		public void Dispose()
		{
			Dispose(disposing: true);
		}

		private void Dispose(bool disposing)
		{
			if (disposing)
			{
				GC.SuppressFinalize(this);
			}
			lock (instance.registeredProviders)
			{
				instance.registeredProviders.Remove(key);
			}
		}
	}

	private readonly Type arrayType = typeof(IArrayPoolProvider<>);

	private readonly Type itemType = typeof(IPoolProvider<>);

	private readonly Dictionary<Type, IPoolProvider> registeredProviders;

	public CorePoolFactory()
	{
		registeredProviders = new Dictionary<Type, IPoolProvider>
		{
			[typeof(object[])] = new BaseArrayPoolProvider<object>(256, 50),
			[typeof(StringBuilder)] = new StringPoolProvider()
		};
	}

	internal void Internal_RegisterProvider(Type type, IPoolProvider provider)
	{
		registeredProviders[type] = provider;
	}

	public IPoolProvider<T> GetProvider<T>()
	{
		lock (registeredProviders)
		{
			IPoolProvider value;
			return registeredProviders.TryGetValue(typeof(T), out value) ? ((IPoolProvider<T>)value) : null;
		}
	}

	public bool IsHandledType<T>()
	{
		lock (registeredProviders)
		{
			return registeredProviders.ContainsKey(typeof(T));
		}
	}

	public IDisposable RegisterProvider<T>(out T provider, params object[] args) where T : IPoolProvider
	{
		provider = default(T);
		Type typeFromHandle = typeof(T);
		Type type = null;
		Type[] interfaces = typeFromHandle.GetInterfaces();
		foreach (Type type2 in interfaces)
		{
			bool flag = false;
			if (type2.IsGenericType)
			{
				Type genericTypeDefinition = type2.GetGenericTypeDefinition();
				if (arrayType == genericTypeDefinition)
				{
					flag = true;
				}
				else if (!(itemType == genericTypeDefinition))
				{
					continue;
				}
				type = (flag ? type2.GetGenericArguments()[0].MakeArrayType() : type2.GetGenericArguments()[0]);
				break;
			}
		}
		if (type == null)
		{
			throw new ArgumentNullException("genericType");
		}
		lock (registeredProviders)
		{
			if (!registeredProviders.ContainsKey(type))
			{
				provider = (T)Activator.CreateInstance(typeFromHandle, args);
				registeredProviders[type] = provider;
				return new ProviderExpirationToken(type, this);
			}
			throw new ArgumentException("A provider already exists for key " + type.FullName);
		}
	}
}
