using System;
using System.Collections.Generic;
using System.Linq;
using System.Reflection;
using System.Text;
using Oxide.Core;
using Oxide.Core.Libraries;
using Oxide.Core.Libraries.Covalence;
using Oxide.Core.Logging;
using Oxide.Core.Plugins;

public class Covalence : Library
{
	private ICommandSystem cmdSystem;

	private ICovalenceProvider provider;

	private readonly Logger logger;

	public override bool IsGlobal => false;

	[LibraryProperty("Server")]
	public IServer Server { get; private set; }

	[LibraryProperty("Players")]
	public IPlayerManager Players { get; private set; }

	[LibraryProperty("Game")]
	public string Game => provider?.GameName ?? string.Empty;

	[LibraryProperty("ClientAppId")]
	public uint ClientAppId => provider?.ClientAppId ?? 0;

	[LibraryProperty("ServerAppId")]
	public uint ServerAppId => provider?.ServerAppId ?? 0;

	public string FormatText(string text)
	{
		return provider.FormatText(text);
	}

	public Covalence()
	{
		logger = Interface.Oxide.RootLogger;
	}

	internal void Initialize()
	{
		Type baseType = typeof(ICovalenceProvider);
		IEnumerable<Type> enumerable = null;
		Assembly[] assemblies = AppDomain.CurrentDomain.GetAssemblies();
		foreach (Assembly assembly in assemblies)
		{
			Type[] array = null;
			try
			{
				array = assembly.GetTypes();
			}
			catch (ReflectionTypeLoadException ex)
			{
				array = ex.Types;
			}
			catch (TypeLoadException ex2)
			{
				logger.Write(LogType.Warning, "Covalence: Type {0} could not be loaded from assembly '{1}': {2}", ex2.TypeName, assembly.FullName, ex2);
			}
			if (array != null)
			{
				enumerable = enumerable?.Concat(array) ?? array;
			}
		}
		if (enumerable == null)
		{
			logger.Write(LogType.Warning, "Covalence not available yet for this game");
			return;
		}
		List<Type> list = new List<Type>(enumerable.Where((Type t) => t != null && t.IsClass && !t.IsAbstract && t.FindInterfaces((Type m, object o) => m == baseType, null).Length == 1));
		if (list.Count == 0)
		{
			logger.Write(LogType.Warning, "Covalence not available yet for this game");
			return;
		}
		Type type;
		if (list.Count > 1)
		{
			type = list[0];
			StringBuilder stringBuilder = new StringBuilder();
			for (int j = 1; j < list.Count; j++)
			{
				if (j > 1)
				{
					stringBuilder.Append(',');
				}
				stringBuilder.Append(list[j].FullName);
			}
			logger.Write(LogType.Warning, "Multiple Covalence providers found! Using {0}. (Also found {1})", type, stringBuilder);
		}
		else
		{
			type = list[0];
		}
		try
		{
			provider = (ICovalenceProvider)Activator.CreateInstance(type);
		}
		catch (Exception ex3)
		{
			logger.Write(LogType.Warning, "Got exception when instantiating Covalence provider, Covalence will not be functional for this session.");
			logger.Write(LogType.Warning, "{0}", ex3);
			return;
		}
		Server = provider.CreateServer();
		Players = provider.CreatePlayerManager();
		cmdSystem = provider.CreateCommandSystemProvider();
		logger.Write(LogType.Info, "Using Covalence provider for game '{0}'", provider.GameName);
	}

	public void RegisterCommand(string command, Plugin plugin, CommandCallback callback)
	{
		if (cmdSystem == null)
		{
			return;
		}
		try
		{
			cmdSystem.RegisterCommand(command, plugin, callback);
		}
		catch (CommandAlreadyExistsException)
		{
			string text = plugin?.Name ?? "An unknown plugin";
			logger.Write(LogType.Error, "{0} tried to register command '{1}', this command already exists and cannot be overridden!", text, command);
		}
	}

	public void UnregisterCommand(string command, Plugin plugin)
	{
		cmdSystem?.UnregisterCommand(command, plugin);
	}
}
