using System.Collections.Generic;
using Oxide.Core;

public class Event<T1, T2, T3, T4, T5>
{
	public Event.Callback<T1, T2, T3, T4, T5> First;

	public Event.Callback<T1, T2, T3, T4, T5> Last;

	internal object Lock = new object();

	internal bool Invoking;

	internal Queue<Event.Callback<T1, T2, T3, T4, T5>> RemovedQueue = new Queue<Event.Callback<T1, T2, T3, T4, T5>>();

	public void Add(Event.Callback<T1, T2, T3, T4, T5> callback)
	{
		callback.Handler = this;
		lock (Lock)
		{
			Event.Callback<T1, T2, T3, T4, T5> last = Last;
			if (last == null)
			{
				First = callback;
				Last = callback;
			}
			else
			{
				last.Next = callback;
				callback.Previous = last;
				Last = callback;
			}
		}
	}

	public Event.Callback<T1, T2, T3, T4, T5> Add(Event.Action<T1, T2, T3, T4, T5> callback)
	{
		Event.Callback<T1, T2, T3, T4, T5> callback2 = new Event.Callback<T1, T2, T3, T4, T5>(callback);
		Add(callback2);
		return callback2;
	}

	public void Invoke()
	{
		lock (Lock)
		{
			Invoking = true;
			for (Event.Callback<T1, T2, T3, T4, T5> callback = First; callback != null; callback = callback.Next)
			{
				callback.Call(default(T1), default(T2), default(T3), default(T4), default(T5));
			}
			Invoking = false;
			Queue<Event.Callback<T1, T2, T3, T4, T5>> removedQueue = RemovedQueue;
			while (removedQueue.Count > 0)
			{
				Event.Callback<T1, T2, T3, T4, T5> callback = removedQueue.Dequeue();
				callback.Previous = null;
				callback.Next = null;
			}
		}
	}

	public void Invoke(T1 arg0)
	{
		lock (Lock)
		{
			Invoking = true;
			for (Event.Callback<T1, T2, T3, T4, T5> callback = First; callback != null; callback = callback.Next)
			{
				callback.Call(arg0, default(T2), default(T3), default(T4), default(T5));
			}
			Invoking = false;
			Queue<Event.Callback<T1, T2, T3, T4, T5>> removedQueue = RemovedQueue;
			while (removedQueue.Count > 0)
			{
				Event.Callback<T1, T2, T3, T4, T5> callback = removedQueue.Dequeue();
				callback.Previous = null;
				callback.Next = null;
			}
		}
	}

	public void Invoke(T1 arg0, T2 arg1)
	{
		lock (Lock)
		{
			Invoking = true;
			for (Event.Callback<T1, T2, T3, T4, T5> callback = First; callback != null; callback = callback.Next)
			{
				callback.Call(arg0, arg1, default(T3), default(T4), default(T5));
			}
			Invoking = false;
			Queue<Event.Callback<T1, T2, T3, T4, T5>> removedQueue = RemovedQueue;
			while (removedQueue.Count > 0)
			{
				Event.Callback<T1, T2, T3, T4, T5> callback = removedQueue.Dequeue();
				callback.Previous = null;
				callback.Next = null;
			}
		}
	}

	public void Invoke(T1 arg0, T2 arg1, T3 arg2)
	{
		lock (Lock)
		{
			Invoking = true;
			for (Event.Callback<T1, T2, T3, T4, T5> callback = First; callback != null; callback = callback.Next)
			{
				callback.Call(arg0, arg1, arg2, default(T4), default(T5));
			}
			Invoking = false;
			Queue<Event.Callback<T1, T2, T3, T4, T5>> removedQueue = RemovedQueue;
			while (removedQueue.Count > 0)
			{
				Event.Callback<T1, T2, T3, T4, T5> callback = removedQueue.Dequeue();
				callback.Previous = null;
				callback.Next = null;
			}
		}
	}

	public void Invoke(T1 arg0, T2 arg1, T3 arg2, T4 arg3)
	{
		lock (Lock)
		{
			Invoking = true;
			for (Event.Callback<T1, T2, T3, T4, T5> callback = First; callback != null; callback = callback.Next)
			{
				callback.Call(arg0, arg1, arg2, arg3, default(T5));
			}
			Invoking = false;
			Queue<Event.Callback<T1, T2, T3, T4, T5>> removedQueue = RemovedQueue;
			while (removedQueue.Count > 0)
			{
				Event.Callback<T1, T2, T3, T4, T5> callback = removedQueue.Dequeue();
				callback.Previous = null;
				callback.Next = null;
			}
		}
	}

	public void Invoke(T1 arg0, T2 arg1, T3 arg2, T4 arg3, T5 arg4)
	{
		lock (Lock)
		{
			Invoking = true;
			for (Event.Callback<T1, T2, T3, T4, T5> callback = First; callback != null; callback = callback.Next)
			{
				callback.Call(arg0, arg1, arg2, arg3, arg4);
			}
			Invoking = false;
			Queue<Event.Callback<T1, T2, T3, T4, T5>> removedQueue = RemovedQueue;
			while (removedQueue.Count > 0)
			{
				Event.Callback<T1, T2, T3, T4, T5> callback = removedQueue.Dequeue();
				callback.Previous = null;
				callback.Next = null;
			}
		}
	}
}
