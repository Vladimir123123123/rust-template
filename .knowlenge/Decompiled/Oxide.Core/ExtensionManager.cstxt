using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Reflection;
using Oxide.Core;
using Oxide.Core.Extensions;
using Oxide.Core.Libraries;
using Oxide.Core.Logging;
using Oxide.Core.Plugins;
using Oxide.Core.Plugins.Watchers;

public sealed class ExtensionManager
{
	private IList<Extension> extensions;

	private const string extSearchPattern = "Oxide.*.dll";

	private IList<PluginLoader> pluginloaders;

	private IDictionary<string, Library> libraries;

	private IList<PluginChangeWatcher> changewatchers;

	public CompoundLogger Logger { get; private set; }

	public ExtensionManager(CompoundLogger logger)
	{
		Logger = logger;
		extensions = new List<Extension>();
		pluginloaders = new List<PluginLoader>();
		libraries = new Dictionary<string, Library>();
		changewatchers = new List<PluginChangeWatcher>();
	}

	public void RegisterPluginLoader(PluginLoader loader)
	{
		pluginloaders.Add(loader);
	}

	public IEnumerable<PluginLoader> GetPluginLoaders()
	{
		return pluginloaders;
	}

	public void RegisterLibrary(string name, Library library)
	{
		if (libraries.ContainsKey(name))
		{
			Interface.Oxide.LogError("An extension tried to register an already registered library: " + name);
		}
		else
		{
			libraries[name] = library;
		}
	}

	public IEnumerable<string> GetLibraries()
	{
		return libraries.Keys;
	}

	public Library GetLibrary(string name)
	{
		if (libraries.TryGetValue(name, out var value))
		{
			return value;
		}
		return null;
	}

	public void RegisterPluginChangeWatcher(PluginChangeWatcher watcher)
	{
		changewatchers.Add(watcher);
	}

	public IEnumerable<PluginChangeWatcher> GetPluginChangeWatchers()
	{
		return changewatchers;
	}

	public void LoadExtension(string filename)
	{
		string fileNameWithoutExtension = Utility.GetFileNameWithoutExtension(filename);
		if (extensions.Any((Extension x) => x.Filename == filename))
		{
			Logger.Write(LogType.Error, "Failed to load extension '" + fileNameWithoutExtension + "': extension already loaded.");
			return;
		}
		try
		{
			Assembly assembly = null;
			Assembly[] assemblies = AppDomain.CurrentDomain.GetAssemblies();
			foreach (Assembly assembly2 in assemblies)
			{
				if (!(assembly2.GetName().Name != fileNameWithoutExtension))
				{
					assembly = assembly2;
					break;
				}
			}
			if (assembly == null)
			{
				assembly = Assembly.Load(File.ReadAllBytes(filename));
			}
			Type typeFromHandle = typeof(Extension);
			Type type = null;
			Type[] exportedTypes = assembly.GetExportedTypes();
			foreach (Type type2 in exportedTypes)
			{
				if (typeFromHandle.IsAssignableFrom(type2))
				{
					type = type2;
					break;
				}
			}
			if (type == null)
			{
				Logger.Write(LogType.Error, "Failed to load extension {0} ({1})", fileNameWithoutExtension, "Specified assembly does not implement an Extension class");
			}
			else if (Activator.CreateInstance(type, this) is Extension extension)
			{
				extension.Filename = filename;
				extension.Load();
				extensions.Add(extension);
				string text = extension.Version.ToString();
				if (extension.Branch != "master")
				{
					text = text + "@" + extension.Branch;
				}
				Logger.Write(LogType.Info, "Loaded extension " + extension.Name + " v" + text + " by " + extension.Author);
			}
		}
		catch (Exception ex)
		{
			Logger.WriteException("Failed to load extension " + fileNameWithoutExtension, ex);
			RemoteLogger.Exception("Failed to load extension " + fileNameWithoutExtension, ex);
		}
	}

	public void UnloadExtension(string filename)
	{
		string fileNameWithoutExtension = Utility.GetFileNameWithoutExtension(filename);
		Extension extension = extensions.SingleOrDefault((Extension x) => x.Filename == filename);
		if (extension == null)
		{
			Logger.Write(LogType.Error, "Failed to unload extension '" + fileNameWithoutExtension + "': extension not loaded.");
			return;
		}
		if (extension.IsCoreExtension || extension.IsGameExtension)
		{
			Logger.Write(LogType.Error, "Failed to unload extension '" + fileNameWithoutExtension + "': you may not unload Core or Game extensions.");
			return;
		}
		if (!extension.SupportsReloading)
		{
			Logger.Write(LogType.Error, "Failed to unload extension '" + fileNameWithoutExtension + "': this extension doesn't support reloading.");
			return;
		}
		extension.Unload();
		extensions.Remove(extension);
		Logger.Write(LogType.Info, $"Unloaded extension {extension.Name} v{extension.Version} by {extension.Author}");
	}

	public void ReloadExtension(string filename)
	{
		string name = Utility.GetFileNameWithoutExtension(filename);
		Extension extension = extensions.SingleOrDefault((Extension x) => Utility.GetFileNameWithoutExtension(x.Filename) == name);
		if (extension == null)
		{
			LoadExtension(filename);
			return;
		}
		if (extension.IsCoreExtension || extension.IsGameExtension)
		{
			Logger.Write(LogType.Error, "Failed to unload extension '" + name + "': you may not unload Core or Game extensions.");
			return;
		}
		if (!extension.SupportsReloading)
		{
			Logger.Write(LogType.Error, "Failed to reload extension '" + name + "': this extension doesn't support reloading.");
			return;
		}
		UnloadExtension(filename);
		LoadExtension(filename);
	}

	public void LoadAllExtensions(string directory)
	{
		List<string> list = new List<string>();
		List<string> list2 = new List<string>();
		List<string> list3 = new List<string>();
		string[] ignoredExtensions = new string[3] { "Oxide.Core.dll", "Oxide.References.dll", "Oxide.Common.dll" };
		string[] array = new string[7] { "Oxide.CSharp", "Oxide.JavaScript", "Oxide.Lua", "Oxide.MySql", "Oxide.Python", "Oxide.SQLite", "Oxide.Unity" };
		string[] array2 = new string[19]
		{
			"Oxide.Blackwake", "Oxide.Blockstorm", "Oxide.FortressCraft", "Oxide.FromTheDepths", "Oxide.GangBeasts", "Oxide.Hurtworld", "Oxide.InterstellarRift", "Oxide.MedievalEngineers", "Oxide.Nomad", "Oxide.PlanetExplorers",
			"Oxide.ReignOfKings", "Oxide.Rust", "Oxide.RustLegacy", "Oxide.SavageLands", "Oxide.SevenDaysToDie", "Oxide.SpaceEngineers", "Oxide.TheForest", "Oxide.Terraria", "Oxide.Unturned"
		};
		string[] files = Directory.GetFiles(directory, "Oxide.*.dll");
		foreach (string item in files.Where((string e) => !ignoredExtensions.Contains(Path.GetFileName(e))))
		{
			if (item.Contains("Oxide.Core.") && Array.IndexOf(files, item.Replace(".Core", "")) != -1)
			{
				Cleanup.Add(item);
				continue;
			}
			if (item.Contains("Oxide.Ext.") && Array.IndexOf(files, item.Replace(".Ext", "")) != -1)
			{
				Cleanup.Add(item);
				continue;
			}
			if (item.Contains("Oxide.Game."))
			{
				Cleanup.Add(item);
				continue;
			}
			string fileNameWithoutExtension = Path.GetFileNameWithoutExtension(item);
			if (array.Contains(fileNameWithoutExtension))
			{
				list.Add(item);
			}
			else if (array2.Contains(fileNameWithoutExtension))
			{
				list2.Add(item);
			}
			else
			{
				list3.Add(item);
			}
		}
		foreach (string item2 in list)
		{
			LoadExtension(Path.Combine(directory, item2));
		}
		foreach (string item3 in list2)
		{
			LoadExtension(Path.Combine(directory, item3));
		}
		foreach (string item4 in list3)
		{
			LoadExtension(Path.Combine(directory, item4));
		}
		Extension[] array3 = extensions.ToArray();
		foreach (Extension extension in array3)
		{
			try
			{
				extension.OnModLoad();
			}
			catch (Exception ex)
			{
				extensions.Remove(extension);
				Logger.WriteException($"Failed OnModLoad extension {extension.Name} v{extension.Version}", ex);
				RemoteLogger.Exception($"Failed OnModLoad extension {extension.Name} v{extension.Version}", ex);
			}
		}
	}

	public IEnumerable<Extension> GetAllExtensions()
	{
		return extensions;
	}

	public bool IsExtensionPresent(string name)
	{
		return extensions.Any((Extension e) => e.Name == name);
	}

	public bool IsExtensionPresent<T>() where T : Extension
	{
		return extensions.Any((Extension e) => e is T);
	}

	public Extension GetExtension(string name)
	{
		try
		{
			return extensions.Single((Extension e) => e.Name == name);
		}
		catch (Exception)
		{
			return null;
		}
	}

	public T GetExtension<T>() where T : Extension
	{
		return (T)extensions.FirstOrDefault((Extension e) => e is T);
	}
}
