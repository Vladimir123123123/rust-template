using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Oxide.Core.Libraries.Covalence;

public class Formatter
{
	private class Token
	{
		public TokenType Type;

		public object Val;

		public string Pattern;
	}

	private enum TokenType
	{
		String,
		Bold,
		Italic,
		Color,
		Size,
		CloseBold,
		CloseItalic,
		CloseColor,
		CloseSize
	}

	private class Lexer
	{
		private delegate State State();

		private string text;

		private int patternStart;

		private int tokenStart;

		private int position;

		private List<Token> tokens = new List<Token>();

		private char Current()
		{
			return text[position];
		}

		private void Next()
		{
			position++;
		}

		private void StartNewToken()
		{
			tokenStart = position;
		}

		private void StartNewPattern()
		{
			patternStart = position;
			StartNewToken();
		}

		private void Reset()
		{
			tokenStart = patternStart;
		}

		private string Token()
		{
			return text.Substring(tokenStart, position - tokenStart);
		}

		private void Add(TokenType type, object val = null)
		{
			Token item = new Token
			{
				Type = type,
				Val = val,
				Pattern = text.Substring(patternStart, position - patternStart)
			};
			tokens.Add(item);
		}

		private void WritePatternString()
		{
			if (patternStart < position)
			{
				int num = tokenStart;
				tokenStart = patternStart;
				Add(TokenType.String, Token());
				tokenStart = num;
			}
		}

		private static bool IsValidColorCode(string val)
		{
			if (val.Length == 6 || val.Length == 8)
			{
				return val.All((char c) => (c >= '0' && c <= '9') || (c >= 'a' && c <= 'f') || (c >= 'A' && c <= 'F'));
			}
			return false;
		}

		private static object ParseColor(string val)
		{
			if (!colorNames.TryGetValue(val.ToLower(), out var value) && !IsValidColorCode(val))
			{
				return null;
			}
			value = value ?? val;
			if (value.Length == 6)
			{
				value += "ff";
			}
			return value;
		}

		private static object ParseSize(string val)
		{
			if (int.TryParse(val, out var result))
			{
				return result;
			}
			return null;
		}

		private State EndTag(TokenType t)
		{
			Next();
			return delegate
			{
				if (Current() == ']')
				{
					Next();
					Add(t);
					StartNewPattern();
					return Str;
				}
				Reset();
				return Str;
			};
		}

		private State ParamTag(TokenType t, Func<string, object> parse)
		{
			Next();
			StartNewToken();
			State s = null;
			s = delegate
			{
				if (Current() != ']')
				{
					Next();
					return s;
				}
				object obj = parse(Token());
				if (obj == null)
				{
					Reset();
					return Str;
				}
				Next();
				Add(t, obj);
				StartNewPattern();
				return Str;
			};
			return s;
		}

		private State CloseTag()
		{
			switch (Current())
			{
			case 'b':
				return EndTag(TokenType.CloseBold);
			case 'i':
				return EndTag(TokenType.CloseItalic);
			case '#':
				return EndTag(TokenType.CloseColor);
			case '+':
				return EndTag(TokenType.CloseSize);
			default:
				Reset();
				return Str;
			}
		}

		private State Tag()
		{
			switch (Current())
			{
			case 'b':
				return EndTag(TokenType.Bold);
			case 'i':
				return EndTag(TokenType.Italic);
			case '#':
				return ParamTag(TokenType.Color, ParseColor);
			case '+':
				return ParamTag(TokenType.Size, ParseSize);
			case '/':
				Next();
				return CloseTag;
			default:
				Reset();
				return Str;
			}
		}

		private State Str()
		{
			if (Current() == '[')
			{
				WritePatternString();
				StartNewPattern();
				Next();
				return Tag;
			}
			Next();
			return Str;
		}

		public static List<Token> Lex(string text)
		{
			Lexer lexer = new Lexer
			{
				text = text
			};
			State state = lexer.Str;
			while (lexer.position < lexer.text.Length)
			{
				state = state();
			}
			lexer.WritePatternString();
			return lexer.tokens;
		}
	}

	private class Entry
	{
		public string Pattern;

		public Element Element;

		public Entry(string pattern, Element e)
		{
			Pattern = pattern;
			Element = e;
		}
	}

	private class Tag
	{
		public string Open;

		public string Close;

		public Tag(string open, string close)
		{
			Open = open;
			Close = close;
		}
	}

	private static readonly Dictionary<string, string> colorNames = new Dictionary<string, string>
	{
		["aqua"] = "00ffff",
		["black"] = "000000",
		["blue"] = "0000ff",
		["brown"] = "a52a2a",
		["cyan"] = "00ffff",
		["darkblue"] = "0000a0",
		["fuchsia"] = "ff00ff",
		["green"] = "008000",
		["grey"] = "808080",
		["lightblue"] = "add8e6",
		["lime"] = "00ff00",
		["magenta"] = "ff00ff",
		["maroon"] = "800000",
		["navy"] = "000080",
		["olive"] = "808000",
		["orange"] = "ffa500",
		["purple"] = "800080",
		["red"] = "ff0000",
		["silver"] = "c0c0c0",
		["teal"] = "008080",
		["white"] = "ffffff",
		["yellow"] = "ffff00"
	};

	private static readonly Dictionary<ElementType, TokenType?> closeTags = new Dictionary<ElementType, TokenType?>
	{
		[ElementType.String] = null,
		[ElementType.Bold] = TokenType.CloseBold,
		[ElementType.Italic] = TokenType.CloseItalic,
		[ElementType.Color] = TokenType.CloseColor,
		[ElementType.Size] = TokenType.CloseSize
	};

	private static List<Element> Parse(List<Token> tokens)
	{
		int num = 0;
		Stack<Entry> s = new Stack<Entry>();
		s.Push(new Entry(null, Element.Tag(ElementType.String)));
		while (num < tokens.Count)
		{
			Token t = tokens[num++];
			Action<Element> action = delegate(Element el)
			{
				s.Push(new Entry(t.Pattern, el));
			};
			Element element = s.Peek().Element;
			if (t.Type == closeTags[element.Type])
			{
				s.Pop();
				s.Peek().Element.Body.Add(element);
				continue;
			}
			switch (t.Type)
			{
			case TokenType.String:
				element.Body.Add(Element.String(t.Val));
				break;
			case TokenType.Bold:
				action(Element.Tag(ElementType.Bold));
				break;
			case TokenType.Italic:
				action(Element.Tag(ElementType.Italic));
				break;
			case TokenType.Color:
				action(Element.ParamTag(ElementType.Color, t.Val));
				break;
			case TokenType.Size:
				action(Element.ParamTag(ElementType.Size, t.Val));
				break;
			default:
				element.Body.Add(Element.String(t.Pattern));
				break;
			}
		}
		while (s.Count > 1)
		{
			Entry entry = s.Pop();
			List<Element> body = s.Peek().Element.Body;
			body.Add(Element.String(entry.Pattern));
			body.AddRange(entry.Element.Body);
		}
		return s.Pop().Element.Body;
	}

	public static List<Element> Parse(string text)
	{
		return Parse(Lexer.Lex(text));
	}

	private static Tag Translation(Element e, Dictionary<ElementType, Func<object, Tag>> translations)
	{
		if (!translations.TryGetValue(e.Type, out var value))
		{
			return new Tag("", "");
		}
		return value(e.Val);
	}

	private static string ToTreeFormat(List<Element> tree, Dictionary<ElementType, Func<object, Tag>> translations)
	{
		StringBuilder stringBuilder = new StringBuilder();
		foreach (Element item in tree)
		{
			if (item.Type == ElementType.String)
			{
				stringBuilder.Append(item.Val);
				continue;
			}
			Tag tag = Translation(item, translations);
			stringBuilder.Append(tag.Open);
			stringBuilder.Append(ToTreeFormat(item.Body, translations));
			stringBuilder.Append(tag.Close);
		}
		return stringBuilder.ToString();
	}

	private static string ToTreeFormat(string text, Dictionary<ElementType, Func<object, Tag>> translations)
	{
		return ToTreeFormat(Parse(text), translations);
	}

	private static string RGBAtoRGB(object rgba)
	{
		return rgba.ToString().Substring(0, 6);
	}

	public static string ToPlaintext(string text)
	{
		return ToTreeFormat(text, new Dictionary<ElementType, Func<object, Tag>>());
	}

	public static string ToUnity(string text)
	{
		return ToTreeFormat(text, new Dictionary<ElementType, Func<object, Tag>>
		{
			[ElementType.Bold] = (object _) => new Tag("<b>", "</b>"),
			[ElementType.Italic] = (object _) => new Tag("<i>", "</i>"),
			[ElementType.Color] = (object c) => new Tag($"<color=#{c}>", "</color>"),
			[ElementType.Size] = (object s) => new Tag($"<size={s}>", "</size>")
		});
	}

	public static string ToRustLegacy(string text)
	{
		return ToTreeFormat(text, new Dictionary<ElementType, Func<object, Tag>> { [ElementType.Color] = (object c) => new Tag("[color #" + RGBAtoRGB(c) + "]", "[color #ffffff]") });
	}

	public static string ToRoKAnd7DTD(string text)
	{
		return ToTreeFormat(text, new Dictionary<ElementType, Func<object, Tag>> { [ElementType.Color] = (object c) => new Tag("[" + RGBAtoRGB(c) + "]", "[e7e7e7]") });
	}

	public static string ToTerraria(string text)
	{
		return ToTreeFormat(text, new Dictionary<ElementType, Func<object, Tag>> { [ElementType.Color] = (object c) => new Tag("[c/" + RGBAtoRGB(c) + ":", "]") });
	}
}
