using Oxide.Core.Libraries.Covalence;

public class GenericPosition
{
	public float X;

	public float Y;

	public float Z;

	public GenericPosition()
	{
	}

	public GenericPosition(float x, float y, float z)
	{
		X = x;
		Y = y;
		Z = z;
	}

	public override bool Equals(object obj)
	{
		if (!(obj is GenericPosition))
		{
			return false;
		}
		GenericPosition genericPosition = (GenericPosition)obj;
		if (X.Equals(genericPosition.X) && Y.Equals(genericPosition.Y))
		{
			return Z.Equals(genericPosition.Z);
		}
		return false;
	}

	public static bool operator ==(GenericPosition a, GenericPosition b)
	{
		if ((object)a == b)
		{
			return true;
		}
		if ((object)a == null || (object)b == null)
		{
			return false;
		}
		if (a.X.Equals(b.X) && a.Y.Equals(b.Y))
		{
			return a.Z.Equals(b.Z);
		}
		return false;
	}

	public static bool operator !=(GenericPosition a, GenericPosition b)
	{
		return !(a == b);
	}

	public static GenericPosition operator +(GenericPosition a, GenericPosition b)
	{
		return new GenericPosition(a.X + b.X, a.Y + b.Y, a.Z + b.Z);
	}

	public static GenericPosition operator -(GenericPosition a, GenericPosition b)
	{
		return new GenericPosition(a.X - b.X, a.Y - b.Y, a.Z - b.Z);
	}

	public static GenericPosition operator *(float mult, GenericPosition a)
	{
		return new GenericPosition(a.X * mult, a.Y * mult, a.Z * mult);
	}

	public static GenericPosition operator *(GenericPosition a, float mult)
	{
		return new GenericPosition(a.X * mult, a.Y * mult, a.Z * mult);
	}

	public static GenericPosition operator /(GenericPosition a, float div)
	{
		return new GenericPosition(a.X / div, a.Y / div, a.Z / div);
	}

	public override int GetHashCode()
	{
		return X.GetHashCode() ^ (Y.GetHashCode() << 2) ^ (Z.GetHashCode() >> 2);
	}

	public override string ToString()
	{
		return $"({X}, {Y}, {Z})";
	}
}
