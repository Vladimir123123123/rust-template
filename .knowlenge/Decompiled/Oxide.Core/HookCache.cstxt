using System.Collections.Generic;
using Oxide.Core.Plugins;

public class HookCache
{
	private string NullKey = "null";

	public Dictionary<string, HookCache> _cache = new Dictionary<string, HookCache>();

	public List<HookMethod> _methods;

	public List<HookMethod> GetHookMethod(string hookName, object[] args, out HookCache cache)
	{
		if (!_cache.TryGetValue(hookName, out var value))
		{
			value = new HookCache();
			_cache.Add(hookName, value);
		}
		return value.GetHookMethod(args, 0, out cache);
	}

	public List<HookMethod> GetHookMethod(object[] args, int index, out HookCache cache)
	{
		if (args == null || index >= args.Length)
		{
			cache = this;
			return _methods;
		}
		HookCache value;
		if (args[index] == null)
		{
			if (!_cache.TryGetValue(NullKey, out value))
			{
				value = new HookCache();
				_cache.Add(NullKey, value);
			}
		}
		else if (!_cache.TryGetValue(args[index].GetType().FullName, out value))
		{
			value = new HookCache();
			_cache.Add(args[index].GetType().FullName, value);
		}
		return value.GetHookMethod(args, index + 1, out cache);
	}

	public void SetupMethods(List<HookMethod> methods)
	{
		_methods = methods;
	}
}
