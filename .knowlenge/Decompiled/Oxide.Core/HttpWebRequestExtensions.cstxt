using System;
using System.Collections.Generic;
using System.Net;
using System.Reflection;

public static class HttpWebRequestExtensions
{
	private static readonly string[] RestrictedHeaders;

	private static readonly Dictionary<string, PropertyInfo> HeaderProperties;

	static HttpWebRequestExtensions()
	{
		RestrictedHeaders = new string[14]
		{
			"Accept", "Connection", "Content-Length", "Content-Type", "Date", "Expect", "Host", "If-Modified-Since", "Keep-Alive", "Proxy-Connection",
			"Range", "Referer", "Transfer-Encoding", "User-Agent"
		};
		HeaderProperties = new Dictionary<string, PropertyInfo>(StringComparer.OrdinalIgnoreCase);
		Type typeFromHandle = typeof(HttpWebRequest);
		string[] restrictedHeaders = RestrictedHeaders;
		foreach (string text in restrictedHeaders)
		{
			HeaderProperties[text] = typeFromHandle.GetProperty(text.Replace("-", ""));
		}
	}

	public static void SetRawHeaders(this WebRequest request, Dictionary<string, string> headers)
	{
		foreach (KeyValuePair<string, string> header in headers)
		{
			SetRawHeader(request, header.Key, header.Value);
		}
	}

	public static void SetRawHeader(this WebRequest request, string name, string value)
	{
		if (HeaderProperties.ContainsKey(name))
		{
			PropertyInfo propertyInfo = HeaderProperties[name];
			if (propertyInfo.PropertyType == typeof(DateTime))
			{
				propertyInfo.SetValue(request, DateTime.Parse(value), null);
			}
			else if (propertyInfo.PropertyType == typeof(bool))
			{
				propertyInfo.SetValue(request, bool.Parse(value), null);
			}
			else if (propertyInfo.PropertyType == typeof(long))
			{
				propertyInfo.SetValue(request, long.Parse(value), null);
			}
			else
			{
				propertyInfo.SetValue(request, value, null);
			}
		}
		else
		{
			request.Headers[name] = value;
		}
	}
}
