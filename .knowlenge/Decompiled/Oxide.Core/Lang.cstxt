using System.Collections.Generic;
using System.IO;
using System.Linq;
using Newtonsoft.Json;
using Oxide.Core;
using Oxide.Core.Libraries;
using Oxide.Core.Plugins;
using ProtoBuf;

public class Lang : Library
{
	[ProtoContract(ImplicitFields = ImplicitFields.AllFields)]
	private class LangData
	{
		public string Lang = "en";

		public readonly Dictionary<string, string> UserData = new Dictionary<string, string>();
	}

	private const string defaultLang = "en";

	private readonly LangData langData;

	private readonly Dictionary<string, Dictionary<string, string>> langFiles;

	private readonly Dictionary<Plugin, Event.Callback<Plugin, PluginManager>> pluginRemovedFromManager;

	public override bool IsGlobal => false;

	public Lang()
	{
		langFiles = new Dictionary<string, Dictionary<string, string>>();
		langData = ProtoStorage.Load<LangData>(new string[1] { "oxide.lang" }) ?? new LangData();
		pluginRemovedFromManager = new Dictionary<Plugin, Event.Callback<Plugin, PluginManager>>();
	}

	[LibraryFunction("RegisterMessages")]
	public void RegisterMessages(Dictionary<string, string> messages, Plugin plugin, string lang = "en")
	{
		if (messages == null || string.IsNullOrEmpty(lang) || plugin == null)
		{
			return;
		}
		string text = $"{lang}{Path.DirectorySeparatorChar}{plugin.Name}.json";
		Dictionary<string, string> messageFile = GetMessageFile(plugin.Name, lang);
		bool flag;
		if (messageFile == null)
		{
			langFiles.Remove(text);
			AddLangFile(text, messages, plugin);
			flag = true;
		}
		else
		{
			flag = MergeMessages(messageFile, messages);
			messages = messageFile;
		}
		if (flag)
		{
			if (!Directory.Exists(Path.Combine(Interface.Oxide.LangDirectory, lang)))
			{
				Directory.CreateDirectory(Path.Combine(Interface.Oxide.LangDirectory, lang));
			}
			File.WriteAllText(Path.Combine(Interface.Oxide.LangDirectory, text), JsonConvert.SerializeObject(messages, Formatting.Indented));
		}
	}

	[LibraryFunction("GetLanguage")]
	public string GetLanguage(string userId)
	{
		if (!string.IsNullOrEmpty(userId) && langData.UserData.TryGetValue(userId, out var value))
		{
			return value;
		}
		return langData.Lang;
	}

	[LibraryFunction("GetLanguages")]
	public string[] GetLanguages(Plugin plugin = null)
	{
		List<string> list = new List<string>();
		string[] directories = Directory.GetDirectories(Interface.Oxide.LangDirectory);
		foreach (string text in directories)
		{
			if (Directory.GetFiles(text).Length != 0 && (plugin == null || (plugin != null && File.Exists(Path.Combine(text, plugin.Name + ".json")))))
			{
				list.Add(text.Substring(Interface.Oxide.LangDirectory.Length + 1));
			}
		}
		return list.ToArray();
	}

	[LibraryFunction("GetMessage")]
	public string GetMessage(string key, Plugin plugin, string userId = null)
	{
		if (string.IsNullOrEmpty(key) || plugin == null)
		{
			return key;
		}
		return GetMessageKey(key, plugin, GetLanguage(userId));
	}

	[LibraryFunction("GetMessageByLanguage")]
	public string GetMessageByLanguage(string key, Plugin plugin, string lang = "en")
	{
		if (string.IsNullOrEmpty(key) || plugin == null)
		{
			return key;
		}
		return GetMessageKey(key, plugin, lang);
	}

	[LibraryFunction("GetMessages")]
	public Dictionary<string, string> GetMessages(string lang, Plugin plugin)
	{
		if (string.IsNullOrEmpty(lang) || plugin == null)
		{
			return null;
		}
		string text = $"{lang}{Path.DirectorySeparatorChar}{plugin.Name}.json";
		if (!langFiles.TryGetValue(text, out var value))
		{
			value = GetMessageFile(plugin.Name, lang);
			if (value == null)
			{
				return null;
			}
			AddLangFile(text, value, plugin);
		}
		return value.ToDictionary((KeyValuePair<string, string> k) => k.Key, (KeyValuePair<string, string> v) => v.Value);
	}

	[LibraryFunction("GetServerLanguage")]
	public string GetServerLanguage()
	{
		return langData.Lang;
	}

	[LibraryFunction("SetLanguage")]
	public void SetLanguage(string lang, string userId)
	{
		if (!string.IsNullOrEmpty(lang) && !string.IsNullOrEmpty(userId) && (!langData.UserData.TryGetValue(userId, out var value) || !lang.Equals(value)))
		{
			langData.UserData[userId] = lang;
			SaveData();
		}
	}

	[LibraryFunction("SetServerLanguage")]
	public void SetServerLanguage(string lang)
	{
		if (!string.IsNullOrEmpty(lang) && !lang.Equals(langData.Lang))
		{
			langData.Lang = lang;
			SaveData();
		}
	}

	private void AddLangFile(string file, Dictionary<string, string> langFile, Plugin plugin)
	{
		langFiles.Add(file, langFile);
		if (plugin != null && !pluginRemovedFromManager.ContainsKey(plugin))
		{
			pluginRemovedFromManager[plugin] = plugin.OnRemovedFromManager.Add(plugin_OnRemovedFromManager);
		}
	}

	private Dictionary<string, string> GetMessageFile(string plugin, string lang = "en")
	{
		if (string.IsNullOrEmpty(plugin))
		{
			return null;
		}
		char[] invalidFileNameChars = Path.GetInvalidFileNameChars();
		foreach (char oldChar in invalidFileNameChars)
		{
			lang = lang.Replace(oldChar, '_');
		}
		string path = $"{lang}{Path.DirectorySeparatorChar}{plugin}.json";
		string path2 = Path.Combine(Interface.Oxide.LangDirectory, path);
		if (!File.Exists(path2))
		{
			return null;
		}
		return JsonConvert.DeserializeObject<Dictionary<string, string>>(File.ReadAllText(path2));
	}

	private string GetMessageKey(string key, Plugin plugin, string lang = "en")
	{
		string text = $"{lang}{Path.DirectorySeparatorChar}{plugin.Name}.json";
		if (!langFiles.TryGetValue(text, out var value))
		{
			value = GetMessageFile(plugin.Name, lang) ?? GetMessageFile(plugin.Name, langData.Lang) ?? GetMessageFile(plugin.Name);
			if (value == null)
			{
				Interface.Oxide.LogWarning("Plugin '" + plugin.Name + "' is using the Lang API but has no messages registered");
				return key;
			}
			Dictionary<string, string> messageFile = GetMessageFile(plugin.Name);
			if (messageFile != null && MergeMessages(value, messageFile) && File.Exists(Path.Combine(Interface.Oxide.LangDirectory, text)))
			{
				File.WriteAllText(Path.Combine(Interface.Oxide.LangDirectory, text), JsonConvert.SerializeObject(value, Formatting.Indented));
			}
			AddLangFile(text, value, plugin);
		}
		if (!value.TryGetValue(key, out var value2))
		{
			return key;
		}
		return value2;
	}

	private bool MergeMessages(Dictionary<string, string> existingMessages, Dictionary<string, string> messages)
	{
		bool result = false;
		foreach (KeyValuePair<string, string> message in messages)
		{
			if (!existingMessages.ContainsKey(message.Key))
			{
				existingMessages.Add(message.Key, message.Value);
				result = true;
			}
		}
		if (existingMessages.Count > 0)
		{
			string[] array = existingMessages.Keys.ToArray();
			foreach (string key in array)
			{
				if (!messages.ContainsKey(key))
				{
					existingMessages.Remove(key);
					result = true;
				}
			}
		}
		return result;
	}

	private void SaveData()
	{
		ProtoStorage.Save(langData, "oxide.lang");
	}

	private void plugin_OnRemovedFromManager(Plugin sender, PluginManager manager)
	{
		if (pluginRemovedFromManager.TryGetValue(sender, out var value))
		{
			value.Remove();
			pluginRemovedFromManager.Remove(sender);
		}
		string[] languages = GetLanguages(sender);
		foreach (string arg in languages)
		{
			langFiles.Remove($"{arg}{Path.DirectorySeparatorChar}{sender.Name}.json");
		}
	}
}
