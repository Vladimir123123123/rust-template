using System;
using System.Collections.Generic;
using System.Linq;

private class Lexer
{
	private delegate State State();

	private string text;

	private int patternStart;

	private int tokenStart;

	private int position;

	private List<Token> tokens = new List<Token>();

	private char Current()
	{
		return text[position];
	}

	private void Next()
	{
		position++;
	}

	private void StartNewToken()
	{
		tokenStart = position;
	}

	private void StartNewPattern()
	{
		patternStart = position;
		StartNewToken();
	}

	private void Reset()
	{
		tokenStart = patternStart;
	}

	private string Token()
	{
		return text.Substring(tokenStart, position - tokenStart);
	}

	private void Add(TokenType type, object val = null)
	{
		Token item = new Token
		{
			Type = type,
			Val = val,
			Pattern = text.Substring(patternStart, position - patternStart)
		};
		tokens.Add(item);
	}

	private void WritePatternString()
	{
		if (patternStart < position)
		{
			int num = tokenStart;
			tokenStart = patternStart;
			Add(TokenType.String, Token());
			tokenStart = num;
		}
	}

	private static bool IsValidColorCode(string val)
	{
		if (val.Length == 6 || val.Length == 8)
		{
			return val.All((char c) => (c >= '0' && c <= '9') || (c >= 'a' && c <= 'f') || (c >= 'A' && c <= 'F'));
		}
		return false;
	}

	private static object ParseColor(string val)
	{
		if (!colorNames.TryGetValue(val.ToLower(), out var value) && !IsValidColorCode(val))
		{
			return null;
		}
		value = value ?? val;
		if (value.Length == 6)
		{
			value += "ff";
		}
		return value;
	}

	private static object ParseSize(string val)
	{
		if (int.TryParse(val, out var result))
		{
			return result;
		}
		return null;
	}

	private State EndTag(TokenType t)
	{
		Next();
		return delegate
		{
			if (Current() == ']')
			{
				Next();
				Add(t);
				StartNewPattern();
				return Str;
			}
			Reset();
			return Str;
		};
	}

	private State ParamTag(TokenType t, Func<string, object> parse)
	{
		Next();
		StartNewToken();
		State s = null;
		s = delegate
		{
			if (Current() != ']')
			{
				Next();
				return s;
			}
			object obj = parse(Token());
			if (obj == null)
			{
				Reset();
				return Str;
			}
			Next();
			Add(t, obj);
			StartNewPattern();
			return Str;
		};
		return s;
	}

	private State CloseTag()
	{
		switch (Current())
		{
		case 'b':
			return EndTag(TokenType.CloseBold);
		case 'i':
			return EndTag(TokenType.CloseItalic);
		case '#':
			return EndTag(TokenType.CloseColor);
		case '+':
			return EndTag(TokenType.CloseSize);
		default:
			Reset();
			return Str;
		}
	}

	private State Tag()
	{
		switch (Current())
		{
		case 'b':
			return EndTag(TokenType.Bold);
		case 'i':
			return EndTag(TokenType.Italic);
		case '#':
			return ParamTag(TokenType.Color, ParseColor);
		case '+':
			return ParamTag(TokenType.Size, ParseSize);
		case '/':
			Next();
			return CloseTag;
		default:
			Reset();
			return Str;
		}
	}

	private State Str()
	{
		if (Current() == '[')
		{
			WritePatternString();
			StartNewPattern();
			Next();
			return Tag;
		}
		Next();
		return Str;
	}

	public static List<Token> Lex(string text)
	{
		Lexer lexer = new Lexer
		{
			text = text
		};
		State state = lexer.Str;
		while (lexer.position < lexer.text.Length)
		{
			state = state();
		}
		lexer.WritePatternString();
		return lexer.tokens;
	}
}
