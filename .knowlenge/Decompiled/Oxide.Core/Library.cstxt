using System;
using System.Collections.Generic;
using System.Linq;
using System.Reflection;
using Oxide.Core;
using Oxide.Core.Libraries;

public abstract class Library
{
	private IDictionary<string, MethodInfo> functions;

	private IDictionary<string, PropertyInfo> properties;

	public virtual bool IsGlobal { get; }

	public Exception LastException { get; protected set; }

	public static implicit operator bool(Library library)
	{
		return library != null;
	}

	public static bool operator !(Library library)
	{
		return !library;
	}

	public Library()
	{
		functions = new Dictionary<string, MethodInfo>();
		properties = new Dictionary<string, PropertyInfo>();
		Type type = GetType();
		MethodInfo[] methods = type.GetMethods();
		foreach (MethodInfo methodInfo in methods)
		{
			LibraryFunction libraryFunction;
			try
			{
				libraryFunction = methodInfo.GetCustomAttributes(typeof(LibraryFunction), inherit: true).SingleOrDefault() as LibraryFunction;
				if (libraryFunction == null)
				{
					continue;
				}
			}
			catch (TypeLoadException)
			{
				continue;
			}
			string text = libraryFunction.Name ?? methodInfo.Name;
			if (functions.ContainsKey(text))
			{
				Interface.Oxide.LogError(type.FullName + " library tried to register an already registered function: " + text);
			}
			else
			{
				functions[text] = methodInfo;
			}
		}
		PropertyInfo[] array = type.GetProperties();
		foreach (PropertyInfo propertyInfo in array)
		{
			LibraryProperty libraryProperty;
			try
			{
				libraryProperty = propertyInfo.GetCustomAttributes(typeof(LibraryProperty), inherit: true).SingleOrDefault() as LibraryProperty;
				if (libraryProperty == null)
				{
					continue;
				}
			}
			catch (TypeLoadException)
			{
				continue;
			}
			string text2 = libraryProperty.Name ?? propertyInfo.Name;
			if (properties.ContainsKey(text2))
			{
				Interface.Oxide.LogError("{0} library tried to register an already registered property: {1}", type.FullName, text2);
			}
			else
			{
				properties[text2] = propertyInfo;
			}
		}
	}

	public virtual void Shutdown()
	{
	}

	public IEnumerable<string> GetFunctionNames()
	{
		return functions.Keys;
	}

	public IEnumerable<string> GetPropertyNames()
	{
		return properties.Keys;
	}

	public MethodInfo GetFunction(string name)
	{
		if (!functions.TryGetValue(name, out var value))
		{
			return null;
		}
		return value;
	}

	public PropertyInfo GetProperty(string name)
	{
		if (!properties.TryGetValue(name, out var value))
		{
			return null;
		}
		return value;
	}
}
