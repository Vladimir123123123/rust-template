using System;
using System.Collections.Generic;
using Oxide.Core;
using Oxide.Core.Logging;
using Oxide.Core.RemoteConsole;

public abstract class Logger
{
	public struct LogMessage
	{
		public LogType Type;

		public string ConsoleMessage;

		public string LogfileMessage;
	}

	protected Queue<LogMessage> MessageQueue;

	private bool processImediately;

	protected Logger(bool processImediately)
	{
		this.processImediately = processImediately;
		if (!processImediately)
		{
			MessageQueue = new Queue<LogMessage>();
		}
	}

	protected LogMessage CreateLogMessage(LogType type, string format, object[] args)
	{
		LogMessage logMessage = default(LogMessage);
		logMessage.Type = type;
		logMessage.ConsoleMessage = $"[Oxide] {DateTime.Now.ToShortTimeString()} [{type}] {format}";
		logMessage.LogfileMessage = $"{DateTime.Now.ToShortTimeString()} [{type}] {format}";
		LogMessage result = logMessage;
		if (Interface.Oxide.Config.Console.MinimalistMode)
		{
			result.ConsoleMessage = format;
		}
		if (args.Length != 0)
		{
			result.ConsoleMessage = string.Format(result.ConsoleMessage, args);
			result.LogfileMessage = string.Format(result.LogfileMessage, args);
		}
		return result;
	}

	public virtual void HandleMessage(string message, string stackTrace, LogType logType)
	{
		if (message.ToLower().Contains("[chat]"))
		{
			logType = LogType.Chat;
		}
		ConsoleColor color;
		string type;
		switch (logType)
		{
		case LogType.Chat:
			color = ConsoleColor.Green;
			type = "Chat";
			break;
		case LogType.Error:
			color = ConsoleColor.Red;
			type = "Error";
			break;
		case LogType.Warning:
			color = ConsoleColor.Yellow;
			type = "Warning";
			break;
		default:
			color = ConsoleColor.Gray;
			type = "Generic";
			break;
		}
		Interface.Oxide.ServerConsole.AddMessage(message, color);
		Interface.Oxide.RemoteConsole.SendMessage(new RemoteMessage
		{
			Message = message,
			Identifier = -1,
			Type = type,
			Stacktrace = stackTrace
		});
	}

	public virtual void Write(LogType type, string format, params object[] args)
	{
		LogMessage message = CreateLogMessage(type, format, args);
		Write(message);
	}

	internal virtual void Write(LogMessage message)
	{
		if (processImediately)
		{
			ProcessMessage(message);
		}
		else
		{
			MessageQueue.Enqueue(message);
		}
	}

	protected virtual void ProcessMessage(LogMessage message)
	{
	}

	public virtual void WriteException(string message, Exception ex)
	{
		string text = ExceptionHandler.FormatException(ex);
		if (text != null)
		{
			Write(LogType.Error, message + Environment.NewLine + text);
			return;
		}
		Exception ex2 = ex;
		while (ex.InnerException != null)
		{
			ex = ex.InnerException;
		}
		if (ex2.GetType() != ex.GetType())
		{
			Write(LogType.Error, "ExType: {0}", ex2.GetType().Name);
		}
		Write(LogType.Error, message + " (" + ex.GetType().Name + ": " + ex.Message + ")\n" + ex.StackTrace);
	}

	public virtual void OnRemoved()
	{
	}
}
