using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Net;
using Newtonsoft.Json;
using Oxide.Core.Configuration;

public class OxideConfig : ConfigFile
{
	public class OxideOptions
	{
		public bool Modded { get; set; } = true;

		public bool PluginWatchers { get; set; } = true;

		public DefaultGroups DefaultGroups { get; set; } = new DefaultGroups();

		public string WebRequestIP { get; set; } = "0.0.0.0";
	}

	public class CommandOptions
	{
		[JsonProperty(PropertyName = "Chat command prefixes")]
		public List<string> ChatPrefix { get; set; } = new List<string> { "/" };
	}

	public class CompilerOptions
	{
		[JsonProperty(PropertyName = "Shutdown on idle")]
		public bool IdleShutdown { get; set; } = true;

		[JsonProperty(PropertyName = "Seconds before idle")]
		public int IdleTimeout { get; set; } = 60;

		[JsonProperty(PropertyName = "Preprocessor directives")]
		public List<string> PreprocessorDirectives { get; set; } = new List<string>();

		[JsonProperty(PropertyName = "Enable Publicizer")]
		public bool? Publicize { get; set; } = true;

		[JsonProperty(PropertyName = "Ignored Publicizer References")]
		public List<string> IgnoredPublicizerReferences { get; set; } = new List<string>();
	}

	[JsonObject]
	public class DefaultGroups : IEnumerable<string>, IEnumerable
	{
		public string Players { get; set; } = "default";

		public string Administrators { get; set; } = "admin";

		public IEnumerator<string> GetEnumerator()
		{
			yield return Players;
			yield return Administrators;
		}

		IEnumerator IEnumerable.GetEnumerator()
		{
			return GetEnumerator();
		}
	}

	public class OxideConsole
	{
		public bool Enabled { get; set; } = true;

		public bool MinimalistMode { get; set; } = true;

		public bool ShowStatusBar { get; set; } = true;
	}

	public class OxideRcon
	{
		public bool Enabled { get; set; }

		public int Port { get; set; } = 25580;

		public string Password { get; set; } = string.Empty;

		public string ChatPrefix { get; set; } = "[Server Console]";
	}

	public OxideOptions Options { get; set; }

	[JsonProperty(PropertyName = "Commands")]
	public CommandOptions Commands { get; set; }

	[JsonProperty(PropertyName = "Plugin Compiler")]
	public CompilerOptions Compiler { get; set; }

	[JsonProperty(PropertyName = "OxideConsole")]
	public OxideConsole Console { get; set; }

	[JsonProperty(PropertyName = "OxideRcon")]
	public OxideRcon Rcon { get; set; }

	public OxideConfig(string filename)
		: base(filename)
	{
		InitializeDefaultValues();
	}

	public override void Load(string filename = null)
	{
		base.Load(filename);
		if (InitializeDefaultValues())
		{
			Save();
		}
		if (Compiler.PreprocessorDirectives.Count > 0)
		{
			Compiler.PreprocessorDirectives = Compiler.PreprocessorDirectives.Select((string s) => s.ToUpperInvariant().Replace(" ", "_")).Distinct().ToList();
		}
		Commands.ChatPrefix = Commands.ChatPrefix.Distinct().ToList();
	}

	private bool InitializeDefaultValues()
	{
		bool result = false;
		if (Options == null)
		{
			Options = new OxideOptions();
			result = true;
		}
		if (Commands == null)
		{
			Commands = new CommandOptions();
			result = true;
		}
		if (Commands.ChatPrefix == null)
		{
			Commands.ChatPrefix = new List<string> { "/" };
			result = true;
		}
		if (Commands.ChatPrefix.Count == 0)
		{
			Commands.ChatPrefix.Add("/");
			result = true;
		}
		if (Options.DefaultGroups == null)
		{
			Options.DefaultGroups = new DefaultGroups();
			result = true;
		}
		if (string.IsNullOrEmpty(Options.WebRequestIP) || !IPAddress.TryParse(Options.WebRequestIP, out var _))
		{
			Options.WebRequestIP = "0.0.0.0";
			result = true;
		}
		if (Console == null)
		{
			Console = new OxideConsole();
			result = true;
		}
		if (Rcon == null)
		{
			Rcon = new OxideRcon();
			result = true;
		}
		if (Compiler == null)
		{
			Compiler = new CompilerOptions();
			result = true;
		}
		if (Compiler.PreprocessorDirectives == null)
		{
			Compiler.PreprocessorDirectives = new List<string>();
			result = true;
		}
		if (!Compiler.Publicize.HasValue)
		{
			Compiler.Publicize = true;
			result = true;
		}
		if (Compiler.IgnoredPublicizerReferences == null)
		{
			Compiler.IgnoredPublicizerReferences = new List<string>();
			result = true;
		}
		return result;
	}
}
