using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using Oxide.Core;
using Oxide.Core.Libraries;
using Oxide.Core.Plugins;

public abstract class PluginLoader
{
	public Dictionary<string, Plugin> LoadedPlugins = new Dictionary<string, Plugin>();

	public ConcurrentHashSet<string> LoadingPlugins { get; } = new ConcurrentHashSet<string>();

	public Dictionary<string, string> PluginErrors { get; } = new Dictionary<string, string>();

	public virtual Type[] CorePlugins { get; } = new Type[0];

	public virtual string FileExtension { get; }

	public virtual IEnumerable<string> ScanDirectory(string directory)
	{
		if (FileExtension == null || !Directory.Exists(directory))
		{
			yield break;
		}
		IEnumerable<FileInfo> enumerable = from f in new DirectoryInfo(directory).GetFiles("*" + FileExtension)
			where (f.Attributes & FileAttributes.Hidden) != FileAttributes.Hidden
			select f;
		foreach (FileInfo item in enumerable)
		{
			yield return Utility.GetFileNameWithoutExtension(item.FullName);
		}
	}

	public virtual Plugin Load(string directory, string name)
	{
		if (LoadingPlugins.Contains(name))
		{
			Interface.Oxide.LogDebug("Load requested for plugin which is already loading: {0}", name);
			return null;
		}
		string filename = Path.Combine(directory, name + FileExtension);
		Plugin plugin = GetPlugin(filename);
		LoadingPlugins.Add(plugin.Name);
		Interface.Oxide.NextTick(delegate
		{
			LoadPlugin(plugin);
		});
		return null;
	}

	protected virtual Plugin GetPlugin(string filename)
	{
		return null;
	}

	protected void LoadPlugin(Plugin plugin, bool waitingForAccess = false)
	{
		if (!File.Exists(plugin.Filename))
		{
			LoadingPlugins.Remove(plugin.Name);
			Interface.Oxide.LogWarning("Script no longer exists: {0}", plugin.Name);
			return;
		}
		try
		{
			plugin.Load();
			Interface.Oxide.UnloadPlugin(plugin.Name);
			LoadingPlugins.Remove(plugin.Name);
			Interface.Oxide.PluginLoaded(plugin);
		}
		catch (IOException)
		{
			if (!waitingForAccess)
			{
				Interface.Oxide.LogWarning("Waiting for another application to stop using script: {0}", plugin.Name);
			}
			Interface.Oxide.GetLibrary<Timer>().Once(0.5f, delegate
			{
				LoadPlugin(plugin, waitingForAccess: true);
			});
		}
		catch (Exception ex2)
		{
			LoadingPlugins.Remove(plugin.Name);
			Interface.Oxide.LogException("Failed to load plugin " + plugin.Name, ex2);
		}
	}

	public virtual void Reload(string directory, string name)
	{
		Interface.Oxide.UnloadPlugin(name);
		Interface.Oxide.LoadPlugin(name);
	}

	public virtual void Unloading(Plugin plugin)
	{
	}
}
