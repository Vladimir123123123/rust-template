using System;
using System.Collections.Generic;
using System.Linq;
using System.Reflection;
using Oxide.Core.Extensions;
using Oxide.Core.Plugins;

public class Report
{
	public string message;

	public string level;

	public string culprit;

	public string platform = "csharp";

	public string release = OxideMod.Version.ToString();

	public Dictionary<string, string> tags = Tags;

	public Dictionary<string, string> modules;

	public Dictionary<string, string> extra;

	private Dictionary<string, string> headers;

	public Report(string level, string culprit, string message, string exception = null)
	{
		headers = BuildHeaders();
		this.level = level;
		this.message = ((message.Length > 1000) ? message.Substring(0, 1000) : message);
		this.culprit = culprit;
		modules = new Dictionary<string, string>();
		foreach (Extension allExtension in Interface.Oxide.GetAllExtensions())
		{
			modules[allExtension.GetType().Assembly.GetName().Name] = allExtension.Version.ToString();
		}
		if (exception == null)
		{
			return;
		}
		extra = new Dictionary<string, string>();
		string[] array = exception.Split(new char[1] { '\n' }).Take(31).ToArray();
		for (int i = 0; i < array.Length; i++)
		{
			string text = array[i].Trim(' ', '\r', '\n').Replace('\t', ' ');
			if (text.Length > 0)
			{
				extra["line_" + i.ToString("00")] = text;
			}
		}
	}

	public void DetectModules(Assembly assembly)
	{
		if (!(assembly.GetTypes().FirstOrDefault((Type t) => t.BaseType == typeof(Extension)) == null))
		{
			return;
		}
		Type type = assembly.GetTypes().FirstOrDefault((Type t) => IsTypeDerivedFrom(t, typeof(Plugin)));
		if (type != null)
		{
			Plugin plugin = Interface.Oxide.RootPluginManager.GetPlugin(type.Name);
			if (plugin != null)
			{
				modules["Plugins." + plugin.Name] = plugin.Version.ToString();
			}
		}
	}

	public void DetectModules(string[] stackTrace)
	{
		foreach (string text in stackTrace)
		{
			if (text.StartsWith("Oxide.Plugins.PluginCompiler") && text.Contains("+"))
			{
				string name = text.Split(new char[1] { '+' })[0];
				Plugin plugin = Interface.Oxide.RootPluginManager.GetPlugin(name);
				if (plugin != null)
				{
					modules["Plugins." + plugin.Name] = plugin.Version.ToString();
				}
				break;
			}
		}
	}

	private static bool IsTypeDerivedFrom(Type type, Type baseType)
	{
		while (type != null && type != baseType)
		{
			if ((type = type.BaseType) == baseType)
			{
				return true;
			}
		}
		return false;
	}
}
