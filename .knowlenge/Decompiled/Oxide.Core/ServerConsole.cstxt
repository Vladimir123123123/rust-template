using System;
using System.Linq;
using Oxide.Core;
using Oxide.Core.ServerConsole;

public class ServerConsole
{
	private readonly ConsoleWindow console = new ConsoleWindow();

	private readonly ConsoleInput input = new ConsoleInput();

	private bool init;

	private float nextUpdate;

	private float nextTitleUpdate;

	public Func<string> Title;

	public Func<string> Status1Left;

	public Func<string> Status1Right;

	public Func<string> Status2Left;

	public Func<string> Status2Right;

	public Func<string> Status3Left;

	public Func<string> Status3Right;

	public Func<string, string[]> Completion
	{
		get
		{
			return input.Completion;
		}
		set
		{
			input.Completion = value;
		}
	}

	public ConsoleColor Status1LeftColor
	{
		get
		{
			return input.StatusTextLeftColor[1];
		}
		set
		{
			input.StatusTextLeftColor[1] = value;
		}
	}

	public ConsoleColor Status1RightColor
	{
		get
		{
			return input.StatusTextRightColor[1];
		}
		set
		{
			input.StatusTextRightColor[1] = value;
		}
	}

	public ConsoleColor Status2LeftColor
	{
		get
		{
			return input.StatusTextLeftColor[2];
		}
		set
		{
			input.StatusTextLeftColor[2] = value;
		}
	}

	public ConsoleColor Status2RightColor
	{
		get
		{
			return input.StatusTextRightColor[2];
		}
		set
		{
			input.StatusTextRightColor[2] = value;
		}
	}

	public ConsoleColor Status3RightColor
	{
		get
		{
			return input.StatusTextRightColor[3];
		}
		set
		{
			input.StatusTextRightColor[3] = value;
		}
	}

	public ConsoleColor Status3LeftColor
	{
		get
		{
			return input.StatusTextLeftColor[3];
		}
		set
		{
			input.StatusTextLeftColor[3] = value;
		}
	}

	private string title => Title?.Invoke();

	private string status1Left => GetStatusValue(Status1Left);

	private string status1Right => GetStatusValue(Status1Right).PadLeft(input.LineWidth - 1);

	private string status2Left => GetStatusValue(Status2Left);

	private string status2Right => GetStatusValue(Status2Right).PadLeft(input.LineWidth - 1);

	private string status3Left => GetStatusValue(Status3Left);

	private string status3Right => GetStatusValue(Status3Right).PadLeft(input.LineWidth - 1);

	public event Action<string> Input;

	private static string GetStatusValue(Func<string> status)
	{
		if (status == null)
		{
			return "";
		}
		return status() ?? string.Empty;
	}

	private static string GetStatusRight(int leftLength, string right)
	{
		if (leftLength < right.Length)
		{
			return right.Substring(leftLength);
		}
		return string.Empty;
	}

	public void AddMessage(string message, ConsoleColor color = ConsoleColor.Gray)
	{
		Console.ForegroundColor = color;
		int num = message.Split(new char[1] { '\n' }).Aggregate(0, (int sum, string line) => sum + (int)Math.Ceiling((double)line.Length / (double)Console.BufferWidth));
		input.ClearLine((Interface.Oxide.Config.Console.ShowStatusBar ? input.StatusTextLeft.Length : 0) + num);
		Console.WriteLine(message);
		input.RedrawInputLine();
		Console.ForegroundColor = ConsoleColor.Gray;
	}

	public void OnDisable()
	{
		if (init)
		{
			input.OnInputText -= OnInputText;
			console.Shutdown();
		}
	}

	public void OnEnable()
	{
		if (console.Initialize())
		{
			init = true;
			input.OnInputText += OnInputText;
			input.ClearLine(1);
			input.ClearLine(Console.WindowHeight);
			for (int i = 0; i < Console.WindowHeight; i++)
			{
				Console.WriteLine();
			}
		}
	}

	private void OnInputText(string obj)
	{
		try
		{
			this.Input?.Invoke(obj);
		}
		catch (Exception ex)
		{
			Interface.Oxide.LogException("OnInputText: ", ex);
		}
	}

	public static void PrintColored(params object[] objects)
	{
		if (Interface.Oxide.ServerConsole == null)
		{
			return;
		}
		Interface.Oxide.ServerConsole.input.ClearLine((!Interface.Oxide.Config.Console.ShowStatusBar) ? 1 : Interface.Oxide.ServerConsole.input.StatusTextLeft.Length);
		for (int i = 0; i < objects.Length; i++)
		{
			if (i % 2 != 0)
			{
				Console.Write((string)objects[i]);
			}
			else
			{
				Console.ForegroundColor = (ConsoleColor)(int)objects[i];
			}
		}
		if (Console.CursorLeft != 0)
		{
			Console.CursorTop++;
		}
		Interface.Oxide.ServerConsole.input.RedrawInputLine();
	}

	public void Update()
	{
		if (init)
		{
			if (Interface.Oxide.Config.Console.ShowStatusBar)
			{
				UpdateStatus();
			}
			input.Update();
			if (!(nextTitleUpdate > Interface.Oxide.Now))
			{
				nextTitleUpdate = Interface.Oxide.Now + 1f;
				console.SetTitle(title);
			}
		}
	}

	private void UpdateStatus()
	{
		if (!(nextUpdate > Interface.Oxide.Now))
		{
			nextUpdate = Interface.Oxide.Now + 0.66f;
			if (input.Valid)
			{
				string text = status1Left;
				string text2 = status2Left;
				string text3 = status3Left;
				input.StatusTextLeft[1] = text;
				input.StatusTextLeft[2] = text2;
				input.StatusTextLeft[3] = text3;
				input.StatusTextRight[1] = GetStatusRight(text.Length, status1Right);
				input.StatusTextRight[2] = GetStatusRight(text2.Length, status2Right);
				input.StatusTextRight[3] = GetStatusRight(text3.Length, status3Right);
			}
		}
	}
}
