using System;
using System.Collections;
using System.Collections.Generic;
using System.Data;
using System.Linq;
using System.Reflection;
using System.Text;
using System.Text.RegularExpressions;
using Oxide.Core.Database;

public class Sql
{
	public class SqlJoinClause
	{
		private readonly Sql _sql;

		public SqlJoinClause(Sql sql)
		{
			_sql = sql;
		}

		public Sql On(string onClause, params object[] args)
		{
			return _sql.Append("ON " + onClause, args);
		}
	}

	private static readonly Regex Filter = new Regex("LOAD\\s*DATA|INTO\\s*(OUTFILE|DUMPFILE)|LOAD_FILE", RegexOptions.IgnoreCase | RegexOptions.Compiled);

	private static readonly Regex RxParams = new Regex("(?<!@)@\\w+", RegexOptions.Compiled);

	private readonly object[] _args;

	private readonly string _sql;

	private object[] _argsFinal;

	private Sql _rhs;

	private string _sqlFinal;

	public static Sql Builder => new Sql();

	public string SQL
	{
		get
		{
			Build();
			return _sqlFinal;
		}
	}

	public object[] Arguments
	{
		get
		{
			Build();
			return _argsFinal;
		}
	}

	public Sql()
	{
	}

	public Sql(string sql, params object[] args)
	{
		_sql = sql;
		_args = args;
	}

	private void Build()
	{
		if (_sqlFinal == null)
		{
			StringBuilder stringBuilder = new StringBuilder();
			List<object> list = new List<object>();
			Build(stringBuilder, list, null);
			string text = stringBuilder.ToString();
			if (Filter.IsMatch(text))
			{
				throw new Exception("Commands LOAD DATA, LOAD_FILE, OUTFILE, DUMPFILE not allowed.");
			}
			_sqlFinal = text;
			_argsFinal = list.ToArray();
		}
	}

	public Sql Append(Sql sql)
	{
		if (_rhs != null)
		{
			_rhs.Append(sql);
		}
		else
		{
			_rhs = sql;
		}
		return this;
	}

	public Sql Append(string sql, params object[] args)
	{
		return Append(new Sql(sql, args));
	}

	private static bool Is(Sql sql, string sqltype)
	{
		if (sql != null && sql._sql != null)
		{
			return sql._sql.StartsWith(sqltype, StringComparison.InvariantCultureIgnoreCase);
		}
		return false;
	}

	private void Build(StringBuilder sb, List<object> args, Sql lhs)
	{
		if (!string.IsNullOrEmpty(_sql))
		{
			if (sb.Length > 0)
			{
				sb.Append("\n");
			}
			string text = ProcessParams(_sql, _args, args);
			if (Is(lhs, "WHERE ") && Is(this, "WHERE "))
			{
				text = "AND " + text.Substring(6);
			}
			if (Is(lhs, "ORDER BY ") && Is(this, "ORDER BY "))
			{
				text = ", " + text.Substring(9);
			}
			sb.Append(text);
		}
		_rhs?.Build(sb, args, this);
	}

	public Sql Where(string sql, params object[] args)
	{
		return Append(new Sql("WHERE (" + sql + ")", args));
	}

	public Sql OrderBy(params object[] columns)
	{
		return Append(new Sql("ORDER BY " + string.Join(", ", columns.Select((object x) => x.ToString()).ToArray())));
	}

	public Sql Select(params object[] columns)
	{
		return Append(new Sql("SELECT " + string.Join(", ", columns.Select((object x) => x.ToString()).ToArray())));
	}

	public Sql From(params object[] tables)
	{
		return Append(new Sql("FROM " + string.Join(", ", tables.Select((object x) => x.ToString()).ToArray())));
	}

	public Sql GroupBy(params object[] columns)
	{
		return Append(new Sql("GROUP BY " + string.Join(", ", columns.Select((object x) => x.ToString()).ToArray())));
	}

	private SqlJoinClause Join(string joinType, string table)
	{
		return new SqlJoinClause(Append(new Sql(joinType + table)));
	}

	public SqlJoinClause InnerJoin(string table)
	{
		return Join("INNER JOIN ", table);
	}

	public SqlJoinClause LeftJoin(string table)
	{
		return Join("LEFT JOIN ", table);
	}

	public static string ProcessParams(string sql, object[] argsSrc, List<object> argsDest)
	{
		return RxParams.Replace(sql, delegate(Match m)
		{
			string text = m.Value.Substring(1);
			object obj;
			if (int.TryParse(text, out var result))
			{
				if (result < 0 || result >= argsSrc.Length)
				{
					throw new ArgumentOutOfRangeException($"Parameter '@{result}' specified but only {argsSrc.Length} parameters supplied (in `{sql}`)");
				}
				obj = argsSrc[result];
			}
			else
			{
				bool flag = false;
				obj = null;
				object[] array = argsSrc;
				foreach (object obj2 in array)
				{
					PropertyInfo property = obj2.GetType().GetProperty(text);
					if (!(property == null))
					{
						obj = property.GetValue(obj2, null);
						flag = true;
						break;
					}
				}
				if (!flag)
				{
					throw new ArgumentException("Parameter '@" + text + "' specified but none of the passed arguments have a property with this name (in '" + sql + "')");
				}
			}
			if (obj is IEnumerable && !(obj is string) && !(obj is byte[]))
			{
				StringBuilder stringBuilder = new StringBuilder();
				foreach (object item in obj as IEnumerable)
				{
					stringBuilder.Append(((stringBuilder.Length == 0) ? "@" : ",@") + argsDest.Count);
					argsDest.Add(item);
				}
				return stringBuilder.ToString();
			}
			argsDest.Add(obj);
			return "@" + (argsDest.Count - 1);
		});
	}

	public static void AddParams(IDbCommand cmd, object[] items, string parameterPrefix)
	{
		foreach (object item in items)
		{
			AddParam(cmd, item, "@");
		}
	}

	public static void AddParam(IDbCommand cmd, object item, string parameterPrefix)
	{
		if (item is IDbDataParameter dbDataParameter)
		{
			dbDataParameter.ParameterName = $"{parameterPrefix}{cmd.Parameters.Count}";
			cmd.Parameters.Add(dbDataParameter);
			return;
		}
		IDbDataParameter dbDataParameter2 = cmd.CreateParameter();
		dbDataParameter2.ParameterName = $"{parameterPrefix}{cmd.Parameters.Count}";
		if (item == null)
		{
			dbDataParameter2.Value = DBNull.Value;
		}
		else
		{
			Type type = item.GetType();
			if (type.IsEnum)
			{
				dbDataParameter2.Value = (int)item;
			}
			else if (type == typeof(Guid))
			{
				dbDataParameter2.Value = item.ToString();
				dbDataParameter2.DbType = DbType.String;
				dbDataParameter2.Size = 40;
			}
			else if (type == typeof(string))
			{
				dbDataParameter2.Size = Math.Max(((string)item).Length + 1, 4000);
				dbDataParameter2.Value = item;
			}
			else if (type == typeof(bool))
			{
				dbDataParameter2.Value = (((bool)item) ? 1 : 0);
			}
			else
			{
				dbDataParameter2.Value = item;
			}
		}
		cmd.Parameters.Add(dbDataParameter2);
	}
}
