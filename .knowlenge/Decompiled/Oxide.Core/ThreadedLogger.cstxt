using System.Threading;
using Oxide.Core.Logging;

public abstract class ThreadedLogger : Logger
{
	private AutoResetEvent waitevent;

	private bool exit;

	private object syncroot;

	private Thread workerthread;

	public ThreadedLogger()
		: base(processImediately: false)
	{
		waitevent = new AutoResetEvent(initialState: false);
		exit = false;
		syncroot = new object();
		workerthread = new Thread(Worker)
		{
			IsBackground = true
		};
		workerthread.Start();
	}

	~ThreadedLogger()
	{
		OnRemoved();
	}

	public override void OnRemoved()
	{
		if (!exit)
		{
			exit = true;
			waitevent.Set();
			workerthread.Join();
		}
	}

	internal override void Write(LogMessage msg)
	{
		lock (syncroot)
		{
			base.Write(msg);
		}
		waitevent.Set();
	}

	protected abstract void BeginBatchProcess();

	protected abstract void FinishBatchProcess();

	private void Worker()
	{
		while (!exit)
		{
			waitevent.WaitOne();
			lock (syncroot)
			{
				if (MessageQueue.Count <= 0)
				{
					continue;
				}
				BeginBatchProcess();
				try
				{
					while (MessageQueue.Count > 0)
					{
						LogMessage message = MessageQueue.Dequeue();
						ProcessMessage(message);
					}
				}
				finally
				{
					FinishBatchProcess();
				}
			}
		}
	}
}
