using System;
using System.Diagnostics;
using System.IO;
using System.Linq;
using System.Net;
using System.Net.NetworkInformation;
using System.Net.Sockets;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Oxide.Core;

public class Utility
{
	public static void DatafileToProto<T>(string name, bool deleteAfter = true)
	{
		DataFileSystem dataFileSystem = Interface.Oxide.DataFileSystem;
		if (!dataFileSystem.ExistsDatafile(name))
		{
			return;
		}
		if (ProtoStorage.Exists(name))
		{
			Interface.Oxide.LogWarning("Failed to import JSON file: {0} already exists.", name);
			return;
		}
		try
		{
			ProtoStorage.Save(dataFileSystem.ReadObject<T>(name), name);
			if (deleteAfter)
			{
				File.Delete(dataFileSystem.GetFile(name).Filename);
			}
		}
		catch (Exception ex)
		{
			Interface.Oxide.LogException("Failed to convert datafile to proto storage: " + name, ex);
		}
	}

	public static void PrintCallStack()
	{
		Interface.Oxide.LogDebug("CallStack:{0}{1}", Environment.NewLine, new StackTrace(1, fNeedFileInfo: true));
	}

	public static string FormatBytes(double bytes)
	{
		string arg;
		if (bytes > 1048576.0)
		{
			arg = "mb";
			bytes /= 1048576.0;
		}
		else if (bytes > 1024.0)
		{
			arg = "kb";
			bytes /= 1024.0;
		}
		else
		{
			arg = "b";
		}
		return $"{bytes:0}{arg}";
	}

	public static string GetDirectoryName(string name)
	{
		try
		{
			name = name.Replace(Path.AltDirectorySeparatorChar, Path.DirectorySeparatorChar);
			return name.Substring(0, name.LastIndexOf(Path.DirectorySeparatorChar));
		}
		catch
		{
			return null;
		}
	}

	public static string GetFileNameWithoutExtension(string value)
	{
		int num = value.Length - 1;
		for (int num2 = num; num2 >= 1; num2--)
		{
			if (value[num2] == '.')
			{
				num = num2 - 1;
				break;
			}
		}
		int num3 = 0;
		for (int num4 = num - 1; num4 >= 0; num4--)
		{
			char c = value[num4];
			if (c == '/' || c == '\\')
			{
				num3 = num4 + 1;
				break;
			}
		}
		return value.Substring(num3, num - num3 + 1);
	}

	public static string CleanPath(string path)
	{
		return path?.Replace('\\', Path.DirectorySeparatorChar).Replace('/', Path.DirectorySeparatorChar);
	}

	public static T ConvertFromJson<T>(string jsonstr)
	{
		return JsonConvert.DeserializeObject<T>(jsonstr);
	}

	public static string ConvertToJson(object obj, bool indented = false)
	{
		return JsonConvert.SerializeObject(obj, indented ? Formatting.Indented : Formatting.None);
	}

	public static IPAddress GetLocalIP()
	{
		UnicastIPAddressInformation unicastIPAddressInformation = null;
		NetworkInterface[] allNetworkInterfaces = NetworkInterface.GetAllNetworkInterfaces();
		foreach (NetworkInterface networkInterface in allNetworkInterfaces)
		{
			if (networkInterface.OperationalStatus != OperationalStatus.Up)
			{
				continue;
			}
			IPInterfaceProperties iPProperties = networkInterface.GetIPProperties();
			if (iPProperties.GatewayAddresses.Count == 0 || iPProperties.GatewayAddresses[0].Address.Equals(IPAddress.Parse("0.0.0.0")))
			{
				continue;
			}
			foreach (UnicastIPAddressInformation unicastAddress in iPProperties.UnicastAddresses)
			{
				if (unicastAddress.Address.AddressFamily != AddressFamily.InterNetwork || IPAddress.IsLoopback(unicastAddress.Address))
				{
					continue;
				}
				if (!unicastAddress.IsDnsEligible)
				{
					if (unicastIPAddressInformation == null)
					{
						unicastIPAddressInformation = unicastAddress;
					}
					continue;
				}
				try
				{
					if (unicastAddress.PrefixOrigin != PrefixOrigin.Dhcp)
					{
						if (unicastIPAddressInformation == null || !unicastIPAddressInformation.IsDnsEligible)
						{
							unicastIPAddressInformation = unicastAddress;
						}
						continue;
					}
				}
				catch
				{
				}
				return unicastAddress.Address;
			}
		}
		return unicastIPAddressInformation?.Address;
	}

	public static bool IsLocalIP(string ipAddress)
	{
		string[] array = ipAddress.Split(new string[1] { "." }, StringSplitOptions.RemoveEmptyEntries);
		int[] array2 = new int[4]
		{
			int.Parse(array[0]),
			int.Parse(array[1]),
			int.Parse(array[2]),
			int.Parse(array[3])
		};
		if (array2[0] != 0 && array2[0] != 10 && (array2[0] != 100 || array2[1] != 64) && array2[0] != 127 && (array2[0] != 192 || array2[1] != 168))
		{
			if (array2[0] == 172 && array2[1] >= 16)
			{
				return array2[1] <= 31;
			}
			return false;
		}
		return true;
	}

	public static bool ValidateIPv4(string ipAddress)
	{
		if (!string.IsNullOrEmpty(ipAddress.Trim()))
		{
			string[] array = ipAddress.Replace("\"", string.Empty).Trim().Split(new char[1] { '.' });
			byte result;
			if (array.Length == 4)
			{
				return array.All((string r) => byte.TryParse(r, out result));
			}
			return false;
		}
		return false;
	}

	public static int GetNumbers(string input)
	{
		int.TryParse(Regex.Replace(input, "[^.0-9]", ""), out var result);
		return result;
	}
}
