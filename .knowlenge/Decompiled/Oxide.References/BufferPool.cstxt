using ProtoBuf;

internal sealed class BufferPool
{
	private const int PoolSize = 20;

	internal const int BufferLength = 1024;

	private static readonly object[] pool = new object[20];

	internal static void Flush()
	{
		lock (pool)
		{
			for (int i = 0; i < pool.Length; i++)
			{
				pool[i] = null;
			}
		}
	}

	private BufferPool()
	{
	}

	internal static byte[] GetBuffer()
	{
		lock (pool)
		{
			for (int i = 0; i < pool.Length; i++)
			{
				object obj;
				if ((obj = pool[i]) != null)
				{
					pool[i] = null;
					return (byte[])obj;
				}
			}
		}
		return new byte[1024];
	}

	internal static void ResizeAndFlushLeft(ref byte[] buffer, int toFitAtLeastBytes, int copyFromIndex, int copyBytes)
	{
		int num = buffer.Length * 2;
		if (num < toFitAtLeastBytes)
		{
			num = toFitAtLeastBytes;
		}
		byte[] array = new byte[num];
		if (copyBytes > 0)
		{
			Helpers.BlockCopy(buffer, copyFromIndex, array, 0, copyBytes);
		}
		if (buffer.Length == 1024)
		{
			ReleaseBufferToPool(ref buffer);
		}
		buffer = array;
	}

	internal static void ReleaseBufferToPool(ref byte[] buffer)
	{
		if (buffer == null)
		{
			return;
		}
		if (buffer.Length == 1024)
		{
			lock (pool)
			{
				for (int i = 0; i < pool.Length; i++)
				{
					if (pool[i] == null)
					{
						pool[i] = buffer;
						break;
					}
				}
			}
		}
		buffer = null;
	}
}
