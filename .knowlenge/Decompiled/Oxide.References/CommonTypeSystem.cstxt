using System;
using Mono.Collections.Generic;

private sealed class CommonTypeSystem : TypeSystem
{
	private AssemblyNameReference corlib;

	public CommonTypeSystem(ModuleDefinition module)
		: base(module)
	{
	}

	internal override TypeReference LookupType(string @namespace, string name)
	{
		return CreateTypeReference(@namespace, name);
	}

	public AssemblyNameReference GetCorlibReference()
	{
		if (corlib != null)
		{
			return corlib;
		}
		Collection<AssemblyNameReference> assemblyReferences = module.AssemblyReferences;
		for (int i = 0; i < assemblyReferences.Count; i++)
		{
			AssemblyNameReference assemblyNameReference = assemblyReferences[i];
			if (assemblyNameReference.Name == "mscorlib")
			{
				return corlib = assemblyNameReference;
			}
		}
		corlib = new AssemblyNameReference
		{
			Name = "mscorlib",
			Version = GetCorlibVersion(),
			PublicKeyToken = new byte[8] { 183, 122, 92, 86, 25, 52, 224, 137 }
		};
		assemblyReferences.Add(corlib);
		return corlib;
	}

	private Version GetCorlibVersion()
	{
		switch (module.Runtime)
		{
		case TargetRuntime.Net_1_0:
		case TargetRuntime.Net_1_1:
			return new Version(1, 0, 0, 0);
		case TargetRuntime.Net_2_0:
			return new Version(2, 0, 0, 0);
		case TargetRuntime.Net_4_0:
			return new Version(4, 0, 0, 0);
		default:
			throw new NotSupportedException();
		}
	}

	private TypeReference CreateTypeReference(string @namespace, string name)
	{
		return new TypeReference(@namespace, name, module, GetCorlibReference());
	}
}
