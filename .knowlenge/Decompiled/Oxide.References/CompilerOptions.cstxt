using System;

public sealed class CompilerOptions
{
	private string targetFrameworkName;

	private string targetFrameworkDisplayName;

	private string typeName;

	private string outputPath;

	private string imageRuntimeVersion;

	private int metaDataVersion;

	private Accessibility accessibility;

	public string TargetFrameworkName
	{
		get
		{
			return targetFrameworkName;
		}
		set
		{
			targetFrameworkName = value;
		}
	}

	public string TargetFrameworkDisplayName
	{
		get
		{
			return targetFrameworkDisplayName;
		}
		set
		{
			targetFrameworkDisplayName = value;
		}
	}

	public string TypeName
	{
		get
		{
			return typeName;
		}
		set
		{
			typeName = value;
		}
	}

	public string OutputPath
	{
		get
		{
			return outputPath;
		}
		set
		{
			outputPath = value;
		}
	}

	public string ImageRuntimeVersion
	{
		get
		{
			return imageRuntimeVersion;
		}
		set
		{
			imageRuntimeVersion = value;
		}
	}

	public int MetaDataVersion
	{
		get
		{
			return metaDataVersion;
		}
		set
		{
			metaDataVersion = value;
		}
	}

	public Accessibility Accessibility
	{
		get
		{
			return accessibility;
		}
		set
		{
			accessibility = value;
		}
	}

	public void SetFrameworkOptions(MetaType from)
	{
		if (from == null)
		{
			throw new ArgumentNullException("from");
		}
		AttributeMap[] array = AttributeMap.Create(from.Model, from.Type.Assembly);
		AttributeMap[] array2 = array;
		foreach (AttributeMap attributeMap in array2)
		{
			if (attributeMap.AttributeType.FullName == "System.Runtime.Versioning.TargetFrameworkAttribute")
			{
				if (attributeMap.TryGet("FrameworkName", out var value))
				{
					TargetFrameworkName = (string)value;
				}
				if (attributeMap.TryGet("FrameworkDisplayName", out value))
				{
					TargetFrameworkDisplayName = (string)value;
				}
				break;
			}
		}
	}
}
