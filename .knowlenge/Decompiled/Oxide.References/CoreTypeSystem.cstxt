using System;
using Mono.Cecil.Metadata;
using Mono.Collections.Generic;

private sealed class CoreTypeSystem : TypeSystem
{
	public CoreTypeSystem(ModuleDefinition module)
		: base(module)
	{
	}

	internal override TypeReference LookupType(string @namespace, string name)
	{
		TypeReference typeReference = LookupTypeDefinition(@namespace, name) ?? LookupTypeForwarded(@namespace, name);
		if (typeReference != null)
		{
			return typeReference;
		}
		throw new NotSupportedException();
	}

	private TypeReference LookupTypeDefinition(string @namespace, string name)
	{
		if (module.MetadataSystem.Types == null)
		{
			Initialize(module.Types);
		}
		return module.Read(new Row<string, string>(@namespace, name), delegate(Row<string, string> row, MetadataReader reader)
		{
			TypeDefinition[] types = reader.metadata.Types;
			for (int i = 0; i < types.Length; i++)
			{
				if (types[i] == null)
				{
					types[i] = reader.GetTypeDefinition((uint)(i + 1));
				}
				TypeDefinition typeDefinition = types[i];
				if (typeDefinition.Name == row.Col2 && typeDefinition.Namespace == row.Col1)
				{
					return typeDefinition;
				}
			}
			return (TypeDefinition)null;
		});
	}

	private TypeReference LookupTypeForwarded(string @namespace, string name)
	{
		if (!module.HasExportedTypes)
		{
			return null;
		}
		Collection<ExportedType> exportedTypes = module.ExportedTypes;
		for (int i = 0; i < exportedTypes.Count; i++)
		{
			ExportedType exportedType = exportedTypes[i];
			if (exportedType.Name == name && exportedType.Namespace == @namespace)
			{
				return exportedType.CreateReference();
			}
		}
		return null;
	}

	private static void Initialize(object obj)
	{
	}
}
