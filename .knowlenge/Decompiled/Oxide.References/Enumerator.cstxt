using System;
using System.Collections;
using System.Collections.Generic;

public struct Enumerator : IEnumerator<T>, IDisposable, IEnumerator
{
	private Collection<T> collection;

	private T current;

	private int next;

	private readonly int version;

	public T Current => current;

	object IEnumerator.Current
	{
		get
		{
			CheckState();
			if (next <= 0)
			{
				throw new InvalidOperationException();
			}
			return current;
		}
	}

	internal Enumerator(Collection<T> collection)
	{
		this = default(Enumerator);
		this.collection = collection;
		version = collection.version;
	}

	public bool MoveNext()
	{
		CheckState();
		if (next < 0)
		{
			return false;
		}
		if (next < collection.size)
		{
			current = collection.items[next++];
			return true;
		}
		next = -1;
		return false;
	}

	public void Reset()
	{
		CheckState();
		next = 0;
	}

	private void CheckState()
	{
		if (collection == null)
		{
			throw new ObjectDisposedException(GetType().FullName);
		}
		if (version != collection.version)
		{
			throw new InvalidOperationException();
		}
	}

	public void Dispose()
	{
		collection = null;
	}
}
