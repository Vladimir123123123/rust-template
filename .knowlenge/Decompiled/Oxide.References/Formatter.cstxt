using System;
using System.IO;
using System.Runtime.Serialization;

internal sealed class Formatter : IFormatter
{
	private readonly TypeModel model;

	private readonly Type type;

	private SerializationBinder binder;

	private StreamingContext context;

	private ISurrogateSelector surrogateSelector;

	public SerializationBinder Binder
	{
		get
		{
			return binder;
		}
		set
		{
			binder = value;
		}
	}

	public StreamingContext Context
	{
		get
		{
			return context;
		}
		set
		{
			context = value;
		}
	}

	public ISurrogateSelector SurrogateSelector
	{
		get
		{
			return surrogateSelector;
		}
		set
		{
			surrogateSelector = value;
		}
	}

	internal Formatter(TypeModel model, Type type)
	{
		if (model == null)
		{
			throw new ArgumentNullException("model");
		}
		if ((object)type == null)
		{
			throw new ArgumentNullException("type");
		}
		this.model = model;
		this.type = type;
	}

	public object Deserialize(Stream source)
	{
		return model.Deserialize(source, null, type, -1, Context);
	}

	public void Serialize(Stream destination, object graph)
	{
		model.Serialize(destination, graph, Context);
	}
}
