using System;
using Mono;
using Mono.Cecil;
using Mono.Cecil.Cil;
using Mono.Cecil.Metadata;
using Mono.Cecil.PE;

internal sealed class Image
{
	public ModuleKind Kind;

	public string RuntimeVersion;

	public TargetArchitecture Architecture;

	public ModuleCharacteristics Characteristics;

	public string FileName;

	public Section[] Sections;

	public Section MetadataSection;

	public uint EntryPointToken;

	public ModuleAttributes Attributes;

	public DataDirectory Debug;

	public DataDirectory Resources;

	public DataDirectory StrongName;

	public StringHeap StringHeap;

	public BlobHeap BlobHeap;

	public UserStringHeap UserStringHeap;

	public GuidHeap GuidHeap;

	public TableHeap TableHeap;

	private readonly int[] coded_index_sizes = new int[13];

	private readonly Func<Table, int> counter;

	public Image()
	{
		counter = GetTableLength;
	}

	public bool HasTable(Table table)
	{
		return GetTableLength(table) > 0;
	}

	public int GetTableLength(Table table)
	{
		return (int)TableHeap[table].Length;
	}

	public int GetTableIndexSize(Table table)
	{
		if (GetTableLength(table) >= 65536)
		{
			return 4;
		}
		return 2;
	}

	public int GetCodedIndexSize(CodedIndex coded_index)
	{
		int num = coded_index_sizes[(int)coded_index];
		if (num != 0)
		{
			return num;
		}
		return coded_index_sizes[(int)coded_index] = coded_index.GetSize(counter);
	}

	public uint ResolveVirtualAddress(uint rva)
	{
		Section sectionAtVirtualAddress = GetSectionAtVirtualAddress(rva);
		if (sectionAtVirtualAddress == null)
		{
			throw new ArgumentOutOfRangeException();
		}
		return ResolveVirtualAddressInSection(rva, sectionAtVirtualAddress);
	}

	public uint ResolveVirtualAddressInSection(uint rva, Section section)
	{
		return rva + section.PointerToRawData - section.VirtualAddress;
	}

	public Section GetSection(string name)
	{
		Section[] sections = Sections;
		foreach (Section section in sections)
		{
			if (section.Name == name)
			{
				return section;
			}
		}
		return null;
	}

	public Section GetSectionAtVirtualAddress(uint rva)
	{
		Section[] sections = Sections;
		foreach (Section section in sections)
		{
			if (rva >= section.VirtualAddress && rva < section.VirtualAddress + section.SizeOfRawData)
			{
				return section;
			}
		}
		return null;
	}

	public ImageDebugDirectory GetDebugHeader(out byte[] header)
	{
		Section sectionAtVirtualAddress = GetSectionAtVirtualAddress(Debug.VirtualAddress);
		ByteBuffer byteBuffer = new ByteBuffer(sectionAtVirtualAddress.Data);
		byteBuffer.position = (int)(Debug.VirtualAddress - sectionAtVirtualAddress.VirtualAddress);
		ImageDebugDirectory imageDebugDirectory = default(ImageDebugDirectory);
		imageDebugDirectory.Characteristics = byteBuffer.ReadInt32();
		imageDebugDirectory.TimeDateStamp = byteBuffer.ReadInt32();
		imageDebugDirectory.MajorVersion = byteBuffer.ReadInt16();
		imageDebugDirectory.MinorVersion = byteBuffer.ReadInt16();
		imageDebugDirectory.Type = byteBuffer.ReadInt32();
		imageDebugDirectory.SizeOfData = byteBuffer.ReadInt32();
		imageDebugDirectory.AddressOfRawData = byteBuffer.ReadInt32();
		imageDebugDirectory.PointerToRawData = byteBuffer.ReadInt32();
		ImageDebugDirectory result = imageDebugDirectory;
		if (result.SizeOfData == 0 || result.PointerToRawData == 0)
		{
			header = Empty<byte>.Array;
			return result;
		}
		byteBuffer.position = (int)(result.PointerToRawData - sectionAtVirtualAddress.PointerToRawData);
		header = new byte[result.SizeOfData];
		Buffer.BlockCopy(byteBuffer.buffer, byteBuffer.position, header, 0, header.Length);
		return result;
	}
}
