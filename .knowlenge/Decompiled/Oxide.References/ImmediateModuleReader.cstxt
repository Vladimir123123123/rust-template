using Mono.Cecil;
using Mono.Cecil.PE;
using Mono.Collections.Generic;

internal sealed class ImmediateModuleReader : ModuleReader
{
	public ImmediateModuleReader(Image image)
		: base(image, ReadingMode.Immediate)
	{
	}

	protected override void ReadModule()
	{
		module.Read(module, delegate(ModuleDefinition module, MetadataReader reader)
		{
			ReadModuleManifest(reader);
			ReadModule(module);
			return module;
		});
	}

	public static void ReadModule(ModuleDefinition module)
	{
		if (module.HasAssemblyReferences)
		{
			Read(module.AssemblyReferences);
		}
		if (module.HasResources)
		{
			Read(module.Resources);
		}
		if (module.HasModuleReferences)
		{
			Read(module.ModuleReferences);
		}
		if (module.HasTypes)
		{
			ReadTypes(module.Types);
		}
		if (module.HasExportedTypes)
		{
			Read(module.ExportedTypes);
		}
		if (module.HasCustomAttributes)
		{
			Read(module.CustomAttributes);
		}
		AssemblyDefinition assembly = module.Assembly;
		if (assembly != null)
		{
			if (assembly.HasCustomAttributes)
			{
				ReadCustomAttributes(assembly);
			}
			if (assembly.HasSecurityDeclarations)
			{
				Read(assembly.SecurityDeclarations);
			}
		}
	}

	private static void ReadTypes(Collection<TypeDefinition> types)
	{
		for (int i = 0; i < types.Count; i++)
		{
			ReadType(types[i]);
		}
	}

	private static void ReadType(TypeDefinition type)
	{
		ReadGenericParameters(type);
		if (type.HasInterfaces)
		{
			Read(type.Interfaces);
		}
		if (type.HasNestedTypes)
		{
			ReadTypes(type.NestedTypes);
		}
		if (type.HasLayoutInfo)
		{
			Read(type.ClassSize);
		}
		if (type.HasFields)
		{
			ReadFields(type);
		}
		if (type.HasMethods)
		{
			ReadMethods(type);
		}
		if (type.HasProperties)
		{
			ReadProperties(type);
		}
		if (type.HasEvents)
		{
			ReadEvents(type);
		}
		ReadSecurityDeclarations(type);
		ReadCustomAttributes(type);
	}

	private static void ReadGenericParameters(IGenericParameterProvider provider)
	{
		if (!provider.HasGenericParameters)
		{
			return;
		}
		Collection<GenericParameter> genericParameters = provider.GenericParameters;
		for (int i = 0; i < genericParameters.Count; i++)
		{
			GenericParameter genericParameter = genericParameters[i];
			if (genericParameter.HasConstraints)
			{
				Read(genericParameter.Constraints);
			}
			ReadCustomAttributes(genericParameter);
		}
	}

	private static void ReadSecurityDeclarations(ISecurityDeclarationProvider provider)
	{
		if (provider.HasSecurityDeclarations)
		{
			Collection<SecurityDeclaration> securityDeclarations = provider.SecurityDeclarations;
			for (int i = 0; i < securityDeclarations.Count; i++)
			{
				Read(securityDeclarations[i].SecurityAttributes);
			}
		}
	}

	private static void ReadCustomAttributes(ICustomAttributeProvider provider)
	{
		if (provider.HasCustomAttributes)
		{
			Collection<CustomAttribute> customAttributes = provider.CustomAttributes;
			for (int i = 0; i < customAttributes.Count; i++)
			{
				Read(customAttributes[i].ConstructorArguments);
			}
		}
	}

	private static void ReadFields(TypeDefinition type)
	{
		Collection<FieldDefinition> fields = type.Fields;
		for (int i = 0; i < fields.Count; i++)
		{
			FieldDefinition fieldDefinition = fields[i];
			if (fieldDefinition.HasConstant)
			{
				Read(fieldDefinition.Constant);
			}
			if (fieldDefinition.HasLayoutInfo)
			{
				Read(fieldDefinition.Offset);
			}
			if (fieldDefinition.RVA > 0)
			{
				Read(fieldDefinition.InitialValue);
			}
			if (fieldDefinition.HasMarshalInfo)
			{
				Read(fieldDefinition.MarshalInfo);
			}
			ReadCustomAttributes(fieldDefinition);
		}
	}

	private static void ReadMethods(TypeDefinition type)
	{
		Collection<MethodDefinition> methods = type.Methods;
		for (int i = 0; i < methods.Count; i++)
		{
			MethodDefinition methodDefinition = methods[i];
			ReadGenericParameters(methodDefinition);
			if (methodDefinition.HasParameters)
			{
				ReadParameters(methodDefinition);
			}
			if (methodDefinition.HasOverrides)
			{
				Read(methodDefinition.Overrides);
			}
			if (methodDefinition.IsPInvokeImpl)
			{
				Read(methodDefinition.PInvokeInfo);
			}
			ReadSecurityDeclarations(methodDefinition);
			ReadCustomAttributes(methodDefinition);
			MethodReturnType methodReturnType = methodDefinition.MethodReturnType;
			if (methodReturnType.HasConstant)
			{
				Read(methodReturnType.Constant);
			}
			if (methodReturnType.HasMarshalInfo)
			{
				Read(methodReturnType.MarshalInfo);
			}
			ReadCustomAttributes(methodReturnType);
		}
	}

	private static void ReadParameters(MethodDefinition method)
	{
		Collection<ParameterDefinition> parameters = method.Parameters;
		for (int i = 0; i < parameters.Count; i++)
		{
			ParameterDefinition parameterDefinition = parameters[i];
			if (parameterDefinition.HasConstant)
			{
				Read(parameterDefinition.Constant);
			}
			if (parameterDefinition.HasMarshalInfo)
			{
				Read(parameterDefinition.MarshalInfo);
			}
			ReadCustomAttributes(parameterDefinition);
		}
	}

	private static void ReadProperties(TypeDefinition type)
	{
		Collection<PropertyDefinition> properties = type.Properties;
		for (int i = 0; i < properties.Count; i++)
		{
			PropertyDefinition propertyDefinition = properties[i];
			Read(propertyDefinition.GetMethod);
			if (propertyDefinition.HasConstant)
			{
				Read(propertyDefinition.Constant);
			}
			ReadCustomAttributes(propertyDefinition);
		}
	}

	private static void ReadEvents(TypeDefinition type)
	{
		Collection<EventDefinition> events = type.Events;
		for (int i = 0; i < events.Count; i++)
		{
			EventDefinition eventDefinition = events[i];
			Read(eventDefinition.AddMethod);
			ReadCustomAttributes(eventDefinition);
		}
	}

	private static void Read(object collection)
	{
	}
}
