using System.Collections;
using System.Collections.Generic;

private class JPropertyList : IList<JToken>, ICollection<JToken>, IEnumerable<JToken>, IEnumerable
{
	internal JToken _token;

	public int Count
	{
		get
		{
			if (_token == null)
			{
				return 0;
			}
			return 1;
		}
	}

	public bool IsReadOnly => false;

	public JToken this[int index]
	{
		get
		{
			if (index != 0)
			{
				return null;
			}
			return _token;
		}
		set
		{
			if (index == 0)
			{
				_token = value;
			}
		}
	}

	public IEnumerator<JToken> GetEnumerator()
	{
		if (_token != null)
		{
			yield return _token;
		}
	}

	IEnumerator IEnumerable.GetEnumerator()
	{
		return GetEnumerator();
	}

	public void Add(JToken item)
	{
		_token = item;
	}

	public void Clear()
	{
		_token = null;
	}

	public bool Contains(JToken item)
	{
		return _token == item;
	}

	public void CopyTo(JToken[] array, int arrayIndex)
	{
		if (_token != null)
		{
			array[arrayIndex] = _token;
		}
	}

	public bool Remove(JToken item)
	{
		if (_token == item)
		{
			_token = null;
			return true;
		}
		return false;
	}

	public int IndexOf(JToken item)
	{
		if (_token != item)
		{
			return -1;
		}
		return 0;
	}

	public void Insert(int index, JToken item)
	{
		if (index == 0)
		{
			_token = item;
		}
	}

	public void RemoveAt(int index)
	{
		if (index == 0)
		{
			_token = null;
		}
	}
}
