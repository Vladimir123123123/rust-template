using System;
using System.Threading;
using Mono.Cecil;
using Mono.Cecil.Cil;
using Mono.Collections.Generic;

public sealed class MethodBody : IVariableDefinitionProvider
{
	internal readonly MethodDefinition method;

	internal ParameterDefinition this_parameter;

	internal int max_stack_size;

	internal int code_size;

	internal bool init_locals;

	internal MetadataToken local_var_token;

	internal Collection<Instruction> instructions;

	internal Collection<ExceptionHandler> exceptions;

	internal Collection<VariableDefinition> variables;

	private Scope scope;

	public MethodDefinition Method => method;

	public int MaxStackSize
	{
		get
		{
			return max_stack_size;
		}
		set
		{
			max_stack_size = value;
		}
	}

	public int CodeSize => code_size;

	public bool InitLocals
	{
		get
		{
			return init_locals;
		}
		set
		{
			init_locals = value;
		}
	}

	public MetadataToken LocalVarToken
	{
		get
		{
			return local_var_token;
		}
		set
		{
			local_var_token = value;
		}
	}

	public Collection<Instruction> Instructions => instructions ?? (instructions = new InstructionCollection());

	public bool HasExceptionHandlers => !exceptions.IsNullOrEmpty();

	public Collection<ExceptionHandler> ExceptionHandlers => exceptions ?? (exceptions = new Collection<ExceptionHandler>());

	public bool HasVariables => !variables.IsNullOrEmpty();

	public Collection<VariableDefinition> Variables => variables ?? (variables = new VariableDefinitionCollection());

	public Scope Scope
	{
		get
		{
			return scope;
		}
		set
		{
			scope = value;
		}
	}

	public ParameterDefinition ThisParameter
	{
		get
		{
			if (method == null || method.DeclaringType == null)
			{
				throw new NotSupportedException();
			}
			if (!method.HasThis)
			{
				return null;
			}
			if (this_parameter == null)
			{
				Interlocked.CompareExchange(ref this_parameter, CreateThisParameter(method), null);
			}
			return this_parameter;
		}
	}

	private static ParameterDefinition CreateThisParameter(MethodDefinition method)
	{
		TypeDefinition declaringType = method.DeclaringType;
		return new ParameterDefinition((declaringType.IsValueType || declaringType.IsPrimitive) ? ((TypeReference)new PointerType(declaringType)) : ((TypeReference)declaringType), method);
	}

	public MethodBody(MethodDefinition method)
	{
		this.method = method;
	}

	public ILProcessor GetILProcessor()
	{
		return new ILProcessor(this);
	}
}
