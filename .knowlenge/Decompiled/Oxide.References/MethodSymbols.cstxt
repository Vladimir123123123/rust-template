using Mono.Cecil;
using Mono.Cecil.Cil;
using Mono.Collections.Generic;

public sealed class MethodSymbols
{
	internal int code_size;

	internal string method_name;

	internal MetadataToken method_token;

	internal MetadataToken local_var_token;

	internal Collection<VariableDefinition> variables;

	internal Collection<InstructionSymbol> instructions;

	public bool HasVariables => !variables.IsNullOrEmpty();

	public Collection<VariableDefinition> Variables
	{
		get
		{
			if (variables == null)
			{
				variables = new Collection<VariableDefinition>();
			}
			return variables;
		}
	}

	public Collection<InstructionSymbol> Instructions
	{
		get
		{
			if (instructions == null)
			{
				instructions = new Collection<InstructionSymbol>();
			}
			return instructions;
		}
	}

	public int CodeSize => code_size;

	public string MethodName => method_name;

	public MetadataToken MethodToken => method_token;

	public MetadataToken LocalVarToken => local_var_token;

	internal MethodSymbols(string methodName)
	{
		method_name = methodName;
	}

	public MethodSymbols(MetadataToken methodToken)
	{
		method_token = methodToken;
	}
}
