using System;
using System.IO;
using System.Reflection;
using System.Runtime.Serialization;
using System.Security.Cryptography;
using System.Text;
using Mono.Cecil;
using Mono.Cecil.Cil;
using Mono.Cecil.Metadata;
using Mono.Collections.Generic;
using Mono.Security.Cryptography;

internal static class Mixin
{
	internal static object NoValue = new object();

	internal static object NotResolved = new object();

	public const int NotResolvedMarker = -2;

	public const int NoDataMarker = -1;

	public static uint ReadCompressedUInt32(this byte[] data, ref int position)
	{
		uint result;
		if ((data[position] & 0x80) == 0)
		{
			result = data[position];
			position++;
		}
		else if ((data[position] & 0x40) == 0)
		{
			result = (uint)((data[position] & -129) << 8);
			result |= data[position + 1];
			position += 2;
		}
		else
		{
			result = (uint)((data[position] & -193) << 24);
			result |= (uint)(data[position + 1] << 16);
			result |= (uint)(data[position + 2] << 8);
			result |= data[position + 3];
			position += 4;
		}
		return result;
	}

	public static MetadataToken GetMetadataToken(this CodedIndex self, uint data)
	{
		uint rid;
		TokenType type;
		switch (self)
		{
		case CodedIndex.TypeDefOrRef:
			rid = data >> 2;
			switch (data & 3)
			{
			case 0u:
				break;
			case 1u:
				goto IL_0069;
			case 2u:
				goto IL_0074;
			default:
				goto end_IL_0001;
			}
			type = TokenType.TypeDef;
			goto IL_03fb;
		case CodedIndex.HasConstant:
			rid = data >> 2;
			switch (data & 3)
			{
			case 0u:
				break;
			case 1u:
				goto IL_00a9;
			case 2u:
				goto IL_00b4;
			default:
				goto end_IL_0001;
			}
			type = TokenType.Field;
			goto IL_03fb;
		case CodedIndex.HasCustomAttribute:
			rid = data >> 5;
			switch (data & 0x1F)
			{
			case 0u:
				break;
			case 1u:
				goto IL_012e;
			case 2u:
				goto IL_0139;
			case 3u:
				goto IL_0144;
			case 4u:
				goto IL_014f;
			case 5u:
				goto IL_015a;
			case 6u:
				goto IL_0165;
			case 7u:
				goto IL_0170;
			case 8u:
				goto IL_0177;
			case 9u:
				goto IL_0182;
			case 10u:
				goto IL_018d;
			case 11u:
				goto IL_0198;
			case 12u:
				goto IL_01a3;
			case 13u:
				goto IL_01ae;
			case 14u:
				goto IL_01b9;
			case 15u:
				goto IL_01c4;
			case 16u:
				goto IL_01cf;
			case 17u:
				goto IL_01da;
			case 18u:
				goto IL_01e5;
			case 19u:
				goto IL_01f0;
			default:
				goto end_IL_0001;
			}
			type = TokenType.Method;
			goto IL_03fb;
		case CodedIndex.HasFieldMarshal:
		{
			rid = data >> 1;
			uint num = data & 1;
			if (num != 0)
			{
				if (num != 1)
				{
					break;
				}
				type = TokenType.Param;
			}
			else
			{
				type = TokenType.Field;
			}
			goto IL_03fb;
		}
		case CodedIndex.HasDeclSecurity:
			rid = data >> 2;
			switch (data & 3)
			{
			case 0u:
				break;
			case 1u:
				goto IL_024f;
			case 2u:
				goto IL_025a;
			default:
				goto end_IL_0001;
			}
			type = TokenType.TypeDef;
			goto IL_03fb;
		case CodedIndex.MemberRefParent:
			rid = data >> 3;
			switch (data & 7)
			{
			case 0u:
				break;
			case 1u:
				goto IL_0297;
			case 2u:
				goto IL_02a2;
			case 3u:
				goto IL_02ad;
			case 4u:
				goto IL_02b8;
			default:
				goto end_IL_0001;
			}
			type = TokenType.TypeDef;
			goto IL_03fb;
		case CodedIndex.HasSemantics:
		{
			rid = data >> 1;
			uint num = data & 1;
			if (num != 0)
			{
				if (num != 1)
				{
					break;
				}
				type = TokenType.Property;
			}
			else
			{
				type = TokenType.Event;
			}
			goto IL_03fb;
		}
		case CodedIndex.MethodDefOrRef:
		{
			rid = data >> 1;
			uint num = data & 1;
			if (num != 0)
			{
				if (num != 1)
				{
					break;
				}
				type = TokenType.MemberRef;
			}
			else
			{
				type = TokenType.Method;
			}
			goto IL_03fb;
		}
		case CodedIndex.MemberForwarded:
		{
			rid = data >> 1;
			uint num = data & 1;
			if (num != 0)
			{
				if (num != 1)
				{
					break;
				}
				type = TokenType.Method;
			}
			else
			{
				type = TokenType.Field;
			}
			goto IL_03fb;
		}
		case CodedIndex.Implementation:
			rid = data >> 2;
			switch (data & 3)
			{
			case 0u:
				break;
			case 1u:
				goto IL_036b;
			case 2u:
				goto IL_0376;
			default:
				goto end_IL_0001;
			}
			type = TokenType.File;
			goto IL_03fb;
		case CodedIndex.CustomAttributeType:
		{
			rid = data >> 3;
			uint num = data & 7;
			if (num != 2)
			{
				if (num != 3)
				{
					break;
				}
				type = TokenType.MemberRef;
			}
			else
			{
				type = TokenType.Method;
			}
			goto IL_03fb;
		}
		case CodedIndex.ResolutionScope:
			rid = data >> 2;
			switch (data & 3)
			{
			case 0u:
				break;
			case 1u:
				goto IL_03c4;
			case 2u:
				goto IL_03cc;
			case 3u:
				goto IL_03d4;
			default:
				goto end_IL_0001;
			}
			type = TokenType.Module;
			goto IL_03fb;
		case CodedIndex.TypeOrMethodDef:
			{
				rid = data >> 1;
				uint num = data & 1;
				if (num != 0)
				{
					if (num != 1)
					{
						break;
					}
					type = TokenType.Method;
				}
				else
				{
					type = TokenType.TypeDef;
				}
				goto IL_03fb;
			}
			IL_01c4:
			type = TokenType.AssemblyRef;
			goto IL_03fb;
			IL_01ae:
			type = TokenType.TypeSpec;
			goto IL_03fb;
			IL_01b9:
			type = TokenType.Assembly;
			goto IL_03fb;
			IL_03d4:
			type = TokenType.TypeRef;
			goto IL_03fb;
			IL_03cc:
			type = TokenType.AssemblyRef;
			goto IL_03fb;
			IL_03c4:
			type = TokenType.ModuleRef;
			goto IL_03fb;
			IL_01a3:
			type = TokenType.ModuleRef;
			goto IL_03fb;
			IL_0198:
			type = TokenType.Signature;
			goto IL_03fb;
			IL_0182:
			type = TokenType.Property;
			goto IL_03fb;
			IL_018d:
			type = TokenType.Event;
			goto IL_03fb;
			IL_0376:
			type = TokenType.ExportedType;
			goto IL_03fb;
			IL_036b:
			type = TokenType.AssemblyRef;
			goto IL_03fb;
			IL_0177:
			type = TokenType.Permission;
			goto IL_03fb;
			IL_0170:
			type = TokenType.Module;
			goto IL_03fb;
			IL_015a:
			type = TokenType.InterfaceImpl;
			goto IL_03fb;
			IL_0165:
			type = TokenType.MemberRef;
			goto IL_03fb;
			IL_014f:
			type = TokenType.Param;
			goto IL_03fb;
			IL_0139:
			type = TokenType.TypeRef;
			goto IL_03fb;
			IL_0144:
			type = TokenType.TypeDef;
			goto IL_03fb;
			IL_012e:
			type = TokenType.Field;
			goto IL_03fb;
			IL_0069:
			type = TokenType.TypeRef;
			goto IL_03fb;
			IL_02b8:
			type = TokenType.TypeSpec;
			goto IL_03fb;
			IL_02ad:
			type = TokenType.Method;
			goto IL_03fb;
			IL_02a2:
			type = TokenType.ModuleRef;
			goto IL_03fb;
			IL_0297:
			type = TokenType.TypeRef;
			goto IL_03fb;
			IL_00b4:
			type = TokenType.Property;
			goto IL_03fb;
			IL_025a:
			type = TokenType.Assembly;
			goto IL_03fb;
			IL_024f:
			type = TokenType.Method;
			goto IL_03fb;
			IL_00a9:
			type = TokenType.Param;
			goto IL_03fb;
			IL_03fb:
			return new MetadataToken(type, rid);
			IL_0074:
			type = TokenType.TypeSpec;
			goto IL_03fb;
			IL_01f0:
			type = TokenType.GenericParam;
			goto IL_03fb;
			IL_01e5:
			type = TokenType.ManifestResource;
			goto IL_03fb;
			IL_01da:
			type = TokenType.ExportedType;
			goto IL_03fb;
			IL_01cf:
			type = TokenType.File;
			goto IL_03fb;
			end_IL_0001:
			break;
		}
		return MetadataToken.Zero;
	}

	public static uint CompressMetadataToken(this CodedIndex self, MetadataToken token)
	{
		uint result = 0u;
		if (token.RID == 0)
		{
			return result;
		}
		switch (self)
		{
		case CodedIndex.TypeDefOrRef:
			result = token.RID << 2;
			switch (token.TokenType)
			{
			case TokenType.TypeDef:
				return result | 0;
			case TokenType.TypeRef:
				return result | 1;
			case TokenType.TypeSpec:
				return result | 2;
			}
			break;
		case CodedIndex.HasConstant:
			result = token.RID << 2;
			switch (token.TokenType)
			{
			case TokenType.Field:
				return result | 0;
			case TokenType.Param:
				return result | 1;
			case TokenType.Property:
				return result | 2;
			}
			break;
		case CodedIndex.HasCustomAttribute:
			result = token.RID << 5;
			switch (token.TokenType)
			{
			case TokenType.Method:
				return result | 0;
			case TokenType.Field:
				return result | 1;
			case TokenType.TypeRef:
				return result | 2;
			case TokenType.TypeDef:
				return result | 3;
			case TokenType.Param:
				return result | 4;
			case TokenType.InterfaceImpl:
				return result | 5;
			case TokenType.MemberRef:
				return result | 6;
			case TokenType.Module:
				return result | 7;
			case TokenType.Permission:
				return result | 8;
			case TokenType.Property:
				return result | 9;
			case TokenType.Event:
				return result | 0xA;
			case TokenType.Signature:
				return result | 0xB;
			case TokenType.ModuleRef:
				return result | 0xC;
			case TokenType.TypeSpec:
				return result | 0xD;
			case TokenType.Assembly:
				return result | 0xE;
			case TokenType.AssemblyRef:
				return result | 0xF;
			case TokenType.File:
				return result | 0x10;
			case TokenType.ExportedType:
				return result | 0x11;
			case TokenType.ManifestResource:
				return result | 0x12;
			case TokenType.GenericParam:
				return result | 0x13;
			}
			break;
		case CodedIndex.HasFieldMarshal:
			result = token.RID << 1;
			switch (token.TokenType)
			{
			case TokenType.Field:
				return result | 0;
			case TokenType.Param:
				return result | 1;
			}
			break;
		case CodedIndex.HasDeclSecurity:
			result = token.RID << 2;
			switch (token.TokenType)
			{
			case TokenType.TypeDef:
				return result | 0;
			case TokenType.Method:
				return result | 1;
			case TokenType.Assembly:
				return result | 2;
			}
			break;
		case CodedIndex.MemberRefParent:
			result = token.RID << 3;
			switch (token.TokenType)
			{
			case TokenType.TypeDef:
				return result | 0;
			case TokenType.TypeRef:
				return result | 1;
			case TokenType.ModuleRef:
				return result | 2;
			case TokenType.Method:
				return result | 3;
			case TokenType.TypeSpec:
				return result | 4;
			}
			break;
		case CodedIndex.HasSemantics:
			result = token.RID << 1;
			switch (token.TokenType)
			{
			case TokenType.Event:
				return result | 0;
			case TokenType.Property:
				return result | 1;
			}
			break;
		case CodedIndex.MethodDefOrRef:
			result = token.RID << 1;
			switch (token.TokenType)
			{
			case TokenType.Method:
				return result | 0;
			case TokenType.MemberRef:
				return result | 1;
			}
			break;
		case CodedIndex.MemberForwarded:
			result = token.RID << 1;
			switch (token.TokenType)
			{
			case TokenType.Field:
				return result | 0;
			case TokenType.Method:
				return result | 1;
			}
			break;
		case CodedIndex.Implementation:
			result = token.RID << 2;
			switch (token.TokenType)
			{
			case TokenType.File:
				return result | 0;
			case TokenType.AssemblyRef:
				return result | 1;
			case TokenType.ExportedType:
				return result | 2;
			}
			break;
		case CodedIndex.CustomAttributeType:
			result = token.RID << 3;
			switch (token.TokenType)
			{
			case TokenType.Method:
				return result | 2;
			case TokenType.MemberRef:
				return result | 3;
			}
			break;
		case CodedIndex.ResolutionScope:
			result = token.RID << 2;
			switch (token.TokenType)
			{
			case TokenType.Module:
				return result | 0;
			case TokenType.ModuleRef:
				return result | 1;
			case TokenType.AssemblyRef:
				return result | 2;
			case TokenType.TypeRef:
				return result | 3;
			}
			break;
		case CodedIndex.TypeOrMethodDef:
			result = token.RID << 1;
			switch (token.TokenType)
			{
			case TokenType.TypeDef:
				return result | 0;
			case TokenType.Method:
				return result | 1;
			}
			break;
		}
		throw new ArgumentException();
	}

	public static int GetSize(this CodedIndex self, Func<Table, int> counter)
	{
		int num;
		Table[] array;
		switch (self)
		{
		case CodedIndex.TypeDefOrRef:
			num = 2;
			array = new Table[3]
			{
				Table.TypeDef,
				Table.TypeRef,
				Table.TypeSpec
			};
			break;
		case CodedIndex.HasConstant:
			num = 2;
			array = new Table[3]
			{
				Table.Field,
				Table.Param,
				Table.Property
			};
			break;
		case CodedIndex.HasCustomAttribute:
			num = 5;
			array = new Table[20]
			{
				Table.Method,
				Table.Field,
				Table.TypeRef,
				Table.TypeDef,
				Table.Param,
				Table.InterfaceImpl,
				Table.MemberRef,
				Table.Module,
				Table.DeclSecurity,
				Table.Property,
				Table.Event,
				Table.StandAloneSig,
				Table.ModuleRef,
				Table.TypeSpec,
				Table.Assembly,
				Table.AssemblyRef,
				Table.File,
				Table.ExportedType,
				Table.ManifestResource,
				Table.GenericParam
			};
			break;
		case CodedIndex.HasFieldMarshal:
			num = 1;
			array = new Table[2]
			{
				Table.Field,
				Table.Param
			};
			break;
		case CodedIndex.HasDeclSecurity:
			num = 2;
			array = new Table[3]
			{
				Table.TypeDef,
				Table.Method,
				Table.Assembly
			};
			break;
		case CodedIndex.MemberRefParent:
			num = 3;
			array = new Table[5]
			{
				Table.TypeDef,
				Table.TypeRef,
				Table.ModuleRef,
				Table.Method,
				Table.TypeSpec
			};
			break;
		case CodedIndex.HasSemantics:
			num = 1;
			array = new Table[2]
			{
				Table.Event,
				Table.Property
			};
			break;
		case CodedIndex.MethodDefOrRef:
			num = 1;
			array = new Table[2]
			{
				Table.Method,
				Table.MemberRef
			};
			break;
		case CodedIndex.MemberForwarded:
			num = 1;
			array = new Table[2]
			{
				Table.Field,
				Table.Method
			};
			break;
		case CodedIndex.Implementation:
			num = 2;
			array = new Table[3]
			{
				Table.File,
				Table.AssemblyRef,
				Table.ExportedType
			};
			break;
		case CodedIndex.CustomAttributeType:
			num = 3;
			array = new Table[2]
			{
				Table.Method,
				Table.MemberRef
			};
			break;
		case CodedIndex.ResolutionScope:
			num = 2;
			array = new Table[4]
			{
				Table.Module,
				Table.ModuleRef,
				Table.AssemblyRef,
				Table.TypeRef
			};
			break;
		case CodedIndex.TypeOrMethodDef:
			num = 1;
			array = new Table[2]
			{
				Table.TypeDef,
				Table.Method
			};
			break;
		default:
			throw new ArgumentException();
		}
		int num2 = 0;
		for (int i = 0; i < array.Length; i++)
		{
			num2 = Math.Max(counter(array[i]), num2);
		}
		if (num2 >= 1 << 16 - num)
		{
			return 4;
		}
		return 2;
	}

	public static bool GetHasSecurityDeclarations(this ISecurityDeclarationProvider self, ModuleDefinition module)
	{
		if (module.HasImage())
		{
			return module.Read(self, (ISecurityDeclarationProvider provider, MetadataReader reader) => reader.HasSecurityDeclarations(provider));
		}
		return false;
	}

	public static Collection<SecurityDeclaration> GetSecurityDeclarations(this ISecurityDeclarationProvider self, ref Collection<SecurityDeclaration> variable, ModuleDefinition module)
	{
		if (!module.HasImage())
		{
			return variable = new Collection<SecurityDeclaration>();
		}
		return module.Read(ref variable, self, (ISecurityDeclarationProvider provider, MetadataReader reader) => reader.ReadSecurityDeclarations(provider));
	}

	public static void CheckName(string name)
	{
		if (name == null)
		{
			throw new ArgumentNullException("name");
		}
		if (name.Length == 0)
		{
			throw new ArgumentException("Empty name");
		}
	}

	public static void ResolveConstant(this IConstantProvider self, ref object constant, ModuleDefinition module)
	{
		if (module == null)
		{
			constant = NoValue;
			return;
		}
		lock (module.SyncRoot)
		{
			if (constant != NotResolved)
			{
				return;
			}
			if (module.HasImage())
			{
				constant = module.Read(self, (IConstantProvider provider, MetadataReader reader) => reader.ReadConstant(provider));
			}
			else
			{
				constant = NoValue;
			}
		}
	}

	public static bool GetHasCustomAttributes(this Mono.Cecil.ICustomAttributeProvider self, ModuleDefinition module)
	{
		if (module.HasImage())
		{
			return module.Read(self, (Mono.Cecil.ICustomAttributeProvider provider, MetadataReader reader) => reader.HasCustomAttributes(provider));
		}
		return false;
	}

	public static Collection<CustomAttribute> GetCustomAttributes(this Mono.Cecil.ICustomAttributeProvider self, ref Collection<CustomAttribute> variable, ModuleDefinition module)
	{
		if (!module.HasImage())
		{
			return variable = new Collection<CustomAttribute>();
		}
		return module.Read(ref variable, self, (Mono.Cecil.ICustomAttributeProvider provider, MetadataReader reader) => reader.ReadCustomAttributes(provider));
	}

	public static bool ContainsGenericParameter(this IGenericInstance self)
	{
		Collection<TypeReference> genericArguments = self.GenericArguments;
		for (int i = 0; i < genericArguments.Count; i++)
		{
			if (genericArguments[i].ContainsGenericParameter)
			{
				return true;
			}
		}
		return false;
	}

	public static void GenericInstanceFullName(this IGenericInstance self, StringBuilder builder)
	{
		builder.Append("<");
		Collection<TypeReference> genericArguments = self.GenericArguments;
		for (int i = 0; i < genericArguments.Count; i++)
		{
			if (i > 0)
			{
				builder.Append(",");
			}
			builder.Append(genericArguments[i].FullName);
		}
		builder.Append(">");
	}

	public static bool GetHasGenericParameters(this IGenericParameterProvider self, ModuleDefinition module)
	{
		if (module.HasImage())
		{
			return module.Read(self, (IGenericParameterProvider provider, MetadataReader reader) => reader.HasGenericParameters(provider));
		}
		return false;
	}

	public static Collection<GenericParameter> GetGenericParameters(this IGenericParameterProvider self, ref Collection<GenericParameter> collection, ModuleDefinition module)
	{
		if (!module.HasImage())
		{
			return collection = new GenericParameterCollection(self);
		}
		return module.Read(ref collection, self, (IGenericParameterProvider provider, MetadataReader reader) => reader.ReadGenericParameters(provider));
	}

	public static bool GetHasMarshalInfo(this IMarshalInfoProvider self, ModuleDefinition module)
	{
		if (module.HasImage())
		{
			return module.Read(self, (IMarshalInfoProvider provider, MetadataReader reader) => reader.HasMarshalInfo(provider));
		}
		return false;
	}

	public static MarshalInfo GetMarshalInfo(this IMarshalInfoProvider self, ref MarshalInfo variable, ModuleDefinition module)
	{
		if (!module.HasImage())
		{
			return null;
		}
		return module.Read(ref variable, self, (IMarshalInfoProvider provider, MetadataReader reader) => reader.ReadMarshalInfo(provider));
	}

	public static void CheckModifier(TypeReference modifierType, TypeReference type)
	{
		if (modifierType == null)
		{
			throw new ArgumentNullException("modifierType");
		}
		if (type == null)
		{
			throw new ArgumentNullException("type");
		}
	}

	public static bool HasImplicitThis(this IMethodSignature self)
	{
		if (self.HasThis)
		{
			return !self.ExplicitThis;
		}
		return false;
	}

	public static void MethodSignatureFullName(this IMethodSignature self, StringBuilder builder)
	{
		builder.Append("(");
		if (self.HasParameters)
		{
			Collection<ParameterDefinition> parameters = self.Parameters;
			for (int i = 0; i < parameters.Count; i++)
			{
				ParameterDefinition parameterDefinition = parameters[i];
				if (i > 0)
				{
					builder.Append(",");
				}
				if (parameterDefinition.ParameterType.IsSentinel)
				{
					builder.Append("...,");
				}
				builder.Append(parameterDefinition.ParameterType.FullName);
			}
		}
		builder.Append(")");
	}

	public static bool GetAttributes(this uint self, uint attributes)
	{
		return (self & attributes) != 0;
	}

	public static uint SetAttributes(this uint self, uint attributes, bool value)
	{
		if (value)
		{
			return self | attributes;
		}
		return self & ~attributes;
	}

	public static bool GetMaskedAttributes(this uint self, uint mask, uint attributes)
	{
		return (self & mask) == attributes;
	}

	public static uint SetMaskedAttributes(this uint self, uint mask, uint attributes, bool value)
	{
		if (value)
		{
			self &= ~mask;
			return self | attributes;
		}
		return self & ~(mask & attributes);
	}

	public static bool GetAttributes(this ushort self, ushort attributes)
	{
		return (self & attributes) != 0;
	}

	public static ushort SetAttributes(this ushort self, ushort attributes, bool value)
	{
		if (value)
		{
			return (ushort)(self | attributes);
		}
		return (ushort)(self & ~attributes);
	}

	public static bool GetMaskedAttributes(this ushort self, ushort mask, uint attributes)
	{
		return (self & mask) == attributes;
	}

	public static ushort SetMaskedAttributes(this ushort self, ushort mask, uint attributes, bool value)
	{
		if (value)
		{
			self = (ushort)(self & ~mask);
			return (ushort)(self | attributes);
		}
		return (ushort)(self & ~(mask & attributes));
	}

	public static ParameterDefinition GetParameter(this Mono.Cecil.Cil.MethodBody self, int index)
	{
		MethodDefinition method = self.method;
		if (method.HasThis)
		{
			if (index == 0)
			{
				return self.ThisParameter;
			}
			index--;
		}
		Collection<ParameterDefinition> parameters = method.Parameters;
		if (index < 0 || index >= parameters.size)
		{
			return null;
		}
		return parameters[index];
	}

	public static VariableDefinition GetVariable(this Mono.Cecil.Cil.MethodBody self, int index)
	{
		Collection<VariableDefinition> variables = self.Variables;
		if (index < 0 || index >= variables.size)
		{
			return null;
		}
		return variables[index];
	}

	public static bool GetSemantics(this MethodDefinition self, MethodSemanticsAttributes semantics)
	{
		return (self.SemanticsAttributes & semantics) != 0;
	}

	public static void SetSemantics(this MethodDefinition self, MethodSemanticsAttributes semantics, bool value)
	{
		if (value)
		{
			self.SemanticsAttributes |= semantics;
		}
		else
		{
			self.SemanticsAttributes &= (MethodSemanticsAttributes)(ushort)(~(int)semantics);
		}
	}

	public static bool IsVarArg(this IMethodSignature self)
	{
		return (self.CallingConvention & MethodCallingConvention.VarArg) != 0;
	}

	public static int GetSentinelPosition(this IMethodSignature self)
	{
		if (!self.HasParameters)
		{
			return -1;
		}
		Collection<ParameterDefinition> parameters = self.Parameters;
		for (int i = 0; i < parameters.Count; i++)
		{
			if (parameters[i].ParameterType.IsSentinel)
			{
				return i;
			}
		}
		return -1;
	}

	public static void CheckParameters(object parameters)
	{
		if (parameters == null)
		{
			throw new ArgumentNullException("parameters");
		}
	}

	public static bool HasImage(this ModuleDefinition self)
	{
		return self?.HasImage ?? false;
	}

	public static bool IsCorlib(this ModuleDefinition module)
	{
		if (module.Assembly == null)
		{
			return false;
		}
		return module.Assembly.Name.Name == "mscorlib";
	}

	public static string GetFullyQualifiedName(this Stream self)
	{
		if (!(self is FileStream fileStream))
		{
			return string.Empty;
		}
		return Path.GetFullPath(fileStream.Name);
	}

	public static TargetRuntime ParseRuntime(this string self)
	{
		switch (self[1])
		{
		case '1':
			if (self[3] != '0')
			{
				return TargetRuntime.Net_1_1;
			}
			return TargetRuntime.Net_1_0;
		case '2':
			return TargetRuntime.Net_2_0;
		default:
			return TargetRuntime.Net_4_0;
		}
	}

	public static string RuntimeVersionString(this TargetRuntime runtime)
	{
		return runtime switch
		{
			TargetRuntime.Net_1_0 => "v1.0.3705", 
			TargetRuntime.Net_1_1 => "v1.1.4322", 
			TargetRuntime.Net_2_0 => "v2.0.50727", 
			_ => "v4.0.30319", 
		};
	}

	public static TypeReference GetEnumUnderlyingType(this TypeDefinition self)
	{
		Collection<FieldDefinition> fields = self.Fields;
		for (int i = 0; i < fields.Count; i++)
		{
			FieldDefinition fieldDefinition = fields[i];
			if (!fieldDefinition.IsStatic)
			{
				return fieldDefinition.FieldType;
			}
		}
		throw new ArgumentException();
	}

	public static TypeDefinition GetNestedType(this TypeDefinition self, string fullname)
	{
		if (!self.HasNestedTypes)
		{
			return null;
		}
		Collection<TypeDefinition> nestedTypes = self.NestedTypes;
		for (int i = 0; i < nestedTypes.Count; i++)
		{
			TypeDefinition typeDefinition = nestedTypes[i];
			if (typeDefinition.TypeFullName() == fullname)
			{
				return typeDefinition;
			}
		}
		return null;
	}

	public static bool IsPrimitive(this ElementType self)
	{
		switch (self)
		{
		case ElementType.Boolean:
		case ElementType.Char:
		case ElementType.I1:
		case ElementType.U1:
		case ElementType.I2:
		case ElementType.U2:
		case ElementType.I4:
		case ElementType.U4:
		case ElementType.I8:
		case ElementType.U8:
		case ElementType.R4:
		case ElementType.R8:
		case ElementType.I:
		case ElementType.U:
			return true;
		default:
			return false;
		}
	}

	public static string TypeFullName(this TypeReference self)
	{
		if (!string.IsNullOrEmpty(self.Namespace))
		{
			return self.Namespace + "." + self.Name;
		}
		return self.Name;
	}

	public static bool IsTypeOf(this TypeReference self, string @namespace, string name)
	{
		if (self.Name == name)
		{
			return self.Namespace == @namespace;
		}
		return false;
	}

	public static bool IsTypeSpecification(this TypeReference type)
	{
		switch (type.etype)
		{
		case ElementType.Ptr:
		case ElementType.ByRef:
		case ElementType.Var:
		case ElementType.Array:
		case ElementType.GenericInst:
		case ElementType.FnPtr:
		case ElementType.SzArray:
		case ElementType.MVar:
		case ElementType.CModReqD:
		case ElementType.CModOpt:
		case ElementType.Sentinel:
		case ElementType.Pinned:
			return true;
		default:
			return false;
		}
	}

	public static TypeDefinition CheckedResolve(this TypeReference self)
	{
		return self.Resolve() ?? throw new ResolutionException(self);
	}

	public static void CheckType(TypeReference type)
	{
		if (type == null)
		{
			throw new ArgumentNullException("type");
		}
	}

	public static RSA CreateRSA(this StrongNameKeyPair key_pair)
	{
		if (!TryGetKeyContainer(key_pair, out var key, out var key_container))
		{
			return Mono.Security.Cryptography.CryptoConvert.FromCapiKeyBlob(key);
		}
		return new RSACryptoServiceProvider(new CspParameters
		{
			Flags = CspProviderFlags.UseMachineKeyStore,
			KeyContainerName = key_container,
			KeyNumber = 2
		});
	}

	private static bool TryGetKeyContainer(ISerializable key_pair, out byte[] key, out string key_container)
	{
		SerializationInfo serializationInfo = new SerializationInfo(typeof(StrongNameKeyPair), new FormatterConverter());
		key_pair.GetObjectData(serializationInfo, default(StreamingContext));
		key = (byte[])serializationInfo.GetValue("_keyPairArray", typeof(byte[]));
		key_container = serializationInfo.GetString("_keyPairContainer");
		return key_container != null;
	}

	public static bool IsNullOrEmpty<T>(this T[] self)
	{
		if (self != null)
		{
			return self.Length == 0;
		}
		return true;
	}

	public static bool IsNullOrEmpty<T>(this Collection<T> self)
	{
		if (self != null)
		{
			return self.size == 0;
		}
		return true;
	}

	public static T[] Resize<T>(this T[] self, int length)
	{
		Array.Resize(ref self, length);
		return self;
	}
}
