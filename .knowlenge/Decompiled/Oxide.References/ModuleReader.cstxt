using System;
using Mono.Cecil;
using Mono.Cecil.Cil;
using Mono.Cecil.PE;

internal abstract class ModuleReader
{
	protected readonly Image image;

	protected readonly ModuleDefinition module;

	protected ModuleReader(Image image, ReadingMode mode)
	{
		this.image = image;
		module = new ModuleDefinition(image);
		module.ReadingMode = mode;
	}

	protected abstract void ReadModule();

	protected void ReadModuleManifest(MetadataReader reader)
	{
		reader.Populate(module);
		ReadAssembly(reader);
	}

	private void ReadAssembly(MetadataReader reader)
	{
		AssemblyNameDefinition assemblyNameDefinition = reader.ReadAssemblyNameDefinition();
		if (assemblyNameDefinition == null)
		{
			module.kind = ModuleKind.NetModule;
			return;
		}
		AssemblyDefinition assemblyDefinition = new AssemblyDefinition();
		assemblyDefinition.Name = assemblyNameDefinition;
		module.assembly = assemblyDefinition;
		assemblyDefinition.main_module = module;
	}

	public static ModuleDefinition CreateModuleFrom(Image image, ReaderParameters parameters)
	{
		ModuleReader moduleReader = CreateModuleReader(image, parameters.ReadingMode);
		ModuleDefinition moduleDefinition = moduleReader.module;
		if (parameters.AssemblyResolver != null)
		{
			moduleDefinition.assembly_resolver = parameters.AssemblyResolver;
		}
		if (parameters.MetadataResolver != null)
		{
			moduleDefinition.metadata_resolver = parameters.MetadataResolver;
		}
		moduleReader.ReadModule();
		ReadSymbols(moduleDefinition, parameters);
		return moduleDefinition;
	}

	private static void ReadSymbols(ModuleDefinition module, ReaderParameters parameters)
	{
		ISymbolReaderProvider symbolReaderProvider = parameters.SymbolReaderProvider;
		if (symbolReaderProvider == null && parameters.ReadSymbols)
		{
			symbolReaderProvider = SymbolProvider.GetPlatformReaderProvider();
		}
		if (symbolReaderProvider != null)
		{
			module.SymbolReaderProvider = symbolReaderProvider;
			ISymbolReader reader = ((parameters.SymbolStream != null) ? symbolReaderProvider.GetSymbolReader(module, parameters.SymbolStream) : symbolReaderProvider.GetSymbolReader(module, module.FullyQualifiedName));
			module.ReadSymbols(reader);
		}
	}

	private static ModuleReader CreateModuleReader(Image image, ReadingMode mode)
	{
		return mode switch
		{
			ReadingMode.Immediate => new ImmediateModuleReader(image), 
			ReadingMode.Deferred => new DeferredModuleReader(image), 
			_ => throw new ArgumentException(), 
		};
	}
}
