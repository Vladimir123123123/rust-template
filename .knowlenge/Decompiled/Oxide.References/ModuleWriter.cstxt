using System;
using System.IO;
using Mono.Cecil;
using Mono.Cecil.Cil;
using Mono.Cecil.PE;

internal static class ModuleWriter
{
	public static void WriteModuleTo(ModuleDefinition module, Stream stream, WriterParameters parameters)
	{
		if ((module.Attributes & ModuleAttributes.ILOnly) == 0)
		{
			throw new NotSupportedException("Writing mixed-mode assemblies is not supported");
		}
		if (module.HasImage && module.ReadingMode == ReadingMode.Deferred)
		{
			ImmediateModuleReader.ReadModule(module);
		}
		module.MetadataSystem.Clear();
		AssemblyNameDefinition assemblyNameDefinition = ((module.assembly != null) ? module.assembly.Name : null);
		string fullyQualifiedName = stream.GetFullyQualifiedName();
		ISymbolWriterProvider symbolWriterProvider = parameters.SymbolWriterProvider;
		if (symbolWriterProvider == null && parameters.WriteSymbols)
		{
			symbolWriterProvider = SymbolProvider.GetPlatformWriterProvider();
		}
		ISymbolWriter symbolWriter = GetSymbolWriter(module, fullyQualifiedName, symbolWriterProvider);
		if (parameters.StrongNameKeyPair != null && assemblyNameDefinition != null)
		{
			assemblyNameDefinition.PublicKey = parameters.StrongNameKeyPair.PublicKey;
			module.Attributes |= ModuleAttributes.StrongNameSigned;
		}
		MetadataBuilder metadata = new MetadataBuilder(module, fullyQualifiedName, symbolWriterProvider, symbolWriter);
		BuildMetadata(module, metadata);
		if (module.symbol_reader != null)
		{
			module.symbol_reader.Dispose();
		}
		ImageWriter imageWriter = ImageWriter.CreateWriter(module, metadata, stream);
		imageWriter.WriteImage();
		if (parameters.StrongNameKeyPair != null)
		{
			CryptoService.StrongName(stream, imageWriter, parameters.StrongNameKeyPair);
		}
		symbolWriter?.Dispose();
	}

	private static void BuildMetadata(ModuleDefinition module, MetadataBuilder metadata)
	{
		if (!module.HasImage)
		{
			metadata.BuildMetadata();
			return;
		}
		module.Read(metadata, delegate(MetadataBuilder builder, MetadataReader _)
		{
			builder.BuildMetadata();
			return builder;
		});
	}

	private static ISymbolWriter GetSymbolWriter(ModuleDefinition module, string fq_name, ISymbolWriterProvider symbol_writer_provider)
	{
		return symbol_writer_provider?.GetSymbolWriter(module, fq_name);
	}
}
