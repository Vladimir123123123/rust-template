using System;

internal sealed class Node
{
	private readonly object[] data;

	private int length;

	public object this[int index]
	{
		get
		{
			if (index >= 0 && index < length)
			{
				return data[index];
			}
			throw new ArgumentOutOfRangeException("index");
		}
		set
		{
			if (index >= 0 && index < length)
			{
				data[index] = value;
				return;
			}
			throw new ArgumentOutOfRangeException("index");
		}
	}

	public int Length => length;

	internal Node(object[] data, int length)
	{
		this.data = data;
		this.length = length;
	}

	public void RemoveLastWithMutate()
	{
		if (length == 0)
		{
			throw new InvalidOperationException();
		}
		length--;
	}

	public Node Append(object value)
	{
		int num = length + 1;
		object[] array;
		if (data == null)
		{
			array = new object[10];
		}
		else if (length == data.Length)
		{
			array = new object[data.Length * 2];
			Array.Copy(data, array, length);
		}
		else
		{
			array = data;
		}
		array[length] = value;
		return new Node(array, num);
	}

	public Node Trim()
	{
		if (length == 0 || length == data.Length)
		{
			return this;
		}
		object[] destinationArray = new object[length];
		Array.Copy(data, destinationArray, length);
		return new Node(destinationArray, length);
	}

	internal int IndexOfString(string value)
	{
		for (int i = 0; i < length; i++)
		{
			if (value == (string)data[i])
			{
				return i;
			}
		}
		return -1;
	}

	internal int IndexOfReference(object instance)
	{
		for (int i = 0; i < length; i++)
		{
			if (instance == data[i])
			{
				return i;
			}
		}
		return -1;
	}

	internal int IndexOf(MatchPredicate predicate, object ctx)
	{
		for (int i = 0; i < length; i++)
		{
			if (predicate(data[i], ctx))
			{
				return i;
			}
		}
		return -1;
	}

	internal void CopyTo(Array array, int offset)
	{
		if (length > 0)
		{
			Array.Copy(data, 0, array, offset, length);
		}
	}

	internal void Clear()
	{
		if (data != null)
		{
			Array.Clear(data, 0, data.Length);
		}
		length = 0;
	}
}
