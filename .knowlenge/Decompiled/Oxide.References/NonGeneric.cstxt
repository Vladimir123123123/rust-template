using System;
using System.IO;
using ProtoBuf.Meta;

public static class NonGeneric
{
	public static object DeepClone(object instance)
	{
		if (instance != null)
		{
			return RuntimeTypeModel.Default.DeepClone(instance);
		}
		return null;
	}

	public static void Serialize(Stream dest, object instance)
	{
		if (instance != null)
		{
			RuntimeTypeModel.Default.Serialize(dest, instance);
		}
	}

	public static object Deserialize(Type type, Stream source)
	{
		return RuntimeTypeModel.Default.Deserialize(source, null, type);
	}

	public static object Merge(Stream source, object instance)
	{
		if (instance == null)
		{
			throw new ArgumentNullException("instance");
		}
		return RuntimeTypeModel.Default.Deserialize(source, instance, instance.GetType(), null);
	}

	public static void SerializeWithLengthPrefix(Stream destination, object instance, PrefixStyle style, int fieldNumber)
	{
		if (instance == null)
		{
			throw new ArgumentNullException("instance");
		}
		RuntimeTypeModel @default = RuntimeTypeModel.Default;
		@default.SerializeWithLengthPrefix(destination, instance, @default.MapType(instance.GetType()), style, fieldNumber);
	}

	public static bool TryDeserializeWithLengthPrefix(Stream source, PrefixStyle style, TypeResolver resolver, out object value)
	{
		value = RuntimeTypeModel.Default.DeserializeWithLengthPrefix(source, null, null, style, 0, resolver);
		return value != null;
	}

	public static bool CanSerialize(Type type)
	{
		return RuntimeTypeModel.Default.IsDefined(type);
	}
}
