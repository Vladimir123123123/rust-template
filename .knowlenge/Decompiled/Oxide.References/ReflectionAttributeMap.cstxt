using System;
using System.Reflection;

private sealed class ReflectionAttributeMap : AttributeMap
{
	private readonly Attribute attribute;

	public override object Target => attribute;

	public override Type AttributeType => attribute.GetType();

	public override bool TryGet(string key, bool publicOnly, out object value)
	{
		MemberInfo[] instanceFieldsAndProperties = Helpers.GetInstanceFieldsAndProperties(attribute.GetType(), publicOnly);
		MemberInfo[] array = instanceFieldsAndProperties;
		foreach (MemberInfo memberInfo in array)
		{
			if (string.Equals(memberInfo.Name, key, StringComparison.OrdinalIgnoreCase))
			{
				if (memberInfo is PropertyInfo propertyInfo)
				{
					value = propertyInfo.GetValue(attribute, null);
					return true;
				}
				if (memberInfo is FieldInfo fieldInfo)
				{
					value = fieldInfo.GetValue(attribute);
					return true;
				}
				throw new NotSupportedException(memberInfo.GetType().Name);
			}
		}
		value = null;
		return false;
	}

	public ReflectionAttributeMap(Attribute attribute)
	{
		this.attribute = attribute;
	}
}
