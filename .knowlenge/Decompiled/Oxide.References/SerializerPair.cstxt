using System;
using System.Reflection.Emit;

internal sealed class SerializerPair : IComparable
{
	public readonly int MetaKey;

	public readonly int BaseKey;

	public readonly MetaType Type;

	public readonly MethodBuilder Serialize;

	public readonly MethodBuilder Deserialize;

	public readonly ILGenerator SerializeBody;

	public readonly ILGenerator DeserializeBody;

	int IComparable.CompareTo(object obj)
	{
		if (obj == null)
		{
			throw new ArgumentException("obj");
		}
		SerializerPair serializerPair = (SerializerPair)obj;
		if (BaseKey == MetaKey)
		{
			if (serializerPair.BaseKey == serializerPair.MetaKey)
			{
				int metaKey = MetaKey;
				return metaKey.CompareTo(serializerPair.MetaKey);
			}
			return 1;
		}
		if (serializerPair.BaseKey == serializerPair.MetaKey)
		{
			return -1;
		}
		int baseKey = BaseKey;
		int num = baseKey.CompareTo(serializerPair.BaseKey);
		if (num == 0)
		{
			int metaKey2 = MetaKey;
			num = metaKey2.CompareTo(serializerPair.MetaKey);
		}
		return num;
	}

	public SerializerPair(int metaKey, int baseKey, MetaType type, MethodBuilder serialize, MethodBuilder deserialize, ILGenerator serializeBody, ILGenerator deserializeBody)
	{
		MetaKey = metaKey;
		BaseKey = baseKey;
		Serialize = serialize;
		Deserialize = deserialize;
		SerializeBody = serializeBody;
		DeserializeBody = deserializeBody;
		Type = type;
	}
}
