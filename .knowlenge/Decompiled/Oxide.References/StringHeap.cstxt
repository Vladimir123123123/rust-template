using System.Collections.Generic;
using System.Text;
using Mono.Cecil.Metadata;
using Mono.Cecil.PE;

internal class StringHeap : Heap
{
	private readonly Dictionary<uint, string> strings = new Dictionary<uint, string>();

	public StringHeap(Section section, uint start, uint size)
		: base(section, start, size)
	{
	}

	public string Read(uint index)
	{
		if (index == 0)
		{
			return string.Empty;
		}
		if (strings.TryGetValue(index, out var value))
		{
			return value;
		}
		if (index > Size - 1)
		{
			return string.Empty;
		}
		value = ReadStringAt(index);
		if (value.Length != 0)
		{
			strings.Add(index, value);
		}
		return value;
	}

	protected virtual string ReadStringAt(uint index)
	{
		int num = 0;
		byte[] data = Section.Data;
		int num2 = (int)(index + Offset);
		for (int i = num2; data[i] != 0; i++)
		{
			num++;
		}
		return Encoding.UTF8.GetString(data, num2, num);
	}
}
