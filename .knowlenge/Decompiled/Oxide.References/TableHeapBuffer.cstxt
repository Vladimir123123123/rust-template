using System;
using Mono.Cecil;
using Mono.Cecil.Metadata;

internal sealed class TableHeapBuffer : HeapBuffer
{
	private readonly ModuleDefinition module;

	private readonly MetadataBuilder metadata;

	internal MetadataTable[] tables = new MetadataTable[45];

	private bool large_string;

	private bool large_blob;

	private readonly int[] coded_index_sizes = new int[13];

	private readonly Func<Table, int> counter;

	public override bool IsEmpty => false;

	public TableHeapBuffer(ModuleDefinition module, MetadataBuilder metadata)
		: base(24)
	{
		this.module = module;
		this.metadata = metadata;
		counter = GetTableLength;
	}

	private int GetTableLength(Table table)
	{
		return tables[(uint)table]?.Length ?? 0;
	}

	public TTable GetTable<TTable>(Table table) where TTable : MetadataTable, new()
	{
		TTable val = (TTable)tables[(uint)table];
		if (val != null)
		{
			return val;
		}
		val = new TTable();
		tables[(uint)table] = val;
		return val;
	}

	public void WriteBySize(uint value, int size)
	{
		if (size == 4)
		{
			WriteUInt32(value);
		}
		else
		{
			WriteUInt16((ushort)value);
		}
	}

	public void WriteBySize(uint value, bool large)
	{
		if (large)
		{
			WriteUInt32(value);
		}
		else
		{
			WriteUInt16((ushort)value);
		}
	}

	public void WriteString(uint @string)
	{
		WriteBySize(@string, large_string);
	}

	public void WriteBlob(uint blob)
	{
		WriteBySize(blob, large_blob);
	}

	public void WriteRID(uint rid, Table table)
	{
		WriteBySize(rid, tables[(uint)table]?.IsLarge ?? false);
	}

	private int GetCodedIndexSize(CodedIndex coded_index)
	{
		int num = coded_index_sizes[(int)coded_index];
		if (num != 0)
		{
			return num;
		}
		return coded_index_sizes[(int)coded_index] = coded_index.GetSize(counter);
	}

	public void WriteCodedRID(uint rid, CodedIndex coded_index)
	{
		WriteBySize(rid, GetCodedIndexSize(coded_index));
	}

	public void WriteTableHeap()
	{
		WriteUInt32(0u);
		WriteByte(GetTableHeapVersion());
		WriteByte(0);
		WriteByte(GetHeapSizes());
		WriteByte(10);
		WriteUInt64(GetValid());
		WriteUInt64(24190111578624uL);
		WriteRowCount();
		WriteTables();
	}

	private void WriteRowCount()
	{
		for (int i = 0; i < tables.Length; i++)
		{
			MetadataTable metadataTable = tables[i];
			if (metadataTable != null && metadataTable.Length != 0)
			{
				WriteUInt32((uint)metadataTable.Length);
			}
		}
	}

	private void WriteTables()
	{
		for (int i = 0; i < tables.Length; i++)
		{
			MetadataTable metadataTable = tables[i];
			if (metadataTable != null && metadataTable.Length != 0)
			{
				metadataTable.Write(this);
			}
		}
	}

	private ulong GetValid()
	{
		ulong num = 0uL;
		for (int i = 0; i < tables.Length; i++)
		{
			MetadataTable metadataTable = tables[i];
			if (metadataTable != null && metadataTable.Length != 0)
			{
				metadataTable.Sort();
				num |= (ulong)(1L << i);
			}
		}
		return num;
	}

	private byte GetHeapSizes()
	{
		byte b = 0;
		if (metadata.string_heap.IsLarge)
		{
			large_string = true;
			b |= 1;
		}
		if (metadata.blob_heap.IsLarge)
		{
			large_blob = true;
			b |= 4;
		}
		return b;
	}

	private byte GetTableHeapVersion()
	{
		TargetRuntime runtime = module.Runtime;
		if (runtime == TargetRuntime.Net_1_0 || runtime == TargetRuntime.Net_1_1)
		{
			return 1;
		}
		return 2;
	}

	public void FixupData(uint data_rva)
	{
		FieldRVATable table = GetTable<FieldRVATable>(Table.FieldRVA);
		if (table.length != 0)
		{
			int num = (GetTable<FieldTable>(Table.Field).IsLarge ? 4 : 2);
			int num2 = position;
			position = table.position;
			for (int i = 0; i < table.length; i++)
			{
				uint num3 = ReadUInt32();
				position -= 4;
				WriteUInt32(num3 + data_rva);
				position += num;
			}
			position = num2;
		}
	}
}
