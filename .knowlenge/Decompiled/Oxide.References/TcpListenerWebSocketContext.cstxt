using System;
using System.Collections.Generic;
using System.Collections.Specialized;
using System.IO;
using System.Net;
using System.Net.Security;
using System.Net.Sockets;
using System.Security.Principal;
using System.Text;
using WebSocketSharp;
using WebSocketSharp.Net;
using WebSocketSharp.Net.WebSockets;

internal class TcpListenerWebSocketContext : WebSocketContext
{
	private WebSocketSharp.Net.CookieCollection _cookies;

	private Logger _logger;

	private NameValueCollection _queryString;

	private HttpRequest _request;

	private bool _secure;

	private Stream _stream;

	private TcpClient _tcpClient;

	private Uri _uri;

	private IPrincipal _user;

	private WebSocket _websocket;

	internal Logger Log => _logger;

	internal Stream Stream => _stream;

	public override WebSocketSharp.Net.CookieCollection CookieCollection => _cookies ?? (_cookies = _request.Cookies);

	public override NameValueCollection Headers => _request.Headers;

	public override string Host => _request.Headers["Host"];

	public override bool IsAuthenticated => _user != null;

	public override bool IsLocal => UserEndPoint.Address.IsLocal();

	public override bool IsSecureConnection => _secure;

	public override bool IsWebSocketRequest => _request.IsWebSocketRequest;

	public override string Origin => _request.Headers["Origin"];

	public override NameValueCollection QueryString => _queryString ?? (_queryString = HttpUtility.InternalParseQueryString((_uri != null) ? _uri.Query : null, Encoding.UTF8));

	public override Uri RequestUri => _uri;

	public override string SecWebSocketKey => _request.Headers["Sec-WebSocket-Key"];

	public override IEnumerable<string> SecWebSocketProtocols
	{
		get
		{
			string protocols = _request.Headers["Sec-WebSocket-Protocol"];
			if (protocols != null)
			{
				string[] array = protocols.Split(new char[1] { ',' });
				foreach (string protocol in array)
				{
					yield return protocol.Trim();
				}
			}
		}
	}

	public override string SecWebSocketVersion => _request.Headers["Sec-WebSocket-Version"];

	public override IPEndPoint ServerEndPoint => (IPEndPoint)_tcpClient.Client.LocalEndPoint;

	public override IPrincipal User => _user;

	public override IPEndPoint UserEndPoint => (IPEndPoint)_tcpClient.Client.RemoteEndPoint;

	public override WebSocket WebSocket => _websocket;

	internal TcpListenerWebSocketContext(TcpClient tcpClient, string protocol, bool secure, ServerSslConfiguration sslConfig, Logger logger)
	{
		_tcpClient = tcpClient;
		_secure = secure;
		_logger = logger;
		NetworkStream stream = tcpClient.GetStream();
		if (secure)
		{
			SslStream sslStream = new SslStream(stream, leaveInnerStreamOpen: false, sslConfig.ClientCertificateValidationCallback);
			sslStream.AuthenticateAsServer(sslConfig.ServerCertificate, sslConfig.ClientCertificateRequired, sslConfig.EnabledSslProtocols, sslConfig.CheckCertificateRevocation);
			_stream = sslStream;
		}
		else
		{
			_stream = stream;
		}
		_request = HttpRequest.Read(_stream, 90000);
		_uri = HttpUtility.CreateRequestUrl(_request.RequestUri, _request.Headers["Host"], _request.IsWebSocketRequest, secure);
		_websocket = new WebSocket(this, protocol);
	}

	internal bool Authenticate(WebSocketSharp.Net.AuthenticationSchemes scheme, string realm, Func<IIdentity, WebSocketSharp.Net.NetworkCredential> credentialsFinder)
	{
		if (scheme == WebSocketSharp.Net.AuthenticationSchemes.Anonymous)
		{
			return true;
		}
		if (scheme == WebSocketSharp.Net.AuthenticationSchemes.None)
		{
			Close(WebSocketSharp.Net.HttpStatusCode.Forbidden);
			return false;
		}
		string chal = new AuthenticationChallenge(scheme, realm).ToString();
		int retry = -1;
		Func<bool> auth = null;
		auth = delegate
		{
			retry++;
			if (retry > 99)
			{
				Close(WebSocketSharp.Net.HttpStatusCode.Forbidden);
				return false;
			}
			IPrincipal principal = HttpUtility.CreateUser(_request.Headers["Authorization"], scheme, realm, _request.HttpMethod, credentialsFinder);
			if (principal == null || !principal.Identity.IsAuthenticated)
			{
				SendAuthenticationChallenge(chal);
				return auth();
			}
			_user = principal;
			return true;
		};
		return auth();
	}

	internal void Close()
	{
		_stream.Close();
		_tcpClient.Close();
	}

	internal void Close(WebSocketSharp.Net.HttpStatusCode code)
	{
		_websocket.Close(HttpResponse.CreateCloseResponse(code));
	}

	internal void SendAuthenticationChallenge(string challenge)
	{
		byte[] array = HttpResponse.CreateUnauthorizedResponse(challenge).ToByteArray();
		_stream.Write(array, 0, array.Length);
		_request = HttpRequest.Read(_stream, 15000);
	}

	public override string ToString()
	{
		return _request.ToString();
	}
}
