using System;
using System.Reflection;

private sealed class UsingBlock : IDisposable
{
	private Local local;

	private CompilerContext ctx;

	private CodeLabel label;

	public UsingBlock(CompilerContext ctx, Local local)
	{
		if (ctx == null)
		{
			throw new ArgumentNullException("ctx");
		}
		if (local == null)
		{
			throw new ArgumentNullException("local");
		}
		Type type = local.Type;
		if ((!type.IsValueType && !type.IsSealed) || ctx.MapType(typeof(IDisposable)).IsAssignableFrom(type))
		{
			this.local = local;
			this.ctx = ctx;
			label = ctx.BeginTry();
		}
	}

	public void Dispose()
	{
		if (this.local == null || ctx == null)
		{
			return;
		}
		ctx.EndTry(label, @short: false);
		ctx.BeginFinally();
		Type type = ctx.MapType(typeof(IDisposable));
		MethodInfo method = type.GetMethod("Dispose");
		Type type2 = this.local.Type;
		if (type2.IsValueType)
		{
			ctx.LoadAddress(this.local, type2);
			if (ctx.MetadataVersion == ILVersion.Net1)
			{
				ctx.LoadValue(this.local);
				ctx.CastToObject(type2);
			}
			else
			{
				ctx.Constrain(type2);
			}
			ctx.EmitCall(method);
		}
		else
		{
			CodeLabel codeLabel = ctx.DefineLabel();
			if (type.IsAssignableFrom(type2))
			{
				ctx.LoadValue(this.local);
				ctx.BranchIfFalse(codeLabel, @short: true);
				ctx.LoadAddress(this.local, type2);
			}
			else
			{
				using Local local = new Local(ctx, type);
				ctx.LoadValue(this.local);
				ctx.TryCast(type);
				ctx.CopyValue();
				ctx.StoreValue(local);
				ctx.BranchIfFalse(codeLabel, @short: true);
				ctx.LoadAddress(local, type);
			}
			ctx.EmitCall(method);
			ctx.MarkLabel(codeLabel);
		}
		ctx.EndFinally();
		this.local = null;
		ctx = null;
		label = default(CodeLabel);
	}
}
