using System;
using System.Collections.Generic;
using Newtonsoft.Json;
using Oxide.Core;
using Oxide.Game.Rust.Cui;
using UnityEngine;

public static class CuiHelper
{
	public static string ToJson(List<CuiElement> elements, bool format = false)
	{
		return JsonConvert.SerializeObject(elements, format ? Formatting.Indented : Formatting.None, new JsonSerializerSettings
		{
			DefaultValueHandling = DefaultValueHandling.Ignore
		}).Replace("\\n", "\n");
	}

	public static List<CuiElement> FromJson(string json)
	{
		return JsonConvert.DeserializeObject<List<CuiElement>>(json);
	}

	public static string GetGuid()
	{
		return Guid.NewGuid().ToString().Replace("-", string.Empty);
	}

	public static bool AddUi(BasePlayer player, List<CuiElement> elements)
	{
		return AddUi(player, ToJson(elements));
	}

	public static bool AddUi(BasePlayer player, string json)
	{
		if (player?.net != null && Interface.CallHook("CanUseUI", player, json) == null)
		{
			CommunityEntity.ServerInstance.ClientRPC(RpcTarget.Player("AddUI", player.net.connection), json);
			return true;
		}
		return false;
	}

	public static bool DestroyUi(BasePlayer player, string elem)
	{
		if (player?.net != null)
		{
			Interface.CallHook("OnDestroyUI", player, elem);
			CommunityEntity.ServerInstance.ClientRPC(RpcTarget.Player("DestroyUI", player.net.connection), elem);
			return true;
		}
		return false;
	}

	public static void SetColor(this ICuiColor elem, Color color)
	{
		elem.Color = $"{color.r} {color.g} {color.b} {color.a}";
	}

	public static Color GetColor(this ICuiColor elem)
	{
		return ColorEx.Parse(elem.Color);
	}
}
