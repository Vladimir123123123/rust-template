using System;
using System.Linq;
using System.Reflection;
using Network;
using Oxide.Core;
using Oxide.Core.Libraries;
using Oxide.Game.Rust.Libraries;
using ProtoBuf;

public class Rust : Library
{
	internal readonly Player Player = new Player();

	internal readonly Oxide.Game.Rust.Libraries.Server Server = new Oxide.Game.Rust.Libraries.Server();

	public override bool IsGlobal => false;

	[LibraryFunction("PrivateBindingFlag")]
	public BindingFlags PrivateBindingFlag()
	{
		return BindingFlags.Instance | BindingFlags.Static | BindingFlags.Public | BindingFlags.NonPublic;
	}

	[LibraryFunction("QuoteSafe")]
	public string QuoteSafe(string str)
	{
		return str.Quote();
	}

	[LibraryFunction("BroadcastChat")]
	public void BroadcastChat(string name, string message = null, string userId = "0")
	{
		Server.Broadcast(message, name, Convert.ToUInt64(userId));
	}

	[LibraryFunction("SendChatMessage")]
	public void SendChatMessage(BasePlayer player, string name, string message = null, string userId = "0")
	{
		Player.Message(player, message, name, Convert.ToUInt64(userId));
	}

	[LibraryFunction("RunClientCommand")]
	public void RunClientCommand(BasePlayer player, string command, params object[] args)
	{
		Player.Command(player, command, args);
	}

	[LibraryFunction("RunServerCommand")]
	public void RunServerCommand(string command, params object[] args)
	{
		Server.Command(command, args);
	}

	[LibraryFunction("UserIDFromConnection")]
	public string UserIDFromConnection(Connection connection)
	{
		return connection.userid.ToString();
	}

	[LibraryFunction("UserIDsFromBuildingPrivilege")]
	public Array UserIDsFromBuildingPrivlidge(BuildingPrivlidge priv)
	{
		return priv.authorizedPlayers.Select((PlayerNameID eid) => eid.userid.ToString()).ToArray();
	}

	[LibraryFunction("UserIDFromPlayer")]
	public string UserIDFromPlayer(BasePlayer player)
	{
		return player.UserIDString;
	}

	[LibraryFunction("OwnerIDFromEntity")]
	public string OwnerIDFromEntity(BaseEntity entity)
	{
		return entity.OwnerID.ToString();
	}

	[LibraryFunction("FindPlayer")]
	public BasePlayer FindPlayer(string nameOrIdOrIp)
	{
		return Player.Find(nameOrIdOrIp);
	}

	[LibraryFunction("FindPlayerByName")]
	public BasePlayer FindPlayerByName(string name)
	{
		return Player.Find(name);
	}

	[LibraryFunction("FindPlayerById")]
	public BasePlayer FindPlayerById(ulong id)
	{
		return Player.FindById(id);
	}

	[LibraryFunction("FindPlayerByIdString")]
	public BasePlayer FindPlayerByIdString(string id)
	{
		return Player.FindById(id);
	}

	[LibraryFunction("ForcePlayerPosition")]
	public void ForcePlayerPosition(BasePlayer player, float x, float y, float z)
	{
		Player.Teleport(player, x, y, z);
	}
}
