using System;
using System.Globalization;
using Oxide.Core;
using Oxide.Core.Libraries.Covalence;

public class RustConsolePlayer : IPlayer
{
	public object Object => null;

	public CommandType LastCommand
	{
		get
		{
			return CommandType.Console;
		}
		set
		{
		}
	}

	public string Name
	{
		get
		{
			return "Server Console";
		}
		set
		{
		}
	}

	public string Id => "server_console";

	public CultureInfo Language => CultureInfo.InstalledUICulture;

	public string Address => "127.0.0.1";

	public int Ping => 0;

	public bool IsAdmin => true;

	public bool IsBanned => false;

	public bool IsConnected => true;

	public bool IsSleeping => false;

	public bool IsServer => true;

	public TimeSpan BanTimeRemaining => TimeSpan.Zero;

	public float Health { get; set; }

	public float MaxHealth { get; set; }

	public void Ban(string reason, TimeSpan duration)
	{
	}

	public void Heal(float amount)
	{
	}

	public void Hurt(float amount)
	{
	}

	public void Kick(string reason)
	{
	}

	public void Kill()
	{
	}

	public void Rename(string name)
	{
	}

	public void Teleport(float x, float y, float z)
	{
	}

	public void Teleport(GenericPosition pos)
	{
		Teleport(pos.X, pos.Y, pos.Z);
	}

	public void Unban()
	{
	}

	public void Position(out float x, out float y, out float z)
	{
		x = 0f;
		y = 0f;
		z = 0f;
	}

	public GenericPosition Position()
	{
		return new GenericPosition(0f, 0f, 0f);
	}

	public void Message(string message, string prefix, params object[] args)
	{
		message = ((args.Length != 0) ? string.Format(Formatter.ToPlaintext(message), args) : Formatter.ToPlaintext(message));
		string format = ((prefix != null) ? (prefix + " " + message) : message);
		Interface.Oxide.LogInfo(format);
	}

	public void Message(string message)
	{
		Message(message, null);
	}

	public void Reply(string message, string prefix, params object[] args)
	{
		Message(message, prefix, args);
	}

	public void Reply(string message)
	{
		Message(message, null);
	}

	public void Command(string command, params object[] args)
	{
		ConsoleSystem.Run(ConsoleSystem.Option.Server, command, args);
	}

	public bool HasPermission(string perm)
	{
		return true;
	}

	public void GrantPermission(string perm)
	{
	}

	public void RevokePermission(string perm)
	{
	}

	public bool BelongsToGroup(string group)
	{
		return false;
	}

	public void AddToGroup(string group)
	{
	}

	public void RemoveFromGroup(string group)
	{
	}
}
