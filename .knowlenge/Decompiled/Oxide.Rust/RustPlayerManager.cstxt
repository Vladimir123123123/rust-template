using System;
using System.Collections.Generic;
using System.Linq;
using Oxide.Core;
using Oxide.Core.Libraries.Covalence;
using Oxide.Game.Rust.Libraries.Covalence;
using ProtoBuf;

public class RustPlayerManager : IPlayerManager
{
	[ProtoContract(ImplicitFields = ImplicitFields.AllFields)]
	private struct PlayerRecord
	{
		public string Name;

		public ulong Id;
	}

	private IDictionary<string, PlayerRecord> playerData;

	private IDictionary<string, RustPlayer> allPlayers;

	private IDictionary<string, RustPlayer> connectedPlayers;

	public IEnumerable<IPlayer> All => allPlayers.Values.Cast<IPlayer>();

	public IEnumerable<IPlayer> Connected => connectedPlayers.Values.Cast<IPlayer>();

	public IEnumerable<IPlayer> Sleeping => BasePlayer.sleepingPlayerList.Select((BasePlayer p) => p.IPlayer);

	internal void Initialize()
	{
		Utility.DatafileToProto<Dictionary<string, PlayerRecord>>("oxide.covalence");
		playerData = ProtoStorage.Load<Dictionary<string, PlayerRecord>>(new string[1] { "oxide.covalence" }) ?? new Dictionary<string, PlayerRecord>();
		allPlayers = new Dictionary<string, RustPlayer>();
		connectedPlayers = new Dictionary<string, RustPlayer>();
		foreach (KeyValuePair<string, PlayerRecord> playerDatum in playerData)
		{
			allPlayers.Add(playerDatum.Key, new RustPlayer(playerDatum.Value.Id, playerDatum.Value.Name));
		}
	}

	internal void PlayerJoin(ulong userId, string name)
	{
		string key = userId.ToString();
		if (playerData.TryGetValue(key, out var value))
		{
			value.Name = name;
			playerData[key] = value;
			allPlayers.Remove(key);
			allPlayers.Add(key, new RustPlayer(userId, name));
		}
		else
		{
			PlayerRecord playerRecord = default(PlayerRecord);
			playerRecord.Id = userId;
			playerRecord.Name = name;
			value = playerRecord;
			playerData.Add(key, value);
			allPlayers.Add(key, new RustPlayer(userId, name));
		}
	}

	internal void PlayerConnected(BasePlayer player)
	{
		allPlayers[player.UserIDString] = new RustPlayer(player);
		connectedPlayers[player.UserIDString] = new RustPlayer(player);
	}

	internal void PlayerDisconnected(BasePlayer player)
	{
		connectedPlayers.Remove(player.UserIDString);
	}

	internal void SavePlayerData()
	{
		ProtoStorage.Save(playerData, "oxide.covalence");
	}

	public IPlayer FindPlayerById(string id)
	{
		if (!allPlayers.TryGetValue(id, out var value))
		{
			return null;
		}
		return value;
	}

	public IPlayer FindPlayerByObj(object obj)
	{
		return connectedPlayers.Values.FirstOrDefault((RustPlayer p) => p.Object == obj);
	}

	public IPlayer FindPlayer(string partialNameOrId)
	{
		IPlayer[] array = FindPlayers(partialNameOrId).ToArray();
		if (array.Length != 1)
		{
			return null;
		}
		return array[0];
	}

	public IEnumerable<IPlayer> FindPlayers(string partialNameOrId)
	{
		List<IPlayer> list = new List<IPlayer>();
		foreach (RustPlayer value in connectedPlayers.Values)
		{
			if (value.Name.Equals(partialNameOrId, StringComparison.OrdinalIgnoreCase) || value.Id == partialNameOrId)
			{
				list = new List<IPlayer> { value };
				break;
			}
			if (value.Name.IndexOf(partialNameOrId, StringComparison.OrdinalIgnoreCase) >= 0)
			{
				list.Add(value);
			}
		}
		if (list.Count() > 0)
		{
			return list;
		}
		foreach (RustPlayer value2 in allPlayers.Values)
		{
			if (value2.Name.Equals(partialNameOrId, StringComparison.OrdinalIgnoreCase) || value2.Id == partialNameOrId)
			{
				list = new List<IPlayer> { value2 };
				break;
			}
			if (value2.Name.IndexOf(partialNameOrId, StringComparison.OrdinalIgnoreCase) >= 0)
			{
				list.Add(value2);
			}
		}
		return list;
	}
}
