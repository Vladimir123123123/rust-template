using System;
using System.IO;
using System.Linq;
using System.Reflection;
using Oxide.Core;
using Oxide.Core.Extensions;
using Oxide.Core.SQLite.Libraries;

public class SQLiteExtension : Extension
{
	internal static Assembly Assembly = Assembly.GetExecutingAssembly();

	internal static AssemblyName AssemblyName = Assembly.GetName();

	internal static VersionNumber AssemblyVersion = new VersionNumber(AssemblyName.Version.Major, AssemblyName.Version.Minor, AssemblyName.Version.Build);

	internal static string AssemblyAuthors = ((AssemblyCompanyAttribute)Attribute.GetCustomAttribute(Assembly, typeof(AssemblyCompanyAttribute), inherit: false)).Company;

	public override bool IsCoreExtension => true;

	public override string Name => "SQLite";

	public override string Author => AssemblyAuthors;

	public override VersionNumber Version => AssemblyVersion;

	public SQLiteExtension(ExtensionManager manager)
		: base(manager)
	{
		if (Environment.OSVersion.Platform == PlatformID.Unix)
		{
			string extensionDirectory = Interface.Oxide.ExtensionDirectory;
			string path = Path.Combine(extensionDirectory, "System.Data.SQLite.dll.config");
			if (!File.Exists(path) || new string[2] { "target=\"x64", "target=\"./x64" }.Any(File.ReadAllText(path).Contains))
			{
				File.WriteAllText(path, "<configuration>\n<dllmap dll=\"sqlite3\" target=\"" + extensionDirectory + "/x86/libsqlite3.so\" os=\"!windows,osx\" cpu=\"x86\" />\n<dllmap dll=\"sqlite3\" target=\"" + extensionDirectory + "/x64/libsqlite3.so\" os=\"!windows,osx\" cpu=\"x86-64\" />\n</configuration>");
			}
		}
	}

	public override void Load()
	{
		base.Manager.RegisterLibrary("SQLite", new SQLite());
	}

	public override void LoadPluginWatchers(string pluginDirectory)
	{
	}

	public override void OnModLoad()
	{
	}
}
