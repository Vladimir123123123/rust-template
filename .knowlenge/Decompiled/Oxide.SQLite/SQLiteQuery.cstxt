using System;
using System.Collections.Generic;
using System.Data;
using System.Data.SQLite;
using Oxide.Core.Database;

public class SQLiteQuery
{
	private SQLiteCommand _cmd;

	private SQLiteConnection _connection;

	public Action<List<Dictionary<string, object>>> Callback { get; internal set; }

	public Action<int> CallbackNonQuery { get; internal set; }

	public Sql Sql { get; internal set; }

	public Connection Connection { get; internal set; }

	public bool NonQuery { get; internal set; }

	private void Cleanup()
	{
		if (_cmd != null)
		{
			_cmd.Dispose();
			_cmd = null;
		}
		_connection = null;
	}

	public void Handle()
	{
		List<Dictionary<string, object>> list = null;
		int nonQueryResult = 0;
		long lastInsertRowId = 0L;
		try
		{
			if (Connection == null)
			{
				throw new Exception("Connection is null");
			}
			_connection = (SQLiteConnection)Connection.Con;
			if (_connection.State == ConnectionState.Closed)
			{
				_connection.Open();
			}
			_cmd = _connection.CreateCommand();
			_cmd.CommandText = Sql.SQL;
			Sql.AddParams(_cmd, Sql.Arguments, "@");
			if (NonQuery)
			{
				nonQueryResult = _cmd.ExecuteNonQuery();
			}
			else
			{
				using SQLiteDataReader sQLiteDataReader = _cmd.ExecuteReader();
				list = new List<Dictionary<string, object>>();
				while (sQLiteDataReader.Read())
				{
					Dictionary<string, object> dictionary = new Dictionary<string, object>();
					for (int i = 0; i < sQLiteDataReader.FieldCount; i++)
					{
						dictionary.Add(sQLiteDataReader.GetName(i), sQLiteDataReader.GetValue(i));
					}
					list.Add(dictionary);
				}
			}
			lastInsertRowId = _connection.LastInsertRowId;
			Cleanup();
		}
		catch (Exception ex)
		{
			string text = "Sqlite handle raised an exception";
			if (Connection?.Plugin != null)
			{
				text += $" in '{Connection.Plugin.Name} v{Connection.Plugin.Version}' plugin";
			}
			Interface.Oxide.LogException(text, ex);
			Cleanup();
		}
		Interface.Oxide.NextTick(delegate
		{
			Connection?.Plugin?.TrackStart();
			try
			{
				if (Connection != null)
				{
					Connection.LastInsertRowId = lastInsertRowId;
				}
				if (!NonQuery)
				{
					Callback(list);
				}
				else
				{
					CallbackNonQuery?.Invoke(nonQueryResult);
				}
			}
			catch (Exception ex2)
			{
				string text2 = "Sqlite command callback raised an exception";
				if (Connection?.Plugin != null)
				{
					text2 += $" in '{Connection.Plugin.Name} v{Connection.Plugin.Version}' plugin";
				}
				Interface.Oxide.LogException(text2, ex2);
			}
			Connection?.Plugin?.TrackEnd();
		});
	}
}
