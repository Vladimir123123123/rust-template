using System;
using System.Reflection;
using Oxide.Core;
using Oxide.Core.Extensions;
using Oxide.Core.Unity;
using Oxide.Core.Unity.Plugins;
using UnityEngine;

public class UnityExtension : Extension
{
	internal static Assembly Assembly = Assembly.GetExecutingAssembly();

	internal static AssemblyName AssemblyName = Assembly.GetName();

	internal static VersionNumber AssemblyVersion = new VersionNumber(AssemblyName.Version.Major, AssemblyName.Version.Minor, AssemblyName.Version.Build);

	internal static string AssemblyAuthors = ((AssemblyCompanyAttribute)Attribute.GetCustomAttribute(Assembly, typeof(AssemblyCompanyAttribute), inherit: false)).Company;

	public override bool IsCoreExtension => true;

	public override string Name => "Unity";

	public override string Author => AssemblyAuthors;

	public override VersionNumber Version => AssemblyVersion;

	public UnityExtension(ExtensionManager manager)
		: base(manager)
	{
	}

	public override void Load()
	{
		Interface.Oxide.LogInfo("Unity version: " + Application.unityVersion);
		base.Manager.RegisterPluginLoader(new UnityPluginLoader());
		Interface.Oxide.RegisterEngineClock(() => UnityScript.RealtimeSinceStartup);
		UnityScript.Create();
	}

	public override void LoadPluginWatchers(string pluginDirectory)
	{
	}

	public override void OnModLoad()
	{
	}
}
