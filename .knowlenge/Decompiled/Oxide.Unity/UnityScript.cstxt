using System;
using System.Reflection;
using Oxide.Core;
using Oxide.Core.Unity;
using UnityEngine;

public class UnityScript : MonoBehaviour
{
	private OxideMod oxideMod;

	public static GameObject Instance { get; private set; }

	public static float RealtimeSinceStartup { get; private set; }

	public static void Create()
	{
		Instance = new GameObject("Oxide.Core.Unity");
		UnityEngine.Object.DontDestroyOnLoad(Instance);
		Instance.AddComponent<UnityScript>();
	}

	private void Awake()
	{
		RealtimeSinceStartup = Time.realtimeSinceStartup;
		oxideMod = Interface.Oxide;
		EventInfo @event = typeof(Application).GetEvent("logMessageReceived");
		if ((object)@event == null)
		{
			Application.LogCallback logCallback = typeof(Application).GetField("s_LogCallback", BindingFlags.Static | BindingFlags.NonPublic)?.GetValue(null) as Application.LogCallback;
			if (logCallback == null)
			{
				Interface.Oxide.LogWarning("No Unity application log callback is registered");
			}
			Application.RegisterLogCallback(delegate(string message, string stack_trace, LogType type)
			{
				logCallback?.Invoke(message, stack_trace, type);
				LogMessageReceived(message, stack_trace, type);
			});
		}
		else
		{
			Delegate @delegate = Delegate.CreateDelegate(@event.EventHandlerType, this, "LogMessageReceived");
			@event.GetAddMethod().Invoke(null, new object[1] { @delegate });
		}
	}

	private void Update()
	{
		RealtimeSinceStartup = Time.realtimeSinceStartup;
		oxideMod.OnFrame(Time.deltaTime);
	}

	private void OnDestroy()
	{
		if (!oxideMod.IsShuttingDown)
		{
			oxideMod.LogWarning("The Oxide Unity Script was destroyed (creating a new instance)");
			oxideMod.NextTick(Create);
		}
	}

	private void OnApplicationQuit()
	{
		if (!oxideMod.IsShuttingDown)
		{
			Interface.Call("OnServerShutdown");
			Interface.Oxide.OnShutdown();
		}
	}

	private void LogMessageReceived(string message, string stackTrace, LogType type)
	{
		if (type == LogType.Exception)
		{
			RemoteLogger.Exception(message, stackTrace);
		}
	}
}
