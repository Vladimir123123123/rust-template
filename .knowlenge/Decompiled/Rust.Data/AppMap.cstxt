using System;
using System.Collections.Generic;
using System.IO;
using Facepunch;
using ProtoBuf;
using SilentOrbit.ProtocolBuffers;

public class AppMap : IDisposable, Pool.IPooled, IProto
{
	public class Monument : IDisposable, Pool.IPooled, IProto
	{
		[NonSerialized]
		public string token;

		[NonSerialized]
		public float x;

		[NonSerialized]
		public float y;

		public bool ShouldPool = true;

		private bool _disposed;

		public static void ResetToPool(Monument instance)
		{
			if (instance.ShouldPool)
			{
				instance.token = string.Empty;
				instance.x = 0f;
				instance.y = 0f;
				Pool.Free(ref instance);
			}
		}

		public void ResetToPool()
		{
			ResetToPool(this);
		}

		public virtual void Dispose()
		{
			if (!ShouldPool)
			{
				throw new Exception("Trying to dispose Monument with ShouldPool set to false!");
			}
			if (!_disposed)
			{
				ResetToPool();
				_disposed = true;
			}
		}

		public virtual void EnterPool()
		{
			_disposed = true;
		}

		public virtual void LeavePool()
		{
			_disposed = false;
		}

		public void CopyTo(Monument instance)
		{
			instance.token = token;
			instance.x = x;
			instance.y = y;
		}

		public Monument Copy()
		{
			Monument monument = Pool.Get<Monument>();
			CopyTo(monument);
			return monument;
		}

		public static Monument Deserialize(Stream stream)
		{
			Monument monument = Pool.Get<Monument>();
			Deserialize(stream, monument, isDelta: false);
			return monument;
		}

		public static Monument DeserializeLengthDelimited(Stream stream)
		{
			Monument monument = Pool.Get<Monument>();
			DeserializeLengthDelimited(stream, monument, isDelta: false);
			return monument;
		}

		public static Monument DeserializeLength(Stream stream, int length)
		{
			Monument monument = Pool.Get<Monument>();
			DeserializeLength(stream, length, monument, isDelta: false);
			return monument;
		}

		public static Monument Deserialize(byte[] buffer)
		{
			Monument monument = Pool.Get<Monument>();
			using MemoryStream stream = new MemoryStream(buffer);
			Deserialize(stream, monument, isDelta: false);
			return monument;
		}

		public void FromProto(Stream stream, bool isDelta = false)
		{
			Deserialize(stream, this, isDelta);
		}

		public virtual void WriteToStream(Stream stream)
		{
			Serialize(stream, this);
		}

		public virtual void WriteToStreamDelta(Stream stream, Monument previous)
		{
			if (previous == null)
			{
				Serialize(stream, this);
			}
			else
			{
				SerializeDelta(stream, this, previous);
			}
		}

		public virtual void ReadFromStream(Stream stream, int size, bool isDelta = false)
		{
			DeserializeLength(stream, size, this, isDelta);
		}

		public static Monument Deserialize(byte[] buffer, Monument instance, bool isDelta = false)
		{
			using MemoryStream stream = new MemoryStream(buffer);
			Deserialize(stream, instance, isDelta);
			return instance;
		}

		public static Monument Deserialize(Stream stream, Monument instance, bool isDelta)
		{
			if (!isDelta)
			{
				instance.x = 0f;
				instance.y = 0f;
			}
			while (true)
			{
				int num = stream.ReadByte();
				switch (num)
				{
				case 10:
					instance.token = ProtocolParser.ReadString(stream);
					continue;
				case 21:
					instance.x = ProtocolParser.ReadSingle(stream);
					continue;
				case 29:
					instance.y = ProtocolParser.ReadSingle(stream);
					continue;
				case -1:
					return instance;
				}
				Key key = ProtocolParser.ReadKey((byte)num, stream);
				if (key.Field == 0)
				{
					throw new ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
				}
				ProtocolParser.SkipKey(stream, key);
			}
		}

		public static Monument DeserializeLengthDelimited(Stream stream, Monument instance, bool isDelta)
		{
			if (!isDelta)
			{
				instance.x = 0f;
				instance.y = 0f;
			}
			long num = ProtocolParser.ReadUInt32(stream);
			num += stream.Position;
			while (stream.Position < num)
			{
				int num2 = stream.ReadByte();
				switch (num2)
				{
				case -1:
					throw new EndOfStreamException();
				case 10:
					instance.token = ProtocolParser.ReadString(stream);
					continue;
				case 21:
					instance.x = ProtocolParser.ReadSingle(stream);
					continue;
				case 29:
					instance.y = ProtocolParser.ReadSingle(stream);
					continue;
				}
				Key key = ProtocolParser.ReadKey((byte)num2, stream);
				if (key.Field == 0)
				{
					throw new ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
				}
				ProtocolParser.SkipKey(stream, key);
			}
			if (stream.Position != num)
			{
				throw new ProtocolBufferException("Read past max limit");
			}
			return instance;
		}

		public static Monument DeserializeLength(Stream stream, int length, Monument instance, bool isDelta)
		{
			if (!isDelta)
			{
				instance.x = 0f;
				instance.y = 0f;
			}
			long num = stream.Position + length;
			while (stream.Position < num)
			{
				int num2 = stream.ReadByte();
				switch (num2)
				{
				case -1:
					throw new EndOfStreamException();
				case 10:
					instance.token = ProtocolParser.ReadString(stream);
					continue;
				case 21:
					instance.x = ProtocolParser.ReadSingle(stream);
					continue;
				case 29:
					instance.y = ProtocolParser.ReadSingle(stream);
					continue;
				}
				Key key = ProtocolParser.ReadKey((byte)num2, stream);
				if (key.Field == 0)
				{
					throw new ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
				}
				ProtocolParser.SkipKey(stream, key);
			}
			if (stream.Position != num)
			{
				throw new ProtocolBufferException("Read past max limit");
			}
			return instance;
		}

		public static void SerializeDelta(Stream stream, Monument instance, Monument previous)
		{
			MemoryStream obj = Pool.Get<MemoryStream>();
			if (instance.token != previous.token)
			{
				if (instance.token == null)
				{
					throw new ArgumentNullException("token", "Required by proto specification.");
				}
				stream.WriteByte(10);
				ProtocolParser.WriteString(stream, instance.token);
			}
			if (instance.x != previous.x)
			{
				stream.WriteByte(21);
				ProtocolParser.WriteSingle(stream, instance.x);
			}
			if (instance.y != previous.y)
			{
				stream.WriteByte(29);
				ProtocolParser.WriteSingle(stream, instance.y);
			}
			Pool.FreeUnmanaged(ref obj);
		}

		public static void Serialize(Stream stream, Monument instance)
		{
			MemoryStream obj = Pool.Get<MemoryStream>();
			if (instance.token == null)
			{
				throw new ArgumentNullException("token", "Required by proto specification.");
			}
			stream.WriteByte(10);
			ProtocolParser.WriteString(stream, instance.token);
			if (instance.x != 0f)
			{
				stream.WriteByte(21);
				ProtocolParser.WriteSingle(stream, instance.x);
			}
			if (instance.y != 0f)
			{
				stream.WriteByte(29);
				ProtocolParser.WriteSingle(stream, instance.y);
			}
			Pool.FreeUnmanaged(ref obj);
		}

		public byte[] ToProtoBytes()
		{
			return SerializeToBytes(this);
		}

		public void ToProto(Stream stream)
		{
			Serialize(stream, this);
		}

		public static byte[] SerializeToBytes(Monument instance)
		{
			using MemoryStream memoryStream = new MemoryStream();
			Serialize(memoryStream, instance);
			return memoryStream.ToArray();
		}

		public static void SerializeLengthDelimited(Stream stream, Monument instance)
		{
			byte[] array = SerializeToBytes(instance);
			ProtocolParser.WriteUInt32(stream, (uint)array.Length);
			stream.Write(array, 0, array.Length);
		}

		public void InspectUids(UidInspector<ulong> action)
		{
		}
	}

	[NonSerialized]
	public uint width;

	[NonSerialized]
	public uint height;

	[NonSerialized]
	public byte[] jpgImage;

	[NonSerialized]
	public int oceanMargin;

	[NonSerialized]
	public List<Monument> monuments;

	[NonSerialized]
	public string background;

	public bool ShouldPool = true;

	private bool _disposed;

	public static void ResetToPool(AppMap instance)
	{
		if (!instance.ShouldPool)
		{
			return;
		}
		instance.width = 0u;
		instance.height = 0u;
		instance.jpgImage = null;
		instance.oceanMargin = 0;
		if (instance.monuments != null)
		{
			for (int i = 0; i < instance.monuments.Count; i++)
			{
				if (instance.monuments[i] != null)
				{
					instance.monuments[i].ResetToPool();
					instance.monuments[i] = null;
				}
			}
			List<Monument> obj = instance.monuments;
			Pool.Free(ref obj, freeElements: false);
			instance.monuments = obj;
		}
		instance.background = string.Empty;
		Pool.Free(ref instance);
	}

	public void ResetToPool()
	{
		ResetToPool(this);
	}

	public virtual void Dispose()
	{
		if (!ShouldPool)
		{
			throw new Exception("Trying to dispose AppMap with ShouldPool set to false!");
		}
		if (!_disposed)
		{
			ResetToPool();
			_disposed = true;
		}
	}

	public virtual void EnterPool()
	{
		_disposed = true;
	}

	public virtual void LeavePool()
	{
		_disposed = false;
	}

	public void CopyTo(AppMap instance)
	{
		instance.width = width;
		instance.height = height;
		if (jpgImage == null)
		{
			instance.jpgImage = null;
		}
		else
		{
			instance.jpgImage = new byte[jpgImage.Length];
			Array.Copy(jpgImage, instance.jpgImage, instance.jpgImage.Length);
		}
		instance.oceanMargin = oceanMargin;
		if (monuments != null)
		{
			instance.monuments = Pool.Get<List<Monument>>();
			for (int i = 0; i < monuments.Count; i++)
			{
				Monument item = monuments[i].Copy();
				instance.monuments.Add(item);
			}
		}
		else
		{
			instance.monuments = null;
		}
		instance.background = background;
	}

	public AppMap Copy()
	{
		AppMap appMap = Pool.Get<AppMap>();
		CopyTo(appMap);
		return appMap;
	}

	public static AppMap Deserialize(Stream stream)
	{
		AppMap appMap = Pool.Get<AppMap>();
		Deserialize(stream, appMap, isDelta: false);
		return appMap;
	}

	public static AppMap DeserializeLengthDelimited(Stream stream)
	{
		AppMap appMap = Pool.Get<AppMap>();
		DeserializeLengthDelimited(stream, appMap, isDelta: false);
		return appMap;
	}

	public static AppMap DeserializeLength(Stream stream, int length)
	{
		AppMap appMap = Pool.Get<AppMap>();
		DeserializeLength(stream, length, appMap, isDelta: false);
		return appMap;
	}

	public static AppMap Deserialize(byte[] buffer)
	{
		AppMap appMap = Pool.Get<AppMap>();
		using MemoryStream stream = new MemoryStream(buffer);
		Deserialize(stream, appMap, isDelta: false);
		return appMap;
	}

	public void FromProto(Stream stream, bool isDelta = false)
	{
		Deserialize(stream, this, isDelta);
	}

	public virtual void WriteToStream(Stream stream)
	{
		Serialize(stream, this);
	}

	public virtual void WriteToStreamDelta(Stream stream, AppMap previous)
	{
		if (previous == null)
		{
			Serialize(stream, this);
		}
		else
		{
			SerializeDelta(stream, this, previous);
		}
	}

	public virtual void ReadFromStream(Stream stream, int size, bool isDelta = false)
	{
		DeserializeLength(stream, size, this, isDelta);
	}

	public static AppMap Deserialize(byte[] buffer, AppMap instance, bool isDelta = false)
	{
		using MemoryStream stream = new MemoryStream(buffer);
		Deserialize(stream, instance, isDelta);
		return instance;
	}

	public static AppMap Deserialize(Stream stream, AppMap instance, bool isDelta)
	{
		if (!isDelta)
		{
			instance.width = 0u;
			instance.height = 0u;
			instance.oceanMargin = 0;
			if (instance.monuments == null)
			{
				instance.monuments = Pool.Get<List<Monument>>();
			}
		}
		while (true)
		{
			int num = stream.ReadByte();
			switch (num)
			{
			case 8:
				instance.width = ProtocolParser.ReadUInt32(stream);
				continue;
			case 16:
				instance.height = ProtocolParser.ReadUInt32(stream);
				continue;
			case 26:
				instance.jpgImage = ProtocolParser.ReadBytes(stream);
				continue;
			case 32:
				instance.oceanMargin = (int)ProtocolParser.ReadUInt64(stream);
				continue;
			case 42:
				instance.monuments.Add(Monument.DeserializeLengthDelimited(stream));
				continue;
			case 50:
				instance.background = ProtocolParser.ReadString(stream);
				continue;
			case -1:
				return instance;
			}
			Key key = ProtocolParser.ReadKey((byte)num, stream);
			if (key.Field == 0)
			{
				throw new ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
			}
			ProtocolParser.SkipKey(stream, key);
		}
	}

	public static AppMap DeserializeLengthDelimited(Stream stream, AppMap instance, bool isDelta)
	{
		if (!isDelta)
		{
			instance.width = 0u;
			instance.height = 0u;
			instance.oceanMargin = 0;
			if (instance.monuments == null)
			{
				instance.monuments = Pool.Get<List<Monument>>();
			}
		}
		long num = ProtocolParser.ReadUInt32(stream);
		num += stream.Position;
		while (stream.Position < num)
		{
			int num2 = stream.ReadByte();
			switch (num2)
			{
			case -1:
				throw new EndOfStreamException();
			case 8:
				instance.width = ProtocolParser.ReadUInt32(stream);
				continue;
			case 16:
				instance.height = ProtocolParser.ReadUInt32(stream);
				continue;
			case 26:
				instance.jpgImage = ProtocolParser.ReadBytes(stream);
				continue;
			case 32:
				instance.oceanMargin = (int)ProtocolParser.ReadUInt64(stream);
				continue;
			case 42:
				instance.monuments.Add(Monument.DeserializeLengthDelimited(stream));
				continue;
			case 50:
				instance.background = ProtocolParser.ReadString(stream);
				continue;
			}
			Key key = ProtocolParser.ReadKey((byte)num2, stream);
			if (key.Field == 0)
			{
				throw new ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
			}
			ProtocolParser.SkipKey(stream, key);
		}
		if (stream.Position != num)
		{
			throw new ProtocolBufferException("Read past max limit");
		}
		return instance;
	}

	public static AppMap DeserializeLength(Stream stream, int length, AppMap instance, bool isDelta)
	{
		if (!isDelta)
		{
			instance.width = 0u;
			instance.height = 0u;
			instance.oceanMargin = 0;
			if (instance.monuments == null)
			{
				instance.monuments = Pool.Get<List<Monument>>();
			}
		}
		long num = stream.Position + length;
		while (stream.Position < num)
		{
			int num2 = stream.ReadByte();
			switch (num2)
			{
			case -1:
				throw new EndOfStreamException();
			case 8:
				instance.width = ProtocolParser.ReadUInt32(stream);
				continue;
			case 16:
				instance.height = ProtocolParser.ReadUInt32(stream);
				continue;
			case 26:
				instance.jpgImage = ProtocolParser.ReadBytes(stream);
				continue;
			case 32:
				instance.oceanMargin = (int)ProtocolParser.ReadUInt64(stream);
				continue;
			case 42:
				instance.monuments.Add(Monument.DeserializeLengthDelimited(stream));
				continue;
			case 50:
				instance.background = ProtocolParser.ReadString(stream);
				continue;
			}
			Key key = ProtocolParser.ReadKey((byte)num2, stream);
			if (key.Field == 0)
			{
				throw new ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
			}
			ProtocolParser.SkipKey(stream, key);
		}
		if (stream.Position != num)
		{
			throw new ProtocolBufferException("Read past max limit");
		}
		return instance;
	}

	public static void SerializeDelta(Stream stream, AppMap instance, AppMap previous)
	{
		MemoryStream obj = Pool.Get<MemoryStream>();
		if (instance.width != previous.width)
		{
			stream.WriteByte(8);
			ProtocolParser.WriteUInt32(stream, instance.width);
		}
		if (instance.height != previous.height)
		{
			stream.WriteByte(16);
			ProtocolParser.WriteUInt32(stream, instance.height);
		}
		if (instance.jpgImage == null)
		{
			throw new ArgumentNullException("jpgImage", "Required by proto specification.");
		}
		stream.WriteByte(26);
		ProtocolParser.WriteBytes(stream, instance.jpgImage);
		if (instance.oceanMargin != previous.oceanMargin)
		{
			stream.WriteByte(32);
			ProtocolParser.WriteUInt64(stream, (ulong)instance.oceanMargin);
		}
		if (instance.monuments != null)
		{
			for (int i = 0; i < instance.monuments.Count; i++)
			{
				Monument monument = instance.monuments[i];
				stream.WriteByte(42);
				obj.SetLength(0L);
				Monument.SerializeDelta(obj, monument, monument);
				uint num = (uint)obj.Length;
				ProtocolParser.WriteUInt32(stream, num);
				stream.Write(obj.GetBuffer(), 0, (int)num);
			}
		}
		if (instance.background != null && instance.background != previous.background)
		{
			stream.WriteByte(50);
			ProtocolParser.WriteString(stream, instance.background);
		}
		Pool.FreeUnmanaged(ref obj);
	}

	public static void Serialize(Stream stream, AppMap instance)
	{
		MemoryStream obj = Pool.Get<MemoryStream>();
		if (instance.width != 0)
		{
			stream.WriteByte(8);
			ProtocolParser.WriteUInt32(stream, instance.width);
		}
		if (instance.height != 0)
		{
			stream.WriteByte(16);
			ProtocolParser.WriteUInt32(stream, instance.height);
		}
		if (instance.jpgImage == null)
		{
			throw new ArgumentNullException("jpgImage", "Required by proto specification.");
		}
		stream.WriteByte(26);
		ProtocolParser.WriteBytes(stream, instance.jpgImage);
		if (instance.oceanMargin != 0)
		{
			stream.WriteByte(32);
			ProtocolParser.WriteUInt64(stream, (ulong)instance.oceanMargin);
		}
		if (instance.monuments != null)
		{
			for (int i = 0; i < instance.monuments.Count; i++)
			{
				Monument instance2 = instance.monuments[i];
				stream.WriteByte(42);
				obj.SetLength(0L);
				Monument.Serialize(obj, instance2);
				uint num = (uint)obj.Length;
				ProtocolParser.WriteUInt32(stream, num);
				stream.Write(obj.GetBuffer(), 0, (int)num);
			}
		}
		if (instance.background != null)
		{
			stream.WriteByte(50);
			ProtocolParser.WriteString(stream, instance.background);
		}
		Pool.FreeUnmanaged(ref obj);
	}

	public byte[] ToProtoBytes()
	{
		return SerializeToBytes(this);
	}

	public void ToProto(Stream stream)
	{
		Serialize(stream, this);
	}

	public static byte[] SerializeToBytes(AppMap instance)
	{
		using MemoryStream memoryStream = new MemoryStream();
		Serialize(memoryStream, instance);
		return memoryStream.ToArray();
	}

	public static void SerializeLengthDelimited(Stream stream, AppMap instance)
	{
		byte[] array = SerializeToBytes(instance);
		ProtocolParser.WriteUInt32(stream, (uint)array.Length);
		stream.Write(array, 0, array.Length);
	}

	public void InspectUids(UidInspector<ulong> action)
	{
		if (monuments != null)
		{
			for (int i = 0; i < monuments.Count; i++)
			{
				monuments[i]?.InspectUids(action);
			}
		}
	}
}
