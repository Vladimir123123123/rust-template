using System;
using System.IO;
using Facepunch;
using ProtoBuf;
using SilentOrbit.ProtocolBuffers;

public class AppMessage : IDisposable, Pool.IPooled, IProto
{
	[NonSerialized]
	public AppResponse response;

	[NonSerialized]
	public AppBroadcast broadcast;

	public bool ShouldPool = true;

	private bool _disposed;

	public static void ResetToPool(AppMessage instance)
	{
		if (instance.ShouldPool)
		{
			if (instance.response != null)
			{
				instance.response.ResetToPool();
				instance.response = null;
			}
			if (instance.broadcast != null)
			{
				instance.broadcast.ResetToPool();
				instance.broadcast = null;
			}
			Pool.Free(ref instance);
		}
	}

	public void ResetToPool()
	{
		ResetToPool(this);
	}

	public virtual void Dispose()
	{
		if (!ShouldPool)
		{
			throw new Exception("Trying to dispose AppMessage with ShouldPool set to false!");
		}
		if (!_disposed)
		{
			ResetToPool();
			_disposed = true;
		}
	}

	public virtual void EnterPool()
	{
		_disposed = true;
	}

	public virtual void LeavePool()
	{
		_disposed = false;
	}

	public void CopyTo(AppMessage instance)
	{
		if (response != null)
		{
			if (instance.response == null)
			{
				instance.response = response.Copy();
			}
			else
			{
				response.CopyTo(instance.response);
			}
		}
		else
		{
			instance.response = null;
		}
		if (broadcast != null)
		{
			if (instance.broadcast == null)
			{
				instance.broadcast = broadcast.Copy();
			}
			else
			{
				broadcast.CopyTo(instance.broadcast);
			}
		}
		else
		{
			instance.broadcast = null;
		}
	}

	public AppMessage Copy()
	{
		AppMessage appMessage = Pool.Get<AppMessage>();
		CopyTo(appMessage);
		return appMessage;
	}

	public static AppMessage Deserialize(Stream stream)
	{
		AppMessage appMessage = Pool.Get<AppMessage>();
		Deserialize(stream, appMessage, isDelta: false);
		return appMessage;
	}

	public static AppMessage DeserializeLengthDelimited(Stream stream)
	{
		AppMessage appMessage = Pool.Get<AppMessage>();
		DeserializeLengthDelimited(stream, appMessage, isDelta: false);
		return appMessage;
	}

	public static AppMessage DeserializeLength(Stream stream, int length)
	{
		AppMessage appMessage = Pool.Get<AppMessage>();
		DeserializeLength(stream, length, appMessage, isDelta: false);
		return appMessage;
	}

	public static AppMessage Deserialize(byte[] buffer)
	{
		AppMessage appMessage = Pool.Get<AppMessage>();
		using MemoryStream stream = new MemoryStream(buffer);
		Deserialize(stream, appMessage, isDelta: false);
		return appMessage;
	}

	public void FromProto(Stream stream, bool isDelta = false)
	{
		Deserialize(stream, this, isDelta);
	}

	public virtual void WriteToStream(Stream stream)
	{
		Serialize(stream, this);
	}

	public virtual void WriteToStreamDelta(Stream stream, AppMessage previous)
	{
		if (previous == null)
		{
			Serialize(stream, this);
		}
		else
		{
			SerializeDelta(stream, this, previous);
		}
	}

	public virtual void ReadFromStream(Stream stream, int size, bool isDelta = false)
	{
		DeserializeLength(stream, size, this, isDelta);
	}

	public static AppMessage Deserialize(byte[] buffer, AppMessage instance, bool isDelta = false)
	{
		using MemoryStream stream = new MemoryStream(buffer);
		Deserialize(stream, instance, isDelta);
		return instance;
	}

	public static AppMessage Deserialize(Stream stream, AppMessage instance, bool isDelta)
	{
		while (true)
		{
			int num = stream.ReadByte();
			switch (num)
			{
			case 10:
				if (instance.response == null)
				{
					instance.response = AppResponse.DeserializeLengthDelimited(stream);
				}
				else
				{
					AppResponse.DeserializeLengthDelimited(stream, instance.response, isDelta);
				}
				continue;
			case 18:
				if (instance.broadcast == null)
				{
					instance.broadcast = AppBroadcast.DeserializeLengthDelimited(stream);
				}
				else
				{
					AppBroadcast.DeserializeLengthDelimited(stream, instance.broadcast, isDelta);
				}
				continue;
			case -1:
				return instance;
			}
			Key key = ProtocolParser.ReadKey((byte)num, stream);
			if (key.Field == 0)
			{
				throw new ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
			}
			ProtocolParser.SkipKey(stream, key);
		}
	}

	public static AppMessage DeserializeLengthDelimited(Stream stream, AppMessage instance, bool isDelta)
	{
		long num = ProtocolParser.ReadUInt32(stream);
		num += stream.Position;
		while (stream.Position < num)
		{
			int num2 = stream.ReadByte();
			switch (num2)
			{
			case -1:
				throw new EndOfStreamException();
			case 10:
				if (instance.response == null)
				{
					instance.response = AppResponse.DeserializeLengthDelimited(stream);
				}
				else
				{
					AppResponse.DeserializeLengthDelimited(stream, instance.response, isDelta);
				}
				continue;
			case 18:
				if (instance.broadcast == null)
				{
					instance.broadcast = AppBroadcast.DeserializeLengthDelimited(stream);
				}
				else
				{
					AppBroadcast.DeserializeLengthDelimited(stream, instance.broadcast, isDelta);
				}
				continue;
			}
			Key key = ProtocolParser.ReadKey((byte)num2, stream);
			if (key.Field == 0)
			{
				throw new ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
			}
			ProtocolParser.SkipKey(stream, key);
		}
		if (stream.Position != num)
		{
			throw new ProtocolBufferException("Read past max limit");
		}
		return instance;
	}

	public static AppMessage DeserializeLength(Stream stream, int length, AppMessage instance, bool isDelta)
	{
		long num = stream.Position + length;
		while (stream.Position < num)
		{
			int num2 = stream.ReadByte();
			switch (num2)
			{
			case -1:
				throw new EndOfStreamException();
			case 10:
				if (instance.response == null)
				{
					instance.response = AppResponse.DeserializeLengthDelimited(stream);
				}
				else
				{
					AppResponse.DeserializeLengthDelimited(stream, instance.response, isDelta);
				}
				continue;
			case 18:
				if (instance.broadcast == null)
				{
					instance.broadcast = AppBroadcast.DeserializeLengthDelimited(stream);
				}
				else
				{
					AppBroadcast.DeserializeLengthDelimited(stream, instance.broadcast, isDelta);
				}
				continue;
			}
			Key key = ProtocolParser.ReadKey((byte)num2, stream);
			if (key.Field == 0)
			{
				throw new ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
			}
			ProtocolParser.SkipKey(stream, key);
		}
		if (stream.Position != num)
		{
			throw new ProtocolBufferException("Read past max limit");
		}
		return instance;
	}

	public static void SerializeDelta(Stream stream, AppMessage instance, AppMessage previous)
	{
		MemoryStream obj = Pool.Get<MemoryStream>();
		if (instance.response != null)
		{
			stream.WriteByte(10);
			obj.SetLength(0L);
			AppResponse.SerializeDelta(obj, instance.response, previous.response);
			uint num = (uint)obj.Length;
			ProtocolParser.WriteUInt32(stream, num);
			stream.Write(obj.GetBuffer(), 0, (int)num);
		}
		if (instance.broadcast != null)
		{
			stream.WriteByte(18);
			obj.SetLength(0L);
			AppBroadcast.SerializeDelta(obj, instance.broadcast, previous.broadcast);
			uint num2 = (uint)obj.Length;
			ProtocolParser.WriteUInt32(stream, num2);
			stream.Write(obj.GetBuffer(), 0, (int)num2);
		}
		Pool.FreeUnmanaged(ref obj);
	}

	public static void Serialize(Stream stream, AppMessage instance)
	{
		MemoryStream obj = Pool.Get<MemoryStream>();
		if (instance.response != null)
		{
			stream.WriteByte(10);
			obj.SetLength(0L);
			AppResponse.Serialize(obj, instance.response);
			uint num = (uint)obj.Length;
			ProtocolParser.WriteUInt32(stream, num);
			stream.Write(obj.GetBuffer(), 0, (int)num);
		}
		if (instance.broadcast != null)
		{
			stream.WriteByte(18);
			obj.SetLength(0L);
			AppBroadcast.Serialize(obj, instance.broadcast);
			uint num2 = (uint)obj.Length;
			ProtocolParser.WriteUInt32(stream, num2);
			stream.Write(obj.GetBuffer(), 0, (int)num2);
		}
		Pool.FreeUnmanaged(ref obj);
	}

	public byte[] ToProtoBytes()
	{
		return SerializeToBytes(this);
	}

	public void ToProto(Stream stream)
	{
		Serialize(stream, this);
	}

	public static byte[] SerializeToBytes(AppMessage instance)
	{
		using MemoryStream memoryStream = new MemoryStream();
		Serialize(memoryStream, instance);
		return memoryStream.ToArray();
	}

	public static void SerializeLengthDelimited(Stream stream, AppMessage instance)
	{
		byte[] array = SerializeToBytes(instance);
		ProtocolParser.WriteUInt32(stream, (uint)array.Length);
		stream.Write(array, 0, array.Length);
	}

	public void InspectUids(UidInspector<ulong> action)
	{
		response?.InspectUids(action);
		broadcast?.InspectUids(action);
	}
}
