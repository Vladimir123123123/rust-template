using System;
using System.Collections.Generic;
using System.IO;
using Facepunch;
using ProtoBuf;
using SilentOrbit.ProtocolBuffers;

public class ArcadeMachine : IDisposable, Pool.IPooled, IProto
{
	public class ScoreEntry : IDisposable, Pool.IPooled, IProto
	{
		[NonSerialized]
		public ulong playerID;

		[NonSerialized]
		public string displayName;

		[NonSerialized]
		public int score;

		public bool ShouldPool = true;

		private bool _disposed;

		public static void ResetToPool(ScoreEntry instance)
		{
			if (instance.ShouldPool)
			{
				instance.playerID = 0uL;
				instance.displayName = string.Empty;
				instance.score = 0;
				Pool.Free(ref instance);
			}
		}

		public void ResetToPool()
		{
			ResetToPool(this);
		}

		public virtual void Dispose()
		{
			if (!ShouldPool)
			{
				throw new Exception("Trying to dispose ScoreEntry with ShouldPool set to false!");
			}
			if (!_disposed)
			{
				ResetToPool();
				_disposed = true;
			}
		}

		public virtual void EnterPool()
		{
			_disposed = true;
		}

		public virtual void LeavePool()
		{
			_disposed = false;
		}

		public void CopyTo(ScoreEntry instance)
		{
			instance.playerID = playerID;
			instance.displayName = displayName;
			instance.score = score;
		}

		public ScoreEntry Copy()
		{
			ScoreEntry scoreEntry = Pool.Get<ScoreEntry>();
			CopyTo(scoreEntry);
			return scoreEntry;
		}

		public static ScoreEntry Deserialize(Stream stream)
		{
			ScoreEntry scoreEntry = Pool.Get<ScoreEntry>();
			Deserialize(stream, scoreEntry, isDelta: false);
			return scoreEntry;
		}

		public static ScoreEntry DeserializeLengthDelimited(Stream stream)
		{
			ScoreEntry scoreEntry = Pool.Get<ScoreEntry>();
			DeserializeLengthDelimited(stream, scoreEntry, isDelta: false);
			return scoreEntry;
		}

		public static ScoreEntry DeserializeLength(Stream stream, int length)
		{
			ScoreEntry scoreEntry = Pool.Get<ScoreEntry>();
			DeserializeLength(stream, length, scoreEntry, isDelta: false);
			return scoreEntry;
		}

		public static ScoreEntry Deserialize(byte[] buffer)
		{
			ScoreEntry scoreEntry = Pool.Get<ScoreEntry>();
			using MemoryStream stream = new MemoryStream(buffer);
			Deserialize(stream, scoreEntry, isDelta: false);
			return scoreEntry;
		}

		public void FromProto(Stream stream, bool isDelta = false)
		{
			Deserialize(stream, this, isDelta);
		}

		public virtual void WriteToStream(Stream stream)
		{
			Serialize(stream, this);
		}

		public virtual void WriteToStreamDelta(Stream stream, ScoreEntry previous)
		{
			if (previous == null)
			{
				Serialize(stream, this);
			}
			else
			{
				SerializeDelta(stream, this, previous);
			}
		}

		public virtual void ReadFromStream(Stream stream, int size, bool isDelta = false)
		{
			DeserializeLength(stream, size, this, isDelta);
		}

		public static ScoreEntry Deserialize(byte[] buffer, ScoreEntry instance, bool isDelta = false)
		{
			using MemoryStream stream = new MemoryStream(buffer);
			Deserialize(stream, instance, isDelta);
			return instance;
		}

		public static ScoreEntry Deserialize(Stream stream, ScoreEntry instance, bool isDelta)
		{
			while (true)
			{
				int num = stream.ReadByte();
				switch (num)
				{
				case 8:
					instance.playerID = ProtocolParser.ReadUInt64(stream);
					continue;
				case 18:
					instance.displayName = ProtocolParser.ReadString(stream);
					continue;
				case 24:
					instance.score = (int)ProtocolParser.ReadUInt64(stream);
					continue;
				case -1:
					return instance;
				}
				Key key = ProtocolParser.ReadKey((byte)num, stream);
				if (key.Field == 0)
				{
					throw new ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
				}
				ProtocolParser.SkipKey(stream, key);
			}
		}

		public static ScoreEntry DeserializeLengthDelimited(Stream stream, ScoreEntry instance, bool isDelta)
		{
			long num = ProtocolParser.ReadUInt32(stream);
			num += stream.Position;
			while (stream.Position < num)
			{
				int num2 = stream.ReadByte();
				switch (num2)
				{
				case -1:
					throw new EndOfStreamException();
				case 8:
					instance.playerID = ProtocolParser.ReadUInt64(stream);
					continue;
				case 18:
					instance.displayName = ProtocolParser.ReadString(stream);
					continue;
				case 24:
					instance.score = (int)ProtocolParser.ReadUInt64(stream);
					continue;
				}
				Key key = ProtocolParser.ReadKey((byte)num2, stream);
				if (key.Field == 0)
				{
					throw new ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
				}
				ProtocolParser.SkipKey(stream, key);
			}
			if (stream.Position != num)
			{
				throw new ProtocolBufferException("Read past max limit");
			}
			return instance;
		}

		public static ScoreEntry DeserializeLength(Stream stream, int length, ScoreEntry instance, bool isDelta)
		{
			long num = stream.Position + length;
			while (stream.Position < num)
			{
				int num2 = stream.ReadByte();
				switch (num2)
				{
				case -1:
					throw new EndOfStreamException();
				case 8:
					instance.playerID = ProtocolParser.ReadUInt64(stream);
					continue;
				case 18:
					instance.displayName = ProtocolParser.ReadString(stream);
					continue;
				case 24:
					instance.score = (int)ProtocolParser.ReadUInt64(stream);
					continue;
				}
				Key key = ProtocolParser.ReadKey((byte)num2, stream);
				if (key.Field == 0)
				{
					throw new ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
				}
				ProtocolParser.SkipKey(stream, key);
			}
			if (stream.Position != num)
			{
				throw new ProtocolBufferException("Read past max limit");
			}
			return instance;
		}

		public static void SerializeDelta(Stream stream, ScoreEntry instance, ScoreEntry previous)
		{
			MemoryStream obj = Pool.Get<MemoryStream>();
			if (instance.playerID != previous.playerID)
			{
				stream.WriteByte(8);
				ProtocolParser.WriteUInt64(stream, instance.playerID);
			}
			if (instance.displayName != null && instance.displayName != previous.displayName)
			{
				stream.WriteByte(18);
				ProtocolParser.WriteString(stream, instance.displayName);
			}
			if (instance.score != previous.score)
			{
				stream.WriteByte(24);
				ProtocolParser.WriteUInt64(stream, (ulong)instance.score);
			}
			Pool.FreeUnmanaged(ref obj);
		}

		public static void Serialize(Stream stream, ScoreEntry instance)
		{
			MemoryStream obj = Pool.Get<MemoryStream>();
			if (instance.playerID != 0L)
			{
				stream.WriteByte(8);
				ProtocolParser.WriteUInt64(stream, instance.playerID);
			}
			if (instance.displayName != null)
			{
				stream.WriteByte(18);
				ProtocolParser.WriteString(stream, instance.displayName);
			}
			if (instance.score != 0)
			{
				stream.WriteByte(24);
				ProtocolParser.WriteUInt64(stream, (ulong)instance.score);
			}
			Pool.FreeUnmanaged(ref obj);
		}

		public byte[] ToProtoBytes()
		{
			return SerializeToBytes(this);
		}

		public void ToProto(Stream stream)
		{
			Serialize(stream, this);
		}

		public static byte[] SerializeToBytes(ScoreEntry instance)
		{
			using MemoryStream memoryStream = new MemoryStream();
			Serialize(memoryStream, instance);
			return memoryStream.ToArray();
		}

		public static void SerializeLengthDelimited(Stream stream, ScoreEntry instance)
		{
			byte[] array = SerializeToBytes(instance);
			ProtocolParser.WriteUInt32(stream, (uint)array.Length);
			stream.Write(array, 0, array.Length);
		}

		public void InspectUids(UidInspector<ulong> action)
		{
		}
	}

	[NonSerialized]
	public List<ScoreEntry> scores;

	[NonSerialized]
	public int genericInt1;

	[NonSerialized]
	public int genericInt2;

	[NonSerialized]
	public int genericInt3;

	[NonSerialized]
	public int genericInt4;

	[NonSerialized]
	public float genericFloat1;

	[NonSerialized]
	public float genericFloat2;

	[NonSerialized]
	public float genericFloat3;

	[NonSerialized]
	public float genericFloat4;

	public bool ShouldPool = true;

	private bool _disposed;

	public static void ResetToPool(ArcadeMachine instance)
	{
		if (!instance.ShouldPool)
		{
			return;
		}
		if (instance.scores != null)
		{
			for (int i = 0; i < instance.scores.Count; i++)
			{
				if (instance.scores[i] != null)
				{
					instance.scores[i].ResetToPool();
					instance.scores[i] = null;
				}
			}
			List<ScoreEntry> obj = instance.scores;
			Pool.Free(ref obj, freeElements: false);
			instance.scores = obj;
		}
		instance.genericInt1 = 0;
		instance.genericInt2 = 0;
		instance.genericInt3 = 0;
		instance.genericInt4 = 0;
		instance.genericFloat1 = 0f;
		instance.genericFloat2 = 0f;
		instance.genericFloat3 = 0f;
		instance.genericFloat4 = 0f;
		Pool.Free(ref instance);
	}

	public void ResetToPool()
	{
		ResetToPool(this);
	}

	public virtual void Dispose()
	{
		if (!ShouldPool)
		{
			throw new Exception("Trying to dispose ArcadeMachine with ShouldPool set to false!");
		}
		if (!_disposed)
		{
			ResetToPool();
			_disposed = true;
		}
	}

	public virtual void EnterPool()
	{
		_disposed = true;
	}

	public virtual void LeavePool()
	{
		_disposed = false;
	}

	public void CopyTo(ArcadeMachine instance)
	{
		if (scores != null)
		{
			instance.scores = Pool.Get<List<ScoreEntry>>();
			for (int i = 0; i < scores.Count; i++)
			{
				ScoreEntry item = scores[i].Copy();
				instance.scores.Add(item);
			}
		}
		else
		{
			instance.scores = null;
		}
		instance.genericInt1 = genericInt1;
		instance.genericInt2 = genericInt2;
		instance.genericInt3 = genericInt3;
		instance.genericInt4 = genericInt4;
		instance.genericFloat1 = genericFloat1;
		instance.genericFloat2 = genericFloat2;
		instance.genericFloat3 = genericFloat3;
		instance.genericFloat4 = genericFloat4;
	}

	public ArcadeMachine Copy()
	{
		ArcadeMachine arcadeMachine = Pool.Get<ArcadeMachine>();
		CopyTo(arcadeMachine);
		return arcadeMachine;
	}

	public static ArcadeMachine Deserialize(Stream stream)
	{
		ArcadeMachine arcadeMachine = Pool.Get<ArcadeMachine>();
		Deserialize(stream, arcadeMachine, isDelta: false);
		return arcadeMachine;
	}

	public static ArcadeMachine DeserializeLengthDelimited(Stream stream)
	{
		ArcadeMachine arcadeMachine = Pool.Get<ArcadeMachine>();
		DeserializeLengthDelimited(stream, arcadeMachine, isDelta: false);
		return arcadeMachine;
	}

	public static ArcadeMachine DeserializeLength(Stream stream, int length)
	{
		ArcadeMachine arcadeMachine = Pool.Get<ArcadeMachine>();
		DeserializeLength(stream, length, arcadeMachine, isDelta: false);
		return arcadeMachine;
	}

	public static ArcadeMachine Deserialize(byte[] buffer)
	{
		ArcadeMachine arcadeMachine = Pool.Get<ArcadeMachine>();
		using MemoryStream stream = new MemoryStream(buffer);
		Deserialize(stream, arcadeMachine, isDelta: false);
		return arcadeMachine;
	}

	public void FromProto(Stream stream, bool isDelta = false)
	{
		Deserialize(stream, this, isDelta);
	}

	public virtual void WriteToStream(Stream stream)
	{
		Serialize(stream, this);
	}

	public virtual void WriteToStreamDelta(Stream stream, ArcadeMachine previous)
	{
		if (previous == null)
		{
			Serialize(stream, this);
		}
		else
		{
			SerializeDelta(stream, this, previous);
		}
	}

	public virtual void ReadFromStream(Stream stream, int size, bool isDelta = false)
	{
		DeserializeLength(stream, size, this, isDelta);
	}

	public static ArcadeMachine Deserialize(byte[] buffer, ArcadeMachine instance, bool isDelta = false)
	{
		using MemoryStream stream = new MemoryStream(buffer);
		Deserialize(stream, instance, isDelta);
		return instance;
	}

	public static ArcadeMachine Deserialize(Stream stream, ArcadeMachine instance, bool isDelta)
	{
		if (!isDelta && instance.scores == null)
		{
			instance.scores = Pool.Get<List<ScoreEntry>>();
		}
		while (true)
		{
			int num = stream.ReadByte();
			switch (num)
			{
			case 10:
				instance.scores.Add(ScoreEntry.DeserializeLengthDelimited(stream));
				continue;
			case 16:
				instance.genericInt1 = (int)ProtocolParser.ReadUInt64(stream);
				continue;
			case 24:
				instance.genericInt2 = (int)ProtocolParser.ReadUInt64(stream);
				continue;
			case 32:
				instance.genericInt3 = (int)ProtocolParser.ReadUInt64(stream);
				continue;
			case 40:
				instance.genericInt4 = (int)ProtocolParser.ReadUInt64(stream);
				continue;
			case 53:
				instance.genericFloat1 = ProtocolParser.ReadSingle(stream);
				continue;
			case 61:
				instance.genericFloat2 = ProtocolParser.ReadSingle(stream);
				continue;
			case 69:
				instance.genericFloat3 = ProtocolParser.ReadSingle(stream);
				continue;
			case 77:
				instance.genericFloat4 = ProtocolParser.ReadSingle(stream);
				continue;
			case -1:
				return instance;
			}
			Key key = ProtocolParser.ReadKey((byte)num, stream);
			if (key.Field == 0)
			{
				throw new ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
			}
			ProtocolParser.SkipKey(stream, key);
		}
	}

	public static ArcadeMachine DeserializeLengthDelimited(Stream stream, ArcadeMachine instance, bool isDelta)
	{
		if (!isDelta && instance.scores == null)
		{
			instance.scores = Pool.Get<List<ScoreEntry>>();
		}
		long num = ProtocolParser.ReadUInt32(stream);
		num += stream.Position;
		while (stream.Position < num)
		{
			int num2 = stream.ReadByte();
			switch (num2)
			{
			case -1:
				throw new EndOfStreamException();
			case 10:
				instance.scores.Add(ScoreEntry.DeserializeLengthDelimited(stream));
				continue;
			case 16:
				instance.genericInt1 = (int)ProtocolParser.ReadUInt64(stream);
				continue;
			case 24:
				instance.genericInt2 = (int)ProtocolParser.ReadUInt64(stream);
				continue;
			case 32:
				instance.genericInt3 = (int)ProtocolParser.ReadUInt64(stream);
				continue;
			case 40:
				instance.genericInt4 = (int)ProtocolParser.ReadUInt64(stream);
				continue;
			case 53:
				instance.genericFloat1 = ProtocolParser.ReadSingle(stream);
				continue;
			case 61:
				instance.genericFloat2 = ProtocolParser.ReadSingle(stream);
				continue;
			case 69:
				instance.genericFloat3 = ProtocolParser.ReadSingle(stream);
				continue;
			case 77:
				instance.genericFloat4 = ProtocolParser.ReadSingle(stream);
				continue;
			}
			Key key = ProtocolParser.ReadKey((byte)num2, stream);
			if (key.Field == 0)
			{
				throw new ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
			}
			ProtocolParser.SkipKey(stream, key);
		}
		if (stream.Position != num)
		{
			throw new ProtocolBufferException("Read past max limit");
		}
		return instance;
	}

	public static ArcadeMachine DeserializeLength(Stream stream, int length, ArcadeMachine instance, bool isDelta)
	{
		if (!isDelta && instance.scores == null)
		{
			instance.scores = Pool.Get<List<ScoreEntry>>();
		}
		long num = stream.Position + length;
		while (stream.Position < num)
		{
			int num2 = stream.ReadByte();
			switch (num2)
			{
			case -1:
				throw new EndOfStreamException();
			case 10:
				instance.scores.Add(ScoreEntry.DeserializeLengthDelimited(stream));
				continue;
			case 16:
				instance.genericInt1 = (int)ProtocolParser.ReadUInt64(stream);
				continue;
			case 24:
				instance.genericInt2 = (int)ProtocolParser.ReadUInt64(stream);
				continue;
			case 32:
				instance.genericInt3 = (int)ProtocolParser.ReadUInt64(stream);
				continue;
			case 40:
				instance.genericInt4 = (int)ProtocolParser.ReadUInt64(stream);
				continue;
			case 53:
				instance.genericFloat1 = ProtocolParser.ReadSingle(stream);
				continue;
			case 61:
				instance.genericFloat2 = ProtocolParser.ReadSingle(stream);
				continue;
			case 69:
				instance.genericFloat3 = ProtocolParser.ReadSingle(stream);
				continue;
			case 77:
				instance.genericFloat4 = ProtocolParser.ReadSingle(stream);
				continue;
			}
			Key key = ProtocolParser.ReadKey((byte)num2, stream);
			if (key.Field == 0)
			{
				throw new ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
			}
			ProtocolParser.SkipKey(stream, key);
		}
		if (stream.Position != num)
		{
			throw new ProtocolBufferException("Read past max limit");
		}
		return instance;
	}

	public static void SerializeDelta(Stream stream, ArcadeMachine instance, ArcadeMachine previous)
	{
		MemoryStream obj = Pool.Get<MemoryStream>();
		if (instance.scores != null)
		{
			for (int i = 0; i < instance.scores.Count; i++)
			{
				ScoreEntry scoreEntry = instance.scores[i];
				stream.WriteByte(10);
				obj.SetLength(0L);
				ScoreEntry.SerializeDelta(obj, scoreEntry, scoreEntry);
				uint num = (uint)obj.Length;
				ProtocolParser.WriteUInt32(stream, num);
				stream.Write(obj.GetBuffer(), 0, (int)num);
			}
		}
		if (instance.genericInt1 != previous.genericInt1)
		{
			stream.WriteByte(16);
			ProtocolParser.WriteUInt64(stream, (ulong)instance.genericInt1);
		}
		if (instance.genericInt2 != previous.genericInt2)
		{
			stream.WriteByte(24);
			ProtocolParser.WriteUInt64(stream, (ulong)instance.genericInt2);
		}
		if (instance.genericInt3 != previous.genericInt3)
		{
			stream.WriteByte(32);
			ProtocolParser.WriteUInt64(stream, (ulong)instance.genericInt3);
		}
		if (instance.genericInt4 != previous.genericInt4)
		{
			stream.WriteByte(40);
			ProtocolParser.WriteUInt64(stream, (ulong)instance.genericInt4);
		}
		if (instance.genericFloat1 != previous.genericFloat1)
		{
			stream.WriteByte(53);
			ProtocolParser.WriteSingle(stream, instance.genericFloat1);
		}
		if (instance.genericFloat2 != previous.genericFloat2)
		{
			stream.WriteByte(61);
			ProtocolParser.WriteSingle(stream, instance.genericFloat2);
		}
		if (instance.genericFloat3 != previous.genericFloat3)
		{
			stream.WriteByte(69);
			ProtocolParser.WriteSingle(stream, instance.genericFloat3);
		}
		if (instance.genericFloat4 != previous.genericFloat4)
		{
			stream.WriteByte(77);
			ProtocolParser.WriteSingle(stream, instance.genericFloat4);
		}
		Pool.FreeUnmanaged(ref obj);
	}

	public static void Serialize(Stream stream, ArcadeMachine instance)
	{
		MemoryStream obj = Pool.Get<MemoryStream>();
		if (instance.scores != null)
		{
			for (int i = 0; i < instance.scores.Count; i++)
			{
				ScoreEntry instance2 = instance.scores[i];
				stream.WriteByte(10);
				obj.SetLength(0L);
				ScoreEntry.Serialize(obj, instance2);
				uint num = (uint)obj.Length;
				ProtocolParser.WriteUInt32(stream, num);
				stream.Write(obj.GetBuffer(), 0, (int)num);
			}
		}
		if (instance.genericInt1 != 0)
		{
			stream.WriteByte(16);
			ProtocolParser.WriteUInt64(stream, (ulong)instance.genericInt1);
		}
		if (instance.genericInt2 != 0)
		{
			stream.WriteByte(24);
			ProtocolParser.WriteUInt64(stream, (ulong)instance.genericInt2);
		}
		if (instance.genericInt3 != 0)
		{
			stream.WriteByte(32);
			ProtocolParser.WriteUInt64(stream, (ulong)instance.genericInt3);
		}
		if (instance.genericInt4 != 0)
		{
			stream.WriteByte(40);
			ProtocolParser.WriteUInt64(stream, (ulong)instance.genericInt4);
		}
		if (instance.genericFloat1 != 0f)
		{
			stream.WriteByte(53);
			ProtocolParser.WriteSingle(stream, instance.genericFloat1);
		}
		if (instance.genericFloat2 != 0f)
		{
			stream.WriteByte(61);
			ProtocolParser.WriteSingle(stream, instance.genericFloat2);
		}
		if (instance.genericFloat3 != 0f)
		{
			stream.WriteByte(69);
			ProtocolParser.WriteSingle(stream, instance.genericFloat3);
		}
		if (instance.genericFloat4 != 0f)
		{
			stream.WriteByte(77);
			ProtocolParser.WriteSingle(stream, instance.genericFloat4);
		}
		Pool.FreeUnmanaged(ref obj);
	}

	public byte[] ToProtoBytes()
	{
		return SerializeToBytes(this);
	}

	public void ToProto(Stream stream)
	{
		Serialize(stream, this);
	}

	public static byte[] SerializeToBytes(ArcadeMachine instance)
	{
		using MemoryStream memoryStream = new MemoryStream();
		Serialize(memoryStream, instance);
		return memoryStream.ToArray();
	}

	public static void SerializeLengthDelimited(Stream stream, ArcadeMachine instance)
	{
		byte[] array = SerializeToBytes(instance);
		ProtocolParser.WriteUInt32(stream, (uint)array.Length);
		stream.Write(array, 0, array.Length);
	}

	public void InspectUids(UidInspector<ulong> action)
	{
		if (scores != null)
		{
			for (int i = 0; i < scores.Count; i++)
			{
				scores[i]?.InspectUids(action);
			}
		}
	}
}
