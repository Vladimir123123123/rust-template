using System;
using System.Collections.Generic;
using System.IO;
using Facepunch;
using ProtoBuf;
using SilentOrbit.ProtocolBuffers;

public class AssociatedFiles : IDisposable, Pool.IPooled, IProto
{
	public class AssociatedFile : IDisposable, Pool.IPooled, IProto
	{
		[NonSerialized]
		public int type;

		[NonSerialized]
		public uint crc;

		[NonSerialized]
		public uint numID;

		[NonSerialized]
		public byte[] data;

		public bool ShouldPool = true;

		private bool _disposed;

		public static void ResetToPool(AssociatedFile instance)
		{
			if (instance.ShouldPool)
			{
				instance.type = 0;
				instance.crc = 0u;
				instance.numID = 0u;
				instance.data = null;
				Pool.Free(ref instance);
			}
		}

		public void ResetToPool()
		{
			ResetToPool(this);
		}

		public virtual void Dispose()
		{
			if (!ShouldPool)
			{
				throw new Exception("Trying to dispose AssociatedFile with ShouldPool set to false!");
			}
			if (!_disposed)
			{
				ResetToPool();
				_disposed = true;
			}
		}

		public virtual void EnterPool()
		{
			_disposed = true;
		}

		public virtual void LeavePool()
		{
			_disposed = false;
		}

		public void CopyTo(AssociatedFile instance)
		{
			instance.type = type;
			instance.crc = crc;
			instance.numID = numID;
			if (data == null)
			{
				instance.data = null;
				return;
			}
			instance.data = new byte[data.Length];
			Array.Copy(data, instance.data, instance.data.Length);
		}

		public AssociatedFile Copy()
		{
			AssociatedFile associatedFile = Pool.Get<AssociatedFile>();
			CopyTo(associatedFile);
			return associatedFile;
		}

		public static AssociatedFile Deserialize(Stream stream)
		{
			AssociatedFile associatedFile = Pool.Get<AssociatedFile>();
			Deserialize(stream, associatedFile, isDelta: false);
			return associatedFile;
		}

		public static AssociatedFile DeserializeLengthDelimited(Stream stream)
		{
			AssociatedFile associatedFile = Pool.Get<AssociatedFile>();
			DeserializeLengthDelimited(stream, associatedFile, isDelta: false);
			return associatedFile;
		}

		public static AssociatedFile DeserializeLength(Stream stream, int length)
		{
			AssociatedFile associatedFile = Pool.Get<AssociatedFile>();
			DeserializeLength(stream, length, associatedFile, isDelta: false);
			return associatedFile;
		}

		public static AssociatedFile Deserialize(byte[] buffer)
		{
			AssociatedFile associatedFile = Pool.Get<AssociatedFile>();
			using MemoryStream stream = new MemoryStream(buffer);
			Deserialize(stream, associatedFile, isDelta: false);
			return associatedFile;
		}

		public void FromProto(Stream stream, bool isDelta = false)
		{
			Deserialize(stream, this, isDelta);
		}

		public virtual void WriteToStream(Stream stream)
		{
			Serialize(stream, this);
		}

		public virtual void WriteToStreamDelta(Stream stream, AssociatedFile previous)
		{
			if (previous == null)
			{
				Serialize(stream, this);
			}
			else
			{
				SerializeDelta(stream, this, previous);
			}
		}

		public virtual void ReadFromStream(Stream stream, int size, bool isDelta = false)
		{
			DeserializeLength(stream, size, this, isDelta);
		}

		public static AssociatedFile Deserialize(byte[] buffer, AssociatedFile instance, bool isDelta = false)
		{
			using MemoryStream stream = new MemoryStream(buffer);
			Deserialize(stream, instance, isDelta);
			return instance;
		}

		public static AssociatedFile Deserialize(Stream stream, AssociatedFile instance, bool isDelta)
		{
			while (true)
			{
				int num = stream.ReadByte();
				switch (num)
				{
				case 8:
					instance.type = (int)ProtocolParser.ReadUInt64(stream);
					continue;
				case 16:
					instance.crc = ProtocolParser.ReadUInt32(stream);
					continue;
				case 24:
					instance.numID = ProtocolParser.ReadUInt32(stream);
					continue;
				case 34:
					instance.data = ProtocolParser.ReadBytes(stream);
					continue;
				case -1:
					return instance;
				}
				Key key = ProtocolParser.ReadKey((byte)num, stream);
				if (key.Field == 0)
				{
					throw new ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
				}
				ProtocolParser.SkipKey(stream, key);
			}
		}

		public static AssociatedFile DeserializeLengthDelimited(Stream stream, AssociatedFile instance, bool isDelta)
		{
			long num = ProtocolParser.ReadUInt32(stream);
			num += stream.Position;
			while (stream.Position < num)
			{
				int num2 = stream.ReadByte();
				switch (num2)
				{
				case -1:
					throw new EndOfStreamException();
				case 8:
					instance.type = (int)ProtocolParser.ReadUInt64(stream);
					continue;
				case 16:
					instance.crc = ProtocolParser.ReadUInt32(stream);
					continue;
				case 24:
					instance.numID = ProtocolParser.ReadUInt32(stream);
					continue;
				case 34:
					instance.data = ProtocolParser.ReadBytes(stream);
					continue;
				}
				Key key = ProtocolParser.ReadKey((byte)num2, stream);
				if (key.Field == 0)
				{
					throw new ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
				}
				ProtocolParser.SkipKey(stream, key);
			}
			if (stream.Position != num)
			{
				throw new ProtocolBufferException("Read past max limit");
			}
			return instance;
		}

		public static AssociatedFile DeserializeLength(Stream stream, int length, AssociatedFile instance, bool isDelta)
		{
			long num = stream.Position + length;
			while (stream.Position < num)
			{
				int num2 = stream.ReadByte();
				switch (num2)
				{
				case -1:
					throw new EndOfStreamException();
				case 8:
					instance.type = (int)ProtocolParser.ReadUInt64(stream);
					continue;
				case 16:
					instance.crc = ProtocolParser.ReadUInt32(stream);
					continue;
				case 24:
					instance.numID = ProtocolParser.ReadUInt32(stream);
					continue;
				case 34:
					instance.data = ProtocolParser.ReadBytes(stream);
					continue;
				}
				Key key = ProtocolParser.ReadKey((byte)num2, stream);
				if (key.Field == 0)
				{
					throw new ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
				}
				ProtocolParser.SkipKey(stream, key);
			}
			if (stream.Position != num)
			{
				throw new ProtocolBufferException("Read past max limit");
			}
			return instance;
		}

		public static void SerializeDelta(Stream stream, AssociatedFile instance, AssociatedFile previous)
		{
			MemoryStream obj = Pool.Get<MemoryStream>();
			if (instance.type != previous.type)
			{
				stream.WriteByte(8);
				ProtocolParser.WriteUInt64(stream, (ulong)instance.type);
			}
			if (instance.crc != previous.crc)
			{
				stream.WriteByte(16);
				ProtocolParser.WriteUInt32(stream, instance.crc);
			}
			if (instance.numID != previous.numID)
			{
				stream.WriteByte(24);
				ProtocolParser.WriteUInt32(stream, instance.numID);
			}
			if (instance.data == null)
			{
				throw new ArgumentNullException("data", "Required by proto specification.");
			}
			stream.WriteByte(34);
			ProtocolParser.WriteBytes(stream, instance.data);
			Pool.FreeUnmanaged(ref obj);
		}

		public static void Serialize(Stream stream, AssociatedFile instance)
		{
			MemoryStream obj = Pool.Get<MemoryStream>();
			if (instance.type != 0)
			{
				stream.WriteByte(8);
				ProtocolParser.WriteUInt64(stream, (ulong)instance.type);
			}
			if (instance.crc != 0)
			{
				stream.WriteByte(16);
				ProtocolParser.WriteUInt32(stream, instance.crc);
			}
			if (instance.numID != 0)
			{
				stream.WriteByte(24);
				ProtocolParser.WriteUInt32(stream, instance.numID);
			}
			if (instance.data == null)
			{
				throw new ArgumentNullException("data", "Required by proto specification.");
			}
			stream.WriteByte(34);
			ProtocolParser.WriteBytes(stream, instance.data);
			Pool.FreeUnmanaged(ref obj);
		}

		public byte[] ToProtoBytes()
		{
			return SerializeToBytes(this);
		}

		public void ToProto(Stream stream)
		{
			Serialize(stream, this);
		}

		public static byte[] SerializeToBytes(AssociatedFile instance)
		{
			using MemoryStream memoryStream = new MemoryStream();
			Serialize(memoryStream, instance);
			return memoryStream.ToArray();
		}

		public static void SerializeLengthDelimited(Stream stream, AssociatedFile instance)
		{
			byte[] array = SerializeToBytes(instance);
			ProtocolParser.WriteUInt32(stream, (uint)array.Length);
			stream.Write(array, 0, array.Length);
		}

		public void InspectUids(UidInspector<ulong> action)
		{
		}
	}

	[NonSerialized]
	public List<AssociatedFile> files;

	public bool ShouldPool = true;

	private bool _disposed;

	public static void ResetToPool(AssociatedFiles instance)
	{
		if (!instance.ShouldPool)
		{
			return;
		}
		if (instance.files != null)
		{
			for (int i = 0; i < instance.files.Count; i++)
			{
				if (instance.files[i] != null)
				{
					instance.files[i].ResetToPool();
					instance.files[i] = null;
				}
			}
			List<AssociatedFile> obj = instance.files;
			Pool.Free(ref obj, freeElements: false);
			instance.files = obj;
		}
		Pool.Free(ref instance);
	}

	public void ResetToPool()
	{
		ResetToPool(this);
	}

	public virtual void Dispose()
	{
		if (!ShouldPool)
		{
			throw new Exception("Trying to dispose AssociatedFiles with ShouldPool set to false!");
		}
		if (!_disposed)
		{
			ResetToPool();
			_disposed = true;
		}
	}

	public virtual void EnterPool()
	{
		_disposed = true;
	}

	public virtual void LeavePool()
	{
		_disposed = false;
	}

	public void CopyTo(AssociatedFiles instance)
	{
		if (files != null)
		{
			instance.files = Pool.Get<List<AssociatedFile>>();
			for (int i = 0; i < files.Count; i++)
			{
				AssociatedFile item = files[i].Copy();
				instance.files.Add(item);
			}
		}
		else
		{
			instance.files = null;
		}
	}

	public AssociatedFiles Copy()
	{
		AssociatedFiles associatedFiles = Pool.Get<AssociatedFiles>();
		CopyTo(associatedFiles);
		return associatedFiles;
	}

	public static AssociatedFiles Deserialize(Stream stream)
	{
		AssociatedFiles associatedFiles = Pool.Get<AssociatedFiles>();
		Deserialize(stream, associatedFiles, isDelta: false);
		return associatedFiles;
	}

	public static AssociatedFiles DeserializeLengthDelimited(Stream stream)
	{
		AssociatedFiles associatedFiles = Pool.Get<AssociatedFiles>();
		DeserializeLengthDelimited(stream, associatedFiles, isDelta: false);
		return associatedFiles;
	}

	public static AssociatedFiles DeserializeLength(Stream stream, int length)
	{
		AssociatedFiles associatedFiles = Pool.Get<AssociatedFiles>();
		DeserializeLength(stream, length, associatedFiles, isDelta: false);
		return associatedFiles;
	}

	public static AssociatedFiles Deserialize(byte[] buffer)
	{
		AssociatedFiles associatedFiles = Pool.Get<AssociatedFiles>();
		using MemoryStream stream = new MemoryStream(buffer);
		Deserialize(stream, associatedFiles, isDelta: false);
		return associatedFiles;
	}

	public void FromProto(Stream stream, bool isDelta = false)
	{
		Deserialize(stream, this, isDelta);
	}

	public virtual void WriteToStream(Stream stream)
	{
		Serialize(stream, this);
	}

	public virtual void WriteToStreamDelta(Stream stream, AssociatedFiles previous)
	{
		if (previous == null)
		{
			Serialize(stream, this);
		}
		else
		{
			SerializeDelta(stream, this, previous);
		}
	}

	public virtual void ReadFromStream(Stream stream, int size, bool isDelta = false)
	{
		DeserializeLength(stream, size, this, isDelta);
	}

	public static AssociatedFiles Deserialize(byte[] buffer, AssociatedFiles instance, bool isDelta = false)
	{
		using MemoryStream stream = new MemoryStream(buffer);
		Deserialize(stream, instance, isDelta);
		return instance;
	}

	public static AssociatedFiles Deserialize(Stream stream, AssociatedFiles instance, bool isDelta)
	{
		if (!isDelta && instance.files == null)
		{
			instance.files = Pool.Get<List<AssociatedFile>>();
		}
		while (true)
		{
			int num = stream.ReadByte();
			switch (num)
			{
			case 10:
				instance.files.Add(AssociatedFile.DeserializeLengthDelimited(stream));
				continue;
			case -1:
				return instance;
			}
			Key key = ProtocolParser.ReadKey((byte)num, stream);
			if (key.Field == 0)
			{
				throw new ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
			}
			ProtocolParser.SkipKey(stream, key);
		}
	}

	public static AssociatedFiles DeserializeLengthDelimited(Stream stream, AssociatedFiles instance, bool isDelta)
	{
		if (!isDelta && instance.files == null)
		{
			instance.files = Pool.Get<List<AssociatedFile>>();
		}
		long num = ProtocolParser.ReadUInt32(stream);
		num += stream.Position;
		while (stream.Position < num)
		{
			int num2 = stream.ReadByte();
			switch (num2)
			{
			case -1:
				throw new EndOfStreamException();
			case 10:
				instance.files.Add(AssociatedFile.DeserializeLengthDelimited(stream));
				continue;
			}
			Key key = ProtocolParser.ReadKey((byte)num2, stream);
			if (key.Field == 0)
			{
				throw new ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
			}
			ProtocolParser.SkipKey(stream, key);
		}
		if (stream.Position != num)
		{
			throw new ProtocolBufferException("Read past max limit");
		}
		return instance;
	}

	public static AssociatedFiles DeserializeLength(Stream stream, int length, AssociatedFiles instance, bool isDelta)
	{
		if (!isDelta && instance.files == null)
		{
			instance.files = Pool.Get<List<AssociatedFile>>();
		}
		long num = stream.Position + length;
		while (stream.Position < num)
		{
			int num2 = stream.ReadByte();
			switch (num2)
			{
			case -1:
				throw new EndOfStreamException();
			case 10:
				instance.files.Add(AssociatedFile.DeserializeLengthDelimited(stream));
				continue;
			}
			Key key = ProtocolParser.ReadKey((byte)num2, stream);
			if (key.Field == 0)
			{
				throw new ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
			}
			ProtocolParser.SkipKey(stream, key);
		}
		if (stream.Position != num)
		{
			throw new ProtocolBufferException("Read past max limit");
		}
		return instance;
	}

	public static void SerializeDelta(Stream stream, AssociatedFiles instance, AssociatedFiles previous)
	{
		MemoryStream obj = Pool.Get<MemoryStream>();
		if (instance.files != null)
		{
			for (int i = 0; i < instance.files.Count; i++)
			{
				AssociatedFile associatedFile = instance.files[i];
				stream.WriteByte(10);
				obj.SetLength(0L);
				AssociatedFile.SerializeDelta(obj, associatedFile, associatedFile);
				uint num = (uint)obj.Length;
				ProtocolParser.WriteUInt32(stream, num);
				stream.Write(obj.GetBuffer(), 0, (int)num);
			}
		}
		Pool.FreeUnmanaged(ref obj);
	}

	public static void Serialize(Stream stream, AssociatedFiles instance)
	{
		MemoryStream obj = Pool.Get<MemoryStream>();
		if (instance.files != null)
		{
			for (int i = 0; i < instance.files.Count; i++)
			{
				AssociatedFile instance2 = instance.files[i];
				stream.WriteByte(10);
				obj.SetLength(0L);
				AssociatedFile.Serialize(obj, instance2);
				uint num = (uint)obj.Length;
				ProtocolParser.WriteUInt32(stream, num);
				stream.Write(obj.GetBuffer(), 0, (int)num);
			}
		}
		Pool.FreeUnmanaged(ref obj);
	}

	public byte[] ToProtoBytes()
	{
		return SerializeToBytes(this);
	}

	public void ToProto(Stream stream)
	{
		Serialize(stream, this);
	}

	public static byte[] SerializeToBytes(AssociatedFiles instance)
	{
		using MemoryStream memoryStream = new MemoryStream();
		Serialize(memoryStream, instance);
		return memoryStream.ToArray();
	}

	public static void SerializeLengthDelimited(Stream stream, AssociatedFiles instance)
	{
		byte[] array = SerializeToBytes(instance);
		ProtocolParser.WriteUInt32(stream, (uint)array.Length);
		stream.Write(array, 0, array.Length);
	}

	public void InspectUids(UidInspector<ulong> action)
	{
		if (files != null)
		{
			for (int i = 0; i < files.Count; i++)
			{
				files[i]?.InspectUids(action);
			}
		}
	}
}
