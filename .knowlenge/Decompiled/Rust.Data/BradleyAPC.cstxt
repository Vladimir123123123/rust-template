using System;
using System.IO;
using Facepunch;
using ProtoBuf;
using SilentOrbit.ProtocolBuffers;
using UnityEngine;

public class BradleyAPC : IDisposable, Pool.IPooled, IProto
{
	[NonSerialized]
	public float engineThrottle;

	[NonSerialized]
	public float throttleLeft;

	[NonSerialized]
	public float throttleRight;

	[NonSerialized]
	public Vector3 mainGunVec;

	[NonSerialized]
	public Vector3 topTurretVec;

	[NonSerialized]
	public Vector3 rearGunVec;

	[NonSerialized]
	public Vector3 leftSideGun1;

	[NonSerialized]
	public Vector3 leftSideGun2;

	[NonSerialized]
	public Vector3 rightSideGun1;

	[NonSerialized]
	public Vector3 rightSideGun2;

	public bool ShouldPool = true;

	private bool _disposed;

	public static void ResetToPool(BradleyAPC instance)
	{
		if (instance.ShouldPool)
		{
			instance.engineThrottle = 0f;
			instance.throttleLeft = 0f;
			instance.throttleRight = 0f;
			instance.mainGunVec = default(Vector3);
			instance.topTurretVec = default(Vector3);
			instance.rearGunVec = default(Vector3);
			instance.leftSideGun1 = default(Vector3);
			instance.leftSideGun2 = default(Vector3);
			instance.rightSideGun1 = default(Vector3);
			instance.rightSideGun2 = default(Vector3);
			Pool.Free(ref instance);
		}
	}

	public void ResetToPool()
	{
		ResetToPool(this);
	}

	public virtual void Dispose()
	{
		if (!ShouldPool)
		{
			throw new Exception("Trying to dispose BradleyAPC with ShouldPool set to false!");
		}
		if (!_disposed)
		{
			ResetToPool();
			_disposed = true;
		}
	}

	public virtual void EnterPool()
	{
		_disposed = true;
	}

	public virtual void LeavePool()
	{
		_disposed = false;
	}

	public void CopyTo(BradleyAPC instance)
	{
		instance.engineThrottle = engineThrottle;
		instance.throttleLeft = throttleLeft;
		instance.throttleRight = throttleRight;
		instance.mainGunVec = mainGunVec;
		instance.topTurretVec = topTurretVec;
		instance.rearGunVec = rearGunVec;
		instance.leftSideGun1 = leftSideGun1;
		instance.leftSideGun2 = leftSideGun2;
		instance.rightSideGun1 = rightSideGun1;
		instance.rightSideGun2 = rightSideGun2;
	}

	public BradleyAPC Copy()
	{
		BradleyAPC bradleyAPC = Pool.Get<BradleyAPC>();
		CopyTo(bradleyAPC);
		return bradleyAPC;
	}

	public static BradleyAPC Deserialize(Stream stream)
	{
		BradleyAPC bradleyAPC = Pool.Get<BradleyAPC>();
		Deserialize(stream, bradleyAPC, isDelta: false);
		return bradleyAPC;
	}

	public static BradleyAPC DeserializeLengthDelimited(Stream stream)
	{
		BradleyAPC bradleyAPC = Pool.Get<BradleyAPC>();
		DeserializeLengthDelimited(stream, bradleyAPC, isDelta: false);
		return bradleyAPC;
	}

	public static BradleyAPC DeserializeLength(Stream stream, int length)
	{
		BradleyAPC bradleyAPC = Pool.Get<BradleyAPC>();
		DeserializeLength(stream, length, bradleyAPC, isDelta: false);
		return bradleyAPC;
	}

	public static BradleyAPC Deserialize(byte[] buffer)
	{
		BradleyAPC bradleyAPC = Pool.Get<BradleyAPC>();
		using MemoryStream stream = new MemoryStream(buffer);
		Deserialize(stream, bradleyAPC, isDelta: false);
		return bradleyAPC;
	}

	public void FromProto(Stream stream, bool isDelta = false)
	{
		Deserialize(stream, this, isDelta);
	}

	public virtual void WriteToStream(Stream stream)
	{
		Serialize(stream, this);
	}

	public virtual void WriteToStreamDelta(Stream stream, BradleyAPC previous)
	{
		if (previous == null)
		{
			Serialize(stream, this);
		}
		else
		{
			SerializeDelta(stream, this, previous);
		}
	}

	public virtual void ReadFromStream(Stream stream, int size, bool isDelta = false)
	{
		DeserializeLength(stream, size, this, isDelta);
	}

	public static BradleyAPC Deserialize(byte[] buffer, BradleyAPC instance, bool isDelta = false)
	{
		using MemoryStream stream = new MemoryStream(buffer);
		Deserialize(stream, instance, isDelta);
		return instance;
	}

	public static BradleyAPC Deserialize(Stream stream, BradleyAPC instance, bool isDelta)
	{
		while (true)
		{
			int num = stream.ReadByte();
			switch (num)
			{
			case 13:
				instance.engineThrottle = ProtocolParser.ReadSingle(stream);
				continue;
			case 21:
				instance.throttleLeft = ProtocolParser.ReadSingle(stream);
				continue;
			case 29:
				instance.throttleRight = ProtocolParser.ReadSingle(stream);
				continue;
			case 34:
				Vector3Serialized.DeserializeLengthDelimited(stream, ref instance.mainGunVec, isDelta);
				continue;
			case 42:
				Vector3Serialized.DeserializeLengthDelimited(stream, ref instance.topTurretVec, isDelta);
				continue;
			case 50:
				Vector3Serialized.DeserializeLengthDelimited(stream, ref instance.rearGunVec, isDelta);
				continue;
			case 58:
				Vector3Serialized.DeserializeLengthDelimited(stream, ref instance.leftSideGun1, isDelta);
				continue;
			case 66:
				Vector3Serialized.DeserializeLengthDelimited(stream, ref instance.leftSideGun2, isDelta);
				continue;
			case 74:
				Vector3Serialized.DeserializeLengthDelimited(stream, ref instance.rightSideGun1, isDelta);
				continue;
			case 82:
				Vector3Serialized.DeserializeLengthDelimited(stream, ref instance.rightSideGun2, isDelta);
				continue;
			case -1:
				return instance;
			}
			Key key = ProtocolParser.ReadKey((byte)num, stream);
			if (key.Field == 0)
			{
				throw new ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
			}
			ProtocolParser.SkipKey(stream, key);
		}
	}

	public static BradleyAPC DeserializeLengthDelimited(Stream stream, BradleyAPC instance, bool isDelta)
	{
		long num = ProtocolParser.ReadUInt32(stream);
		num += stream.Position;
		while (stream.Position < num)
		{
			int num2 = stream.ReadByte();
			switch (num2)
			{
			case -1:
				throw new EndOfStreamException();
			case 13:
				instance.engineThrottle = ProtocolParser.ReadSingle(stream);
				continue;
			case 21:
				instance.throttleLeft = ProtocolParser.ReadSingle(stream);
				continue;
			case 29:
				instance.throttleRight = ProtocolParser.ReadSingle(stream);
				continue;
			case 34:
				Vector3Serialized.DeserializeLengthDelimited(stream, ref instance.mainGunVec, isDelta);
				continue;
			case 42:
				Vector3Serialized.DeserializeLengthDelimited(stream, ref instance.topTurretVec, isDelta);
				continue;
			case 50:
				Vector3Serialized.DeserializeLengthDelimited(stream, ref instance.rearGunVec, isDelta);
				continue;
			case 58:
				Vector3Serialized.DeserializeLengthDelimited(stream, ref instance.leftSideGun1, isDelta);
				continue;
			case 66:
				Vector3Serialized.DeserializeLengthDelimited(stream, ref instance.leftSideGun2, isDelta);
				continue;
			case 74:
				Vector3Serialized.DeserializeLengthDelimited(stream, ref instance.rightSideGun1, isDelta);
				continue;
			case 82:
				Vector3Serialized.DeserializeLengthDelimited(stream, ref instance.rightSideGun2, isDelta);
				continue;
			}
			Key key = ProtocolParser.ReadKey((byte)num2, stream);
			if (key.Field == 0)
			{
				throw new ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
			}
			ProtocolParser.SkipKey(stream, key);
		}
		if (stream.Position != num)
		{
			throw new ProtocolBufferException("Read past max limit");
		}
		return instance;
	}

	public static BradleyAPC DeserializeLength(Stream stream, int length, BradleyAPC instance, bool isDelta)
	{
		long num = stream.Position + length;
		while (stream.Position < num)
		{
			int num2 = stream.ReadByte();
			switch (num2)
			{
			case -1:
				throw new EndOfStreamException();
			case 13:
				instance.engineThrottle = ProtocolParser.ReadSingle(stream);
				continue;
			case 21:
				instance.throttleLeft = ProtocolParser.ReadSingle(stream);
				continue;
			case 29:
				instance.throttleRight = ProtocolParser.ReadSingle(stream);
				continue;
			case 34:
				Vector3Serialized.DeserializeLengthDelimited(stream, ref instance.mainGunVec, isDelta);
				continue;
			case 42:
				Vector3Serialized.DeserializeLengthDelimited(stream, ref instance.topTurretVec, isDelta);
				continue;
			case 50:
				Vector3Serialized.DeserializeLengthDelimited(stream, ref instance.rearGunVec, isDelta);
				continue;
			case 58:
				Vector3Serialized.DeserializeLengthDelimited(stream, ref instance.leftSideGun1, isDelta);
				continue;
			case 66:
				Vector3Serialized.DeserializeLengthDelimited(stream, ref instance.leftSideGun2, isDelta);
				continue;
			case 74:
				Vector3Serialized.DeserializeLengthDelimited(stream, ref instance.rightSideGun1, isDelta);
				continue;
			case 82:
				Vector3Serialized.DeserializeLengthDelimited(stream, ref instance.rightSideGun2, isDelta);
				continue;
			}
			Key key = ProtocolParser.ReadKey((byte)num2, stream);
			if (key.Field == 0)
			{
				throw new ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
			}
			ProtocolParser.SkipKey(stream, key);
		}
		if (stream.Position != num)
		{
			throw new ProtocolBufferException("Read past max limit");
		}
		return instance;
	}

	public static void SerializeDelta(Stream stream, BradleyAPC instance, BradleyAPC previous)
	{
		MemoryStream obj = Pool.Get<MemoryStream>();
		if (instance.engineThrottle != previous.engineThrottle)
		{
			stream.WriteByte(13);
			ProtocolParser.WriteSingle(stream, instance.engineThrottle);
		}
		if (instance.throttleLeft != previous.throttleLeft)
		{
			stream.WriteByte(21);
			ProtocolParser.WriteSingle(stream, instance.throttleLeft);
		}
		if (instance.throttleRight != previous.throttleRight)
		{
			stream.WriteByte(29);
			ProtocolParser.WriteSingle(stream, instance.throttleRight);
		}
		if (instance.mainGunVec != previous.mainGunVec)
		{
			stream.WriteByte(34);
			obj.SetLength(0L);
			Vector3Serialized.SerializeDelta(obj, instance.mainGunVec, previous.mainGunVec);
			uint num = (uint)obj.Length;
			ProtocolParser.WriteUInt32(stream, num);
			stream.Write(obj.GetBuffer(), 0, (int)num);
		}
		if (instance.topTurretVec != previous.topTurretVec)
		{
			stream.WriteByte(42);
			obj.SetLength(0L);
			Vector3Serialized.SerializeDelta(obj, instance.topTurretVec, previous.topTurretVec);
			uint num2 = (uint)obj.Length;
			ProtocolParser.WriteUInt32(stream, num2);
			stream.Write(obj.GetBuffer(), 0, (int)num2);
		}
		if (instance.rearGunVec != previous.rearGunVec)
		{
			stream.WriteByte(50);
			obj.SetLength(0L);
			Vector3Serialized.SerializeDelta(obj, instance.rearGunVec, previous.rearGunVec);
			uint num3 = (uint)obj.Length;
			ProtocolParser.WriteUInt32(stream, num3);
			stream.Write(obj.GetBuffer(), 0, (int)num3);
		}
		if (instance.leftSideGun1 != previous.leftSideGun1)
		{
			stream.WriteByte(58);
			obj.SetLength(0L);
			Vector3Serialized.SerializeDelta(obj, instance.leftSideGun1, previous.leftSideGun1);
			uint num4 = (uint)obj.Length;
			ProtocolParser.WriteUInt32(stream, num4);
			stream.Write(obj.GetBuffer(), 0, (int)num4);
		}
		if (instance.leftSideGun2 != previous.leftSideGun2)
		{
			stream.WriteByte(66);
			obj.SetLength(0L);
			Vector3Serialized.SerializeDelta(obj, instance.leftSideGun2, previous.leftSideGun2);
			uint num5 = (uint)obj.Length;
			ProtocolParser.WriteUInt32(stream, num5);
			stream.Write(obj.GetBuffer(), 0, (int)num5);
		}
		if (instance.rightSideGun1 != previous.rightSideGun1)
		{
			stream.WriteByte(74);
			obj.SetLength(0L);
			Vector3Serialized.SerializeDelta(obj, instance.rightSideGun1, previous.rightSideGun1);
			uint num6 = (uint)obj.Length;
			ProtocolParser.WriteUInt32(stream, num6);
			stream.Write(obj.GetBuffer(), 0, (int)num6);
		}
		if (instance.rightSideGun2 != previous.rightSideGun2)
		{
			stream.WriteByte(82);
			obj.SetLength(0L);
			Vector3Serialized.SerializeDelta(obj, instance.rightSideGun2, previous.rightSideGun2);
			uint num7 = (uint)obj.Length;
			ProtocolParser.WriteUInt32(stream, num7);
			stream.Write(obj.GetBuffer(), 0, (int)num7);
		}
		Pool.FreeUnmanaged(ref obj);
	}

	public static void Serialize(Stream stream, BradleyAPC instance)
	{
		MemoryStream obj = Pool.Get<MemoryStream>();
		if (instance.engineThrottle != 0f)
		{
			stream.WriteByte(13);
			ProtocolParser.WriteSingle(stream, instance.engineThrottle);
		}
		if (instance.throttleLeft != 0f)
		{
			stream.WriteByte(21);
			ProtocolParser.WriteSingle(stream, instance.throttleLeft);
		}
		if (instance.throttleRight != 0f)
		{
			stream.WriteByte(29);
			ProtocolParser.WriteSingle(stream, instance.throttleRight);
		}
		if (instance.mainGunVec != default(Vector3))
		{
			stream.WriteByte(34);
			obj.SetLength(0L);
			Vector3Serialized.Serialize(obj, instance.mainGunVec);
			uint num = (uint)obj.Length;
			ProtocolParser.WriteUInt32(stream, num);
			stream.Write(obj.GetBuffer(), 0, (int)num);
		}
		if (instance.topTurretVec != default(Vector3))
		{
			stream.WriteByte(42);
			obj.SetLength(0L);
			Vector3Serialized.Serialize(obj, instance.topTurretVec);
			uint num2 = (uint)obj.Length;
			ProtocolParser.WriteUInt32(stream, num2);
			stream.Write(obj.GetBuffer(), 0, (int)num2);
		}
		if (instance.rearGunVec != default(Vector3))
		{
			stream.WriteByte(50);
			obj.SetLength(0L);
			Vector3Serialized.Serialize(obj, instance.rearGunVec);
			uint num3 = (uint)obj.Length;
			ProtocolParser.WriteUInt32(stream, num3);
			stream.Write(obj.GetBuffer(), 0, (int)num3);
		}
		if (instance.leftSideGun1 != default(Vector3))
		{
			stream.WriteByte(58);
			obj.SetLength(0L);
			Vector3Serialized.Serialize(obj, instance.leftSideGun1);
			uint num4 = (uint)obj.Length;
			ProtocolParser.WriteUInt32(stream, num4);
			stream.Write(obj.GetBuffer(), 0, (int)num4);
		}
		if (instance.leftSideGun2 != default(Vector3))
		{
			stream.WriteByte(66);
			obj.SetLength(0L);
			Vector3Serialized.Serialize(obj, instance.leftSideGun2);
			uint num5 = (uint)obj.Length;
			ProtocolParser.WriteUInt32(stream, num5);
			stream.Write(obj.GetBuffer(), 0, (int)num5);
		}
		if (instance.rightSideGun1 != default(Vector3))
		{
			stream.WriteByte(74);
			obj.SetLength(0L);
			Vector3Serialized.Serialize(obj, instance.rightSideGun1);
			uint num6 = (uint)obj.Length;
			ProtocolParser.WriteUInt32(stream, num6);
			stream.Write(obj.GetBuffer(), 0, (int)num6);
		}
		if (instance.rightSideGun2 != default(Vector3))
		{
			stream.WriteByte(82);
			obj.SetLength(0L);
			Vector3Serialized.Serialize(obj, instance.rightSideGun2);
			uint num7 = (uint)obj.Length;
			ProtocolParser.WriteUInt32(stream, num7);
			stream.Write(obj.GetBuffer(), 0, (int)num7);
		}
		Pool.FreeUnmanaged(ref obj);
	}

	public byte[] ToProtoBytes()
	{
		return SerializeToBytes(this);
	}

	public void ToProto(Stream stream)
	{
		Serialize(stream, this);
	}

	public static byte[] SerializeToBytes(BradleyAPC instance)
	{
		using MemoryStream memoryStream = new MemoryStream();
		Serialize(memoryStream, instance);
		return memoryStream.ToArray();
	}

	public static void SerializeLengthDelimited(Stream stream, BradleyAPC instance)
	{
		byte[] array = SerializeToBytes(instance);
		ProtocolParser.WriteUInt32(stream, (uint)array.Length);
		stream.Write(array, 0, array.Length);
	}

	public void InspectUids(UidInspector<ulong> action)
	{
	}
}
