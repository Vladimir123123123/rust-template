using System;
using System.IO;
using Facepunch;
using ProtoBuf;
using SilentOrbit.ProtocolBuffers;

public class BuildingBlock : IDisposable, Pool.IPooled, IProto
{
	[NonSerialized]
	public int model;

	[NonSerialized]
	public int grade;

	[NonSerialized]
	public bool beingDemolished;

	[NonSerialized]
	public ulong wallpaperID;

	[NonSerialized]
	public float wallpaperHealth;

	[NonSerialized]
	public ulong wallpaperID2;

	[NonSerialized]
	public float wallpaperHealth2;

	public bool ShouldPool = true;

	private bool _disposed;

	public static void ResetToPool(BuildingBlock instance)
	{
		if (instance.ShouldPool)
		{
			instance.model = 0;
			instance.grade = 0;
			instance.beingDemolished = false;
			instance.wallpaperID = 0uL;
			instance.wallpaperHealth = 0f;
			instance.wallpaperID2 = 0uL;
			instance.wallpaperHealth2 = 0f;
			Pool.Free(ref instance);
		}
	}

	public void ResetToPool()
	{
		ResetToPool(this);
	}

	public virtual void Dispose()
	{
		if (!ShouldPool)
		{
			throw new Exception("Trying to dispose BuildingBlock with ShouldPool set to false!");
		}
		if (!_disposed)
		{
			ResetToPool();
			_disposed = true;
		}
	}

	public virtual void EnterPool()
	{
		_disposed = true;
	}

	public virtual void LeavePool()
	{
		_disposed = false;
	}

	public void CopyTo(BuildingBlock instance)
	{
		instance.model = model;
		instance.grade = grade;
		instance.beingDemolished = beingDemolished;
		instance.wallpaperID = wallpaperID;
		instance.wallpaperHealth = wallpaperHealth;
		instance.wallpaperID2 = wallpaperID2;
		instance.wallpaperHealth2 = wallpaperHealth2;
	}

	public BuildingBlock Copy()
	{
		BuildingBlock buildingBlock = Pool.Get<BuildingBlock>();
		CopyTo(buildingBlock);
		return buildingBlock;
	}

	public static BuildingBlock Deserialize(Stream stream)
	{
		BuildingBlock buildingBlock = Pool.Get<BuildingBlock>();
		Deserialize(stream, buildingBlock, isDelta: false);
		return buildingBlock;
	}

	public static BuildingBlock DeserializeLengthDelimited(Stream stream)
	{
		BuildingBlock buildingBlock = Pool.Get<BuildingBlock>();
		DeserializeLengthDelimited(stream, buildingBlock, isDelta: false);
		return buildingBlock;
	}

	public static BuildingBlock DeserializeLength(Stream stream, int length)
	{
		BuildingBlock buildingBlock = Pool.Get<BuildingBlock>();
		DeserializeLength(stream, length, buildingBlock, isDelta: false);
		return buildingBlock;
	}

	public static BuildingBlock Deserialize(byte[] buffer)
	{
		BuildingBlock buildingBlock = Pool.Get<BuildingBlock>();
		using MemoryStream stream = new MemoryStream(buffer);
		Deserialize(stream, buildingBlock, isDelta: false);
		return buildingBlock;
	}

	public void FromProto(Stream stream, bool isDelta = false)
	{
		Deserialize(stream, this, isDelta);
	}

	public virtual void WriteToStream(Stream stream)
	{
		Serialize(stream, this);
	}

	public virtual void WriteToStreamDelta(Stream stream, BuildingBlock previous)
	{
		if (previous == null)
		{
			Serialize(stream, this);
		}
		else
		{
			SerializeDelta(stream, this, previous);
		}
	}

	public virtual void ReadFromStream(Stream stream, int size, bool isDelta = false)
	{
		DeserializeLength(stream, size, this, isDelta);
	}

	public static BuildingBlock Deserialize(byte[] buffer, BuildingBlock instance, bool isDelta = false)
	{
		using MemoryStream stream = new MemoryStream(buffer);
		Deserialize(stream, instance, isDelta);
		return instance;
	}

	public static BuildingBlock Deserialize(Stream stream, BuildingBlock instance, bool isDelta)
	{
		while (true)
		{
			int num = stream.ReadByte();
			switch (num)
			{
			case 8:
				instance.model = (int)ProtocolParser.ReadUInt64(stream);
				continue;
			case 16:
				instance.grade = (int)ProtocolParser.ReadUInt64(stream);
				continue;
			case 24:
				instance.beingDemolished = ProtocolParser.ReadBool(stream);
				continue;
			case 32:
				instance.wallpaperID = ProtocolParser.ReadUInt64(stream);
				continue;
			case 45:
				instance.wallpaperHealth = ProtocolParser.ReadSingle(stream);
				continue;
			case 48:
				instance.wallpaperID2 = ProtocolParser.ReadUInt64(stream);
				continue;
			case 61:
				instance.wallpaperHealth2 = ProtocolParser.ReadSingle(stream);
				continue;
			case -1:
				return instance;
			}
			Key key = ProtocolParser.ReadKey((byte)num, stream);
			if (key.Field == 0)
			{
				throw new ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
			}
			ProtocolParser.SkipKey(stream, key);
		}
	}

	public static BuildingBlock DeserializeLengthDelimited(Stream stream, BuildingBlock instance, bool isDelta)
	{
		long num = ProtocolParser.ReadUInt32(stream);
		num += stream.Position;
		while (stream.Position < num)
		{
			int num2 = stream.ReadByte();
			switch (num2)
			{
			case -1:
				throw new EndOfStreamException();
			case 8:
				instance.model = (int)ProtocolParser.ReadUInt64(stream);
				continue;
			case 16:
				instance.grade = (int)ProtocolParser.ReadUInt64(stream);
				continue;
			case 24:
				instance.beingDemolished = ProtocolParser.ReadBool(stream);
				continue;
			case 32:
				instance.wallpaperID = ProtocolParser.ReadUInt64(stream);
				continue;
			case 45:
				instance.wallpaperHealth = ProtocolParser.ReadSingle(stream);
				continue;
			case 48:
				instance.wallpaperID2 = ProtocolParser.ReadUInt64(stream);
				continue;
			case 61:
				instance.wallpaperHealth2 = ProtocolParser.ReadSingle(stream);
				continue;
			}
			Key key = ProtocolParser.ReadKey((byte)num2, stream);
			if (key.Field == 0)
			{
				throw new ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
			}
			ProtocolParser.SkipKey(stream, key);
		}
		if (stream.Position != num)
		{
			throw new ProtocolBufferException("Read past max limit");
		}
		return instance;
	}

	public static BuildingBlock DeserializeLength(Stream stream, int length, BuildingBlock instance, bool isDelta)
	{
		long num = stream.Position + length;
		while (stream.Position < num)
		{
			int num2 = stream.ReadByte();
			switch (num2)
			{
			case -1:
				throw new EndOfStreamException();
			case 8:
				instance.model = (int)ProtocolParser.ReadUInt64(stream);
				continue;
			case 16:
				instance.grade = (int)ProtocolParser.ReadUInt64(stream);
				continue;
			case 24:
				instance.beingDemolished = ProtocolParser.ReadBool(stream);
				continue;
			case 32:
				instance.wallpaperID = ProtocolParser.ReadUInt64(stream);
				continue;
			case 45:
				instance.wallpaperHealth = ProtocolParser.ReadSingle(stream);
				continue;
			case 48:
				instance.wallpaperID2 = ProtocolParser.ReadUInt64(stream);
				continue;
			case 61:
				instance.wallpaperHealth2 = ProtocolParser.ReadSingle(stream);
				continue;
			}
			Key key = ProtocolParser.ReadKey((byte)num2, stream);
			if (key.Field == 0)
			{
				throw new ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
			}
			ProtocolParser.SkipKey(stream, key);
		}
		if (stream.Position != num)
		{
			throw new ProtocolBufferException("Read past max limit");
		}
		return instance;
	}

	public static void SerializeDelta(Stream stream, BuildingBlock instance, BuildingBlock previous)
	{
		MemoryStream obj = Pool.Get<MemoryStream>();
		if (instance.model != previous.model)
		{
			stream.WriteByte(8);
			ProtocolParser.WriteUInt64(stream, (ulong)instance.model);
		}
		if (instance.grade != previous.grade)
		{
			stream.WriteByte(16);
			ProtocolParser.WriteUInt64(stream, (ulong)instance.grade);
		}
		stream.WriteByte(24);
		ProtocolParser.WriteBool(stream, instance.beingDemolished);
		if (instance.wallpaperID != previous.wallpaperID)
		{
			stream.WriteByte(32);
			ProtocolParser.WriteUInt64(stream, instance.wallpaperID);
		}
		if (instance.wallpaperHealth != previous.wallpaperHealth)
		{
			stream.WriteByte(45);
			ProtocolParser.WriteSingle(stream, instance.wallpaperHealth);
		}
		if (instance.wallpaperID2 != previous.wallpaperID2)
		{
			stream.WriteByte(48);
			ProtocolParser.WriteUInt64(stream, instance.wallpaperID2);
		}
		if (instance.wallpaperHealth2 != previous.wallpaperHealth2)
		{
			stream.WriteByte(61);
			ProtocolParser.WriteSingle(stream, instance.wallpaperHealth2);
		}
		Pool.FreeUnmanaged(ref obj);
	}

	public static void Serialize(Stream stream, BuildingBlock instance)
	{
		MemoryStream obj = Pool.Get<MemoryStream>();
		if (instance.model != 0)
		{
			stream.WriteByte(8);
			ProtocolParser.WriteUInt64(stream, (ulong)instance.model);
		}
		if (instance.grade != 0)
		{
			stream.WriteByte(16);
			ProtocolParser.WriteUInt64(stream, (ulong)instance.grade);
		}
		if (instance.beingDemolished)
		{
			stream.WriteByte(24);
			ProtocolParser.WriteBool(stream, instance.beingDemolished);
		}
		if (instance.wallpaperID != 0L)
		{
			stream.WriteByte(32);
			ProtocolParser.WriteUInt64(stream, instance.wallpaperID);
		}
		if (instance.wallpaperHealth != 0f)
		{
			stream.WriteByte(45);
			ProtocolParser.WriteSingle(stream, instance.wallpaperHealth);
		}
		if (instance.wallpaperID2 != 0L)
		{
			stream.WriteByte(48);
			ProtocolParser.WriteUInt64(stream, instance.wallpaperID2);
		}
		if (instance.wallpaperHealth2 != 0f)
		{
			stream.WriteByte(61);
			ProtocolParser.WriteSingle(stream, instance.wallpaperHealth2);
		}
		Pool.FreeUnmanaged(ref obj);
	}

	public byte[] ToProtoBytes()
	{
		return SerializeToBytes(this);
	}

	public void ToProto(Stream stream)
	{
		Serialize(stream, this);
	}

	public static byte[] SerializeToBytes(BuildingBlock instance)
	{
		using MemoryStream memoryStream = new MemoryStream();
		Serialize(memoryStream, instance);
		return memoryStream.ToArray();
	}

	public static void SerializeLengthDelimited(Stream stream, BuildingBlock instance)
	{
		byte[] array = SerializeToBytes(instance);
		ProtocolParser.WriteUInt32(stream, (uint)array.Length);
		stream.Write(array, 0, array.Length);
	}

	public void InspectUids(UidInspector<ulong> action)
	{
	}
}
