using System;
using System.Collections.Generic;
using System.IO;
using Facepunch;
using ProtoBuf;
using SilentOrbit.ProtocolBuffers;

public class BuildingPrivilege : IDisposable, Pool.IPooled, IProto
{
	[NonSerialized]
	public List<PlayerNameID> users;

	[NonSerialized]
	public float upkeepPeriodMinutes;

	[NonSerialized]
	public float costFraction;

	[NonSerialized]
	public float protectedMinutes;

	[NonSerialized]
	public bool clientAuthed;

	[NonSerialized]
	public bool clientAnyAuthed;

	public bool ShouldPool = true;

	private bool _disposed;

	public static void ResetToPool(BuildingPrivilege instance)
	{
		if (!instance.ShouldPool)
		{
			return;
		}
		if (instance.users != null)
		{
			for (int i = 0; i < instance.users.Count; i++)
			{
				if (instance.users[i] != null)
				{
					instance.users[i].ResetToPool();
					instance.users[i] = null;
				}
			}
			List<PlayerNameID> obj = instance.users;
			Pool.Free(ref obj, freeElements: false);
			instance.users = obj;
		}
		instance.upkeepPeriodMinutes = 0f;
		instance.costFraction = 0f;
		instance.protectedMinutes = 0f;
		instance.clientAuthed = false;
		instance.clientAnyAuthed = false;
		Pool.Free(ref instance);
	}

	public void ResetToPool()
	{
		ResetToPool(this);
	}

	public virtual void Dispose()
	{
		if (!ShouldPool)
		{
			throw new Exception("Trying to dispose BuildingPrivilege with ShouldPool set to false!");
		}
		if (!_disposed)
		{
			ResetToPool();
			_disposed = true;
		}
	}

	public virtual void EnterPool()
	{
		_disposed = true;
	}

	public virtual void LeavePool()
	{
		_disposed = false;
	}

	public void CopyTo(BuildingPrivilege instance)
	{
		if (users != null)
		{
			instance.users = Pool.Get<List<PlayerNameID>>();
			for (int i = 0; i < users.Count; i++)
			{
				PlayerNameID item = users[i].Copy();
				instance.users.Add(item);
			}
		}
		else
		{
			instance.users = null;
		}
		instance.upkeepPeriodMinutes = upkeepPeriodMinutes;
		instance.costFraction = costFraction;
		instance.protectedMinutes = protectedMinutes;
		instance.clientAuthed = clientAuthed;
		instance.clientAnyAuthed = clientAnyAuthed;
	}

	public BuildingPrivilege Copy()
	{
		BuildingPrivilege buildingPrivilege = Pool.Get<BuildingPrivilege>();
		CopyTo(buildingPrivilege);
		return buildingPrivilege;
	}

	public static BuildingPrivilege Deserialize(Stream stream)
	{
		BuildingPrivilege buildingPrivilege = Pool.Get<BuildingPrivilege>();
		Deserialize(stream, buildingPrivilege, isDelta: false);
		return buildingPrivilege;
	}

	public static BuildingPrivilege DeserializeLengthDelimited(Stream stream)
	{
		BuildingPrivilege buildingPrivilege = Pool.Get<BuildingPrivilege>();
		DeserializeLengthDelimited(stream, buildingPrivilege, isDelta: false);
		return buildingPrivilege;
	}

	public static BuildingPrivilege DeserializeLength(Stream stream, int length)
	{
		BuildingPrivilege buildingPrivilege = Pool.Get<BuildingPrivilege>();
		DeserializeLength(stream, length, buildingPrivilege, isDelta: false);
		return buildingPrivilege;
	}

	public static BuildingPrivilege Deserialize(byte[] buffer)
	{
		BuildingPrivilege buildingPrivilege = Pool.Get<BuildingPrivilege>();
		using MemoryStream stream = new MemoryStream(buffer);
		Deserialize(stream, buildingPrivilege, isDelta: false);
		return buildingPrivilege;
	}

	public void FromProto(Stream stream, bool isDelta = false)
	{
		Deserialize(stream, this, isDelta);
	}

	public virtual void WriteToStream(Stream stream)
	{
		Serialize(stream, this);
	}

	public virtual void WriteToStreamDelta(Stream stream, BuildingPrivilege previous)
	{
		if (previous == null)
		{
			Serialize(stream, this);
		}
		else
		{
			SerializeDelta(stream, this, previous);
		}
	}

	public virtual void ReadFromStream(Stream stream, int size, bool isDelta = false)
	{
		DeserializeLength(stream, size, this, isDelta);
	}

	public static BuildingPrivilege Deserialize(byte[] buffer, BuildingPrivilege instance, bool isDelta = false)
	{
		using MemoryStream stream = new MemoryStream(buffer);
		Deserialize(stream, instance, isDelta);
		return instance;
	}

	public static BuildingPrivilege Deserialize(Stream stream, BuildingPrivilege instance, bool isDelta)
	{
		if (!isDelta && instance.users == null)
		{
			instance.users = Pool.Get<List<PlayerNameID>>();
		}
		while (true)
		{
			int num = stream.ReadByte();
			switch (num)
			{
			case 10:
				instance.users.Add(PlayerNameID.DeserializeLengthDelimited(stream));
				continue;
			case 21:
				instance.upkeepPeriodMinutes = ProtocolParser.ReadSingle(stream);
				continue;
			case 29:
				instance.costFraction = ProtocolParser.ReadSingle(stream);
				continue;
			case 37:
				instance.protectedMinutes = ProtocolParser.ReadSingle(stream);
				continue;
			case 40:
				instance.clientAuthed = ProtocolParser.ReadBool(stream);
				continue;
			case 48:
				instance.clientAnyAuthed = ProtocolParser.ReadBool(stream);
				continue;
			case -1:
				return instance;
			}
			Key key = ProtocolParser.ReadKey((byte)num, stream);
			if (key.Field == 0)
			{
				throw new ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
			}
			ProtocolParser.SkipKey(stream, key);
		}
	}

	public static BuildingPrivilege DeserializeLengthDelimited(Stream stream, BuildingPrivilege instance, bool isDelta)
	{
		if (!isDelta && instance.users == null)
		{
			instance.users = Pool.Get<List<PlayerNameID>>();
		}
		long num = ProtocolParser.ReadUInt32(stream);
		num += stream.Position;
		while (stream.Position < num)
		{
			int num2 = stream.ReadByte();
			switch (num2)
			{
			case -1:
				throw new EndOfStreamException();
			case 10:
				instance.users.Add(PlayerNameID.DeserializeLengthDelimited(stream));
				continue;
			case 21:
				instance.upkeepPeriodMinutes = ProtocolParser.ReadSingle(stream);
				continue;
			case 29:
				instance.costFraction = ProtocolParser.ReadSingle(stream);
				continue;
			case 37:
				instance.protectedMinutes = ProtocolParser.ReadSingle(stream);
				continue;
			case 40:
				instance.clientAuthed = ProtocolParser.ReadBool(stream);
				continue;
			case 48:
				instance.clientAnyAuthed = ProtocolParser.ReadBool(stream);
				continue;
			}
			Key key = ProtocolParser.ReadKey((byte)num2, stream);
			if (key.Field == 0)
			{
				throw new ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
			}
			ProtocolParser.SkipKey(stream, key);
		}
		if (stream.Position != num)
		{
			throw new ProtocolBufferException("Read past max limit");
		}
		return instance;
	}

	public static BuildingPrivilege DeserializeLength(Stream stream, int length, BuildingPrivilege instance, bool isDelta)
	{
		if (!isDelta && instance.users == null)
		{
			instance.users = Pool.Get<List<PlayerNameID>>();
		}
		long num = stream.Position + length;
		while (stream.Position < num)
		{
			int num2 = stream.ReadByte();
			switch (num2)
			{
			case -1:
				throw new EndOfStreamException();
			case 10:
				instance.users.Add(PlayerNameID.DeserializeLengthDelimited(stream));
				continue;
			case 21:
				instance.upkeepPeriodMinutes = ProtocolParser.ReadSingle(stream);
				continue;
			case 29:
				instance.costFraction = ProtocolParser.ReadSingle(stream);
				continue;
			case 37:
				instance.protectedMinutes = ProtocolParser.ReadSingle(stream);
				continue;
			case 40:
				instance.clientAuthed = ProtocolParser.ReadBool(stream);
				continue;
			case 48:
				instance.clientAnyAuthed = ProtocolParser.ReadBool(stream);
				continue;
			}
			Key key = ProtocolParser.ReadKey((byte)num2, stream);
			if (key.Field == 0)
			{
				throw new ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
			}
			ProtocolParser.SkipKey(stream, key);
		}
		if (stream.Position != num)
		{
			throw new ProtocolBufferException("Read past max limit");
		}
		return instance;
	}

	public static void SerializeDelta(Stream stream, BuildingPrivilege instance, BuildingPrivilege previous)
	{
		MemoryStream obj = Pool.Get<MemoryStream>();
		if (instance.users != null)
		{
			for (int i = 0; i < instance.users.Count; i++)
			{
				PlayerNameID playerNameID = instance.users[i];
				stream.WriteByte(10);
				obj.SetLength(0L);
				PlayerNameID.SerializeDelta(obj, playerNameID, playerNameID);
				uint num = (uint)obj.Length;
				ProtocolParser.WriteUInt32(stream, num);
				stream.Write(obj.GetBuffer(), 0, (int)num);
			}
		}
		if (instance.upkeepPeriodMinutes != previous.upkeepPeriodMinutes)
		{
			stream.WriteByte(21);
			ProtocolParser.WriteSingle(stream, instance.upkeepPeriodMinutes);
		}
		if (instance.costFraction != previous.costFraction)
		{
			stream.WriteByte(29);
			ProtocolParser.WriteSingle(stream, instance.costFraction);
		}
		if (instance.protectedMinutes != previous.protectedMinutes)
		{
			stream.WriteByte(37);
			ProtocolParser.WriteSingle(stream, instance.protectedMinutes);
		}
		stream.WriteByte(40);
		ProtocolParser.WriteBool(stream, instance.clientAuthed);
		stream.WriteByte(48);
		ProtocolParser.WriteBool(stream, instance.clientAnyAuthed);
		Pool.FreeUnmanaged(ref obj);
	}

	public static void Serialize(Stream stream, BuildingPrivilege instance)
	{
		MemoryStream obj = Pool.Get<MemoryStream>();
		if (instance.users != null)
		{
			for (int i = 0; i < instance.users.Count; i++)
			{
				PlayerNameID instance2 = instance.users[i];
				stream.WriteByte(10);
				obj.SetLength(0L);
				PlayerNameID.Serialize(obj, instance2);
				uint num = (uint)obj.Length;
				ProtocolParser.WriteUInt32(stream, num);
				stream.Write(obj.GetBuffer(), 0, (int)num);
			}
		}
		if (instance.upkeepPeriodMinutes != 0f)
		{
			stream.WriteByte(21);
			ProtocolParser.WriteSingle(stream, instance.upkeepPeriodMinutes);
		}
		if (instance.costFraction != 0f)
		{
			stream.WriteByte(29);
			ProtocolParser.WriteSingle(stream, instance.costFraction);
		}
		if (instance.protectedMinutes != 0f)
		{
			stream.WriteByte(37);
			ProtocolParser.WriteSingle(stream, instance.protectedMinutes);
		}
		if (instance.clientAuthed)
		{
			stream.WriteByte(40);
			ProtocolParser.WriteBool(stream, instance.clientAuthed);
		}
		if (instance.clientAnyAuthed)
		{
			stream.WriteByte(48);
			ProtocolParser.WriteBool(stream, instance.clientAnyAuthed);
		}
		Pool.FreeUnmanaged(ref obj);
	}

	public byte[] ToProtoBytes()
	{
		return SerializeToBytes(this);
	}

	public void ToProto(Stream stream)
	{
		Serialize(stream, this);
	}

	public static byte[] SerializeToBytes(BuildingPrivilege instance)
	{
		using MemoryStream memoryStream = new MemoryStream();
		Serialize(memoryStream, instance);
		return memoryStream.ToArray();
	}

	public static void SerializeLengthDelimited(Stream stream, BuildingPrivilege instance)
	{
		byte[] array = SerializeToBytes(instance);
		ProtocolParser.WriteUInt32(stream, (uint)array.Length);
		stream.Write(array, 0, array.Length);
	}

	public void InspectUids(UidInspector<ulong> action)
	{
		if (users != null)
		{
			for (int i = 0; i < users.Count; i++)
			{
				users[i]?.InspectUids(action);
			}
		}
	}
}
