using System;
using System.Collections.Generic;
using System.IO;
using Facepunch;
using ProtoBuf;
using SilentOrbit.ProtocolBuffers;

public class CardGame : IDisposable, Pool.IPooled, IProto
{
	public class CardPlayer : IDisposable, Pool.IPooled, IProto
	{
		[NonSerialized]
		public ulong userid;

		[NonSerialized]
		public List<int> cards;

		[NonSerialized]
		public int scrap;

		[NonSerialized]
		public int state;

		[NonSerialized]
		public int availableInputs;

		[NonSerialized]
		public int betThisRound;

		[NonSerialized]
		public int betThisTurn;

		[NonSerialized]
		public bool leftRoundEarly;

		[NonSerialized]
		public bool sendCardDetails;

		public bool ShouldPool = true;

		private bool _disposed;

		public static void ResetToPool(CardPlayer instance)
		{
			if (instance.ShouldPool)
			{
				instance.userid = 0uL;
				if (instance.cards != null)
				{
					List<int> obj = instance.cards;
					Pool.FreeUnmanaged(ref obj);
					instance.cards = obj;
				}
				instance.scrap = 0;
				instance.state = 0;
				instance.availableInputs = 0;
				instance.betThisRound = 0;
				instance.betThisTurn = 0;
				instance.leftRoundEarly = false;
				instance.sendCardDetails = false;
				Pool.Free(ref instance);
			}
		}

		public void ResetToPool()
		{
			ResetToPool(this);
		}

		public virtual void Dispose()
		{
			if (!ShouldPool)
			{
				throw new Exception("Trying to dispose CardPlayer with ShouldPool set to false!");
			}
			if (!_disposed)
			{
				ResetToPool();
				_disposed = true;
			}
		}

		public virtual void EnterPool()
		{
			_disposed = true;
		}

		public virtual void LeavePool()
		{
			_disposed = false;
		}

		public void CopyTo(CardPlayer instance)
		{
			instance.userid = userid;
			if (cards != null)
			{
				instance.cards = Pool.Get<List<int>>();
				for (int i = 0; i < cards.Count; i++)
				{
					int item = cards[i];
					instance.cards.Add(item);
				}
			}
			else
			{
				instance.cards = null;
			}
			instance.scrap = scrap;
			instance.state = state;
			instance.availableInputs = availableInputs;
			instance.betThisRound = betThisRound;
			instance.betThisTurn = betThisTurn;
			instance.leftRoundEarly = leftRoundEarly;
			instance.sendCardDetails = sendCardDetails;
		}

		public CardPlayer Copy()
		{
			CardPlayer cardPlayer = Pool.Get<CardPlayer>();
			CopyTo(cardPlayer);
			return cardPlayer;
		}

		public static CardPlayer Deserialize(Stream stream)
		{
			CardPlayer cardPlayer = Pool.Get<CardPlayer>();
			Deserialize(stream, cardPlayer, isDelta: false);
			return cardPlayer;
		}

		public static CardPlayer DeserializeLengthDelimited(Stream stream)
		{
			CardPlayer cardPlayer = Pool.Get<CardPlayer>();
			DeserializeLengthDelimited(stream, cardPlayer, isDelta: false);
			return cardPlayer;
		}

		public static CardPlayer DeserializeLength(Stream stream, int length)
		{
			CardPlayer cardPlayer = Pool.Get<CardPlayer>();
			DeserializeLength(stream, length, cardPlayer, isDelta: false);
			return cardPlayer;
		}

		public static CardPlayer Deserialize(byte[] buffer)
		{
			CardPlayer cardPlayer = Pool.Get<CardPlayer>();
			using MemoryStream stream = new MemoryStream(buffer);
			Deserialize(stream, cardPlayer, isDelta: false);
			return cardPlayer;
		}

		public void FromProto(Stream stream, bool isDelta = false)
		{
			Deserialize(stream, this, isDelta);
		}

		public virtual void WriteToStream(Stream stream)
		{
			Serialize(stream, this);
		}

		public virtual void WriteToStreamDelta(Stream stream, CardPlayer previous)
		{
			if (previous == null)
			{
				Serialize(stream, this);
			}
			else
			{
				SerializeDelta(stream, this, previous);
			}
		}

		public virtual void ReadFromStream(Stream stream, int size, bool isDelta = false)
		{
			DeserializeLength(stream, size, this, isDelta);
		}

		public static CardPlayer Deserialize(byte[] buffer, CardPlayer instance, bool isDelta = false)
		{
			using MemoryStream stream = new MemoryStream(buffer);
			Deserialize(stream, instance, isDelta);
			return instance;
		}

		public static CardPlayer Deserialize(Stream stream, CardPlayer instance, bool isDelta)
		{
			if (!isDelta && instance.cards == null)
			{
				instance.cards = Pool.Get<List<int>>();
			}
			while (true)
			{
				int num = stream.ReadByte();
				switch (num)
				{
				case 8:
					instance.userid = ProtocolParser.ReadUInt64(stream);
					continue;
				case 16:
					instance.cards.Add((int)ProtocolParser.ReadUInt64(stream));
					continue;
				case 24:
					instance.scrap = (int)ProtocolParser.ReadUInt64(stream);
					continue;
				case 32:
					instance.state = (int)ProtocolParser.ReadUInt64(stream);
					continue;
				case 40:
					instance.availableInputs = (int)ProtocolParser.ReadUInt64(stream);
					continue;
				case 48:
					instance.betThisRound = (int)ProtocolParser.ReadUInt64(stream);
					continue;
				case 56:
					instance.betThisTurn = (int)ProtocolParser.ReadUInt64(stream);
					continue;
				case 64:
					instance.leftRoundEarly = ProtocolParser.ReadBool(stream);
					continue;
				case 72:
					instance.sendCardDetails = ProtocolParser.ReadBool(stream);
					continue;
				case -1:
					return instance;
				}
				Key key = ProtocolParser.ReadKey((byte)num, stream);
				if (key.Field == 0)
				{
					throw new ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
				}
				ProtocolParser.SkipKey(stream, key);
			}
		}

		public static CardPlayer DeserializeLengthDelimited(Stream stream, CardPlayer instance, bool isDelta)
		{
			if (!isDelta && instance.cards == null)
			{
				instance.cards = Pool.Get<List<int>>();
			}
			long num = ProtocolParser.ReadUInt32(stream);
			num += stream.Position;
			while (stream.Position < num)
			{
				int num2 = stream.ReadByte();
				switch (num2)
				{
				case -1:
					throw new EndOfStreamException();
				case 8:
					instance.userid = ProtocolParser.ReadUInt64(stream);
					continue;
				case 16:
					instance.cards.Add((int)ProtocolParser.ReadUInt64(stream));
					continue;
				case 24:
					instance.scrap = (int)ProtocolParser.ReadUInt64(stream);
					continue;
				case 32:
					instance.state = (int)ProtocolParser.ReadUInt64(stream);
					continue;
				case 40:
					instance.availableInputs = (int)ProtocolParser.ReadUInt64(stream);
					continue;
				case 48:
					instance.betThisRound = (int)ProtocolParser.ReadUInt64(stream);
					continue;
				case 56:
					instance.betThisTurn = (int)ProtocolParser.ReadUInt64(stream);
					continue;
				case 64:
					instance.leftRoundEarly = ProtocolParser.ReadBool(stream);
					continue;
				case 72:
					instance.sendCardDetails = ProtocolParser.ReadBool(stream);
					continue;
				}
				Key key = ProtocolParser.ReadKey((byte)num2, stream);
				if (key.Field == 0)
				{
					throw new ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
				}
				ProtocolParser.SkipKey(stream, key);
			}
			if (stream.Position != num)
			{
				throw new ProtocolBufferException("Read past max limit");
			}
			return instance;
		}

		public static CardPlayer DeserializeLength(Stream stream, int length, CardPlayer instance, bool isDelta)
		{
			if (!isDelta && instance.cards == null)
			{
				instance.cards = Pool.Get<List<int>>();
			}
			long num = stream.Position + length;
			while (stream.Position < num)
			{
				int num2 = stream.ReadByte();
				switch (num2)
				{
				case -1:
					throw new EndOfStreamException();
				case 8:
					instance.userid = ProtocolParser.ReadUInt64(stream);
					continue;
				case 16:
					instance.cards.Add((int)ProtocolParser.ReadUInt64(stream));
					continue;
				case 24:
					instance.scrap = (int)ProtocolParser.ReadUInt64(stream);
					continue;
				case 32:
					instance.state = (int)ProtocolParser.ReadUInt64(stream);
					continue;
				case 40:
					instance.availableInputs = (int)ProtocolParser.ReadUInt64(stream);
					continue;
				case 48:
					instance.betThisRound = (int)ProtocolParser.ReadUInt64(stream);
					continue;
				case 56:
					instance.betThisTurn = (int)ProtocolParser.ReadUInt64(stream);
					continue;
				case 64:
					instance.leftRoundEarly = ProtocolParser.ReadBool(stream);
					continue;
				case 72:
					instance.sendCardDetails = ProtocolParser.ReadBool(stream);
					continue;
				}
				Key key = ProtocolParser.ReadKey((byte)num2, stream);
				if (key.Field == 0)
				{
					throw new ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
				}
				ProtocolParser.SkipKey(stream, key);
			}
			if (stream.Position != num)
			{
				throw new ProtocolBufferException("Read past max limit");
			}
			return instance;
		}

		public static void SerializeDelta(Stream stream, CardPlayer instance, CardPlayer previous)
		{
			MemoryStream obj = Pool.Get<MemoryStream>();
			if (instance.userid != previous.userid)
			{
				stream.WriteByte(8);
				ProtocolParser.WriteUInt64(stream, instance.userid);
			}
			if (instance.cards != null)
			{
				for (int i = 0; i < instance.cards.Count; i++)
				{
					int num = instance.cards[i];
					stream.WriteByte(16);
					ProtocolParser.WriteUInt64(stream, (ulong)num);
				}
			}
			if (instance.scrap != previous.scrap)
			{
				stream.WriteByte(24);
				ProtocolParser.WriteUInt64(stream, (ulong)instance.scrap);
			}
			if (instance.state != previous.state)
			{
				stream.WriteByte(32);
				ProtocolParser.WriteUInt64(stream, (ulong)instance.state);
			}
			if (instance.availableInputs != previous.availableInputs)
			{
				stream.WriteByte(40);
				ProtocolParser.WriteUInt64(stream, (ulong)instance.availableInputs);
			}
			if (instance.betThisRound != previous.betThisRound)
			{
				stream.WriteByte(48);
				ProtocolParser.WriteUInt64(stream, (ulong)instance.betThisRound);
			}
			if (instance.betThisTurn != previous.betThisTurn)
			{
				stream.WriteByte(56);
				ProtocolParser.WriteUInt64(stream, (ulong)instance.betThisTurn);
			}
			stream.WriteByte(64);
			ProtocolParser.WriteBool(stream, instance.leftRoundEarly);
			stream.WriteByte(72);
			ProtocolParser.WriteBool(stream, instance.sendCardDetails);
			Pool.FreeUnmanaged(ref obj);
		}

		public static void Serialize(Stream stream, CardPlayer instance)
		{
			MemoryStream obj = Pool.Get<MemoryStream>();
			if (instance.userid != 0L)
			{
				stream.WriteByte(8);
				ProtocolParser.WriteUInt64(stream, instance.userid);
			}
			if (instance.cards != null)
			{
				for (int i = 0; i < instance.cards.Count; i++)
				{
					int num = instance.cards[i];
					stream.WriteByte(16);
					ProtocolParser.WriteUInt64(stream, (ulong)num);
				}
			}
			if (instance.scrap != 0)
			{
				stream.WriteByte(24);
				ProtocolParser.WriteUInt64(stream, (ulong)instance.scrap);
			}
			if (instance.state != 0)
			{
				stream.WriteByte(32);
				ProtocolParser.WriteUInt64(stream, (ulong)instance.state);
			}
			if (instance.availableInputs != 0)
			{
				stream.WriteByte(40);
				ProtocolParser.WriteUInt64(stream, (ulong)instance.availableInputs);
			}
			if (instance.betThisRound != 0)
			{
				stream.WriteByte(48);
				ProtocolParser.WriteUInt64(stream, (ulong)instance.betThisRound);
			}
			if (instance.betThisTurn != 0)
			{
				stream.WriteByte(56);
				ProtocolParser.WriteUInt64(stream, (ulong)instance.betThisTurn);
			}
			if (instance.leftRoundEarly)
			{
				stream.WriteByte(64);
				ProtocolParser.WriteBool(stream, instance.leftRoundEarly);
			}
			if (instance.sendCardDetails)
			{
				stream.WriteByte(72);
				ProtocolParser.WriteBool(stream, instance.sendCardDetails);
			}
			Pool.FreeUnmanaged(ref obj);
		}

		public byte[] ToProtoBytes()
		{
			return SerializeToBytes(this);
		}

		public void ToProto(Stream stream)
		{
			Serialize(stream, this);
		}

		public static byte[] SerializeToBytes(CardPlayer instance)
		{
			using MemoryStream memoryStream = new MemoryStream();
			Serialize(memoryStream, instance);
			return memoryStream.ToArray();
		}

		public static void SerializeLengthDelimited(Stream stream, CardPlayer instance)
		{
			byte[] array = SerializeToBytes(instance);
			ProtocolParser.WriteUInt32(stream, (uint)array.Length);
			stream.Write(array, 0, array.Length);
		}

		public void InspectUids(UidInspector<ulong> action)
		{
		}
	}

	public class TexasHoldEm : IDisposable, Pool.IPooled, IProto
	{
		[NonSerialized]
		public int dealerIndex;

		[NonSerialized]
		public List<int> communityCards;

		[NonSerialized]
		public int biggestRaiseThisTurn;

		public bool ShouldPool = true;

		private bool _disposed;

		public static void ResetToPool(TexasHoldEm instance)
		{
			if (instance.ShouldPool)
			{
				instance.dealerIndex = 0;
				if (instance.communityCards != null)
				{
					List<int> obj = instance.communityCards;
					Pool.FreeUnmanaged(ref obj);
					instance.communityCards = obj;
				}
				instance.biggestRaiseThisTurn = 0;
				Pool.Free(ref instance);
			}
		}

		public void ResetToPool()
		{
			ResetToPool(this);
		}

		public virtual void Dispose()
		{
			if (!ShouldPool)
			{
				throw new Exception("Trying to dispose TexasHoldEm with ShouldPool set to false!");
			}
			if (!_disposed)
			{
				ResetToPool();
				_disposed = true;
			}
		}

		public virtual void EnterPool()
		{
			_disposed = true;
		}

		public virtual void LeavePool()
		{
			_disposed = false;
		}

		public void CopyTo(TexasHoldEm instance)
		{
			instance.dealerIndex = dealerIndex;
			if (communityCards != null)
			{
				instance.communityCards = Pool.Get<List<int>>();
				for (int i = 0; i < communityCards.Count; i++)
				{
					int item = communityCards[i];
					instance.communityCards.Add(item);
				}
			}
			else
			{
				instance.communityCards = null;
			}
			instance.biggestRaiseThisTurn = biggestRaiseThisTurn;
		}

		public TexasHoldEm Copy()
		{
			TexasHoldEm texasHoldEm = Pool.Get<TexasHoldEm>();
			CopyTo(texasHoldEm);
			return texasHoldEm;
		}

		public static TexasHoldEm Deserialize(Stream stream)
		{
			TexasHoldEm texasHoldEm = Pool.Get<TexasHoldEm>();
			Deserialize(stream, texasHoldEm, isDelta: false);
			return texasHoldEm;
		}

		public static TexasHoldEm DeserializeLengthDelimited(Stream stream)
		{
			TexasHoldEm texasHoldEm = Pool.Get<TexasHoldEm>();
			DeserializeLengthDelimited(stream, texasHoldEm, isDelta: false);
			return texasHoldEm;
		}

		public static TexasHoldEm DeserializeLength(Stream stream, int length)
		{
			TexasHoldEm texasHoldEm = Pool.Get<TexasHoldEm>();
			DeserializeLength(stream, length, texasHoldEm, isDelta: false);
			return texasHoldEm;
		}

		public static TexasHoldEm Deserialize(byte[] buffer)
		{
			TexasHoldEm texasHoldEm = Pool.Get<TexasHoldEm>();
			using MemoryStream stream = new MemoryStream(buffer);
			Deserialize(stream, texasHoldEm, isDelta: false);
			return texasHoldEm;
		}

		public void FromProto(Stream stream, bool isDelta = false)
		{
			Deserialize(stream, this, isDelta);
		}

		public virtual void WriteToStream(Stream stream)
		{
			Serialize(stream, this);
		}

		public virtual void WriteToStreamDelta(Stream stream, TexasHoldEm previous)
		{
			if (previous == null)
			{
				Serialize(stream, this);
			}
			else
			{
				SerializeDelta(stream, this, previous);
			}
		}

		public virtual void ReadFromStream(Stream stream, int size, bool isDelta = false)
		{
			DeserializeLength(stream, size, this, isDelta);
		}

		public static TexasHoldEm Deserialize(byte[] buffer, TexasHoldEm instance, bool isDelta = false)
		{
			using MemoryStream stream = new MemoryStream(buffer);
			Deserialize(stream, instance, isDelta);
			return instance;
		}

		public static TexasHoldEm Deserialize(Stream stream, TexasHoldEm instance, bool isDelta)
		{
			if (!isDelta && instance.communityCards == null)
			{
				instance.communityCards = Pool.Get<List<int>>();
			}
			while (true)
			{
				int num = stream.ReadByte();
				switch (num)
				{
				case 8:
					instance.dealerIndex = (int)ProtocolParser.ReadUInt64(stream);
					continue;
				case 16:
					instance.communityCards.Add((int)ProtocolParser.ReadUInt64(stream));
					continue;
				case 24:
					instance.biggestRaiseThisTurn = (int)ProtocolParser.ReadUInt64(stream);
					continue;
				case -1:
					return instance;
				}
				Key key = ProtocolParser.ReadKey((byte)num, stream);
				if (key.Field == 0)
				{
					throw new ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
				}
				ProtocolParser.SkipKey(stream, key);
			}
		}

		public static TexasHoldEm DeserializeLengthDelimited(Stream stream, TexasHoldEm instance, bool isDelta)
		{
			if (!isDelta && instance.communityCards == null)
			{
				instance.communityCards = Pool.Get<List<int>>();
			}
			long num = ProtocolParser.ReadUInt32(stream);
			num += stream.Position;
			while (stream.Position < num)
			{
				int num2 = stream.ReadByte();
				switch (num2)
				{
				case -1:
					throw new EndOfStreamException();
				case 8:
					instance.dealerIndex = (int)ProtocolParser.ReadUInt64(stream);
					continue;
				case 16:
					instance.communityCards.Add((int)ProtocolParser.ReadUInt64(stream));
					continue;
				case 24:
					instance.biggestRaiseThisTurn = (int)ProtocolParser.ReadUInt64(stream);
					continue;
				}
				Key key = ProtocolParser.ReadKey((byte)num2, stream);
				if (key.Field == 0)
				{
					throw new ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
				}
				ProtocolParser.SkipKey(stream, key);
			}
			if (stream.Position != num)
			{
				throw new ProtocolBufferException("Read past max limit");
			}
			return instance;
		}

		public static TexasHoldEm DeserializeLength(Stream stream, int length, TexasHoldEm instance, bool isDelta)
		{
			if (!isDelta && instance.communityCards == null)
			{
				instance.communityCards = Pool.Get<List<int>>();
			}
			long num = stream.Position + length;
			while (stream.Position < num)
			{
				int num2 = stream.ReadByte();
				switch (num2)
				{
				case -1:
					throw new EndOfStreamException();
				case 8:
					instance.dealerIndex = (int)ProtocolParser.ReadUInt64(stream);
					continue;
				case 16:
					instance.communityCards.Add((int)ProtocolParser.ReadUInt64(stream));
					continue;
				case 24:
					instance.biggestRaiseThisTurn = (int)ProtocolParser.ReadUInt64(stream);
					continue;
				}
				Key key = ProtocolParser.ReadKey((byte)num2, stream);
				if (key.Field == 0)
				{
					throw new ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
				}
				ProtocolParser.SkipKey(stream, key);
			}
			if (stream.Position != num)
			{
				throw new ProtocolBufferException("Read past max limit");
			}
			return instance;
		}

		public static void SerializeDelta(Stream stream, TexasHoldEm instance, TexasHoldEm previous)
		{
			MemoryStream obj = Pool.Get<MemoryStream>();
			if (instance.dealerIndex != previous.dealerIndex)
			{
				stream.WriteByte(8);
				ProtocolParser.WriteUInt64(stream, (ulong)instance.dealerIndex);
			}
			if (instance.communityCards != null)
			{
				for (int i = 0; i < instance.communityCards.Count; i++)
				{
					int num = instance.communityCards[i];
					stream.WriteByte(16);
					ProtocolParser.WriteUInt64(stream, (ulong)num);
				}
			}
			if (instance.biggestRaiseThisTurn != previous.biggestRaiseThisTurn)
			{
				stream.WriteByte(24);
				ProtocolParser.WriteUInt64(stream, (ulong)instance.biggestRaiseThisTurn);
			}
			Pool.FreeUnmanaged(ref obj);
		}

		public static void Serialize(Stream stream, TexasHoldEm instance)
		{
			MemoryStream obj = Pool.Get<MemoryStream>();
			if (instance.dealerIndex != 0)
			{
				stream.WriteByte(8);
				ProtocolParser.WriteUInt64(stream, (ulong)instance.dealerIndex);
			}
			if (instance.communityCards != null)
			{
				for (int i = 0; i < instance.communityCards.Count; i++)
				{
					int num = instance.communityCards[i];
					stream.WriteByte(16);
					ProtocolParser.WriteUInt64(stream, (ulong)num);
				}
			}
			if (instance.biggestRaiseThisTurn != 0)
			{
				stream.WriteByte(24);
				ProtocolParser.WriteUInt64(stream, (ulong)instance.biggestRaiseThisTurn);
			}
			Pool.FreeUnmanaged(ref obj);
		}

		public byte[] ToProtoBytes()
		{
			return SerializeToBytes(this);
		}

		public void ToProto(Stream stream)
		{
			Serialize(stream, this);
		}

		public static byte[] SerializeToBytes(TexasHoldEm instance)
		{
			using MemoryStream memoryStream = new MemoryStream();
			Serialize(memoryStream, instance);
			return memoryStream.ToArray();
		}

		public static void SerializeLengthDelimited(Stream stream, TexasHoldEm instance)
		{
			byte[] array = SerializeToBytes(instance);
			ProtocolParser.WriteUInt32(stream, (uint)array.Length);
			stream.Write(array, 0, array.Length);
		}

		public void InspectUids(UidInspector<ulong> action)
		{
		}
	}

	public class RoundResults : IDisposable, Pool.IPooled, IProto
	{
		public class Result : IDisposable, Pool.IPooled, IProto
		{
			[NonSerialized]
			public ulong ID;

			[NonSerialized]
			public int winnings;

			[NonSerialized]
			public int resultCode;

			public bool ShouldPool = true;

			private bool _disposed;

			public static void ResetToPool(Result instance)
			{
				if (instance.ShouldPool)
				{
					instance.ID = 0uL;
					instance.winnings = 0;
					instance.resultCode = 0;
					Pool.Free(ref instance);
				}
			}

			public void ResetToPool()
			{
				ResetToPool(this);
			}

			public virtual void Dispose()
			{
				if (!ShouldPool)
				{
					throw new Exception("Trying to dispose Result with ShouldPool set to false!");
				}
				if (!_disposed)
				{
					ResetToPool();
					_disposed = true;
				}
			}

			public virtual void EnterPool()
			{
				_disposed = true;
			}

			public virtual void LeavePool()
			{
				_disposed = false;
			}

			public void CopyTo(Result instance)
			{
				instance.ID = ID;
				instance.winnings = winnings;
				instance.resultCode = resultCode;
			}

			public Result Copy()
			{
				Result result = Pool.Get<Result>();
				CopyTo(result);
				return result;
			}

			public static Result Deserialize(Stream stream)
			{
				Result result = Pool.Get<Result>();
				Deserialize(stream, result, isDelta: false);
				return result;
			}

			public static Result DeserializeLengthDelimited(Stream stream)
			{
				Result result = Pool.Get<Result>();
				DeserializeLengthDelimited(stream, result, isDelta: false);
				return result;
			}

			public static Result DeserializeLength(Stream stream, int length)
			{
				Result result = Pool.Get<Result>();
				DeserializeLength(stream, length, result, isDelta: false);
				return result;
			}

			public static Result Deserialize(byte[] buffer)
			{
				Result result = Pool.Get<Result>();
				using MemoryStream stream = new MemoryStream(buffer);
				Deserialize(stream, result, isDelta: false);
				return result;
			}

			public void FromProto(Stream stream, bool isDelta = false)
			{
				Deserialize(stream, this, isDelta);
			}

			public virtual void WriteToStream(Stream stream)
			{
				Serialize(stream, this);
			}

			public virtual void WriteToStreamDelta(Stream stream, Result previous)
			{
				if (previous == null)
				{
					Serialize(stream, this);
				}
				else
				{
					SerializeDelta(stream, this, previous);
				}
			}

			public virtual void ReadFromStream(Stream stream, int size, bool isDelta = false)
			{
				DeserializeLength(stream, size, this, isDelta);
			}

			public static Result Deserialize(byte[] buffer, Result instance, bool isDelta = false)
			{
				using MemoryStream stream = new MemoryStream(buffer);
				Deserialize(stream, instance, isDelta);
				return instance;
			}

			public static Result Deserialize(Stream stream, Result instance, bool isDelta)
			{
				while (true)
				{
					int num = stream.ReadByte();
					switch (num)
					{
					case 8:
						instance.ID = ProtocolParser.ReadUInt64(stream);
						continue;
					case 16:
						instance.winnings = (int)ProtocolParser.ReadUInt64(stream);
						continue;
					case 24:
						instance.resultCode = (int)ProtocolParser.ReadUInt64(stream);
						continue;
					case -1:
						return instance;
					}
					Key key = ProtocolParser.ReadKey((byte)num, stream);
					if (key.Field == 0)
					{
						throw new ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
					}
					ProtocolParser.SkipKey(stream, key);
				}
			}

			public static Result DeserializeLengthDelimited(Stream stream, Result instance, bool isDelta)
			{
				long num = ProtocolParser.ReadUInt32(stream);
				num += stream.Position;
				while (stream.Position < num)
				{
					int num2 = stream.ReadByte();
					switch (num2)
					{
					case -1:
						throw new EndOfStreamException();
					case 8:
						instance.ID = ProtocolParser.ReadUInt64(stream);
						continue;
					case 16:
						instance.winnings = (int)ProtocolParser.ReadUInt64(stream);
						continue;
					case 24:
						instance.resultCode = (int)ProtocolParser.ReadUInt64(stream);
						continue;
					}
					Key key = ProtocolParser.ReadKey((byte)num2, stream);
					if (key.Field == 0)
					{
						throw new ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
					}
					ProtocolParser.SkipKey(stream, key);
				}
				if (stream.Position != num)
				{
					throw new ProtocolBufferException("Read past max limit");
				}
				return instance;
			}

			public static Result DeserializeLength(Stream stream, int length, Result instance, bool isDelta)
			{
				long num = stream.Position + length;
				while (stream.Position < num)
				{
					int num2 = stream.ReadByte();
					switch (num2)
					{
					case -1:
						throw new EndOfStreamException();
					case 8:
						instance.ID = ProtocolParser.ReadUInt64(stream);
						continue;
					case 16:
						instance.winnings = (int)ProtocolParser.ReadUInt64(stream);
						continue;
					case 24:
						instance.resultCode = (int)ProtocolParser.ReadUInt64(stream);
						continue;
					}
					Key key = ProtocolParser.ReadKey((byte)num2, stream);
					if (key.Field == 0)
					{
						throw new ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
					}
					ProtocolParser.SkipKey(stream, key);
				}
				if (stream.Position != num)
				{
					throw new ProtocolBufferException("Read past max limit");
				}
				return instance;
			}

			public static void SerializeDelta(Stream stream, Result instance, Result previous)
			{
				MemoryStream obj = Pool.Get<MemoryStream>();
				if (instance.ID != previous.ID)
				{
					stream.WriteByte(8);
					ProtocolParser.WriteUInt64(stream, instance.ID);
				}
				if (instance.winnings != previous.winnings)
				{
					stream.WriteByte(16);
					ProtocolParser.WriteUInt64(stream, (ulong)instance.winnings);
				}
				if (instance.resultCode != previous.resultCode)
				{
					stream.WriteByte(24);
					ProtocolParser.WriteUInt64(stream, (ulong)instance.resultCode);
				}
				Pool.FreeUnmanaged(ref obj);
			}

			public static void Serialize(Stream stream, Result instance)
			{
				MemoryStream obj = Pool.Get<MemoryStream>();
				if (instance.ID != 0L)
				{
					stream.WriteByte(8);
					ProtocolParser.WriteUInt64(stream, instance.ID);
				}
				if (instance.winnings != 0)
				{
					stream.WriteByte(16);
					ProtocolParser.WriteUInt64(stream, (ulong)instance.winnings);
				}
				if (instance.resultCode != 0)
				{
					stream.WriteByte(24);
					ProtocolParser.WriteUInt64(stream, (ulong)instance.resultCode);
				}
				Pool.FreeUnmanaged(ref obj);
			}

			public byte[] ToProtoBytes()
			{
				return SerializeToBytes(this);
			}

			public void ToProto(Stream stream)
			{
				Serialize(stream, this);
			}

			public static byte[] SerializeToBytes(Result instance)
			{
				using MemoryStream memoryStream = new MemoryStream();
				Serialize(memoryStream, instance);
				return memoryStream.ToArray();
			}

			public static void SerializeLengthDelimited(Stream stream, Result instance)
			{
				byte[] array = SerializeToBytes(instance);
				ProtocolParser.WriteUInt32(stream, (uint)array.Length);
				stream.Write(array, 0, array.Length);
			}

			public void InspectUids(UidInspector<ulong> action)
			{
			}
		}

		[NonSerialized]
		public List<Result> results;

		[NonSerialized]
		public int winningScore;

		public bool ShouldPool = true;

		private bool _disposed;

		public static void ResetToPool(RoundResults instance)
		{
			if (!instance.ShouldPool)
			{
				return;
			}
			if (instance.results != null)
			{
				for (int i = 0; i < instance.results.Count; i++)
				{
					if (instance.results[i] != null)
					{
						instance.results[i].ResetToPool();
						instance.results[i] = null;
					}
				}
				List<Result> obj = instance.results;
				Pool.Free(ref obj, freeElements: false);
				instance.results = obj;
			}
			instance.winningScore = 0;
			Pool.Free(ref instance);
		}

		public void ResetToPool()
		{
			ResetToPool(this);
		}

		public virtual void Dispose()
		{
			if (!ShouldPool)
			{
				throw new Exception("Trying to dispose RoundResults with ShouldPool set to false!");
			}
			if (!_disposed)
			{
				ResetToPool();
				_disposed = true;
			}
		}

		public virtual void EnterPool()
		{
			_disposed = true;
		}

		public virtual void LeavePool()
		{
			_disposed = false;
		}

		public void CopyTo(RoundResults instance)
		{
			if (results != null)
			{
				instance.results = Pool.Get<List<Result>>();
				for (int i = 0; i < results.Count; i++)
				{
					Result item = results[i].Copy();
					instance.results.Add(item);
				}
			}
			else
			{
				instance.results = null;
			}
			instance.winningScore = winningScore;
		}

		public RoundResults Copy()
		{
			RoundResults roundResults = Pool.Get<RoundResults>();
			CopyTo(roundResults);
			return roundResults;
		}

		public static RoundResults Deserialize(Stream stream)
		{
			RoundResults roundResults = Pool.Get<RoundResults>();
			Deserialize(stream, roundResults, isDelta: false);
			return roundResults;
		}

		public static RoundResults DeserializeLengthDelimited(Stream stream)
		{
			RoundResults roundResults = Pool.Get<RoundResults>();
			DeserializeLengthDelimited(stream, roundResults, isDelta: false);
			return roundResults;
		}

		public static RoundResults DeserializeLength(Stream stream, int length)
		{
			RoundResults roundResults = Pool.Get<RoundResults>();
			DeserializeLength(stream, length, roundResults, isDelta: false);
			return roundResults;
		}

		public static RoundResults Deserialize(byte[] buffer)
		{
			RoundResults roundResults = Pool.Get<RoundResults>();
			using MemoryStream stream = new MemoryStream(buffer);
			Deserialize(stream, roundResults, isDelta: false);
			return roundResults;
		}

		public void FromProto(Stream stream, bool isDelta = false)
		{
			Deserialize(stream, this, isDelta);
		}

		public virtual void WriteToStream(Stream stream)
		{
			Serialize(stream, this);
		}

		public virtual void WriteToStreamDelta(Stream stream, RoundResults previous)
		{
			if (previous == null)
			{
				Serialize(stream, this);
			}
			else
			{
				SerializeDelta(stream, this, previous);
			}
		}

		public virtual void ReadFromStream(Stream stream, int size, bool isDelta = false)
		{
			DeserializeLength(stream, size, this, isDelta);
		}

		public static RoundResults Deserialize(byte[] buffer, RoundResults instance, bool isDelta = false)
		{
			using MemoryStream stream = new MemoryStream(buffer);
			Deserialize(stream, instance, isDelta);
			return instance;
		}

		public static RoundResults Deserialize(Stream stream, RoundResults instance, bool isDelta)
		{
			if (!isDelta && instance.results == null)
			{
				instance.results = Pool.Get<List<Result>>();
			}
			while (true)
			{
				int num = stream.ReadByte();
				switch (num)
				{
				case 10:
					instance.results.Add(Result.DeserializeLengthDelimited(stream));
					continue;
				case 16:
					instance.winningScore = (int)ProtocolParser.ReadUInt64(stream);
					continue;
				case -1:
					return instance;
				}
				Key key = ProtocolParser.ReadKey((byte)num, stream);
				if (key.Field == 0)
				{
					throw new ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
				}
				ProtocolParser.SkipKey(stream, key);
			}
		}

		public static RoundResults DeserializeLengthDelimited(Stream stream, RoundResults instance, bool isDelta)
		{
			if (!isDelta && instance.results == null)
			{
				instance.results = Pool.Get<List<Result>>();
			}
			long num = ProtocolParser.ReadUInt32(stream);
			num += stream.Position;
			while (stream.Position < num)
			{
				int num2 = stream.ReadByte();
				switch (num2)
				{
				case -1:
					throw new EndOfStreamException();
				case 10:
					instance.results.Add(Result.DeserializeLengthDelimited(stream));
					continue;
				case 16:
					instance.winningScore = (int)ProtocolParser.ReadUInt64(stream);
					continue;
				}
				Key key = ProtocolParser.ReadKey((byte)num2, stream);
				if (key.Field == 0)
				{
					throw new ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
				}
				ProtocolParser.SkipKey(stream, key);
			}
			if (stream.Position != num)
			{
				throw new ProtocolBufferException("Read past max limit");
			}
			return instance;
		}

		public static RoundResults DeserializeLength(Stream stream, int length, RoundResults instance, bool isDelta)
		{
			if (!isDelta && instance.results == null)
			{
				instance.results = Pool.Get<List<Result>>();
			}
			long num = stream.Position + length;
			while (stream.Position < num)
			{
				int num2 = stream.ReadByte();
				switch (num2)
				{
				case -1:
					throw new EndOfStreamException();
				case 10:
					instance.results.Add(Result.DeserializeLengthDelimited(stream));
					continue;
				case 16:
					instance.winningScore = (int)ProtocolParser.ReadUInt64(stream);
					continue;
				}
				Key key = ProtocolParser.ReadKey((byte)num2, stream);
				if (key.Field == 0)
				{
					throw new ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
				}
				ProtocolParser.SkipKey(stream, key);
			}
			if (stream.Position != num)
			{
				throw new ProtocolBufferException("Read past max limit");
			}
			return instance;
		}

		public static void SerializeDelta(Stream stream, RoundResults instance, RoundResults previous)
		{
			MemoryStream obj = Pool.Get<MemoryStream>();
			if (instance.results != null)
			{
				for (int i = 0; i < instance.results.Count; i++)
				{
					Result result = instance.results[i];
					stream.WriteByte(10);
					obj.SetLength(0L);
					Result.SerializeDelta(obj, result, result);
					uint num = (uint)obj.Length;
					ProtocolParser.WriteUInt32(stream, num);
					stream.Write(obj.GetBuffer(), 0, (int)num);
				}
			}
			if (instance.winningScore != previous.winningScore)
			{
				stream.WriteByte(16);
				ProtocolParser.WriteUInt64(stream, (ulong)instance.winningScore);
			}
			Pool.FreeUnmanaged(ref obj);
		}

		public static void Serialize(Stream stream, RoundResults instance)
		{
			MemoryStream obj = Pool.Get<MemoryStream>();
			if (instance.results != null)
			{
				for (int i = 0; i < instance.results.Count; i++)
				{
					Result instance2 = instance.results[i];
					stream.WriteByte(10);
					obj.SetLength(0L);
					Result.Serialize(obj, instance2);
					uint num = (uint)obj.Length;
					ProtocolParser.WriteUInt32(stream, num);
					stream.Write(obj.GetBuffer(), 0, (int)num);
				}
			}
			if (instance.winningScore != 0)
			{
				stream.WriteByte(16);
				ProtocolParser.WriteUInt64(stream, (ulong)instance.winningScore);
			}
			Pool.FreeUnmanaged(ref obj);
		}

		public byte[] ToProtoBytes()
		{
			return SerializeToBytes(this);
		}

		public void ToProto(Stream stream)
		{
			Serialize(stream, this);
		}

		public static byte[] SerializeToBytes(RoundResults instance)
		{
			using MemoryStream memoryStream = new MemoryStream();
			Serialize(memoryStream, instance);
			return memoryStream.ToArray();
		}

		public static void SerializeLengthDelimited(Stream stream, RoundResults instance)
		{
			byte[] array = SerializeToBytes(instance);
			ProtocolParser.WriteUInt32(stream, (uint)array.Length);
			stream.Write(array, 0, array.Length);
		}

		public void InspectUids(UidInspector<ulong> action)
		{
			if (results != null)
			{
				for (int i = 0; i < results.Count; i++)
				{
					results[i]?.InspectUids(action);
				}
			}
		}
	}

	public class Blackjack : IDisposable, Pool.IPooled, IProto
	{
		[NonSerialized]
		public List<int> dealerCards;

		[NonSerialized]
		public List<BlackjackCardPlayer> players;

		public bool ShouldPool = true;

		private bool _disposed;

		public static void ResetToPool(Blackjack instance)
		{
			if (!instance.ShouldPool)
			{
				return;
			}
			if (instance.dealerCards != null)
			{
				List<int> obj = instance.dealerCards;
				Pool.FreeUnmanaged(ref obj);
				instance.dealerCards = obj;
			}
			if (instance.players != null)
			{
				for (int i = 0; i < instance.players.Count; i++)
				{
					if (instance.players[i] != null)
					{
						instance.players[i].ResetToPool();
						instance.players[i] = null;
					}
				}
				List<BlackjackCardPlayer> obj2 = instance.players;
				Pool.Free(ref obj2, freeElements: false);
				instance.players = obj2;
			}
			Pool.Free(ref instance);
		}

		public void ResetToPool()
		{
			ResetToPool(this);
		}

		public virtual void Dispose()
		{
			if (!ShouldPool)
			{
				throw new Exception("Trying to dispose Blackjack with ShouldPool set to false!");
			}
			if (!_disposed)
			{
				ResetToPool();
				_disposed = true;
			}
		}

		public virtual void EnterPool()
		{
			_disposed = true;
		}

		public virtual void LeavePool()
		{
			_disposed = false;
		}

		public void CopyTo(Blackjack instance)
		{
			if (dealerCards != null)
			{
				instance.dealerCards = Pool.Get<List<int>>();
				for (int i = 0; i < dealerCards.Count; i++)
				{
					int item = dealerCards[i];
					instance.dealerCards.Add(item);
				}
			}
			else
			{
				instance.dealerCards = null;
			}
			if (players != null)
			{
				instance.players = Pool.Get<List<BlackjackCardPlayer>>();
				for (int j = 0; j < players.Count; j++)
				{
					BlackjackCardPlayer item2 = players[j].Copy();
					instance.players.Add(item2);
				}
			}
			else
			{
				instance.players = null;
			}
		}

		public Blackjack Copy()
		{
			Blackjack blackjack = Pool.Get<Blackjack>();
			CopyTo(blackjack);
			return blackjack;
		}

		public static Blackjack Deserialize(Stream stream)
		{
			Blackjack blackjack = Pool.Get<Blackjack>();
			Deserialize(stream, blackjack, isDelta: false);
			return blackjack;
		}

		public static Blackjack DeserializeLengthDelimited(Stream stream)
		{
			Blackjack blackjack = Pool.Get<Blackjack>();
			DeserializeLengthDelimited(stream, blackjack, isDelta: false);
			return blackjack;
		}

		public static Blackjack DeserializeLength(Stream stream, int length)
		{
			Blackjack blackjack = Pool.Get<Blackjack>();
			DeserializeLength(stream, length, blackjack, isDelta: false);
			return blackjack;
		}

		public static Blackjack Deserialize(byte[] buffer)
		{
			Blackjack blackjack = Pool.Get<Blackjack>();
			using MemoryStream stream = new MemoryStream(buffer);
			Deserialize(stream, blackjack, isDelta: false);
			return blackjack;
		}

		public void FromProto(Stream stream, bool isDelta = false)
		{
			Deserialize(stream, this, isDelta);
		}

		public virtual void WriteToStream(Stream stream)
		{
			Serialize(stream, this);
		}

		public virtual void WriteToStreamDelta(Stream stream, Blackjack previous)
		{
			if (previous == null)
			{
				Serialize(stream, this);
			}
			else
			{
				SerializeDelta(stream, this, previous);
			}
		}

		public virtual void ReadFromStream(Stream stream, int size, bool isDelta = false)
		{
			DeserializeLength(stream, size, this, isDelta);
		}

		public static Blackjack Deserialize(byte[] buffer, Blackjack instance, bool isDelta = false)
		{
			using MemoryStream stream = new MemoryStream(buffer);
			Deserialize(stream, instance, isDelta);
			return instance;
		}

		public static Blackjack Deserialize(Stream stream, Blackjack instance, bool isDelta)
		{
			if (!isDelta)
			{
				if (instance.dealerCards == null)
				{
					instance.dealerCards = Pool.Get<List<int>>();
				}
				if (instance.players == null)
				{
					instance.players = Pool.Get<List<BlackjackCardPlayer>>();
				}
			}
			while (true)
			{
				int num = stream.ReadByte();
				switch (num)
				{
				case 8:
					instance.dealerCards.Add((int)ProtocolParser.ReadUInt64(stream));
					continue;
				case 18:
					instance.players.Add(BlackjackCardPlayer.DeserializeLengthDelimited(stream));
					continue;
				case -1:
					return instance;
				}
				Key key = ProtocolParser.ReadKey((byte)num, stream);
				if (key.Field == 0)
				{
					throw new ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
				}
				ProtocolParser.SkipKey(stream, key);
			}
		}

		public static Blackjack DeserializeLengthDelimited(Stream stream, Blackjack instance, bool isDelta)
		{
			if (!isDelta)
			{
				if (instance.dealerCards == null)
				{
					instance.dealerCards = Pool.Get<List<int>>();
				}
				if (instance.players == null)
				{
					instance.players = Pool.Get<List<BlackjackCardPlayer>>();
				}
			}
			long num = ProtocolParser.ReadUInt32(stream);
			num += stream.Position;
			while (stream.Position < num)
			{
				int num2 = stream.ReadByte();
				switch (num2)
				{
				case -1:
					throw new EndOfStreamException();
				case 8:
					instance.dealerCards.Add((int)ProtocolParser.ReadUInt64(stream));
					continue;
				case 18:
					instance.players.Add(BlackjackCardPlayer.DeserializeLengthDelimited(stream));
					continue;
				}
				Key key = ProtocolParser.ReadKey((byte)num2, stream);
				if (key.Field == 0)
				{
					throw new ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
				}
				ProtocolParser.SkipKey(stream, key);
			}
			if (stream.Position != num)
			{
				throw new ProtocolBufferException("Read past max limit");
			}
			return instance;
		}

		public static Blackjack DeserializeLength(Stream stream, int length, Blackjack instance, bool isDelta)
		{
			if (!isDelta)
			{
				if (instance.dealerCards == null)
				{
					instance.dealerCards = Pool.Get<List<int>>();
				}
				if (instance.players == null)
				{
					instance.players = Pool.Get<List<BlackjackCardPlayer>>();
				}
			}
			long num = stream.Position + length;
			while (stream.Position < num)
			{
				int num2 = stream.ReadByte();
				switch (num2)
				{
				case -1:
					throw new EndOfStreamException();
				case 8:
					instance.dealerCards.Add((int)ProtocolParser.ReadUInt64(stream));
					continue;
				case 18:
					instance.players.Add(BlackjackCardPlayer.DeserializeLengthDelimited(stream));
					continue;
				}
				Key key = ProtocolParser.ReadKey((byte)num2, stream);
				if (key.Field == 0)
				{
					throw new ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
				}
				ProtocolParser.SkipKey(stream, key);
			}
			if (stream.Position != num)
			{
				throw new ProtocolBufferException("Read past max limit");
			}
			return instance;
		}

		public static void SerializeDelta(Stream stream, Blackjack instance, Blackjack previous)
		{
			MemoryStream obj = Pool.Get<MemoryStream>();
			if (instance.dealerCards != null)
			{
				for (int i = 0; i < instance.dealerCards.Count; i++)
				{
					int num = instance.dealerCards[i];
					stream.WriteByte(8);
					ProtocolParser.WriteUInt64(stream, (ulong)num);
				}
			}
			if (instance.players != null)
			{
				for (int j = 0; j < instance.players.Count; j++)
				{
					BlackjackCardPlayer blackjackCardPlayer = instance.players[j];
					stream.WriteByte(18);
					obj.SetLength(0L);
					BlackjackCardPlayer.SerializeDelta(obj, blackjackCardPlayer, blackjackCardPlayer);
					uint num2 = (uint)obj.Length;
					ProtocolParser.WriteUInt32(stream, num2);
					stream.Write(obj.GetBuffer(), 0, (int)num2);
				}
			}
			Pool.FreeUnmanaged(ref obj);
		}

		public static void Serialize(Stream stream, Blackjack instance)
		{
			MemoryStream obj = Pool.Get<MemoryStream>();
			if (instance.dealerCards != null)
			{
				for (int i = 0; i < instance.dealerCards.Count; i++)
				{
					int num = instance.dealerCards[i];
					stream.WriteByte(8);
					ProtocolParser.WriteUInt64(stream, (ulong)num);
				}
			}
			if (instance.players != null)
			{
				for (int j = 0; j < instance.players.Count; j++)
				{
					BlackjackCardPlayer instance2 = instance.players[j];
					stream.WriteByte(18);
					obj.SetLength(0L);
					BlackjackCardPlayer.Serialize(obj, instance2);
					uint num2 = (uint)obj.Length;
					ProtocolParser.WriteUInt32(stream, num2);
					stream.Write(obj.GetBuffer(), 0, (int)num2);
				}
			}
			Pool.FreeUnmanaged(ref obj);
		}

		public byte[] ToProtoBytes()
		{
			return SerializeToBytes(this);
		}

		public void ToProto(Stream stream)
		{
			Serialize(stream, this);
		}

		public static byte[] SerializeToBytes(Blackjack instance)
		{
			using MemoryStream memoryStream = new MemoryStream();
			Serialize(memoryStream, instance);
			return memoryStream.ToArray();
		}

		public static void SerializeLengthDelimited(Stream stream, Blackjack instance)
		{
			byte[] array = SerializeToBytes(instance);
			ProtocolParser.WriteUInt32(stream, (uint)array.Length);
			stream.Write(array, 0, array.Length);
		}

		public void InspectUids(UidInspector<ulong> action)
		{
			if (players != null)
			{
				for (int i = 0; i < players.Count; i++)
				{
					players[i]?.InspectUids(action);
				}
			}
		}
	}

	public class BlackjackCardPlayer : IDisposable, Pool.IPooled, IProto
	{
		[NonSerialized]
		public List<int> splitCards;

		[NonSerialized]
		public int splitBetThisRound;

		[NonSerialized]
		public int insuranceBetThisRound;

		[NonSerialized]
		public bool playingSplitCards;

		public bool ShouldPool = true;

		private bool _disposed;

		public static void ResetToPool(BlackjackCardPlayer instance)
		{
			if (instance.ShouldPool)
			{
				if (instance.splitCards != null)
				{
					List<int> obj = instance.splitCards;
					Pool.FreeUnmanaged(ref obj);
					instance.splitCards = obj;
				}
				instance.splitBetThisRound = 0;
				instance.insuranceBetThisRound = 0;
				instance.playingSplitCards = false;
				Pool.Free(ref instance);
			}
		}

		public void ResetToPool()
		{
			ResetToPool(this);
		}

		public virtual void Dispose()
		{
			if (!ShouldPool)
			{
				throw new Exception("Trying to dispose BlackjackCardPlayer with ShouldPool set to false!");
			}
			if (!_disposed)
			{
				ResetToPool();
				_disposed = true;
			}
		}

		public virtual void EnterPool()
		{
			_disposed = true;
		}

		public virtual void LeavePool()
		{
			_disposed = false;
		}

		public void CopyTo(BlackjackCardPlayer instance)
		{
			if (splitCards != null)
			{
				instance.splitCards = Pool.Get<List<int>>();
				for (int i = 0; i < splitCards.Count; i++)
				{
					int item = splitCards[i];
					instance.splitCards.Add(item);
				}
			}
			else
			{
				instance.splitCards = null;
			}
			instance.splitBetThisRound = splitBetThisRound;
			instance.insuranceBetThisRound = insuranceBetThisRound;
			instance.playingSplitCards = playingSplitCards;
		}

		public BlackjackCardPlayer Copy()
		{
			BlackjackCardPlayer blackjackCardPlayer = Pool.Get<BlackjackCardPlayer>();
			CopyTo(blackjackCardPlayer);
			return blackjackCardPlayer;
		}

		public static BlackjackCardPlayer Deserialize(Stream stream)
		{
			BlackjackCardPlayer blackjackCardPlayer = Pool.Get<BlackjackCardPlayer>();
			Deserialize(stream, blackjackCardPlayer, isDelta: false);
			return blackjackCardPlayer;
		}

		public static BlackjackCardPlayer DeserializeLengthDelimited(Stream stream)
		{
			BlackjackCardPlayer blackjackCardPlayer = Pool.Get<BlackjackCardPlayer>();
			DeserializeLengthDelimited(stream, blackjackCardPlayer, isDelta: false);
			return blackjackCardPlayer;
		}

		public static BlackjackCardPlayer DeserializeLength(Stream stream, int length)
		{
			BlackjackCardPlayer blackjackCardPlayer = Pool.Get<BlackjackCardPlayer>();
			DeserializeLength(stream, length, blackjackCardPlayer, isDelta: false);
			return blackjackCardPlayer;
		}

		public static BlackjackCardPlayer Deserialize(byte[] buffer)
		{
			BlackjackCardPlayer blackjackCardPlayer = Pool.Get<BlackjackCardPlayer>();
			using MemoryStream stream = new MemoryStream(buffer);
			Deserialize(stream, blackjackCardPlayer, isDelta: false);
			return blackjackCardPlayer;
		}

		public void FromProto(Stream stream, bool isDelta = false)
		{
			Deserialize(stream, this, isDelta);
		}

		public virtual void WriteToStream(Stream stream)
		{
			Serialize(stream, this);
		}

		public virtual void WriteToStreamDelta(Stream stream, BlackjackCardPlayer previous)
		{
			if (previous == null)
			{
				Serialize(stream, this);
			}
			else
			{
				SerializeDelta(stream, this, previous);
			}
		}

		public virtual void ReadFromStream(Stream stream, int size, bool isDelta = false)
		{
			DeserializeLength(stream, size, this, isDelta);
		}

		public static BlackjackCardPlayer Deserialize(byte[] buffer, BlackjackCardPlayer instance, bool isDelta = false)
		{
			using MemoryStream stream = new MemoryStream(buffer);
			Deserialize(stream, instance, isDelta);
			return instance;
		}

		public static BlackjackCardPlayer Deserialize(Stream stream, BlackjackCardPlayer instance, bool isDelta)
		{
			if (!isDelta && instance.splitCards == null)
			{
				instance.splitCards = Pool.Get<List<int>>();
			}
			while (true)
			{
				int num = stream.ReadByte();
				switch (num)
				{
				case 8:
					instance.splitCards.Add((int)ProtocolParser.ReadUInt64(stream));
					continue;
				case 16:
					instance.splitBetThisRound = (int)ProtocolParser.ReadUInt64(stream);
					continue;
				case 24:
					instance.insuranceBetThisRound = (int)ProtocolParser.ReadUInt64(stream);
					continue;
				case 32:
					instance.playingSplitCards = ProtocolParser.ReadBool(stream);
					continue;
				case -1:
					return instance;
				}
				Key key = ProtocolParser.ReadKey((byte)num, stream);
				if (key.Field == 0)
				{
					throw new ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
				}
				ProtocolParser.SkipKey(stream, key);
			}
		}

		public static BlackjackCardPlayer DeserializeLengthDelimited(Stream stream, BlackjackCardPlayer instance, bool isDelta)
		{
			if (!isDelta && instance.splitCards == null)
			{
				instance.splitCards = Pool.Get<List<int>>();
			}
			long num = ProtocolParser.ReadUInt32(stream);
			num += stream.Position;
			while (stream.Position < num)
			{
				int num2 = stream.ReadByte();
				switch (num2)
				{
				case -1:
					throw new EndOfStreamException();
				case 8:
					instance.splitCards.Add((int)ProtocolParser.ReadUInt64(stream));
					continue;
				case 16:
					instance.splitBetThisRound = (int)ProtocolParser.ReadUInt64(stream);
					continue;
				case 24:
					instance.insuranceBetThisRound = (int)ProtocolParser.ReadUInt64(stream);
					continue;
				case 32:
					instance.playingSplitCards = ProtocolParser.ReadBool(stream);
					continue;
				}
				Key key = ProtocolParser.ReadKey((byte)num2, stream);
				if (key.Field == 0)
				{
					throw new ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
				}
				ProtocolParser.SkipKey(stream, key);
			}
			if (stream.Position != num)
			{
				throw new ProtocolBufferException("Read past max limit");
			}
			return instance;
		}

		public static BlackjackCardPlayer DeserializeLength(Stream stream, int length, BlackjackCardPlayer instance, bool isDelta)
		{
			if (!isDelta && instance.splitCards == null)
			{
				instance.splitCards = Pool.Get<List<int>>();
			}
			long num = stream.Position + length;
			while (stream.Position < num)
			{
				int num2 = stream.ReadByte();
				switch (num2)
				{
				case -1:
					throw new EndOfStreamException();
				case 8:
					instance.splitCards.Add((int)ProtocolParser.ReadUInt64(stream));
					continue;
				case 16:
					instance.splitBetThisRound = (int)ProtocolParser.ReadUInt64(stream);
					continue;
				case 24:
					instance.insuranceBetThisRound = (int)ProtocolParser.ReadUInt64(stream);
					continue;
				case 32:
					instance.playingSplitCards = ProtocolParser.ReadBool(stream);
					continue;
				}
				Key key = ProtocolParser.ReadKey((byte)num2, stream);
				if (key.Field == 0)
				{
					throw new ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
				}
				ProtocolParser.SkipKey(stream, key);
			}
			if (stream.Position != num)
			{
				throw new ProtocolBufferException("Read past max limit");
			}
			return instance;
		}

		public static void SerializeDelta(Stream stream, BlackjackCardPlayer instance, BlackjackCardPlayer previous)
		{
			MemoryStream obj = Pool.Get<MemoryStream>();
			if (instance.splitCards != null)
			{
				for (int i = 0; i < instance.splitCards.Count; i++)
				{
					int num = instance.splitCards[i];
					stream.WriteByte(8);
					ProtocolParser.WriteUInt64(stream, (ulong)num);
				}
			}
			if (instance.splitBetThisRound != previous.splitBetThisRound)
			{
				stream.WriteByte(16);
				ProtocolParser.WriteUInt64(stream, (ulong)instance.splitBetThisRound);
			}
			if (instance.insuranceBetThisRound != previous.insuranceBetThisRound)
			{
				stream.WriteByte(24);
				ProtocolParser.WriteUInt64(stream, (ulong)instance.insuranceBetThisRound);
			}
			stream.WriteByte(32);
			ProtocolParser.WriteBool(stream, instance.playingSplitCards);
			Pool.FreeUnmanaged(ref obj);
		}

		public static void Serialize(Stream stream, BlackjackCardPlayer instance)
		{
			MemoryStream obj = Pool.Get<MemoryStream>();
			if (instance.splitCards != null)
			{
				for (int i = 0; i < instance.splitCards.Count; i++)
				{
					int num = instance.splitCards[i];
					stream.WriteByte(8);
					ProtocolParser.WriteUInt64(stream, (ulong)num);
				}
			}
			if (instance.splitBetThisRound != 0)
			{
				stream.WriteByte(16);
				ProtocolParser.WriteUInt64(stream, (ulong)instance.splitBetThisRound);
			}
			if (instance.insuranceBetThisRound != 0)
			{
				stream.WriteByte(24);
				ProtocolParser.WriteUInt64(stream, (ulong)instance.insuranceBetThisRound);
			}
			if (instance.playingSplitCards)
			{
				stream.WriteByte(32);
				ProtocolParser.WriteBool(stream, instance.playingSplitCards);
			}
			Pool.FreeUnmanaged(ref obj);
		}

		public byte[] ToProtoBytes()
		{
			return SerializeToBytes(this);
		}

		public void ToProto(Stream stream)
		{
			Serialize(stream, this);
		}

		public static byte[] SerializeToBytes(BlackjackCardPlayer instance)
		{
			using MemoryStream memoryStream = new MemoryStream();
			Serialize(memoryStream, instance);
			return memoryStream.ToArray();
		}

		public static void SerializeLengthDelimited(Stream stream, BlackjackCardPlayer instance)
		{
			byte[] array = SerializeToBytes(instance);
			ProtocolParser.WriteUInt32(stream, (uint)array.Length);
			stream.Write(array, 0, array.Length);
		}

		public void InspectUids(UidInspector<ulong> action)
		{
		}
	}

	public class CardList : IDisposable, Pool.IPooled, IProto
	{
		[NonSerialized]
		public List<int> cards;

		public bool ShouldPool = true;

		private bool _disposed;

		public static void ResetToPool(CardList instance)
		{
			if (instance.ShouldPool)
			{
				if (instance.cards != null)
				{
					List<int> obj = instance.cards;
					Pool.FreeUnmanaged(ref obj);
					instance.cards = obj;
				}
				Pool.Free(ref instance);
			}
		}

		public void ResetToPool()
		{
			ResetToPool(this);
		}

		public virtual void Dispose()
		{
			if (!ShouldPool)
			{
				throw new Exception("Trying to dispose CardList with ShouldPool set to false!");
			}
			if (!_disposed)
			{
				ResetToPool();
				_disposed = true;
			}
		}

		public virtual void EnterPool()
		{
			_disposed = true;
		}

		public virtual void LeavePool()
		{
			_disposed = false;
		}

		public void CopyTo(CardList instance)
		{
			if (cards != null)
			{
				instance.cards = Pool.Get<List<int>>();
				for (int i = 0; i < cards.Count; i++)
				{
					int item = cards[i];
					instance.cards.Add(item);
				}
			}
			else
			{
				instance.cards = null;
			}
		}

		public CardList Copy()
		{
			CardList cardList = Pool.Get<CardList>();
			CopyTo(cardList);
			return cardList;
		}

		public static CardList Deserialize(Stream stream)
		{
			CardList cardList = Pool.Get<CardList>();
			Deserialize(stream, cardList, isDelta: false);
			return cardList;
		}

		public static CardList DeserializeLengthDelimited(Stream stream)
		{
			CardList cardList = Pool.Get<CardList>();
			DeserializeLengthDelimited(stream, cardList, isDelta: false);
			return cardList;
		}

		public static CardList DeserializeLength(Stream stream, int length)
		{
			CardList cardList = Pool.Get<CardList>();
			DeserializeLength(stream, length, cardList, isDelta: false);
			return cardList;
		}

		public static CardList Deserialize(byte[] buffer)
		{
			CardList cardList = Pool.Get<CardList>();
			using MemoryStream stream = new MemoryStream(buffer);
			Deserialize(stream, cardList, isDelta: false);
			return cardList;
		}

		public void FromProto(Stream stream, bool isDelta = false)
		{
			Deserialize(stream, this, isDelta);
		}

		public virtual void WriteToStream(Stream stream)
		{
			Serialize(stream, this);
		}

		public virtual void WriteToStreamDelta(Stream stream, CardList previous)
		{
			if (previous == null)
			{
				Serialize(stream, this);
			}
			else
			{
				SerializeDelta(stream, this, previous);
			}
		}

		public virtual void ReadFromStream(Stream stream, int size, bool isDelta = false)
		{
			DeserializeLength(stream, size, this, isDelta);
		}

		public static CardList Deserialize(byte[] buffer, CardList instance, bool isDelta = false)
		{
			using MemoryStream stream = new MemoryStream(buffer);
			Deserialize(stream, instance, isDelta);
			return instance;
		}

		public static CardList Deserialize(Stream stream, CardList instance, bool isDelta)
		{
			if (!isDelta && instance.cards == null)
			{
				instance.cards = Pool.Get<List<int>>();
			}
			while (true)
			{
				int num = stream.ReadByte();
				switch (num)
				{
				case 8:
					instance.cards.Add((int)ProtocolParser.ReadUInt64(stream));
					continue;
				case -1:
					return instance;
				}
				Key key = ProtocolParser.ReadKey((byte)num, stream);
				if (key.Field == 0)
				{
					throw new ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
				}
				ProtocolParser.SkipKey(stream, key);
			}
		}

		public static CardList DeserializeLengthDelimited(Stream stream, CardList instance, bool isDelta)
		{
			if (!isDelta && instance.cards == null)
			{
				instance.cards = Pool.Get<List<int>>();
			}
			long num = ProtocolParser.ReadUInt32(stream);
			num += stream.Position;
			while (stream.Position < num)
			{
				int num2 = stream.ReadByte();
				switch (num2)
				{
				case -1:
					throw new EndOfStreamException();
				case 8:
					instance.cards.Add((int)ProtocolParser.ReadUInt64(stream));
					continue;
				}
				Key key = ProtocolParser.ReadKey((byte)num2, stream);
				if (key.Field == 0)
				{
					throw new ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
				}
				ProtocolParser.SkipKey(stream, key);
			}
			if (stream.Position != num)
			{
				throw new ProtocolBufferException("Read past max limit");
			}
			return instance;
		}

		public static CardList DeserializeLength(Stream stream, int length, CardList instance, bool isDelta)
		{
			if (!isDelta && instance.cards == null)
			{
				instance.cards = Pool.Get<List<int>>();
			}
			long num = stream.Position + length;
			while (stream.Position < num)
			{
				int num2 = stream.ReadByte();
				switch (num2)
				{
				case -1:
					throw new EndOfStreamException();
				case 8:
					instance.cards.Add((int)ProtocolParser.ReadUInt64(stream));
					continue;
				}
				Key key = ProtocolParser.ReadKey((byte)num2, stream);
				if (key.Field == 0)
				{
					throw new ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
				}
				ProtocolParser.SkipKey(stream, key);
			}
			if (stream.Position != num)
			{
				throw new ProtocolBufferException("Read past max limit");
			}
			return instance;
		}

		public static void SerializeDelta(Stream stream, CardList instance, CardList previous)
		{
			MemoryStream obj = Pool.Get<MemoryStream>();
			if (instance.cards != null)
			{
				for (int i = 0; i < instance.cards.Count; i++)
				{
					int num = instance.cards[i];
					stream.WriteByte(8);
					ProtocolParser.WriteUInt64(stream, (ulong)num);
				}
			}
			Pool.FreeUnmanaged(ref obj);
		}

		public static void Serialize(Stream stream, CardList instance)
		{
			MemoryStream obj = Pool.Get<MemoryStream>();
			if (instance.cards != null)
			{
				for (int i = 0; i < instance.cards.Count; i++)
				{
					int num = instance.cards[i];
					stream.WriteByte(8);
					ProtocolParser.WriteUInt64(stream, (ulong)num);
				}
			}
			Pool.FreeUnmanaged(ref obj);
		}

		public byte[] ToProtoBytes()
		{
			return SerializeToBytes(this);
		}

		public void ToProto(Stream stream)
		{
			Serialize(stream, this);
		}

		public static byte[] SerializeToBytes(CardList instance)
		{
			using MemoryStream memoryStream = new MemoryStream();
			Serialize(memoryStream, instance);
			return memoryStream.ToArray();
		}

		public static void SerializeLengthDelimited(Stream stream, CardList instance)
		{
			byte[] array = SerializeToBytes(instance);
			ProtocolParser.WriteUInt32(stream, (uint)array.Length);
			stream.Write(array, 0, array.Length);
		}

		public void InspectUids(UidInspector<ulong> action)
		{
		}
	}

	[NonSerialized]
	public List<CardPlayer> players;

	[NonSerialized]
	public int state;

	[NonSerialized]
	public int activePlayerIndex;

	[NonSerialized]
	public int pot;

	[NonSerialized]
	public int lastActionId;

	[NonSerialized]
	public ulong lastActionTarget;

	[NonSerialized]
	public int lastActionValue;

	[NonSerialized]
	public NetworkableId potRef;

	[NonSerialized]
	public TexasHoldEm texasHoldEm;

	[NonSerialized]
	public Blackjack blackjack;

	public bool ShouldPool = true;

	private bool _disposed;

	public static void ResetToPool(CardGame instance)
	{
		if (!instance.ShouldPool)
		{
			return;
		}
		if (instance.players != null)
		{
			for (int i = 0; i < instance.players.Count; i++)
			{
				if (instance.players[i] != null)
				{
					instance.players[i].ResetToPool();
					instance.players[i] = null;
				}
			}
			List<CardPlayer> obj = instance.players;
			Pool.Free(ref obj, freeElements: false);
			instance.players = obj;
		}
		instance.state = 0;
		instance.activePlayerIndex = 0;
		instance.pot = 0;
		instance.lastActionId = 0;
		instance.lastActionTarget = 0uL;
		instance.lastActionValue = 0;
		instance.potRef = default(NetworkableId);
		if (instance.texasHoldEm != null)
		{
			instance.texasHoldEm.ResetToPool();
			instance.texasHoldEm = null;
		}
		if (instance.blackjack != null)
		{
			instance.blackjack.ResetToPool();
			instance.blackjack = null;
		}
		Pool.Free(ref instance);
	}

	public void ResetToPool()
	{
		ResetToPool(this);
	}

	public virtual void Dispose()
	{
		if (!ShouldPool)
		{
			throw new Exception("Trying to dispose CardGame with ShouldPool set to false!");
		}
		if (!_disposed)
		{
			ResetToPool();
			_disposed = true;
		}
	}

	public virtual void EnterPool()
	{
		_disposed = true;
	}

	public virtual void LeavePool()
	{
		_disposed = false;
	}

	public void CopyTo(CardGame instance)
	{
		if (players != null)
		{
			instance.players = Pool.Get<List<CardPlayer>>();
			for (int i = 0; i < players.Count; i++)
			{
				CardPlayer item = players[i].Copy();
				instance.players.Add(item);
			}
		}
		else
		{
			instance.players = null;
		}
		instance.state = state;
		instance.activePlayerIndex = activePlayerIndex;
		instance.pot = pot;
		instance.lastActionId = lastActionId;
		instance.lastActionTarget = lastActionTarget;
		instance.lastActionValue = lastActionValue;
		instance.potRef = potRef;
		if (texasHoldEm != null)
		{
			if (instance.texasHoldEm == null)
			{
				instance.texasHoldEm = texasHoldEm.Copy();
			}
			else
			{
				texasHoldEm.CopyTo(instance.texasHoldEm);
			}
		}
		else
		{
			instance.texasHoldEm = null;
		}
		if (blackjack != null)
		{
			if (instance.blackjack == null)
			{
				instance.blackjack = blackjack.Copy();
			}
			else
			{
				blackjack.CopyTo(instance.blackjack);
			}
		}
		else
		{
			instance.blackjack = null;
		}
	}

	public CardGame Copy()
	{
		CardGame cardGame = Pool.Get<CardGame>();
		CopyTo(cardGame);
		return cardGame;
	}

	public static CardGame Deserialize(Stream stream)
	{
		CardGame cardGame = Pool.Get<CardGame>();
		Deserialize(stream, cardGame, isDelta: false);
		return cardGame;
	}

	public static CardGame DeserializeLengthDelimited(Stream stream)
	{
		CardGame cardGame = Pool.Get<CardGame>();
		DeserializeLengthDelimited(stream, cardGame, isDelta: false);
		return cardGame;
	}

	public static CardGame DeserializeLength(Stream stream, int length)
	{
		CardGame cardGame = Pool.Get<CardGame>();
		DeserializeLength(stream, length, cardGame, isDelta: false);
		return cardGame;
	}

	public static CardGame Deserialize(byte[] buffer)
	{
		CardGame cardGame = Pool.Get<CardGame>();
		using MemoryStream stream = new MemoryStream(buffer);
		Deserialize(stream, cardGame, isDelta: false);
		return cardGame;
	}

	public void FromProto(Stream stream, bool isDelta = false)
	{
		Deserialize(stream, this, isDelta);
	}

	public virtual void WriteToStream(Stream stream)
	{
		Serialize(stream, this);
	}

	public virtual void WriteToStreamDelta(Stream stream, CardGame previous)
	{
		if (previous == null)
		{
			Serialize(stream, this);
		}
		else
		{
			SerializeDelta(stream, this, previous);
		}
	}

	public virtual void ReadFromStream(Stream stream, int size, bool isDelta = false)
	{
		DeserializeLength(stream, size, this, isDelta);
	}

	public static CardGame Deserialize(byte[] buffer, CardGame instance, bool isDelta = false)
	{
		using MemoryStream stream = new MemoryStream(buffer);
		Deserialize(stream, instance, isDelta);
		return instance;
	}

	public static CardGame Deserialize(Stream stream, CardGame instance, bool isDelta)
	{
		if (!isDelta && instance.players == null)
		{
			instance.players = Pool.Get<List<CardPlayer>>();
		}
		while (true)
		{
			int num = stream.ReadByte();
			switch (num)
			{
			case 10:
				instance.players.Add(CardPlayer.DeserializeLengthDelimited(stream));
				continue;
			case 16:
				instance.state = (int)ProtocolParser.ReadUInt64(stream);
				continue;
			case 24:
				instance.activePlayerIndex = (int)ProtocolParser.ReadUInt64(stream);
				continue;
			case 32:
				instance.pot = (int)ProtocolParser.ReadUInt64(stream);
				continue;
			case 40:
				instance.lastActionId = (int)ProtocolParser.ReadUInt64(stream);
				continue;
			case 48:
				instance.lastActionTarget = ProtocolParser.ReadUInt64(stream);
				continue;
			case 56:
				instance.lastActionValue = (int)ProtocolParser.ReadUInt64(stream);
				continue;
			case 64:
				instance.potRef = new NetworkableId(ProtocolParser.ReadUInt64(stream));
				continue;
			case 74:
				if (instance.texasHoldEm == null)
				{
					instance.texasHoldEm = TexasHoldEm.DeserializeLengthDelimited(stream);
				}
				else
				{
					TexasHoldEm.DeserializeLengthDelimited(stream, instance.texasHoldEm, isDelta);
				}
				continue;
			case 82:
				if (instance.blackjack == null)
				{
					instance.blackjack = Blackjack.DeserializeLengthDelimited(stream);
				}
				else
				{
					Blackjack.DeserializeLengthDelimited(stream, instance.blackjack, isDelta);
				}
				continue;
			case -1:
				return instance;
			}
			Key key = ProtocolParser.ReadKey((byte)num, stream);
			if (key.Field == 0)
			{
				throw new ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
			}
			ProtocolParser.SkipKey(stream, key);
		}
	}

	public static CardGame DeserializeLengthDelimited(Stream stream, CardGame instance, bool isDelta)
	{
		if (!isDelta && instance.players == null)
		{
			instance.players = Pool.Get<List<CardPlayer>>();
		}
		long num = ProtocolParser.ReadUInt32(stream);
		num += stream.Position;
		while (stream.Position < num)
		{
			int num2 = stream.ReadByte();
			switch (num2)
			{
			case -1:
				throw new EndOfStreamException();
			case 10:
				instance.players.Add(CardPlayer.DeserializeLengthDelimited(stream));
				continue;
			case 16:
				instance.state = (int)ProtocolParser.ReadUInt64(stream);
				continue;
			case 24:
				instance.activePlayerIndex = (int)ProtocolParser.ReadUInt64(stream);
				continue;
			case 32:
				instance.pot = (int)ProtocolParser.ReadUInt64(stream);
				continue;
			case 40:
				instance.lastActionId = (int)ProtocolParser.ReadUInt64(stream);
				continue;
			case 48:
				instance.lastActionTarget = ProtocolParser.ReadUInt64(stream);
				continue;
			case 56:
				instance.lastActionValue = (int)ProtocolParser.ReadUInt64(stream);
				continue;
			case 64:
				instance.potRef = new NetworkableId(ProtocolParser.ReadUInt64(stream));
				continue;
			case 74:
				if (instance.texasHoldEm == null)
				{
					instance.texasHoldEm = TexasHoldEm.DeserializeLengthDelimited(stream);
				}
				else
				{
					TexasHoldEm.DeserializeLengthDelimited(stream, instance.texasHoldEm, isDelta);
				}
				continue;
			case 82:
				if (instance.blackjack == null)
				{
					instance.blackjack = Blackjack.DeserializeLengthDelimited(stream);
				}
				else
				{
					Blackjack.DeserializeLengthDelimited(stream, instance.blackjack, isDelta);
				}
				continue;
			}
			Key key = ProtocolParser.ReadKey((byte)num2, stream);
			if (key.Field == 0)
			{
				throw new ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
			}
			ProtocolParser.SkipKey(stream, key);
		}
		if (stream.Position != num)
		{
			throw new ProtocolBufferException("Read past max limit");
		}
		return instance;
	}

	public static CardGame DeserializeLength(Stream stream, int length, CardGame instance, bool isDelta)
	{
		if (!isDelta && instance.players == null)
		{
			instance.players = Pool.Get<List<CardPlayer>>();
		}
		long num = stream.Position + length;
		while (stream.Position < num)
		{
			int num2 = stream.ReadByte();
			switch (num2)
			{
			case -1:
				throw new EndOfStreamException();
			case 10:
				instance.players.Add(CardPlayer.DeserializeLengthDelimited(stream));
				continue;
			case 16:
				instance.state = (int)ProtocolParser.ReadUInt64(stream);
				continue;
			case 24:
				instance.activePlayerIndex = (int)ProtocolParser.ReadUInt64(stream);
				continue;
			case 32:
				instance.pot = (int)ProtocolParser.ReadUInt64(stream);
				continue;
			case 40:
				instance.lastActionId = (int)ProtocolParser.ReadUInt64(stream);
				continue;
			case 48:
				instance.lastActionTarget = ProtocolParser.ReadUInt64(stream);
				continue;
			case 56:
				instance.lastActionValue = (int)ProtocolParser.ReadUInt64(stream);
				continue;
			case 64:
				instance.potRef = new NetworkableId(ProtocolParser.ReadUInt64(stream));
				continue;
			case 74:
				if (instance.texasHoldEm == null)
				{
					instance.texasHoldEm = TexasHoldEm.DeserializeLengthDelimited(stream);
				}
				else
				{
					TexasHoldEm.DeserializeLengthDelimited(stream, instance.texasHoldEm, isDelta);
				}
				continue;
			case 82:
				if (instance.blackjack == null)
				{
					instance.blackjack = Blackjack.DeserializeLengthDelimited(stream);
				}
				else
				{
					Blackjack.DeserializeLengthDelimited(stream, instance.blackjack, isDelta);
				}
				continue;
			}
			Key key = ProtocolParser.ReadKey((byte)num2, stream);
			if (key.Field == 0)
			{
				throw new ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
			}
			ProtocolParser.SkipKey(stream, key);
		}
		if (stream.Position != num)
		{
			throw new ProtocolBufferException("Read past max limit");
		}
		return instance;
	}

	public static void SerializeDelta(Stream stream, CardGame instance, CardGame previous)
	{
		MemoryStream obj = Pool.Get<MemoryStream>();
		if (instance.players != null)
		{
			for (int i = 0; i < instance.players.Count; i++)
			{
				CardPlayer cardPlayer = instance.players[i];
				stream.WriteByte(10);
				obj.SetLength(0L);
				CardPlayer.SerializeDelta(obj, cardPlayer, cardPlayer);
				uint num = (uint)obj.Length;
				ProtocolParser.WriteUInt32(stream, num);
				stream.Write(obj.GetBuffer(), 0, (int)num);
			}
		}
		if (instance.state != previous.state)
		{
			stream.WriteByte(16);
			ProtocolParser.WriteUInt64(stream, (ulong)instance.state);
		}
		if (instance.activePlayerIndex != previous.activePlayerIndex)
		{
			stream.WriteByte(24);
			ProtocolParser.WriteUInt64(stream, (ulong)instance.activePlayerIndex);
		}
		if (instance.pot != previous.pot)
		{
			stream.WriteByte(32);
			ProtocolParser.WriteUInt64(stream, (ulong)instance.pot);
		}
		if (instance.lastActionId != previous.lastActionId)
		{
			stream.WriteByte(40);
			ProtocolParser.WriteUInt64(stream, (ulong)instance.lastActionId);
		}
		if (instance.lastActionTarget != previous.lastActionTarget)
		{
			stream.WriteByte(48);
			ProtocolParser.WriteUInt64(stream, instance.lastActionTarget);
		}
		if (instance.lastActionValue != previous.lastActionValue)
		{
			stream.WriteByte(56);
			ProtocolParser.WriteUInt64(stream, (ulong)instance.lastActionValue);
		}
		stream.WriteByte(64);
		ProtocolParser.WriteUInt64(stream, instance.potRef.Value);
		if (instance.texasHoldEm != null)
		{
			stream.WriteByte(74);
			obj.SetLength(0L);
			TexasHoldEm.SerializeDelta(obj, instance.texasHoldEm, previous.texasHoldEm);
			uint num2 = (uint)obj.Length;
			ProtocolParser.WriteUInt32(stream, num2);
			stream.Write(obj.GetBuffer(), 0, (int)num2);
		}
		if (instance.blackjack != null)
		{
			stream.WriteByte(82);
			obj.SetLength(0L);
			Blackjack.SerializeDelta(obj, instance.blackjack, previous.blackjack);
			uint num3 = (uint)obj.Length;
			ProtocolParser.WriteUInt32(stream, num3);
			stream.Write(obj.GetBuffer(), 0, (int)num3);
		}
		Pool.FreeUnmanaged(ref obj);
	}

	public static void Serialize(Stream stream, CardGame instance)
	{
		MemoryStream obj = Pool.Get<MemoryStream>();
		if (instance.players != null)
		{
			for (int i = 0; i < instance.players.Count; i++)
			{
				CardPlayer instance2 = instance.players[i];
				stream.WriteByte(10);
				obj.SetLength(0L);
				CardPlayer.Serialize(obj, instance2);
				uint num = (uint)obj.Length;
				ProtocolParser.WriteUInt32(stream, num);
				stream.Write(obj.GetBuffer(), 0, (int)num);
			}
		}
		if (instance.state != 0)
		{
			stream.WriteByte(16);
			ProtocolParser.WriteUInt64(stream, (ulong)instance.state);
		}
		if (instance.activePlayerIndex != 0)
		{
			stream.WriteByte(24);
			ProtocolParser.WriteUInt64(stream, (ulong)instance.activePlayerIndex);
		}
		if (instance.pot != 0)
		{
			stream.WriteByte(32);
			ProtocolParser.WriteUInt64(stream, (ulong)instance.pot);
		}
		if (instance.lastActionId != 0)
		{
			stream.WriteByte(40);
			ProtocolParser.WriteUInt64(stream, (ulong)instance.lastActionId);
		}
		if (instance.lastActionTarget != 0L)
		{
			stream.WriteByte(48);
			ProtocolParser.WriteUInt64(stream, instance.lastActionTarget);
		}
		if (instance.lastActionValue != 0)
		{
			stream.WriteByte(56);
			ProtocolParser.WriteUInt64(stream, (ulong)instance.lastActionValue);
		}
		if (instance.potRef != default(NetworkableId))
		{
			stream.WriteByte(64);
			ProtocolParser.WriteUInt64(stream, instance.potRef.Value);
		}
		if (instance.texasHoldEm != null)
		{
			stream.WriteByte(74);
			obj.SetLength(0L);
			TexasHoldEm.Serialize(obj, instance.texasHoldEm);
			uint num2 = (uint)obj.Length;
			ProtocolParser.WriteUInt32(stream, num2);
			stream.Write(obj.GetBuffer(), 0, (int)num2);
		}
		if (instance.blackjack != null)
		{
			stream.WriteByte(82);
			obj.SetLength(0L);
			Blackjack.Serialize(obj, instance.blackjack);
			uint num3 = (uint)obj.Length;
			ProtocolParser.WriteUInt32(stream, num3);
			stream.Write(obj.GetBuffer(), 0, (int)num3);
		}
		Pool.FreeUnmanaged(ref obj);
	}

	public byte[] ToProtoBytes()
	{
		return SerializeToBytes(this);
	}

	public void ToProto(Stream stream)
	{
		Serialize(stream, this);
	}

	public static byte[] SerializeToBytes(CardGame instance)
	{
		using MemoryStream memoryStream = new MemoryStream();
		Serialize(memoryStream, instance);
		return memoryStream.ToArray();
	}

	public static void SerializeLengthDelimited(Stream stream, CardGame instance)
	{
		byte[] array = SerializeToBytes(instance);
		ProtocolParser.WriteUInt32(stream, (uint)array.Length);
		stream.Write(array, 0, array.Length);
	}

	public void InspectUids(UidInspector<ulong> action)
	{
		if (players != null)
		{
			for (int i = 0; i < players.Count; i++)
			{
				players[i]?.InspectUids(action);
			}
		}
		action(UidType.NetworkableId, ref potRef.Value);
		texasHoldEm?.InspectUids(action);
		blackjack?.InspectUids(action);
	}
}
