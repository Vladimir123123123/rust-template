using System;
using System.Collections.Generic;
using System.IO;
using Facepunch;
using SilentOrbit.ProtocolBuffers;

public class CardPlayer : IDisposable, Pool.IPooled, IProto
{
	[NonSerialized]
	public ulong userid;

	[NonSerialized]
	public List<int> cards;

	[NonSerialized]
	public int scrap;

	[NonSerialized]
	public int state;

	[NonSerialized]
	public int availableInputs;

	[NonSerialized]
	public int betThisRound;

	[NonSerialized]
	public int betThisTurn;

	[NonSerialized]
	public bool leftRoundEarly;

	[NonSerialized]
	public bool sendCardDetails;

	public bool ShouldPool = true;

	private bool _disposed;

	public static void ResetToPool(CardPlayer instance)
	{
		if (instance.ShouldPool)
		{
			instance.userid = 0uL;
			if (instance.cards != null)
			{
				List<int> obj = instance.cards;
				Pool.FreeUnmanaged(ref obj);
				instance.cards = obj;
			}
			instance.scrap = 0;
			instance.state = 0;
			instance.availableInputs = 0;
			instance.betThisRound = 0;
			instance.betThisTurn = 0;
			instance.leftRoundEarly = false;
			instance.sendCardDetails = false;
			Pool.Free(ref instance);
		}
	}

	public void ResetToPool()
	{
		ResetToPool(this);
	}

	public virtual void Dispose()
	{
		if (!ShouldPool)
		{
			throw new Exception("Trying to dispose CardPlayer with ShouldPool set to false!");
		}
		if (!_disposed)
		{
			ResetToPool();
			_disposed = true;
		}
	}

	public virtual void EnterPool()
	{
		_disposed = true;
	}

	public virtual void LeavePool()
	{
		_disposed = false;
	}

	public void CopyTo(CardPlayer instance)
	{
		instance.userid = userid;
		if (cards != null)
		{
			instance.cards = Pool.Get<List<int>>();
			for (int i = 0; i < cards.Count; i++)
			{
				int item = cards[i];
				instance.cards.Add(item);
			}
		}
		else
		{
			instance.cards = null;
		}
		instance.scrap = scrap;
		instance.state = state;
		instance.availableInputs = availableInputs;
		instance.betThisRound = betThisRound;
		instance.betThisTurn = betThisTurn;
		instance.leftRoundEarly = leftRoundEarly;
		instance.sendCardDetails = sendCardDetails;
	}

	public CardPlayer Copy()
	{
		CardPlayer cardPlayer = Pool.Get<CardPlayer>();
		CopyTo(cardPlayer);
		return cardPlayer;
	}

	public static CardPlayer Deserialize(Stream stream)
	{
		CardPlayer cardPlayer = Pool.Get<CardPlayer>();
		Deserialize(stream, cardPlayer, isDelta: false);
		return cardPlayer;
	}

	public static CardPlayer DeserializeLengthDelimited(Stream stream)
	{
		CardPlayer cardPlayer = Pool.Get<CardPlayer>();
		DeserializeLengthDelimited(stream, cardPlayer, isDelta: false);
		return cardPlayer;
	}

	public static CardPlayer DeserializeLength(Stream stream, int length)
	{
		CardPlayer cardPlayer = Pool.Get<CardPlayer>();
		DeserializeLength(stream, length, cardPlayer, isDelta: false);
		return cardPlayer;
	}

	public static CardPlayer Deserialize(byte[] buffer)
	{
		CardPlayer cardPlayer = Pool.Get<CardPlayer>();
		using MemoryStream stream = new MemoryStream(buffer);
		Deserialize(stream, cardPlayer, isDelta: false);
		return cardPlayer;
	}

	public void FromProto(Stream stream, bool isDelta = false)
	{
		Deserialize(stream, this, isDelta);
	}

	public virtual void WriteToStream(Stream stream)
	{
		Serialize(stream, this);
	}

	public virtual void WriteToStreamDelta(Stream stream, CardPlayer previous)
	{
		if (previous == null)
		{
			Serialize(stream, this);
		}
		else
		{
			SerializeDelta(stream, this, previous);
		}
	}

	public virtual void ReadFromStream(Stream stream, int size, bool isDelta = false)
	{
		DeserializeLength(stream, size, this, isDelta);
	}

	public static CardPlayer Deserialize(byte[] buffer, CardPlayer instance, bool isDelta = false)
	{
		using MemoryStream stream = new MemoryStream(buffer);
		Deserialize(stream, instance, isDelta);
		return instance;
	}

	public static CardPlayer Deserialize(Stream stream, CardPlayer instance, bool isDelta)
	{
		if (!isDelta && instance.cards == null)
		{
			instance.cards = Pool.Get<List<int>>();
		}
		while (true)
		{
			int num = stream.ReadByte();
			switch (num)
			{
			case 8:
				instance.userid = ProtocolParser.ReadUInt64(stream);
				continue;
			case 16:
				instance.cards.Add((int)ProtocolParser.ReadUInt64(stream));
				continue;
			case 24:
				instance.scrap = (int)ProtocolParser.ReadUInt64(stream);
				continue;
			case 32:
				instance.state = (int)ProtocolParser.ReadUInt64(stream);
				continue;
			case 40:
				instance.availableInputs = (int)ProtocolParser.ReadUInt64(stream);
				continue;
			case 48:
				instance.betThisRound = (int)ProtocolParser.ReadUInt64(stream);
				continue;
			case 56:
				instance.betThisTurn = (int)ProtocolParser.ReadUInt64(stream);
				continue;
			case 64:
				instance.leftRoundEarly = ProtocolParser.ReadBool(stream);
				continue;
			case 72:
				instance.sendCardDetails = ProtocolParser.ReadBool(stream);
				continue;
			case -1:
				return instance;
			}
			Key key = ProtocolParser.ReadKey((byte)num, stream);
			if (key.Field == 0)
			{
				throw new ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
			}
			ProtocolParser.SkipKey(stream, key);
		}
	}

	public static CardPlayer DeserializeLengthDelimited(Stream stream, CardPlayer instance, bool isDelta)
	{
		if (!isDelta && instance.cards == null)
		{
			instance.cards = Pool.Get<List<int>>();
		}
		long num = ProtocolParser.ReadUInt32(stream);
		num += stream.Position;
		while (stream.Position < num)
		{
			int num2 = stream.ReadByte();
			switch (num2)
			{
			case -1:
				throw new EndOfStreamException();
			case 8:
				instance.userid = ProtocolParser.ReadUInt64(stream);
				continue;
			case 16:
				instance.cards.Add((int)ProtocolParser.ReadUInt64(stream));
				continue;
			case 24:
				instance.scrap = (int)ProtocolParser.ReadUInt64(stream);
				continue;
			case 32:
				instance.state = (int)ProtocolParser.ReadUInt64(stream);
				continue;
			case 40:
				instance.availableInputs = (int)ProtocolParser.ReadUInt64(stream);
				continue;
			case 48:
				instance.betThisRound = (int)ProtocolParser.ReadUInt64(stream);
				continue;
			case 56:
				instance.betThisTurn = (int)ProtocolParser.ReadUInt64(stream);
				continue;
			case 64:
				instance.leftRoundEarly = ProtocolParser.ReadBool(stream);
				continue;
			case 72:
				instance.sendCardDetails = ProtocolParser.ReadBool(stream);
				continue;
			}
			Key key = ProtocolParser.ReadKey((byte)num2, stream);
			if (key.Field == 0)
			{
				throw new ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
			}
			ProtocolParser.SkipKey(stream, key);
		}
		if (stream.Position != num)
		{
			throw new ProtocolBufferException("Read past max limit");
		}
		return instance;
	}

	public static CardPlayer DeserializeLength(Stream stream, int length, CardPlayer instance, bool isDelta)
	{
		if (!isDelta && instance.cards == null)
		{
			instance.cards = Pool.Get<List<int>>();
		}
		long num = stream.Position + length;
		while (stream.Position < num)
		{
			int num2 = stream.ReadByte();
			switch (num2)
			{
			case -1:
				throw new EndOfStreamException();
			case 8:
				instance.userid = ProtocolParser.ReadUInt64(stream);
				continue;
			case 16:
				instance.cards.Add((int)ProtocolParser.ReadUInt64(stream));
				continue;
			case 24:
				instance.scrap = (int)ProtocolParser.ReadUInt64(stream);
				continue;
			case 32:
				instance.state = (int)ProtocolParser.ReadUInt64(stream);
				continue;
			case 40:
				instance.availableInputs = (int)ProtocolParser.ReadUInt64(stream);
				continue;
			case 48:
				instance.betThisRound = (int)ProtocolParser.ReadUInt64(stream);
				continue;
			case 56:
				instance.betThisTurn = (int)ProtocolParser.ReadUInt64(stream);
				continue;
			case 64:
				instance.leftRoundEarly = ProtocolParser.ReadBool(stream);
				continue;
			case 72:
				instance.sendCardDetails = ProtocolParser.ReadBool(stream);
				continue;
			}
			Key key = ProtocolParser.ReadKey((byte)num2, stream);
			if (key.Field == 0)
			{
				throw new ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
			}
			ProtocolParser.SkipKey(stream, key);
		}
		if (stream.Position != num)
		{
			throw new ProtocolBufferException("Read past max limit");
		}
		return instance;
	}

	public static void SerializeDelta(Stream stream, CardPlayer instance, CardPlayer previous)
	{
		MemoryStream obj = Pool.Get<MemoryStream>();
		if (instance.userid != previous.userid)
		{
			stream.WriteByte(8);
			ProtocolParser.WriteUInt64(stream, instance.userid);
		}
		if (instance.cards != null)
		{
			for (int i = 0; i < instance.cards.Count; i++)
			{
				int num = instance.cards[i];
				stream.WriteByte(16);
				ProtocolParser.WriteUInt64(stream, (ulong)num);
			}
		}
		if (instance.scrap != previous.scrap)
		{
			stream.WriteByte(24);
			ProtocolParser.WriteUInt64(stream, (ulong)instance.scrap);
		}
		if (instance.state != previous.state)
		{
			stream.WriteByte(32);
			ProtocolParser.WriteUInt64(stream, (ulong)instance.state);
		}
		if (instance.availableInputs != previous.availableInputs)
		{
			stream.WriteByte(40);
			ProtocolParser.WriteUInt64(stream, (ulong)instance.availableInputs);
		}
		if (instance.betThisRound != previous.betThisRound)
		{
			stream.WriteByte(48);
			ProtocolParser.WriteUInt64(stream, (ulong)instance.betThisRound);
		}
		if (instance.betThisTurn != previous.betThisTurn)
		{
			stream.WriteByte(56);
			ProtocolParser.WriteUInt64(stream, (ulong)instance.betThisTurn);
		}
		stream.WriteByte(64);
		ProtocolParser.WriteBool(stream, instance.leftRoundEarly);
		stream.WriteByte(72);
		ProtocolParser.WriteBool(stream, instance.sendCardDetails);
		Pool.FreeUnmanaged(ref obj);
	}

	public static void Serialize(Stream stream, CardPlayer instance)
	{
		MemoryStream obj = Pool.Get<MemoryStream>();
		if (instance.userid != 0L)
		{
			stream.WriteByte(8);
			ProtocolParser.WriteUInt64(stream, instance.userid);
		}
		if (instance.cards != null)
		{
			for (int i = 0; i < instance.cards.Count; i++)
			{
				int num = instance.cards[i];
				stream.WriteByte(16);
				ProtocolParser.WriteUInt64(stream, (ulong)num);
			}
		}
		if (instance.scrap != 0)
		{
			stream.WriteByte(24);
			ProtocolParser.WriteUInt64(stream, (ulong)instance.scrap);
		}
		if (instance.state != 0)
		{
			stream.WriteByte(32);
			ProtocolParser.WriteUInt64(stream, (ulong)instance.state);
		}
		if (instance.availableInputs != 0)
		{
			stream.WriteByte(40);
			ProtocolParser.WriteUInt64(stream, (ulong)instance.availableInputs);
		}
		if (instance.betThisRound != 0)
		{
			stream.WriteByte(48);
			ProtocolParser.WriteUInt64(stream, (ulong)instance.betThisRound);
		}
		if (instance.betThisTurn != 0)
		{
			stream.WriteByte(56);
			ProtocolParser.WriteUInt64(stream, (ulong)instance.betThisTurn);
		}
		if (instance.leftRoundEarly)
		{
			stream.WriteByte(64);
			ProtocolParser.WriteBool(stream, instance.leftRoundEarly);
		}
		if (instance.sendCardDetails)
		{
			stream.WriteByte(72);
			ProtocolParser.WriteBool(stream, instance.sendCardDetails);
		}
		Pool.FreeUnmanaged(ref obj);
	}

	public byte[] ToProtoBytes()
	{
		return SerializeToBytes(this);
	}

	public void ToProto(Stream stream)
	{
		Serialize(stream, this);
	}

	public static byte[] SerializeToBytes(CardPlayer instance)
	{
		using MemoryStream memoryStream = new MemoryStream();
		Serialize(memoryStream, instance);
		return memoryStream.ToArray();
	}

	public static void SerializeLengthDelimited(Stream stream, CardPlayer instance)
	{
		byte[] array = SerializeToBytes(instance);
		ProtocolParser.WriteUInt32(stream, (uint)array.Length);
		stream.Write(array, 0, array.Length);
	}

	public void InspectUids(UidInspector<ulong> action)
	{
	}
}
