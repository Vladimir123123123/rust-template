using System;
using System.Collections.Generic;
using System.IO;
using Facepunch;
using ProtoBuf.Nexus;
using SilentOrbit.ProtocolBuffers;

public class ClanChatBatchRequest : IDisposable, Pool.IPooled, IProto
{
	public class Message : IDisposable, Pool.IPooled, IProto
	{
		[NonSerialized]
		public long clanId;

		[NonSerialized]
		public ulong userId;

		[NonSerialized]
		public string text;

		[NonSerialized]
		public string name;

		[NonSerialized]
		public long timestamp;

		public bool ShouldPool = true;

		private bool _disposed;

		public static void ResetToPool(Message instance)
		{
			if (instance.ShouldPool)
			{
				instance.clanId = 0L;
				instance.userId = 0uL;
				instance.text = string.Empty;
				instance.name = string.Empty;
				instance.timestamp = 0L;
				Pool.Free(ref instance);
			}
		}

		public void ResetToPool()
		{
			ResetToPool(this);
		}

		public virtual void Dispose()
		{
			if (!ShouldPool)
			{
				throw new Exception("Trying to dispose Message with ShouldPool set to false!");
			}
			if (!_disposed)
			{
				ResetToPool();
				_disposed = true;
			}
		}

		public virtual void EnterPool()
		{
			_disposed = true;
		}

		public virtual void LeavePool()
		{
			_disposed = false;
		}

		public void CopyTo(Message instance)
		{
			instance.clanId = clanId;
			instance.userId = userId;
			instance.text = text;
			instance.name = name;
			instance.timestamp = timestamp;
		}

		public Message Copy()
		{
			Message message = Pool.Get<Message>();
			CopyTo(message);
			return message;
		}

		public static Message Deserialize(Stream stream)
		{
			Message message = Pool.Get<Message>();
			Deserialize(stream, message, isDelta: false);
			return message;
		}

		public static Message DeserializeLengthDelimited(Stream stream)
		{
			Message message = Pool.Get<Message>();
			DeserializeLengthDelimited(stream, message, isDelta: false);
			return message;
		}

		public static Message DeserializeLength(Stream stream, int length)
		{
			Message message = Pool.Get<Message>();
			DeserializeLength(stream, length, message, isDelta: false);
			return message;
		}

		public static Message Deserialize(byte[] buffer)
		{
			Message message = Pool.Get<Message>();
			using MemoryStream stream = new MemoryStream(buffer);
			Deserialize(stream, message, isDelta: false);
			return message;
		}

		public void FromProto(Stream stream, bool isDelta = false)
		{
			Deserialize(stream, this, isDelta);
		}

		public virtual void WriteToStream(Stream stream)
		{
			Serialize(stream, this);
		}

		public virtual void WriteToStreamDelta(Stream stream, Message previous)
		{
			if (previous == null)
			{
				Serialize(stream, this);
			}
			else
			{
				SerializeDelta(stream, this, previous);
			}
		}

		public virtual void ReadFromStream(Stream stream, int size, bool isDelta = false)
		{
			DeserializeLength(stream, size, this, isDelta);
		}

		public static Message Deserialize(byte[] buffer, Message instance, bool isDelta = false)
		{
			using MemoryStream stream = new MemoryStream(buffer);
			Deserialize(stream, instance, isDelta);
			return instance;
		}

		public static Message Deserialize(Stream stream, Message instance, bool isDelta)
		{
			while (true)
			{
				int num = stream.ReadByte();
				switch (num)
				{
				case 8:
					instance.clanId = (long)ProtocolParser.ReadUInt64(stream);
					continue;
				case 16:
					instance.userId = ProtocolParser.ReadUInt64(stream);
					continue;
				case 26:
					instance.text = ProtocolParser.ReadString(stream);
					continue;
				case 34:
					instance.name = ProtocolParser.ReadString(stream);
					continue;
				case 40:
					instance.timestamp = (long)ProtocolParser.ReadUInt64(stream);
					continue;
				case -1:
					return instance;
				}
				Key key = ProtocolParser.ReadKey((byte)num, stream);
				if (key.Field == 0)
				{
					throw new ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
				}
				ProtocolParser.SkipKey(stream, key);
			}
		}

		public static Message DeserializeLengthDelimited(Stream stream, Message instance, bool isDelta)
		{
			long num = ProtocolParser.ReadUInt32(stream);
			num += stream.Position;
			while (stream.Position < num)
			{
				int num2 = stream.ReadByte();
				switch (num2)
				{
				case -1:
					throw new EndOfStreamException();
				case 8:
					instance.clanId = (long)ProtocolParser.ReadUInt64(stream);
					continue;
				case 16:
					instance.userId = ProtocolParser.ReadUInt64(stream);
					continue;
				case 26:
					instance.text = ProtocolParser.ReadString(stream);
					continue;
				case 34:
					instance.name = ProtocolParser.ReadString(stream);
					continue;
				case 40:
					instance.timestamp = (long)ProtocolParser.ReadUInt64(stream);
					continue;
				}
				Key key = ProtocolParser.ReadKey((byte)num2, stream);
				if (key.Field == 0)
				{
					throw new ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
				}
				ProtocolParser.SkipKey(stream, key);
			}
			if (stream.Position != num)
			{
				throw new ProtocolBufferException("Read past max limit");
			}
			return instance;
		}

		public static Message DeserializeLength(Stream stream, int length, Message instance, bool isDelta)
		{
			long num = stream.Position + length;
			while (stream.Position < num)
			{
				int num2 = stream.ReadByte();
				switch (num2)
				{
				case -1:
					throw new EndOfStreamException();
				case 8:
					instance.clanId = (long)ProtocolParser.ReadUInt64(stream);
					continue;
				case 16:
					instance.userId = ProtocolParser.ReadUInt64(stream);
					continue;
				case 26:
					instance.text = ProtocolParser.ReadString(stream);
					continue;
				case 34:
					instance.name = ProtocolParser.ReadString(stream);
					continue;
				case 40:
					instance.timestamp = (long)ProtocolParser.ReadUInt64(stream);
					continue;
				}
				Key key = ProtocolParser.ReadKey((byte)num2, stream);
				if (key.Field == 0)
				{
					throw new ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
				}
				ProtocolParser.SkipKey(stream, key);
			}
			if (stream.Position != num)
			{
				throw new ProtocolBufferException("Read past max limit");
			}
			return instance;
		}

		public static void SerializeDelta(Stream stream, Message instance, Message previous)
		{
			MemoryStream obj = Pool.Get<MemoryStream>();
			stream.WriteByte(8);
			ProtocolParser.WriteUInt64(stream, (ulong)instance.clanId);
			if (instance.userId != previous.userId)
			{
				stream.WriteByte(16);
				ProtocolParser.WriteUInt64(stream, instance.userId);
			}
			if (instance.text != previous.text)
			{
				if (instance.text == null)
				{
					throw new ArgumentNullException("text", "Required by proto specification.");
				}
				stream.WriteByte(26);
				ProtocolParser.WriteString(stream, instance.text);
			}
			if (instance.name != previous.name)
			{
				if (instance.name == null)
				{
					throw new ArgumentNullException("name", "Required by proto specification.");
				}
				stream.WriteByte(34);
				ProtocolParser.WriteString(stream, instance.name);
			}
			stream.WriteByte(40);
			ProtocolParser.WriteUInt64(stream, (ulong)instance.timestamp);
			Pool.FreeUnmanaged(ref obj);
		}

		public static void Serialize(Stream stream, Message instance)
		{
			MemoryStream obj = Pool.Get<MemoryStream>();
			if (instance.clanId != 0L)
			{
				stream.WriteByte(8);
				ProtocolParser.WriteUInt64(stream, (ulong)instance.clanId);
			}
			if (instance.userId != 0L)
			{
				stream.WriteByte(16);
				ProtocolParser.WriteUInt64(stream, instance.userId);
			}
			if (instance.text == null)
			{
				throw new ArgumentNullException("text", "Required by proto specification.");
			}
			stream.WriteByte(26);
			ProtocolParser.WriteString(stream, instance.text);
			if (instance.name == null)
			{
				throw new ArgumentNullException("name", "Required by proto specification.");
			}
			stream.WriteByte(34);
			ProtocolParser.WriteString(stream, instance.name);
			if (instance.timestamp != 0L)
			{
				stream.WriteByte(40);
				ProtocolParser.WriteUInt64(stream, (ulong)instance.timestamp);
			}
			Pool.FreeUnmanaged(ref obj);
		}

		public byte[] ToProtoBytes()
		{
			return SerializeToBytes(this);
		}

		public void ToProto(Stream stream)
		{
			Serialize(stream, this);
		}

		public static byte[] SerializeToBytes(Message instance)
		{
			using MemoryStream memoryStream = new MemoryStream();
			Serialize(memoryStream, instance);
			return memoryStream.ToArray();
		}

		public static void SerializeLengthDelimited(Stream stream, Message instance)
		{
			byte[] array = SerializeToBytes(instance);
			ProtocolParser.WriteUInt32(stream, (uint)array.Length);
			stream.Write(array, 0, array.Length);
		}

		public void InspectUids(UidInspector<ulong> action)
		{
		}
	}

	[NonSerialized]
	public List<Message> messages;

	public bool ShouldPool = true;

	private bool _disposed;

	public static void ResetToPool(ClanChatBatchRequest instance)
	{
		if (!instance.ShouldPool)
		{
			return;
		}
		if (instance.messages != null)
		{
			for (int i = 0; i < instance.messages.Count; i++)
			{
				if (instance.messages[i] != null)
				{
					instance.messages[i].ResetToPool();
					instance.messages[i] = null;
				}
			}
			List<Message> obj = instance.messages;
			Pool.Free(ref obj, freeElements: false);
			instance.messages = obj;
		}
		Pool.Free(ref instance);
	}

	public void ResetToPool()
	{
		ResetToPool(this);
	}

	public virtual void Dispose()
	{
		if (!ShouldPool)
		{
			throw new Exception("Trying to dispose ClanChatBatchRequest with ShouldPool set to false!");
		}
		if (!_disposed)
		{
			ResetToPool();
			_disposed = true;
		}
	}

	public virtual void EnterPool()
	{
		_disposed = true;
	}

	public virtual void LeavePool()
	{
		_disposed = false;
	}

	public void CopyTo(ClanChatBatchRequest instance)
	{
		if (messages != null)
		{
			instance.messages = Pool.Get<List<Message>>();
			for (int i = 0; i < messages.Count; i++)
			{
				Message item = messages[i].Copy();
				instance.messages.Add(item);
			}
		}
		else
		{
			instance.messages = null;
		}
	}

	public ClanChatBatchRequest Copy()
	{
		ClanChatBatchRequest clanChatBatchRequest = Pool.Get<ClanChatBatchRequest>();
		CopyTo(clanChatBatchRequest);
		return clanChatBatchRequest;
	}

	public static ClanChatBatchRequest Deserialize(Stream stream)
	{
		ClanChatBatchRequest clanChatBatchRequest = Pool.Get<ClanChatBatchRequest>();
		Deserialize(stream, clanChatBatchRequest, isDelta: false);
		return clanChatBatchRequest;
	}

	public static ClanChatBatchRequest DeserializeLengthDelimited(Stream stream)
	{
		ClanChatBatchRequest clanChatBatchRequest = Pool.Get<ClanChatBatchRequest>();
		DeserializeLengthDelimited(stream, clanChatBatchRequest, isDelta: false);
		return clanChatBatchRequest;
	}

	public static ClanChatBatchRequest DeserializeLength(Stream stream, int length)
	{
		ClanChatBatchRequest clanChatBatchRequest = Pool.Get<ClanChatBatchRequest>();
		DeserializeLength(stream, length, clanChatBatchRequest, isDelta: false);
		return clanChatBatchRequest;
	}

	public static ClanChatBatchRequest Deserialize(byte[] buffer)
	{
		ClanChatBatchRequest clanChatBatchRequest = Pool.Get<ClanChatBatchRequest>();
		using MemoryStream stream = new MemoryStream(buffer);
		Deserialize(stream, clanChatBatchRequest, isDelta: false);
		return clanChatBatchRequest;
	}

	public void FromProto(Stream stream, bool isDelta = false)
	{
		Deserialize(stream, this, isDelta);
	}

	public virtual void WriteToStream(Stream stream)
	{
		Serialize(stream, this);
	}

	public virtual void WriteToStreamDelta(Stream stream, ClanChatBatchRequest previous)
	{
		if (previous == null)
		{
			Serialize(stream, this);
		}
		else
		{
			SerializeDelta(stream, this, previous);
		}
	}

	public virtual void ReadFromStream(Stream stream, int size, bool isDelta = false)
	{
		DeserializeLength(stream, size, this, isDelta);
	}

	public static ClanChatBatchRequest Deserialize(byte[] buffer, ClanChatBatchRequest instance, bool isDelta = false)
	{
		using MemoryStream stream = new MemoryStream(buffer);
		Deserialize(stream, instance, isDelta);
		return instance;
	}

	public static ClanChatBatchRequest Deserialize(Stream stream, ClanChatBatchRequest instance, bool isDelta)
	{
		if (!isDelta && instance.messages == null)
		{
			instance.messages = Pool.Get<List<Message>>();
		}
		while (true)
		{
			int num = stream.ReadByte();
			switch (num)
			{
			case 10:
				instance.messages.Add(Message.DeserializeLengthDelimited(stream));
				continue;
			case -1:
				return instance;
			}
			Key key = ProtocolParser.ReadKey((byte)num, stream);
			if (key.Field == 0)
			{
				throw new ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
			}
			ProtocolParser.SkipKey(stream, key);
		}
	}

	public static ClanChatBatchRequest DeserializeLengthDelimited(Stream stream, ClanChatBatchRequest instance, bool isDelta)
	{
		if (!isDelta && instance.messages == null)
		{
			instance.messages = Pool.Get<List<Message>>();
		}
		long num = ProtocolParser.ReadUInt32(stream);
		num += stream.Position;
		while (stream.Position < num)
		{
			int num2 = stream.ReadByte();
			switch (num2)
			{
			case -1:
				throw new EndOfStreamException();
			case 10:
				instance.messages.Add(Message.DeserializeLengthDelimited(stream));
				continue;
			}
			Key key = ProtocolParser.ReadKey((byte)num2, stream);
			if (key.Field == 0)
			{
				throw new ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
			}
			ProtocolParser.SkipKey(stream, key);
		}
		if (stream.Position != num)
		{
			throw new ProtocolBufferException("Read past max limit");
		}
		return instance;
	}

	public static ClanChatBatchRequest DeserializeLength(Stream stream, int length, ClanChatBatchRequest instance, bool isDelta)
	{
		if (!isDelta && instance.messages == null)
		{
			instance.messages = Pool.Get<List<Message>>();
		}
		long num = stream.Position + length;
		while (stream.Position < num)
		{
			int num2 = stream.ReadByte();
			switch (num2)
			{
			case -1:
				throw new EndOfStreamException();
			case 10:
				instance.messages.Add(Message.DeserializeLengthDelimited(stream));
				continue;
			}
			Key key = ProtocolParser.ReadKey((byte)num2, stream);
			if (key.Field == 0)
			{
				throw new ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
			}
			ProtocolParser.SkipKey(stream, key);
		}
		if (stream.Position != num)
		{
			throw new ProtocolBufferException("Read past max limit");
		}
		return instance;
	}

	public static void SerializeDelta(Stream stream, ClanChatBatchRequest instance, ClanChatBatchRequest previous)
	{
		MemoryStream obj = Pool.Get<MemoryStream>();
		if (instance.messages != null)
		{
			for (int i = 0; i < instance.messages.Count; i++)
			{
				Message message = instance.messages[i];
				stream.WriteByte(10);
				obj.SetLength(0L);
				Message.SerializeDelta(obj, message, message);
				uint num = (uint)obj.Length;
				ProtocolParser.WriteUInt32(stream, num);
				stream.Write(obj.GetBuffer(), 0, (int)num);
			}
		}
		Pool.FreeUnmanaged(ref obj);
	}

	public static void Serialize(Stream stream, ClanChatBatchRequest instance)
	{
		MemoryStream obj = Pool.Get<MemoryStream>();
		if (instance.messages != null)
		{
			for (int i = 0; i < instance.messages.Count; i++)
			{
				Message instance2 = instance.messages[i];
				stream.WriteByte(10);
				obj.SetLength(0L);
				Message.Serialize(obj, instance2);
				uint num = (uint)obj.Length;
				ProtocolParser.WriteUInt32(stream, num);
				stream.Write(obj.GetBuffer(), 0, (int)num);
			}
		}
		Pool.FreeUnmanaged(ref obj);
	}

	public byte[] ToProtoBytes()
	{
		return SerializeToBytes(this);
	}

	public void ToProto(Stream stream)
	{
		Serialize(stream, this);
	}

	public static byte[] SerializeToBytes(ClanChatBatchRequest instance)
	{
		using MemoryStream memoryStream = new MemoryStream();
		Serialize(memoryStream, instance);
		return memoryStream.ToArray();
	}

	public static void SerializeLengthDelimited(Stream stream, ClanChatBatchRequest instance)
	{
		byte[] array = SerializeToBytes(instance);
		ProtocolParser.WriteUInt32(stream, (uint)array.Length);
		stream.Write(array, 0, array.Length);
	}

	public void InspectUids(UidInspector<ulong> action)
	{
		if (messages != null)
		{
			for (int i = 0; i < messages.Count; i++)
			{
				messages[i]?.InspectUids(action);
			}
		}
	}
}
