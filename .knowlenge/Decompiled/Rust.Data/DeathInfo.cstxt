using System;
using System.IO;
using Facepunch;
using SilentOrbit.ProtocolBuffers;

public class DeathInfo : IDisposable, Pool.IPooled, IProto
{
	[NonSerialized]
	public string attackerName;

	[NonSerialized]
	public ulong attackerSteamID;

	[NonSerialized]
	public string hitBone;

	[NonSerialized]
	public string inflictorName;

	[NonSerialized]
	public int lastDamageType;

	[NonSerialized]
	public float attackerDistance;

	public bool ShouldPool = true;

	private bool _disposed;

	public static void ResetToPool(DeathInfo instance)
	{
		if (instance.ShouldPool)
		{
			instance.attackerName = string.Empty;
			instance.attackerSteamID = 0uL;
			instance.hitBone = string.Empty;
			instance.inflictorName = string.Empty;
			instance.lastDamageType = 0;
			instance.attackerDistance = 0f;
			Pool.Free(ref instance);
		}
	}

	public void ResetToPool()
	{
		ResetToPool(this);
	}

	public virtual void Dispose()
	{
		if (!ShouldPool)
		{
			throw new Exception("Trying to dispose DeathInfo with ShouldPool set to false!");
		}
		if (!_disposed)
		{
			ResetToPool();
			_disposed = true;
		}
	}

	public virtual void EnterPool()
	{
		_disposed = true;
	}

	public virtual void LeavePool()
	{
		_disposed = false;
	}

	public void CopyTo(DeathInfo instance)
	{
		instance.attackerName = attackerName;
		instance.attackerSteamID = attackerSteamID;
		instance.hitBone = hitBone;
		instance.inflictorName = inflictorName;
		instance.lastDamageType = lastDamageType;
		instance.attackerDistance = attackerDistance;
	}

	public DeathInfo Copy()
	{
		DeathInfo deathInfo = Pool.Get<DeathInfo>();
		CopyTo(deathInfo);
		return deathInfo;
	}

	public static DeathInfo Deserialize(Stream stream)
	{
		DeathInfo deathInfo = Pool.Get<DeathInfo>();
		Deserialize(stream, deathInfo, isDelta: false);
		return deathInfo;
	}

	public static DeathInfo DeserializeLengthDelimited(Stream stream)
	{
		DeathInfo deathInfo = Pool.Get<DeathInfo>();
		DeserializeLengthDelimited(stream, deathInfo, isDelta: false);
		return deathInfo;
	}

	public static DeathInfo DeserializeLength(Stream stream, int length)
	{
		DeathInfo deathInfo = Pool.Get<DeathInfo>();
		DeserializeLength(stream, length, deathInfo, isDelta: false);
		return deathInfo;
	}

	public static DeathInfo Deserialize(byte[] buffer)
	{
		DeathInfo deathInfo = Pool.Get<DeathInfo>();
		using MemoryStream stream = new MemoryStream(buffer);
		Deserialize(stream, deathInfo, isDelta: false);
		return deathInfo;
	}

	public void FromProto(Stream stream, bool isDelta = false)
	{
		Deserialize(stream, this, isDelta);
	}

	public virtual void WriteToStream(Stream stream)
	{
		Serialize(stream, this);
	}

	public virtual void WriteToStreamDelta(Stream stream, DeathInfo previous)
	{
		if (previous == null)
		{
			Serialize(stream, this);
		}
		else
		{
			SerializeDelta(stream, this, previous);
		}
	}

	public virtual void ReadFromStream(Stream stream, int size, bool isDelta = false)
	{
		DeserializeLength(stream, size, this, isDelta);
	}

	public static DeathInfo Deserialize(byte[] buffer, DeathInfo instance, bool isDelta = false)
	{
		using MemoryStream stream = new MemoryStream(buffer);
		Deserialize(stream, instance, isDelta);
		return instance;
	}

	public static DeathInfo Deserialize(Stream stream, DeathInfo instance, bool isDelta)
	{
		while (true)
		{
			int num = stream.ReadByte();
			switch (num)
			{
			case 10:
				instance.attackerName = ProtocolParser.ReadString(stream);
				continue;
			case 16:
				instance.attackerSteamID = ProtocolParser.ReadUInt64(stream);
				continue;
			case 26:
				instance.hitBone = ProtocolParser.ReadString(stream);
				continue;
			case 34:
				instance.inflictorName = ProtocolParser.ReadString(stream);
				continue;
			case 40:
				instance.lastDamageType = (int)ProtocolParser.ReadUInt64(stream);
				continue;
			case 53:
				instance.attackerDistance = ProtocolParser.ReadSingle(stream);
				continue;
			case -1:
				return instance;
			}
			Key key = ProtocolParser.ReadKey((byte)num, stream);
			if (key.Field == 0)
			{
				throw new ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
			}
			ProtocolParser.SkipKey(stream, key);
		}
	}

	public static DeathInfo DeserializeLengthDelimited(Stream stream, DeathInfo instance, bool isDelta)
	{
		long num = ProtocolParser.ReadUInt32(stream);
		num += stream.Position;
		while (stream.Position < num)
		{
			int num2 = stream.ReadByte();
			switch (num2)
			{
			case -1:
				throw new EndOfStreamException();
			case 10:
				instance.attackerName = ProtocolParser.ReadString(stream);
				continue;
			case 16:
				instance.attackerSteamID = ProtocolParser.ReadUInt64(stream);
				continue;
			case 26:
				instance.hitBone = ProtocolParser.ReadString(stream);
				continue;
			case 34:
				instance.inflictorName = ProtocolParser.ReadString(stream);
				continue;
			case 40:
				instance.lastDamageType = (int)ProtocolParser.ReadUInt64(stream);
				continue;
			case 53:
				instance.attackerDistance = ProtocolParser.ReadSingle(stream);
				continue;
			}
			Key key = ProtocolParser.ReadKey((byte)num2, stream);
			if (key.Field == 0)
			{
				throw new ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
			}
			ProtocolParser.SkipKey(stream, key);
		}
		if (stream.Position != num)
		{
			throw new ProtocolBufferException("Read past max limit");
		}
		return instance;
	}

	public static DeathInfo DeserializeLength(Stream stream, int length, DeathInfo instance, bool isDelta)
	{
		long num = stream.Position + length;
		while (stream.Position < num)
		{
			int num2 = stream.ReadByte();
			switch (num2)
			{
			case -1:
				throw new EndOfStreamException();
			case 10:
				instance.attackerName = ProtocolParser.ReadString(stream);
				continue;
			case 16:
				instance.attackerSteamID = ProtocolParser.ReadUInt64(stream);
				continue;
			case 26:
				instance.hitBone = ProtocolParser.ReadString(stream);
				continue;
			case 34:
				instance.inflictorName = ProtocolParser.ReadString(stream);
				continue;
			case 40:
				instance.lastDamageType = (int)ProtocolParser.ReadUInt64(stream);
				continue;
			case 53:
				instance.attackerDistance = ProtocolParser.ReadSingle(stream);
				continue;
			}
			Key key = ProtocolParser.ReadKey((byte)num2, stream);
			if (key.Field == 0)
			{
				throw new ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
			}
			ProtocolParser.SkipKey(stream, key);
		}
		if (stream.Position != num)
		{
			throw new ProtocolBufferException("Read past max limit");
		}
		return instance;
	}

	public static void SerializeDelta(Stream stream, DeathInfo instance, DeathInfo previous)
	{
		MemoryStream obj = Pool.Get<MemoryStream>();
		if (instance.attackerName != null && instance.attackerName != previous.attackerName)
		{
			stream.WriteByte(10);
			ProtocolParser.WriteString(stream, instance.attackerName);
		}
		if (instance.attackerSteamID != previous.attackerSteamID)
		{
			stream.WriteByte(16);
			ProtocolParser.WriteUInt64(stream, instance.attackerSteamID);
		}
		if (instance.hitBone != null && instance.hitBone != previous.hitBone)
		{
			stream.WriteByte(26);
			ProtocolParser.WriteString(stream, instance.hitBone);
		}
		if (instance.inflictorName != null && instance.inflictorName != previous.inflictorName)
		{
			stream.WriteByte(34);
			ProtocolParser.WriteString(stream, instance.inflictorName);
		}
		if (instance.lastDamageType != previous.lastDamageType)
		{
			stream.WriteByte(40);
			ProtocolParser.WriteUInt64(stream, (ulong)instance.lastDamageType);
		}
		if (instance.attackerDistance != previous.attackerDistance)
		{
			stream.WriteByte(53);
			ProtocolParser.WriteSingle(stream, instance.attackerDistance);
		}
		Pool.FreeUnmanaged(ref obj);
	}

	public static void Serialize(Stream stream, DeathInfo instance)
	{
		MemoryStream obj = Pool.Get<MemoryStream>();
		if (instance.attackerName != null)
		{
			stream.WriteByte(10);
			ProtocolParser.WriteString(stream, instance.attackerName);
		}
		if (instance.attackerSteamID != 0L)
		{
			stream.WriteByte(16);
			ProtocolParser.WriteUInt64(stream, instance.attackerSteamID);
		}
		if (instance.hitBone != null)
		{
			stream.WriteByte(26);
			ProtocolParser.WriteString(stream, instance.hitBone);
		}
		if (instance.inflictorName != null)
		{
			stream.WriteByte(34);
			ProtocolParser.WriteString(stream, instance.inflictorName);
		}
		if (instance.lastDamageType != 0)
		{
			stream.WriteByte(40);
			ProtocolParser.WriteUInt64(stream, (ulong)instance.lastDamageType);
		}
		if (instance.attackerDistance != 0f)
		{
			stream.WriteByte(53);
			ProtocolParser.WriteSingle(stream, instance.attackerDistance);
		}
		Pool.FreeUnmanaged(ref obj);
	}

	public byte[] ToProtoBytes()
	{
		return SerializeToBytes(this);
	}

	public void ToProto(Stream stream)
	{
		Serialize(stream, this);
	}

	public static byte[] SerializeToBytes(DeathInfo instance)
	{
		using MemoryStream memoryStream = new MemoryStream();
		Serialize(memoryStream, instance);
		return memoryStream.ToArray();
	}

	public static void SerializeLengthDelimited(Stream stream, DeathInfo instance)
	{
		byte[] array = SerializeToBytes(instance);
		ProtocolParser.WriteUInt32(stream, (uint)array.Length);
		stream.Write(array, 0, array.Length);
	}

	public void InspectUids(UidInspector<ulong> action)
	{
	}
}
