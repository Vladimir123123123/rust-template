using System;
using System.IO;
using Facepunch;
using ProtoBuf;
using SilentOrbit.ProtocolBuffers;

public struct DemoShotParentKeyframe : IProto
{
	[NonSerialized]
	public float keyframeTime;

	[NonSerialized]
	public NetworkableId keyFrameParentId;

	[NonSerialized]
	public string keyFrameParentName;

	public static void ResetToPool(DemoShotParentKeyframe instance)
	{
		instance.keyframeTime = 0f;
		instance.keyFrameParentId = default(NetworkableId);
		instance.keyFrameParentName = string.Empty;
	}

	public void CopyTo(DemoShotParentKeyframe instance)
	{
		instance.keyframeTime = keyframeTime;
		instance.keyFrameParentId = keyFrameParentId;
		instance.keyFrameParentName = keyFrameParentName;
	}

	public DemoShotParentKeyframe Copy()
	{
		DemoShotParentKeyframe demoShotParentKeyframe = default(DemoShotParentKeyframe);
		CopyTo(demoShotParentKeyframe);
		return demoShotParentKeyframe;
	}

	public static DemoShotParentKeyframe Deserialize(Stream stream)
	{
		DemoShotParentKeyframe instance = default(DemoShotParentKeyframe);
		Deserialize(stream, ref instance, isDelta: false);
		return instance;
	}

	public static DemoShotParentKeyframe DeserializeLengthDelimited(Stream stream)
	{
		DemoShotParentKeyframe instance = default(DemoShotParentKeyframe);
		DeserializeLengthDelimited(stream, ref instance, isDelta: false);
		return instance;
	}

	public static DemoShotParentKeyframe DeserializeLength(Stream stream, int length)
	{
		DemoShotParentKeyframe instance = default(DemoShotParentKeyframe);
		DeserializeLength(stream, length, ref instance, isDelta: false);
		return instance;
	}

	public static DemoShotParentKeyframe Deserialize(byte[] buffer)
	{
		DemoShotParentKeyframe instance = default(DemoShotParentKeyframe);
		using MemoryStream stream = new MemoryStream(buffer);
		Deserialize(stream, ref instance, isDelta: false);
		return instance;
	}

	public void FromProto(Stream stream, bool isDelta = false)
	{
		Deserialize(stream, ref this, isDelta);
	}

	public void WriteToStream(Stream stream)
	{
		Serialize(stream, this);
	}

	public void WriteToStreamDelta(Stream stream, DemoShotParentKeyframe previous)
	{
		SerializeDelta(stream, this, previous);
	}

	public void ReadFromStream(Stream stream, int size, bool isDelta = false)
	{
		DeserializeLength(stream, size, ref this, isDelta);
	}

	public static DemoShotParentKeyframe Deserialize(byte[] buffer, ref DemoShotParentKeyframe instance, bool isDelta = false)
	{
		using (MemoryStream stream = new MemoryStream(buffer))
		{
			Deserialize(stream, ref instance, isDelta);
		}
		return instance;
	}

	public static DemoShotParentKeyframe Deserialize(Stream stream, ref DemoShotParentKeyframe instance, bool isDelta)
	{
		while (true)
		{
			int num = stream.ReadByte();
			switch (num)
			{
			case 13:
				instance.keyframeTime = ProtocolParser.ReadSingle(stream);
				continue;
			case 16:
				instance.keyFrameParentId = new NetworkableId(ProtocolParser.ReadUInt64(stream));
				continue;
			case 26:
				instance.keyFrameParentName = ProtocolParser.ReadString(stream);
				continue;
			case -1:
				return instance;
			}
			Key key = ProtocolParser.ReadKey((byte)num, stream);
			if (key.Field == 0)
			{
				throw new ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
			}
			ProtocolParser.SkipKey(stream, key);
		}
	}

	public static DemoShotParentKeyframe DeserializeLengthDelimited(Stream stream, ref DemoShotParentKeyframe instance, bool isDelta)
	{
		long num = ProtocolParser.ReadUInt32(stream);
		num += stream.Position;
		while (stream.Position < num)
		{
			int num2 = stream.ReadByte();
			switch (num2)
			{
			case -1:
				throw new EndOfStreamException();
			case 13:
				instance.keyframeTime = ProtocolParser.ReadSingle(stream);
				continue;
			case 16:
				instance.keyFrameParentId = new NetworkableId(ProtocolParser.ReadUInt64(stream));
				continue;
			case 26:
				instance.keyFrameParentName = ProtocolParser.ReadString(stream);
				continue;
			}
			Key key = ProtocolParser.ReadKey((byte)num2, stream);
			if (key.Field == 0)
			{
				throw new ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
			}
			ProtocolParser.SkipKey(stream, key);
		}
		if (stream.Position != num)
		{
			throw new ProtocolBufferException("Read past max limit");
		}
		return instance;
	}

	public static DemoShotParentKeyframe DeserializeLength(Stream stream, int length, ref DemoShotParentKeyframe instance, bool isDelta)
	{
		long num = stream.Position + length;
		while (stream.Position < num)
		{
			int num2 = stream.ReadByte();
			switch (num2)
			{
			case -1:
				throw new EndOfStreamException();
			case 13:
				instance.keyframeTime = ProtocolParser.ReadSingle(stream);
				continue;
			case 16:
				instance.keyFrameParentId = new NetworkableId(ProtocolParser.ReadUInt64(stream));
				continue;
			case 26:
				instance.keyFrameParentName = ProtocolParser.ReadString(stream);
				continue;
			}
			Key key = ProtocolParser.ReadKey((byte)num2, stream);
			if (key.Field == 0)
			{
				throw new ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
			}
			ProtocolParser.SkipKey(stream, key);
		}
		if (stream.Position != num)
		{
			throw new ProtocolBufferException("Read past max limit");
		}
		return instance;
	}

	public static void SerializeDelta(Stream stream, DemoShotParentKeyframe instance, DemoShotParentKeyframe previous)
	{
		MemoryStream obj = Pool.Get<MemoryStream>();
		if (instance.keyframeTime != previous.keyframeTime)
		{
			stream.WriteByte(13);
			ProtocolParser.WriteSingle(stream, instance.keyframeTime);
		}
		stream.WriteByte(16);
		ProtocolParser.WriteUInt64(stream, instance.keyFrameParentId.Value);
		if (instance.keyFrameParentName != previous.keyFrameParentName)
		{
			if (instance.keyFrameParentName == null)
			{
				throw new ArgumentNullException("keyFrameParentName", "Required by proto specification.");
			}
			stream.WriteByte(26);
			ProtocolParser.WriteString(stream, instance.keyFrameParentName);
		}
		Pool.FreeUnmanaged(ref obj);
	}

	public static void Serialize(Stream stream, DemoShotParentKeyframe instance)
	{
		MemoryStream obj = Pool.Get<MemoryStream>();
		if (instance.keyframeTime != 0f)
		{
			stream.WriteByte(13);
			ProtocolParser.WriteSingle(stream, instance.keyframeTime);
		}
		if (instance.keyFrameParentId != default(NetworkableId))
		{
			stream.WriteByte(16);
			ProtocolParser.WriteUInt64(stream, instance.keyFrameParentId.Value);
		}
		if (instance.keyFrameParentName == null)
		{
			throw new ArgumentNullException("keyFrameParentName", "Required by proto specification.");
		}
		stream.WriteByte(26);
		ProtocolParser.WriteString(stream, instance.keyFrameParentName);
		Pool.FreeUnmanaged(ref obj);
	}

	public byte[] ToProtoBytes()
	{
		return SerializeToBytes(this);
	}

	public void ToProto(Stream stream)
	{
		Serialize(stream, this);
	}

	public static byte[] SerializeToBytes(DemoShotParentKeyframe instance)
	{
		using MemoryStream memoryStream = new MemoryStream();
		Serialize(memoryStream, instance);
		return memoryStream.ToArray();
	}

	public static void SerializeLengthDelimited(Stream stream, DemoShotParentKeyframe instance)
	{
		byte[] array = SerializeToBytes(instance);
		ProtocolParser.WriteUInt32(stream, (uint)array.Length);
		stream.Write(array, 0, array.Length);
	}

	public void InspectUids(UidInspector<ulong> action)
	{
		action(UidType.NetworkableId, ref keyFrameParentId.Value);
	}
}
