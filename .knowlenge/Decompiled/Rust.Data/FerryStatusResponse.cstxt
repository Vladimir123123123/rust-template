using System;
using System.Collections.Generic;
using System.IO;
using Facepunch;
using ProtoBuf.Nexus;
using SilentOrbit.ProtocolBuffers;

public class FerryStatusResponse : IDisposable, Pool.IPooled, IProto
{
	[NonSerialized]
	public List<FerryStatus> statuses;

	public bool ShouldPool = true;

	private bool _disposed;

	public static void ResetToPool(FerryStatusResponse instance)
	{
		if (!instance.ShouldPool)
		{
			return;
		}
		if (instance.statuses != null)
		{
			for (int i = 0; i < instance.statuses.Count; i++)
			{
				if (instance.statuses[i] != null)
				{
					instance.statuses[i].ResetToPool();
					instance.statuses[i] = null;
				}
			}
			List<FerryStatus> obj = instance.statuses;
			Pool.Free(ref obj, freeElements: false);
			instance.statuses = obj;
		}
		Pool.Free(ref instance);
	}

	public void ResetToPool()
	{
		ResetToPool(this);
	}

	public virtual void Dispose()
	{
		if (!ShouldPool)
		{
			throw new Exception("Trying to dispose FerryStatusResponse with ShouldPool set to false!");
		}
		if (!_disposed)
		{
			ResetToPool();
			_disposed = true;
		}
	}

	public virtual void EnterPool()
	{
		_disposed = true;
	}

	public virtual void LeavePool()
	{
		_disposed = false;
	}

	public void CopyTo(FerryStatusResponse instance)
	{
		if (statuses != null)
		{
			instance.statuses = Pool.Get<List<FerryStatus>>();
			for (int i = 0; i < statuses.Count; i++)
			{
				FerryStatus item = statuses[i].Copy();
				instance.statuses.Add(item);
			}
		}
		else
		{
			instance.statuses = null;
		}
	}

	public FerryStatusResponse Copy()
	{
		FerryStatusResponse ferryStatusResponse = Pool.Get<FerryStatusResponse>();
		CopyTo(ferryStatusResponse);
		return ferryStatusResponse;
	}

	public static FerryStatusResponse Deserialize(Stream stream)
	{
		FerryStatusResponse ferryStatusResponse = Pool.Get<FerryStatusResponse>();
		Deserialize(stream, ferryStatusResponse, isDelta: false);
		return ferryStatusResponse;
	}

	public static FerryStatusResponse DeserializeLengthDelimited(Stream stream)
	{
		FerryStatusResponse ferryStatusResponse = Pool.Get<FerryStatusResponse>();
		DeserializeLengthDelimited(stream, ferryStatusResponse, isDelta: false);
		return ferryStatusResponse;
	}

	public static FerryStatusResponse DeserializeLength(Stream stream, int length)
	{
		FerryStatusResponse ferryStatusResponse = Pool.Get<FerryStatusResponse>();
		DeserializeLength(stream, length, ferryStatusResponse, isDelta: false);
		return ferryStatusResponse;
	}

	public static FerryStatusResponse Deserialize(byte[] buffer)
	{
		FerryStatusResponse ferryStatusResponse = Pool.Get<FerryStatusResponse>();
		using MemoryStream stream = new MemoryStream(buffer);
		Deserialize(stream, ferryStatusResponse, isDelta: false);
		return ferryStatusResponse;
	}

	public void FromProto(Stream stream, bool isDelta = false)
	{
		Deserialize(stream, this, isDelta);
	}

	public virtual void WriteToStream(Stream stream)
	{
		Serialize(stream, this);
	}

	public virtual void WriteToStreamDelta(Stream stream, FerryStatusResponse previous)
	{
		if (previous == null)
		{
			Serialize(stream, this);
		}
		else
		{
			SerializeDelta(stream, this, previous);
		}
	}

	public virtual void ReadFromStream(Stream stream, int size, bool isDelta = false)
	{
		DeserializeLength(stream, size, this, isDelta);
	}

	public static FerryStatusResponse Deserialize(byte[] buffer, FerryStatusResponse instance, bool isDelta = false)
	{
		using MemoryStream stream = new MemoryStream(buffer);
		Deserialize(stream, instance, isDelta);
		return instance;
	}

	public static FerryStatusResponse Deserialize(Stream stream, FerryStatusResponse instance, bool isDelta)
	{
		if (!isDelta && instance.statuses == null)
		{
			instance.statuses = Pool.Get<List<FerryStatus>>();
		}
		while (true)
		{
			int num = stream.ReadByte();
			switch (num)
			{
			case 10:
				instance.statuses.Add(FerryStatus.DeserializeLengthDelimited(stream));
				continue;
			case -1:
				return instance;
			}
			Key key = ProtocolParser.ReadKey((byte)num, stream);
			if (key.Field == 0)
			{
				throw new ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
			}
			ProtocolParser.SkipKey(stream, key);
		}
	}

	public static FerryStatusResponse DeserializeLengthDelimited(Stream stream, FerryStatusResponse instance, bool isDelta)
	{
		if (!isDelta && instance.statuses == null)
		{
			instance.statuses = Pool.Get<List<FerryStatus>>();
		}
		long num = ProtocolParser.ReadUInt32(stream);
		num += stream.Position;
		while (stream.Position < num)
		{
			int num2 = stream.ReadByte();
			switch (num2)
			{
			case -1:
				throw new EndOfStreamException();
			case 10:
				instance.statuses.Add(FerryStatus.DeserializeLengthDelimited(stream));
				continue;
			}
			Key key = ProtocolParser.ReadKey((byte)num2, stream);
			if (key.Field == 0)
			{
				throw new ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
			}
			ProtocolParser.SkipKey(stream, key);
		}
		if (stream.Position != num)
		{
			throw new ProtocolBufferException("Read past max limit");
		}
		return instance;
	}

	public static FerryStatusResponse DeserializeLength(Stream stream, int length, FerryStatusResponse instance, bool isDelta)
	{
		if (!isDelta && instance.statuses == null)
		{
			instance.statuses = Pool.Get<List<FerryStatus>>();
		}
		long num = stream.Position + length;
		while (stream.Position < num)
		{
			int num2 = stream.ReadByte();
			switch (num2)
			{
			case -1:
				throw new EndOfStreamException();
			case 10:
				instance.statuses.Add(FerryStatus.DeserializeLengthDelimited(stream));
				continue;
			}
			Key key = ProtocolParser.ReadKey((byte)num2, stream);
			if (key.Field == 0)
			{
				throw new ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
			}
			ProtocolParser.SkipKey(stream, key);
		}
		if (stream.Position != num)
		{
			throw new ProtocolBufferException("Read past max limit");
		}
		return instance;
	}

	public static void SerializeDelta(Stream stream, FerryStatusResponse instance, FerryStatusResponse previous)
	{
		MemoryStream obj = Pool.Get<MemoryStream>();
		if (instance.statuses != null)
		{
			for (int i = 0; i < instance.statuses.Count; i++)
			{
				FerryStatus ferryStatus = instance.statuses[i];
				stream.WriteByte(10);
				obj.SetLength(0L);
				FerryStatus.SerializeDelta(obj, ferryStatus, ferryStatus);
				uint num = (uint)obj.Length;
				ProtocolParser.WriteUInt32(stream, num);
				stream.Write(obj.GetBuffer(), 0, (int)num);
			}
		}
		Pool.FreeUnmanaged(ref obj);
	}

	public static void Serialize(Stream stream, FerryStatusResponse instance)
	{
		MemoryStream obj = Pool.Get<MemoryStream>();
		if (instance.statuses != null)
		{
			for (int i = 0; i < instance.statuses.Count; i++)
			{
				FerryStatus instance2 = instance.statuses[i];
				stream.WriteByte(10);
				obj.SetLength(0L);
				FerryStatus.Serialize(obj, instance2);
				uint num = (uint)obj.Length;
				ProtocolParser.WriteUInt32(stream, num);
				stream.Write(obj.GetBuffer(), 0, (int)num);
			}
		}
		Pool.FreeUnmanaged(ref obj);
	}

	public byte[] ToProtoBytes()
	{
		return SerializeToBytes(this);
	}

	public void ToProto(Stream stream)
	{
		Serialize(stream, this);
	}

	public static byte[] SerializeToBytes(FerryStatusResponse instance)
	{
		using MemoryStream memoryStream = new MemoryStream();
		Serialize(memoryStream, instance);
		return memoryStream.ToArray();
	}

	public static void SerializeLengthDelimited(Stream stream, FerryStatusResponse instance)
	{
		byte[] array = SerializeToBytes(instance);
		ProtocolParser.WriteUInt32(stream, (uint)array.Length);
		stream.Write(array, 0, array.Length);
	}

	public void InspectUids(UidInspector<ulong> action)
	{
		if (statuses != null)
		{
			for (int i = 0; i < statuses.Count; i++)
			{
				statuses[i]?.InspectUids(action);
			}
		}
	}
}
