using System;
using System.Collections.Generic;
using System.IO;
using Facepunch;
using ProtoBuf;
using SilentOrbit.ProtocolBuffers;

public class GameMode : IDisposable, Pool.IPooled, IProto
{
	public class TeamInfo : IDisposable, Pool.IPooled, IProto
	{
		[NonSerialized]
		public int score;

		public bool ShouldPool = true;

		private bool _disposed;

		public static void ResetToPool(TeamInfo instance)
		{
			if (instance.ShouldPool)
			{
				instance.score = 0;
				Pool.Free(ref instance);
			}
		}

		public void ResetToPool()
		{
			ResetToPool(this);
		}

		public virtual void Dispose()
		{
			if (!ShouldPool)
			{
				throw new Exception("Trying to dispose TeamInfo with ShouldPool set to false!");
			}
			if (!_disposed)
			{
				ResetToPool();
				_disposed = true;
			}
		}

		public virtual void EnterPool()
		{
			_disposed = true;
		}

		public virtual void LeavePool()
		{
			_disposed = false;
		}

		public void CopyTo(TeamInfo instance)
		{
			instance.score = score;
		}

		public TeamInfo Copy()
		{
			TeamInfo teamInfo = Pool.Get<TeamInfo>();
			CopyTo(teamInfo);
			return teamInfo;
		}

		public static TeamInfo Deserialize(Stream stream)
		{
			TeamInfo teamInfo = Pool.Get<TeamInfo>();
			Deserialize(stream, teamInfo, isDelta: false);
			return teamInfo;
		}

		public static TeamInfo DeserializeLengthDelimited(Stream stream)
		{
			TeamInfo teamInfo = Pool.Get<TeamInfo>();
			DeserializeLengthDelimited(stream, teamInfo, isDelta: false);
			return teamInfo;
		}

		public static TeamInfo DeserializeLength(Stream stream, int length)
		{
			TeamInfo teamInfo = Pool.Get<TeamInfo>();
			DeserializeLength(stream, length, teamInfo, isDelta: false);
			return teamInfo;
		}

		public static TeamInfo Deserialize(byte[] buffer)
		{
			TeamInfo teamInfo = Pool.Get<TeamInfo>();
			using MemoryStream stream = new MemoryStream(buffer);
			Deserialize(stream, teamInfo, isDelta: false);
			return teamInfo;
		}

		public void FromProto(Stream stream, bool isDelta = false)
		{
			Deserialize(stream, this, isDelta);
		}

		public virtual void WriteToStream(Stream stream)
		{
			Serialize(stream, this);
		}

		public virtual void WriteToStreamDelta(Stream stream, TeamInfo previous)
		{
			if (previous == null)
			{
				Serialize(stream, this);
			}
			else
			{
				SerializeDelta(stream, this, previous);
			}
		}

		public virtual void ReadFromStream(Stream stream, int size, bool isDelta = false)
		{
			DeserializeLength(stream, size, this, isDelta);
		}

		public static TeamInfo Deserialize(byte[] buffer, TeamInfo instance, bool isDelta = false)
		{
			using MemoryStream stream = new MemoryStream(buffer);
			Deserialize(stream, instance, isDelta);
			return instance;
		}

		public static TeamInfo Deserialize(Stream stream, TeamInfo instance, bool isDelta)
		{
			while (true)
			{
				int num = stream.ReadByte();
				switch (num)
				{
				case 8:
					instance.score = (int)ProtocolParser.ReadUInt64(stream);
					continue;
				case -1:
					return instance;
				}
				Key key = ProtocolParser.ReadKey((byte)num, stream);
				if (key.Field == 0)
				{
					throw new ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
				}
				ProtocolParser.SkipKey(stream, key);
			}
		}

		public static TeamInfo DeserializeLengthDelimited(Stream stream, TeamInfo instance, bool isDelta)
		{
			long num = ProtocolParser.ReadUInt32(stream);
			num += stream.Position;
			while (stream.Position < num)
			{
				int num2 = stream.ReadByte();
				switch (num2)
				{
				case -1:
					throw new EndOfStreamException();
				case 8:
					instance.score = (int)ProtocolParser.ReadUInt64(stream);
					continue;
				}
				Key key = ProtocolParser.ReadKey((byte)num2, stream);
				if (key.Field == 0)
				{
					throw new ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
				}
				ProtocolParser.SkipKey(stream, key);
			}
			if (stream.Position != num)
			{
				throw new ProtocolBufferException("Read past max limit");
			}
			return instance;
		}

		public static TeamInfo DeserializeLength(Stream stream, int length, TeamInfo instance, bool isDelta)
		{
			long num = stream.Position + length;
			while (stream.Position < num)
			{
				int num2 = stream.ReadByte();
				switch (num2)
				{
				case -1:
					throw new EndOfStreamException();
				case 8:
					instance.score = (int)ProtocolParser.ReadUInt64(stream);
					continue;
				}
				Key key = ProtocolParser.ReadKey((byte)num2, stream);
				if (key.Field == 0)
				{
					throw new ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
				}
				ProtocolParser.SkipKey(stream, key);
			}
			if (stream.Position != num)
			{
				throw new ProtocolBufferException("Read past max limit");
			}
			return instance;
		}

		public static void SerializeDelta(Stream stream, TeamInfo instance, TeamInfo previous)
		{
			MemoryStream obj = Pool.Get<MemoryStream>();
			if (instance.score != previous.score)
			{
				stream.WriteByte(8);
				ProtocolParser.WriteUInt64(stream, (ulong)instance.score);
			}
			Pool.FreeUnmanaged(ref obj);
		}

		public static void Serialize(Stream stream, TeamInfo instance)
		{
			MemoryStream obj = Pool.Get<MemoryStream>();
			if (instance.score != 0)
			{
				stream.WriteByte(8);
				ProtocolParser.WriteUInt64(stream, (ulong)instance.score);
			}
			Pool.FreeUnmanaged(ref obj);
		}

		public byte[] ToProtoBytes()
		{
			return SerializeToBytes(this);
		}

		public void ToProto(Stream stream)
		{
			Serialize(stream, this);
		}

		public static byte[] SerializeToBytes(TeamInfo instance)
		{
			using MemoryStream memoryStream = new MemoryStream();
			Serialize(memoryStream, instance);
			return memoryStream.ToArray();
		}

		public static void SerializeLengthDelimited(Stream stream, TeamInfo instance)
		{
			byte[] array = SerializeToBytes(instance);
			ProtocolParser.WriteUInt32(stream, (uint)array.Length);
			stream.Write(array, 0, array.Length);
		}

		public void InspectUids(UidInspector<ulong> action)
		{
		}
	}

	public class ScoreColumn : IDisposable, Pool.IPooled, IProto
	{
		[NonSerialized]
		public string name;

		public bool ShouldPool = true;

		private bool _disposed;

		public static void ResetToPool(ScoreColumn instance)
		{
			if (instance.ShouldPool)
			{
				instance.name = string.Empty;
				Pool.Free(ref instance);
			}
		}

		public void ResetToPool()
		{
			ResetToPool(this);
		}

		public virtual void Dispose()
		{
			if (!ShouldPool)
			{
				throw new Exception("Trying to dispose ScoreColumn with ShouldPool set to false!");
			}
			if (!_disposed)
			{
				ResetToPool();
				_disposed = true;
			}
		}

		public virtual void EnterPool()
		{
			_disposed = true;
		}

		public virtual void LeavePool()
		{
			_disposed = false;
		}

		public void CopyTo(ScoreColumn instance)
		{
			instance.name = name;
		}

		public ScoreColumn Copy()
		{
			ScoreColumn scoreColumn = Pool.Get<ScoreColumn>();
			CopyTo(scoreColumn);
			return scoreColumn;
		}

		public static ScoreColumn Deserialize(Stream stream)
		{
			ScoreColumn scoreColumn = Pool.Get<ScoreColumn>();
			Deserialize(stream, scoreColumn, isDelta: false);
			return scoreColumn;
		}

		public static ScoreColumn DeserializeLengthDelimited(Stream stream)
		{
			ScoreColumn scoreColumn = Pool.Get<ScoreColumn>();
			DeserializeLengthDelimited(stream, scoreColumn, isDelta: false);
			return scoreColumn;
		}

		public static ScoreColumn DeserializeLength(Stream stream, int length)
		{
			ScoreColumn scoreColumn = Pool.Get<ScoreColumn>();
			DeserializeLength(stream, length, scoreColumn, isDelta: false);
			return scoreColumn;
		}

		public static ScoreColumn Deserialize(byte[] buffer)
		{
			ScoreColumn scoreColumn = Pool.Get<ScoreColumn>();
			using MemoryStream stream = new MemoryStream(buffer);
			Deserialize(stream, scoreColumn, isDelta: false);
			return scoreColumn;
		}

		public void FromProto(Stream stream, bool isDelta = false)
		{
			Deserialize(stream, this, isDelta);
		}

		public virtual void WriteToStream(Stream stream)
		{
			Serialize(stream, this);
		}

		public virtual void WriteToStreamDelta(Stream stream, ScoreColumn previous)
		{
			if (previous == null)
			{
				Serialize(stream, this);
			}
			else
			{
				SerializeDelta(stream, this, previous);
			}
		}

		public virtual void ReadFromStream(Stream stream, int size, bool isDelta = false)
		{
			DeserializeLength(stream, size, this, isDelta);
		}

		public static ScoreColumn Deserialize(byte[] buffer, ScoreColumn instance, bool isDelta = false)
		{
			using MemoryStream stream = new MemoryStream(buffer);
			Deserialize(stream, instance, isDelta);
			return instance;
		}

		public static ScoreColumn Deserialize(Stream stream, ScoreColumn instance, bool isDelta)
		{
			while (true)
			{
				int num = stream.ReadByte();
				switch (num)
				{
				case 10:
					instance.name = ProtocolParser.ReadString(stream);
					continue;
				case -1:
					return instance;
				}
				Key key = ProtocolParser.ReadKey((byte)num, stream);
				if (key.Field == 0)
				{
					throw new ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
				}
				ProtocolParser.SkipKey(stream, key);
			}
		}

		public static ScoreColumn DeserializeLengthDelimited(Stream stream, ScoreColumn instance, bool isDelta)
		{
			long num = ProtocolParser.ReadUInt32(stream);
			num += stream.Position;
			while (stream.Position < num)
			{
				int num2 = stream.ReadByte();
				switch (num2)
				{
				case -1:
					throw new EndOfStreamException();
				case 10:
					instance.name = ProtocolParser.ReadString(stream);
					continue;
				}
				Key key = ProtocolParser.ReadKey((byte)num2, stream);
				if (key.Field == 0)
				{
					throw new ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
				}
				ProtocolParser.SkipKey(stream, key);
			}
			if (stream.Position != num)
			{
				throw new ProtocolBufferException("Read past max limit");
			}
			return instance;
		}

		public static ScoreColumn DeserializeLength(Stream stream, int length, ScoreColumn instance, bool isDelta)
		{
			long num = stream.Position + length;
			while (stream.Position < num)
			{
				int num2 = stream.ReadByte();
				switch (num2)
				{
				case -1:
					throw new EndOfStreamException();
				case 10:
					instance.name = ProtocolParser.ReadString(stream);
					continue;
				}
				Key key = ProtocolParser.ReadKey((byte)num2, stream);
				if (key.Field == 0)
				{
					throw new ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
				}
				ProtocolParser.SkipKey(stream, key);
			}
			if (stream.Position != num)
			{
				throw new ProtocolBufferException("Read past max limit");
			}
			return instance;
		}

		public static void SerializeDelta(Stream stream, ScoreColumn instance, ScoreColumn previous)
		{
			MemoryStream obj = Pool.Get<MemoryStream>();
			if (instance.name != previous.name)
			{
				if (instance.name == null)
				{
					throw new ArgumentNullException("name", "Required by proto specification.");
				}
				stream.WriteByte(10);
				ProtocolParser.WriteString(stream, instance.name);
			}
			Pool.FreeUnmanaged(ref obj);
		}

		public static void Serialize(Stream stream, ScoreColumn instance)
		{
			MemoryStream obj = Pool.Get<MemoryStream>();
			if (instance.name == null)
			{
				throw new ArgumentNullException("name", "Required by proto specification.");
			}
			stream.WriteByte(10);
			ProtocolParser.WriteString(stream, instance.name);
			Pool.FreeUnmanaged(ref obj);
		}

		public byte[] ToProtoBytes()
		{
			return SerializeToBytes(this);
		}

		public void ToProto(Stream stream)
		{
			Serialize(stream, this);
		}

		public static byte[] SerializeToBytes(ScoreColumn instance)
		{
			using MemoryStream memoryStream = new MemoryStream();
			Serialize(memoryStream, instance);
			return memoryStream.ToArray();
		}

		public static void SerializeLengthDelimited(Stream stream, ScoreColumn instance)
		{
			byte[] array = SerializeToBytes(instance);
			ProtocolParser.WriteUInt32(stream, (uint)array.Length);
			stream.Write(array, 0, array.Length);
		}

		public void InspectUids(UidInspector<ulong> action)
		{
		}
	}

	public class PlayerScore : IDisposable, Pool.IPooled, IProto
	{
		[NonSerialized]
		public string playerName;

		[NonSerialized]
		public ulong userid;

		[NonSerialized]
		public List<int> scores;

		[NonSerialized]
		public int team;

		public bool ShouldPool = true;

		private bool _disposed;

		public static void ResetToPool(PlayerScore instance)
		{
			if (instance.ShouldPool)
			{
				instance.playerName = string.Empty;
				instance.userid = 0uL;
				if (instance.scores != null)
				{
					List<int> obj = instance.scores;
					Pool.FreeUnmanaged(ref obj);
					instance.scores = obj;
				}
				instance.team = 0;
				Pool.Free(ref instance);
			}
		}

		public void ResetToPool()
		{
			ResetToPool(this);
		}

		public virtual void Dispose()
		{
			if (!ShouldPool)
			{
				throw new Exception("Trying to dispose PlayerScore with ShouldPool set to false!");
			}
			if (!_disposed)
			{
				ResetToPool();
				_disposed = true;
			}
		}

		public virtual void EnterPool()
		{
			_disposed = true;
		}

		public virtual void LeavePool()
		{
			_disposed = false;
		}

		public void CopyTo(PlayerScore instance)
		{
			instance.playerName = playerName;
			instance.userid = userid;
			if (scores != null)
			{
				instance.scores = Pool.Get<List<int>>();
				for (int i = 0; i < scores.Count; i++)
				{
					int item = scores[i];
					instance.scores.Add(item);
				}
			}
			else
			{
				instance.scores = null;
			}
			instance.team = team;
		}

		public PlayerScore Copy()
		{
			PlayerScore playerScore = Pool.Get<PlayerScore>();
			CopyTo(playerScore);
			return playerScore;
		}

		public static PlayerScore Deserialize(Stream stream)
		{
			PlayerScore playerScore = Pool.Get<PlayerScore>();
			Deserialize(stream, playerScore, isDelta: false);
			return playerScore;
		}

		public static PlayerScore DeserializeLengthDelimited(Stream stream)
		{
			PlayerScore playerScore = Pool.Get<PlayerScore>();
			DeserializeLengthDelimited(stream, playerScore, isDelta: false);
			return playerScore;
		}

		public static PlayerScore DeserializeLength(Stream stream, int length)
		{
			PlayerScore playerScore = Pool.Get<PlayerScore>();
			DeserializeLength(stream, length, playerScore, isDelta: false);
			return playerScore;
		}

		public static PlayerScore Deserialize(byte[] buffer)
		{
			PlayerScore playerScore = Pool.Get<PlayerScore>();
			using MemoryStream stream = new MemoryStream(buffer);
			Deserialize(stream, playerScore, isDelta: false);
			return playerScore;
		}

		public void FromProto(Stream stream, bool isDelta = false)
		{
			Deserialize(stream, this, isDelta);
		}

		public virtual void WriteToStream(Stream stream)
		{
			Serialize(stream, this);
		}

		public virtual void WriteToStreamDelta(Stream stream, PlayerScore previous)
		{
			if (previous == null)
			{
				Serialize(stream, this);
			}
			else
			{
				SerializeDelta(stream, this, previous);
			}
		}

		public virtual void ReadFromStream(Stream stream, int size, bool isDelta = false)
		{
			DeserializeLength(stream, size, this, isDelta);
		}

		public static PlayerScore Deserialize(byte[] buffer, PlayerScore instance, bool isDelta = false)
		{
			using MemoryStream stream = new MemoryStream(buffer);
			Deserialize(stream, instance, isDelta);
			return instance;
		}

		public static PlayerScore Deserialize(Stream stream, PlayerScore instance, bool isDelta)
		{
			if (!isDelta && instance.scores == null)
			{
				instance.scores = Pool.Get<List<int>>();
			}
			while (true)
			{
				int num = stream.ReadByte();
				switch (num)
				{
				case 10:
					instance.playerName = ProtocolParser.ReadString(stream);
					continue;
				case 16:
					instance.userid = ProtocolParser.ReadUInt64(stream);
					continue;
				case 24:
					instance.scores.Add((int)ProtocolParser.ReadUInt64(stream));
					continue;
				case 32:
					instance.team = (int)ProtocolParser.ReadUInt64(stream);
					continue;
				case -1:
					return instance;
				}
				Key key = ProtocolParser.ReadKey((byte)num, stream);
				if (key.Field == 0)
				{
					throw new ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
				}
				ProtocolParser.SkipKey(stream, key);
			}
		}

		public static PlayerScore DeserializeLengthDelimited(Stream stream, PlayerScore instance, bool isDelta)
		{
			if (!isDelta && instance.scores == null)
			{
				instance.scores = Pool.Get<List<int>>();
			}
			long num = ProtocolParser.ReadUInt32(stream);
			num += stream.Position;
			while (stream.Position < num)
			{
				int num2 = stream.ReadByte();
				switch (num2)
				{
				case -1:
					throw new EndOfStreamException();
				case 10:
					instance.playerName = ProtocolParser.ReadString(stream);
					continue;
				case 16:
					instance.userid = ProtocolParser.ReadUInt64(stream);
					continue;
				case 24:
					instance.scores.Add((int)ProtocolParser.ReadUInt64(stream));
					continue;
				case 32:
					instance.team = (int)ProtocolParser.ReadUInt64(stream);
					continue;
				}
				Key key = ProtocolParser.ReadKey((byte)num2, stream);
				if (key.Field == 0)
				{
					throw new ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
				}
				ProtocolParser.SkipKey(stream, key);
			}
			if (stream.Position != num)
			{
				throw new ProtocolBufferException("Read past max limit");
			}
			return instance;
		}

		public static PlayerScore DeserializeLength(Stream stream, int length, PlayerScore instance, bool isDelta)
		{
			if (!isDelta && instance.scores == null)
			{
				instance.scores = Pool.Get<List<int>>();
			}
			long num = stream.Position + length;
			while (stream.Position < num)
			{
				int num2 = stream.ReadByte();
				switch (num2)
				{
				case -1:
					throw new EndOfStreamException();
				case 10:
					instance.playerName = ProtocolParser.ReadString(stream);
					continue;
				case 16:
					instance.userid = ProtocolParser.ReadUInt64(stream);
					continue;
				case 24:
					instance.scores.Add((int)ProtocolParser.ReadUInt64(stream));
					continue;
				case 32:
					instance.team = (int)ProtocolParser.ReadUInt64(stream);
					continue;
				}
				Key key = ProtocolParser.ReadKey((byte)num2, stream);
				if (key.Field == 0)
				{
					throw new ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
				}
				ProtocolParser.SkipKey(stream, key);
			}
			if (stream.Position != num)
			{
				throw new ProtocolBufferException("Read past max limit");
			}
			return instance;
		}

		public static void SerializeDelta(Stream stream, PlayerScore instance, PlayerScore previous)
		{
			MemoryStream obj = Pool.Get<MemoryStream>();
			if (instance.playerName != previous.playerName)
			{
				if (instance.playerName == null)
				{
					throw new ArgumentNullException("playerName", "Required by proto specification.");
				}
				stream.WriteByte(10);
				ProtocolParser.WriteString(stream, instance.playerName);
			}
			if (instance.userid != previous.userid)
			{
				stream.WriteByte(16);
				ProtocolParser.WriteUInt64(stream, instance.userid);
			}
			if (instance.scores != null)
			{
				for (int i = 0; i < instance.scores.Count; i++)
				{
					int num = instance.scores[i];
					stream.WriteByte(24);
					ProtocolParser.WriteUInt64(stream, (ulong)num);
				}
			}
			if (instance.team != previous.team)
			{
				stream.WriteByte(32);
				ProtocolParser.WriteUInt64(stream, (ulong)instance.team);
			}
			Pool.FreeUnmanaged(ref obj);
		}

		public static void Serialize(Stream stream, PlayerScore instance)
		{
			MemoryStream obj = Pool.Get<MemoryStream>();
			if (instance.playerName == null)
			{
				throw new ArgumentNullException("playerName", "Required by proto specification.");
			}
			stream.WriteByte(10);
			ProtocolParser.WriteString(stream, instance.playerName);
			if (instance.userid != 0L)
			{
				stream.WriteByte(16);
				ProtocolParser.WriteUInt64(stream, instance.userid);
			}
			if (instance.scores != null)
			{
				for (int i = 0; i < instance.scores.Count; i++)
				{
					int num = instance.scores[i];
					stream.WriteByte(24);
					ProtocolParser.WriteUInt64(stream, (ulong)num);
				}
			}
			if (instance.team != 0)
			{
				stream.WriteByte(32);
				ProtocolParser.WriteUInt64(stream, (ulong)instance.team);
			}
			Pool.FreeUnmanaged(ref obj);
		}

		public byte[] ToProtoBytes()
		{
			return SerializeToBytes(this);
		}

		public void ToProto(Stream stream)
		{
			Serialize(stream, this);
		}

		public static byte[] SerializeToBytes(PlayerScore instance)
		{
			using MemoryStream memoryStream = new MemoryStream();
			Serialize(memoryStream, instance);
			return memoryStream.ToArray();
		}

		public static void SerializeLengthDelimited(Stream stream, PlayerScore instance)
		{
			byte[] array = SerializeToBytes(instance);
			ProtocolParser.WriteUInt32(stream, (uint)array.Length);
			stream.Write(array, 0, array.Length);
		}

		public void InspectUids(UidInspector<ulong> action)
		{
		}
	}

	[NonSerialized]
	public List<TeamInfo> teams;

	[NonSerialized]
	public List<ScoreColumn> scoreColumns;

	[NonSerialized]
	public List<PlayerScore> playerScores;

	public bool ShouldPool = true;

	private bool _disposed;

	public static void ResetToPool(GameMode instance)
	{
		if (!instance.ShouldPool)
		{
			return;
		}
		if (instance.teams != null)
		{
			for (int i = 0; i < instance.teams.Count; i++)
			{
				if (instance.teams[i] != null)
				{
					instance.teams[i].ResetToPool();
					instance.teams[i] = null;
				}
			}
			List<TeamInfo> obj = instance.teams;
			Pool.Free(ref obj, freeElements: false);
			instance.teams = obj;
		}
		if (instance.scoreColumns != null)
		{
			for (int j = 0; j < instance.scoreColumns.Count; j++)
			{
				if (instance.scoreColumns[j] != null)
				{
					instance.scoreColumns[j].ResetToPool();
					instance.scoreColumns[j] = null;
				}
			}
			List<ScoreColumn> obj2 = instance.scoreColumns;
			Pool.Free(ref obj2, freeElements: false);
			instance.scoreColumns = obj2;
		}
		if (instance.playerScores != null)
		{
			for (int k = 0; k < instance.playerScores.Count; k++)
			{
				if (instance.playerScores[k] != null)
				{
					instance.playerScores[k].ResetToPool();
					instance.playerScores[k] = null;
				}
			}
			List<PlayerScore> obj3 = instance.playerScores;
			Pool.Free(ref obj3, freeElements: false);
			instance.playerScores = obj3;
		}
		Pool.Free(ref instance);
	}

	public void ResetToPool()
	{
		ResetToPool(this);
	}

	public virtual void Dispose()
	{
		if (!ShouldPool)
		{
			throw new Exception("Trying to dispose GameMode with ShouldPool set to false!");
		}
		if (!_disposed)
		{
			ResetToPool();
			_disposed = true;
		}
	}

	public virtual void EnterPool()
	{
		_disposed = true;
	}

	public virtual void LeavePool()
	{
		_disposed = false;
	}

	public void CopyTo(GameMode instance)
	{
		if (teams != null)
		{
			instance.teams = Pool.Get<List<TeamInfo>>();
			for (int i = 0; i < teams.Count; i++)
			{
				TeamInfo item = teams[i].Copy();
				instance.teams.Add(item);
			}
		}
		else
		{
			instance.teams = null;
		}
		if (scoreColumns != null)
		{
			instance.scoreColumns = Pool.Get<List<ScoreColumn>>();
			for (int j = 0; j < scoreColumns.Count; j++)
			{
				ScoreColumn item2 = scoreColumns[j].Copy();
				instance.scoreColumns.Add(item2);
			}
		}
		else
		{
			instance.scoreColumns = null;
		}
		if (playerScores != null)
		{
			instance.playerScores = Pool.Get<List<PlayerScore>>();
			for (int k = 0; k < playerScores.Count; k++)
			{
				PlayerScore item3 = playerScores[k].Copy();
				instance.playerScores.Add(item3);
			}
		}
		else
		{
			instance.playerScores = null;
		}
	}

	public GameMode Copy()
	{
		GameMode gameMode = Pool.Get<GameMode>();
		CopyTo(gameMode);
		return gameMode;
	}

	public static GameMode Deserialize(Stream stream)
	{
		GameMode gameMode = Pool.Get<GameMode>();
		Deserialize(stream, gameMode, isDelta: false);
		return gameMode;
	}

	public static GameMode DeserializeLengthDelimited(Stream stream)
	{
		GameMode gameMode = Pool.Get<GameMode>();
		DeserializeLengthDelimited(stream, gameMode, isDelta: false);
		return gameMode;
	}

	public static GameMode DeserializeLength(Stream stream, int length)
	{
		GameMode gameMode = Pool.Get<GameMode>();
		DeserializeLength(stream, length, gameMode, isDelta: false);
		return gameMode;
	}

	public static GameMode Deserialize(byte[] buffer)
	{
		GameMode gameMode = Pool.Get<GameMode>();
		using MemoryStream stream = new MemoryStream(buffer);
		Deserialize(stream, gameMode, isDelta: false);
		return gameMode;
	}

	public void FromProto(Stream stream, bool isDelta = false)
	{
		Deserialize(stream, this, isDelta);
	}

	public virtual void WriteToStream(Stream stream)
	{
		Serialize(stream, this);
	}

	public virtual void WriteToStreamDelta(Stream stream, GameMode previous)
	{
		if (previous == null)
		{
			Serialize(stream, this);
		}
		else
		{
			SerializeDelta(stream, this, previous);
		}
	}

	public virtual void ReadFromStream(Stream stream, int size, bool isDelta = false)
	{
		DeserializeLength(stream, size, this, isDelta);
	}

	public static GameMode Deserialize(byte[] buffer, GameMode instance, bool isDelta = false)
	{
		using MemoryStream stream = new MemoryStream(buffer);
		Deserialize(stream, instance, isDelta);
		return instance;
	}

	public static GameMode Deserialize(Stream stream, GameMode instance, bool isDelta)
	{
		if (!isDelta)
		{
			if (instance.teams == null)
			{
				instance.teams = Pool.Get<List<TeamInfo>>();
			}
			if (instance.scoreColumns == null)
			{
				instance.scoreColumns = Pool.Get<List<ScoreColumn>>();
			}
			if (instance.playerScores == null)
			{
				instance.playerScores = Pool.Get<List<PlayerScore>>();
			}
		}
		while (true)
		{
			int num = stream.ReadByte();
			switch (num)
			{
			case 10:
				instance.teams.Add(TeamInfo.DeserializeLengthDelimited(stream));
				continue;
			case 18:
				instance.scoreColumns.Add(ScoreColumn.DeserializeLengthDelimited(stream));
				continue;
			case 26:
				instance.playerScores.Add(PlayerScore.DeserializeLengthDelimited(stream));
				continue;
			case -1:
				return instance;
			}
			Key key = ProtocolParser.ReadKey((byte)num, stream);
			if (key.Field == 0)
			{
				throw new ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
			}
			ProtocolParser.SkipKey(stream, key);
		}
	}

	public static GameMode DeserializeLengthDelimited(Stream stream, GameMode instance, bool isDelta)
	{
		if (!isDelta)
		{
			if (instance.teams == null)
			{
				instance.teams = Pool.Get<List<TeamInfo>>();
			}
			if (instance.scoreColumns == null)
			{
				instance.scoreColumns = Pool.Get<List<ScoreColumn>>();
			}
			if (instance.playerScores == null)
			{
				instance.playerScores = Pool.Get<List<PlayerScore>>();
			}
		}
		long num = ProtocolParser.ReadUInt32(stream);
		num += stream.Position;
		while (stream.Position < num)
		{
			int num2 = stream.ReadByte();
			switch (num2)
			{
			case -1:
				throw new EndOfStreamException();
			case 10:
				instance.teams.Add(TeamInfo.DeserializeLengthDelimited(stream));
				continue;
			case 18:
				instance.scoreColumns.Add(ScoreColumn.DeserializeLengthDelimited(stream));
				continue;
			case 26:
				instance.playerScores.Add(PlayerScore.DeserializeLengthDelimited(stream));
				continue;
			}
			Key key = ProtocolParser.ReadKey((byte)num2, stream);
			if (key.Field == 0)
			{
				throw new ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
			}
			ProtocolParser.SkipKey(stream, key);
		}
		if (stream.Position != num)
		{
			throw new ProtocolBufferException("Read past max limit");
		}
		return instance;
	}

	public static GameMode DeserializeLength(Stream stream, int length, GameMode instance, bool isDelta)
	{
		if (!isDelta)
		{
			if (instance.teams == null)
			{
				instance.teams = Pool.Get<List<TeamInfo>>();
			}
			if (instance.scoreColumns == null)
			{
				instance.scoreColumns = Pool.Get<List<ScoreColumn>>();
			}
			if (instance.playerScores == null)
			{
				instance.playerScores = Pool.Get<List<PlayerScore>>();
			}
		}
		long num = stream.Position + length;
		while (stream.Position < num)
		{
			int num2 = stream.ReadByte();
			switch (num2)
			{
			case -1:
				throw new EndOfStreamException();
			case 10:
				instance.teams.Add(TeamInfo.DeserializeLengthDelimited(stream));
				continue;
			case 18:
				instance.scoreColumns.Add(ScoreColumn.DeserializeLengthDelimited(stream));
				continue;
			case 26:
				instance.playerScores.Add(PlayerScore.DeserializeLengthDelimited(stream));
				continue;
			}
			Key key = ProtocolParser.ReadKey((byte)num2, stream);
			if (key.Field == 0)
			{
				throw new ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
			}
			ProtocolParser.SkipKey(stream, key);
		}
		if (stream.Position != num)
		{
			throw new ProtocolBufferException("Read past max limit");
		}
		return instance;
	}

	public static void SerializeDelta(Stream stream, GameMode instance, GameMode previous)
	{
		MemoryStream obj = Pool.Get<MemoryStream>();
		if (instance.teams != null)
		{
			for (int i = 0; i < instance.teams.Count; i++)
			{
				TeamInfo teamInfo = instance.teams[i];
				stream.WriteByte(10);
				obj.SetLength(0L);
				TeamInfo.SerializeDelta(obj, teamInfo, teamInfo);
				uint num = (uint)obj.Length;
				ProtocolParser.WriteUInt32(stream, num);
				stream.Write(obj.GetBuffer(), 0, (int)num);
			}
		}
		if (instance.scoreColumns != null)
		{
			for (int j = 0; j < instance.scoreColumns.Count; j++)
			{
				ScoreColumn scoreColumn = instance.scoreColumns[j];
				stream.WriteByte(18);
				obj.SetLength(0L);
				ScoreColumn.SerializeDelta(obj, scoreColumn, scoreColumn);
				uint num2 = (uint)obj.Length;
				ProtocolParser.WriteUInt32(stream, num2);
				stream.Write(obj.GetBuffer(), 0, (int)num2);
			}
		}
		if (instance.playerScores != null)
		{
			for (int k = 0; k < instance.playerScores.Count; k++)
			{
				PlayerScore playerScore = instance.playerScores[k];
				stream.WriteByte(26);
				obj.SetLength(0L);
				PlayerScore.SerializeDelta(obj, playerScore, playerScore);
				uint num3 = (uint)obj.Length;
				ProtocolParser.WriteUInt32(stream, num3);
				stream.Write(obj.GetBuffer(), 0, (int)num3);
			}
		}
		Pool.FreeUnmanaged(ref obj);
	}

	public static void Serialize(Stream stream, GameMode instance)
	{
		MemoryStream obj = Pool.Get<MemoryStream>();
		if (instance.teams != null)
		{
			for (int i = 0; i < instance.teams.Count; i++)
			{
				TeamInfo instance2 = instance.teams[i];
				stream.WriteByte(10);
				obj.SetLength(0L);
				TeamInfo.Serialize(obj, instance2);
				uint num = (uint)obj.Length;
				ProtocolParser.WriteUInt32(stream, num);
				stream.Write(obj.GetBuffer(), 0, (int)num);
			}
		}
		if (instance.scoreColumns != null)
		{
			for (int j = 0; j < instance.scoreColumns.Count; j++)
			{
				ScoreColumn instance3 = instance.scoreColumns[j];
				stream.WriteByte(18);
				obj.SetLength(0L);
				ScoreColumn.Serialize(obj, instance3);
				uint num2 = (uint)obj.Length;
				ProtocolParser.WriteUInt32(stream, num2);
				stream.Write(obj.GetBuffer(), 0, (int)num2);
			}
		}
		if (instance.playerScores != null)
		{
			for (int k = 0; k < instance.playerScores.Count; k++)
			{
				PlayerScore instance4 = instance.playerScores[k];
				stream.WriteByte(26);
				obj.SetLength(0L);
				PlayerScore.Serialize(obj, instance4);
				uint num3 = (uint)obj.Length;
				ProtocolParser.WriteUInt32(stream, num3);
				stream.Write(obj.GetBuffer(), 0, (int)num3);
			}
		}
		Pool.FreeUnmanaged(ref obj);
	}

	public byte[] ToProtoBytes()
	{
		return SerializeToBytes(this);
	}

	public void ToProto(Stream stream)
	{
		Serialize(stream, this);
	}

	public static byte[] SerializeToBytes(GameMode instance)
	{
		using MemoryStream memoryStream = new MemoryStream();
		Serialize(memoryStream, instance);
		return memoryStream.ToArray();
	}

	public static void SerializeLengthDelimited(Stream stream, GameMode instance)
	{
		byte[] array = SerializeToBytes(instance);
		ProtocolParser.WriteUInt32(stream, (uint)array.Length);
		stream.Write(array, 0, array.Length);
	}

	public void InspectUids(UidInspector<ulong> action)
	{
		if (teams != null)
		{
			for (int i = 0; i < teams.Count; i++)
			{
				teams[i]?.InspectUids(action);
			}
		}
		if (scoreColumns != null)
		{
			for (int j = 0; j < scoreColumns.Count; j++)
			{
				scoreColumns[j]?.InspectUids(action);
			}
		}
		if (playerScores != null)
		{
			for (int k = 0; k < playerScores.Count; k++)
			{
				playerScores[k]?.InspectUids(action);
			}
		}
	}
}
