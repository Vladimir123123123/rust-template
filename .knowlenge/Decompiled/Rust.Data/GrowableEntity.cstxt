using System;
using System.IO;
using Facepunch;
using ProtoBuf;
using SilentOrbit.ProtocolBuffers;

public class GrowableEntity : IDisposable, Pool.IPooled, IProto
{
	[NonSerialized]
	public int state;

	[NonSerialized]
	public float age;

	[NonSerialized]
	public int water;

	[NonSerialized]
	public float healthy;

	[NonSerialized]
	public float totalAge;

	[NonSerialized]
	public float growthAge;

	[NonSerialized]
	public float yieldFraction;

	[NonSerialized]
	public float stageAge;

	[NonSerialized]
	public int genes;

	[NonSerialized]
	public float lightModifier;

	[NonSerialized]
	public float waterModifier;

	[NonSerialized]
	public float groundModifier;

	[NonSerialized]
	public float happiness;

	[NonSerialized]
	public float temperatureModifier;

	[NonSerialized]
	public float waterConsumption;

	[NonSerialized]
	public float yieldPool;

	[NonSerialized]
	public bool fertilized;

	[NonSerialized]
	public int previousGenes;

	public bool ShouldPool = true;

	private bool _disposed;

	public static void ResetToPool(GrowableEntity instance)
	{
		if (instance.ShouldPool)
		{
			instance.state = 0;
			instance.age = 0f;
			instance.water = 0;
			instance.healthy = 0f;
			instance.totalAge = 0f;
			instance.growthAge = 0f;
			instance.yieldFraction = 0f;
			instance.stageAge = 0f;
			instance.genes = 0;
			instance.lightModifier = 0f;
			instance.waterModifier = 0f;
			instance.groundModifier = 0f;
			instance.happiness = 0f;
			instance.temperatureModifier = 0f;
			instance.waterConsumption = 0f;
			instance.yieldPool = 0f;
			instance.fertilized = false;
			instance.previousGenes = 0;
			Pool.Free(ref instance);
		}
	}

	public void ResetToPool()
	{
		ResetToPool(this);
	}

	public virtual void Dispose()
	{
		if (!ShouldPool)
		{
			throw new Exception("Trying to dispose GrowableEntity with ShouldPool set to false!");
		}
		if (!_disposed)
		{
			ResetToPool();
			_disposed = true;
		}
	}

	public virtual void EnterPool()
	{
		_disposed = true;
	}

	public virtual void LeavePool()
	{
		_disposed = false;
	}

	public void CopyTo(GrowableEntity instance)
	{
		instance.state = state;
		instance.age = age;
		instance.water = water;
		instance.healthy = healthy;
		instance.totalAge = totalAge;
		instance.growthAge = growthAge;
		instance.yieldFraction = yieldFraction;
		instance.stageAge = stageAge;
		instance.genes = genes;
		instance.lightModifier = lightModifier;
		instance.waterModifier = waterModifier;
		instance.groundModifier = groundModifier;
		instance.happiness = happiness;
		instance.temperatureModifier = temperatureModifier;
		instance.waterConsumption = waterConsumption;
		instance.yieldPool = yieldPool;
		instance.fertilized = fertilized;
		instance.previousGenes = previousGenes;
	}

	public GrowableEntity Copy()
	{
		GrowableEntity growableEntity = Pool.Get<GrowableEntity>();
		CopyTo(growableEntity);
		return growableEntity;
	}

	public static GrowableEntity Deserialize(Stream stream)
	{
		GrowableEntity growableEntity = Pool.Get<GrowableEntity>();
		Deserialize(stream, growableEntity, isDelta: false);
		return growableEntity;
	}

	public static GrowableEntity DeserializeLengthDelimited(Stream stream)
	{
		GrowableEntity growableEntity = Pool.Get<GrowableEntity>();
		DeserializeLengthDelimited(stream, growableEntity, isDelta: false);
		return growableEntity;
	}

	public static GrowableEntity DeserializeLength(Stream stream, int length)
	{
		GrowableEntity growableEntity = Pool.Get<GrowableEntity>();
		DeserializeLength(stream, length, growableEntity, isDelta: false);
		return growableEntity;
	}

	public static GrowableEntity Deserialize(byte[] buffer)
	{
		GrowableEntity growableEntity = Pool.Get<GrowableEntity>();
		using MemoryStream stream = new MemoryStream(buffer);
		Deserialize(stream, growableEntity, isDelta: false);
		return growableEntity;
	}

	public void FromProto(Stream stream, bool isDelta = false)
	{
		Deserialize(stream, this, isDelta);
	}

	public virtual void WriteToStream(Stream stream)
	{
		Serialize(stream, this);
	}

	public virtual void WriteToStreamDelta(Stream stream, GrowableEntity previous)
	{
		if (previous == null)
		{
			Serialize(stream, this);
		}
		else
		{
			SerializeDelta(stream, this, previous);
		}
	}

	public virtual void ReadFromStream(Stream stream, int size, bool isDelta = false)
	{
		DeserializeLength(stream, size, this, isDelta);
	}

	public static GrowableEntity Deserialize(byte[] buffer, GrowableEntity instance, bool isDelta = false)
	{
		using MemoryStream stream = new MemoryStream(buffer);
		Deserialize(stream, instance, isDelta);
		return instance;
	}

	public static GrowableEntity Deserialize(Stream stream, GrowableEntity instance, bool isDelta)
	{
		while (true)
		{
			int num = stream.ReadByte();
			switch (num)
			{
			case 8:
				instance.state = (int)ProtocolParser.ReadUInt64(stream);
				continue;
			case 21:
				instance.age = ProtocolParser.ReadSingle(stream);
				continue;
			case 24:
				instance.water = (int)ProtocolParser.ReadUInt64(stream);
				continue;
			case 37:
				instance.healthy = ProtocolParser.ReadSingle(stream);
				continue;
			case 45:
				instance.totalAge = ProtocolParser.ReadSingle(stream);
				continue;
			case 53:
				instance.growthAge = ProtocolParser.ReadSingle(stream);
				continue;
			case 61:
				instance.yieldFraction = ProtocolParser.ReadSingle(stream);
				continue;
			case 69:
				instance.stageAge = ProtocolParser.ReadSingle(stream);
				continue;
			case 72:
				instance.genes = (int)ProtocolParser.ReadUInt64(stream);
				continue;
			case 85:
				instance.lightModifier = ProtocolParser.ReadSingle(stream);
				continue;
			case 93:
				instance.waterModifier = ProtocolParser.ReadSingle(stream);
				continue;
			case 101:
				instance.groundModifier = ProtocolParser.ReadSingle(stream);
				continue;
			case 109:
				instance.happiness = ProtocolParser.ReadSingle(stream);
				continue;
			case 117:
				instance.temperatureModifier = ProtocolParser.ReadSingle(stream);
				continue;
			case 125:
				instance.waterConsumption = ProtocolParser.ReadSingle(stream);
				continue;
			case -1:
				return instance;
			}
			Key key = ProtocolParser.ReadKey((byte)num, stream);
			switch (key.Field)
			{
			case 0u:
				throw new ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
			case 16u:
				if (key.WireType == Wire.Fixed32)
				{
					instance.yieldPool = ProtocolParser.ReadSingle(stream);
				}
				break;
			case 17u:
				if (key.WireType == Wire.Varint)
				{
					instance.fertilized = ProtocolParser.ReadBool(stream);
				}
				break;
			case 18u:
				if (key.WireType == Wire.Varint)
				{
					instance.previousGenes = (int)ProtocolParser.ReadUInt64(stream);
				}
				break;
			default:
				ProtocolParser.SkipKey(stream, key);
				break;
			}
		}
	}

	public static GrowableEntity DeserializeLengthDelimited(Stream stream, GrowableEntity instance, bool isDelta)
	{
		long num = ProtocolParser.ReadUInt32(stream);
		num += stream.Position;
		while (stream.Position < num)
		{
			int num2 = stream.ReadByte();
			switch (num2)
			{
			case -1:
				throw new EndOfStreamException();
			case 8:
				instance.state = (int)ProtocolParser.ReadUInt64(stream);
				continue;
			case 21:
				instance.age = ProtocolParser.ReadSingle(stream);
				continue;
			case 24:
				instance.water = (int)ProtocolParser.ReadUInt64(stream);
				continue;
			case 37:
				instance.healthy = ProtocolParser.ReadSingle(stream);
				continue;
			case 45:
				instance.totalAge = ProtocolParser.ReadSingle(stream);
				continue;
			case 53:
				instance.growthAge = ProtocolParser.ReadSingle(stream);
				continue;
			case 61:
				instance.yieldFraction = ProtocolParser.ReadSingle(stream);
				continue;
			case 69:
				instance.stageAge = ProtocolParser.ReadSingle(stream);
				continue;
			case 72:
				instance.genes = (int)ProtocolParser.ReadUInt64(stream);
				continue;
			case 85:
				instance.lightModifier = ProtocolParser.ReadSingle(stream);
				continue;
			case 93:
				instance.waterModifier = ProtocolParser.ReadSingle(stream);
				continue;
			case 101:
				instance.groundModifier = ProtocolParser.ReadSingle(stream);
				continue;
			case 109:
				instance.happiness = ProtocolParser.ReadSingle(stream);
				continue;
			case 117:
				instance.temperatureModifier = ProtocolParser.ReadSingle(stream);
				continue;
			case 125:
				instance.waterConsumption = ProtocolParser.ReadSingle(stream);
				continue;
			}
			Key key = ProtocolParser.ReadKey((byte)num2, stream);
			switch (key.Field)
			{
			case 0u:
				throw new ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
			case 16u:
				if (key.WireType == Wire.Fixed32)
				{
					instance.yieldPool = ProtocolParser.ReadSingle(stream);
				}
				break;
			case 17u:
				if (key.WireType == Wire.Varint)
				{
					instance.fertilized = ProtocolParser.ReadBool(stream);
				}
				break;
			case 18u:
				if (key.WireType == Wire.Varint)
				{
					instance.previousGenes = (int)ProtocolParser.ReadUInt64(stream);
				}
				break;
			default:
				ProtocolParser.SkipKey(stream, key);
				break;
			}
		}
		if (stream.Position != num)
		{
			throw new ProtocolBufferException("Read past max limit");
		}
		return instance;
	}

	public static GrowableEntity DeserializeLength(Stream stream, int length, GrowableEntity instance, bool isDelta)
	{
		long num = stream.Position + length;
		while (stream.Position < num)
		{
			int num2 = stream.ReadByte();
			switch (num2)
			{
			case -1:
				throw new EndOfStreamException();
			case 8:
				instance.state = (int)ProtocolParser.ReadUInt64(stream);
				continue;
			case 21:
				instance.age = ProtocolParser.ReadSingle(stream);
				continue;
			case 24:
				instance.water = (int)ProtocolParser.ReadUInt64(stream);
				continue;
			case 37:
				instance.healthy = ProtocolParser.ReadSingle(stream);
				continue;
			case 45:
				instance.totalAge = ProtocolParser.ReadSingle(stream);
				continue;
			case 53:
				instance.growthAge = ProtocolParser.ReadSingle(stream);
				continue;
			case 61:
				instance.yieldFraction = ProtocolParser.ReadSingle(stream);
				continue;
			case 69:
				instance.stageAge = ProtocolParser.ReadSingle(stream);
				continue;
			case 72:
				instance.genes = (int)ProtocolParser.ReadUInt64(stream);
				continue;
			case 85:
				instance.lightModifier = ProtocolParser.ReadSingle(stream);
				continue;
			case 93:
				instance.waterModifier = ProtocolParser.ReadSingle(stream);
				continue;
			case 101:
				instance.groundModifier = ProtocolParser.ReadSingle(stream);
				continue;
			case 109:
				instance.happiness = ProtocolParser.ReadSingle(stream);
				continue;
			case 117:
				instance.temperatureModifier = ProtocolParser.ReadSingle(stream);
				continue;
			case 125:
				instance.waterConsumption = ProtocolParser.ReadSingle(stream);
				continue;
			}
			Key key = ProtocolParser.ReadKey((byte)num2, stream);
			switch (key.Field)
			{
			case 0u:
				throw new ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
			case 16u:
				if (key.WireType == Wire.Fixed32)
				{
					instance.yieldPool = ProtocolParser.ReadSingle(stream);
				}
				break;
			case 17u:
				if (key.WireType == Wire.Varint)
				{
					instance.fertilized = ProtocolParser.ReadBool(stream);
				}
				break;
			case 18u:
				if (key.WireType == Wire.Varint)
				{
					instance.previousGenes = (int)ProtocolParser.ReadUInt64(stream);
				}
				break;
			default:
				ProtocolParser.SkipKey(stream, key);
				break;
			}
		}
		if (stream.Position != num)
		{
			throw new ProtocolBufferException("Read past max limit");
		}
		return instance;
	}

	public static void SerializeDelta(Stream stream, GrowableEntity instance, GrowableEntity previous)
	{
		MemoryStream obj = Pool.Get<MemoryStream>();
		if (instance.state != previous.state)
		{
			stream.WriteByte(8);
			ProtocolParser.WriteUInt64(stream, (ulong)instance.state);
		}
		if (instance.age != previous.age)
		{
			stream.WriteByte(21);
			ProtocolParser.WriteSingle(stream, instance.age);
		}
		if (instance.water != previous.water)
		{
			stream.WriteByte(24);
			ProtocolParser.WriteUInt64(stream, (ulong)instance.water);
		}
		if (instance.healthy != previous.healthy)
		{
			stream.WriteByte(37);
			ProtocolParser.WriteSingle(stream, instance.healthy);
		}
		if (instance.totalAge != previous.totalAge)
		{
			stream.WriteByte(45);
			ProtocolParser.WriteSingle(stream, instance.totalAge);
		}
		if (instance.growthAge != previous.growthAge)
		{
			stream.WriteByte(53);
			ProtocolParser.WriteSingle(stream, instance.growthAge);
		}
		if (instance.yieldFraction != previous.yieldFraction)
		{
			stream.WriteByte(61);
			ProtocolParser.WriteSingle(stream, instance.yieldFraction);
		}
		if (instance.stageAge != previous.stageAge)
		{
			stream.WriteByte(69);
			ProtocolParser.WriteSingle(stream, instance.stageAge);
		}
		if (instance.genes != previous.genes)
		{
			stream.WriteByte(72);
			ProtocolParser.WriteUInt64(stream, (ulong)instance.genes);
		}
		if (instance.lightModifier != previous.lightModifier)
		{
			stream.WriteByte(85);
			ProtocolParser.WriteSingle(stream, instance.lightModifier);
		}
		if (instance.waterModifier != previous.waterModifier)
		{
			stream.WriteByte(93);
			ProtocolParser.WriteSingle(stream, instance.waterModifier);
		}
		if (instance.groundModifier != previous.groundModifier)
		{
			stream.WriteByte(101);
			ProtocolParser.WriteSingle(stream, instance.groundModifier);
		}
		if (instance.happiness != previous.happiness)
		{
			stream.WriteByte(109);
			ProtocolParser.WriteSingle(stream, instance.happiness);
		}
		if (instance.temperatureModifier != previous.temperatureModifier)
		{
			stream.WriteByte(117);
			ProtocolParser.WriteSingle(stream, instance.temperatureModifier);
		}
		if (instance.waterConsumption != previous.waterConsumption)
		{
			stream.WriteByte(125);
			ProtocolParser.WriteSingle(stream, instance.waterConsumption);
		}
		if (instance.yieldPool != previous.yieldPool)
		{
			stream.WriteByte(133);
			stream.WriteByte(1);
			ProtocolParser.WriteSingle(stream, instance.yieldPool);
		}
		stream.WriteByte(136);
		stream.WriteByte(1);
		ProtocolParser.WriteBool(stream, instance.fertilized);
		if (instance.previousGenes != previous.previousGenes)
		{
			stream.WriteByte(144);
			stream.WriteByte(1);
			ProtocolParser.WriteUInt64(stream, (ulong)instance.previousGenes);
		}
		Pool.FreeUnmanaged(ref obj);
	}

	public static void Serialize(Stream stream, GrowableEntity instance)
	{
		MemoryStream obj = Pool.Get<MemoryStream>();
		if (instance.state != 0)
		{
			stream.WriteByte(8);
			ProtocolParser.WriteUInt64(stream, (ulong)instance.state);
		}
		if (instance.age != 0f)
		{
			stream.WriteByte(21);
			ProtocolParser.WriteSingle(stream, instance.age);
		}
		if (instance.water != 0)
		{
			stream.WriteByte(24);
			ProtocolParser.WriteUInt64(stream, (ulong)instance.water);
		}
		if (instance.healthy != 0f)
		{
			stream.WriteByte(37);
			ProtocolParser.WriteSingle(stream, instance.healthy);
		}
		if (instance.totalAge != 0f)
		{
			stream.WriteByte(45);
			ProtocolParser.WriteSingle(stream, instance.totalAge);
		}
		if (instance.growthAge != 0f)
		{
			stream.WriteByte(53);
			ProtocolParser.WriteSingle(stream, instance.growthAge);
		}
		if (instance.yieldFraction != 0f)
		{
			stream.WriteByte(61);
			ProtocolParser.WriteSingle(stream, instance.yieldFraction);
		}
		if (instance.stageAge != 0f)
		{
			stream.WriteByte(69);
			ProtocolParser.WriteSingle(stream, instance.stageAge);
		}
		if (instance.genes != 0)
		{
			stream.WriteByte(72);
			ProtocolParser.WriteUInt64(stream, (ulong)instance.genes);
		}
		if (instance.lightModifier != 0f)
		{
			stream.WriteByte(85);
			ProtocolParser.WriteSingle(stream, instance.lightModifier);
		}
		if (instance.waterModifier != 0f)
		{
			stream.WriteByte(93);
			ProtocolParser.WriteSingle(stream, instance.waterModifier);
		}
		if (instance.groundModifier != 0f)
		{
			stream.WriteByte(101);
			ProtocolParser.WriteSingle(stream, instance.groundModifier);
		}
		if (instance.happiness != 0f)
		{
			stream.WriteByte(109);
			ProtocolParser.WriteSingle(stream, instance.happiness);
		}
		if (instance.temperatureModifier != 0f)
		{
			stream.WriteByte(117);
			ProtocolParser.WriteSingle(stream, instance.temperatureModifier);
		}
		if (instance.waterConsumption != 0f)
		{
			stream.WriteByte(125);
			ProtocolParser.WriteSingle(stream, instance.waterConsumption);
		}
		if (instance.yieldPool != 0f)
		{
			stream.WriteByte(133);
			stream.WriteByte(1);
			ProtocolParser.WriteSingle(stream, instance.yieldPool);
		}
		if (instance.fertilized)
		{
			stream.WriteByte(136);
			stream.WriteByte(1);
			ProtocolParser.WriteBool(stream, instance.fertilized);
		}
		if (instance.previousGenes != 0)
		{
			stream.WriteByte(144);
			stream.WriteByte(1);
			ProtocolParser.WriteUInt64(stream, (ulong)instance.previousGenes);
		}
		Pool.FreeUnmanaged(ref obj);
	}

	public byte[] ToProtoBytes()
	{
		return SerializeToBytes(this);
	}

	public void ToProto(Stream stream)
	{
		Serialize(stream, this);
	}

	public static byte[] SerializeToBytes(GrowableEntity instance)
	{
		using MemoryStream memoryStream = new MemoryStream();
		Serialize(memoryStream, instance);
		return memoryStream.ToArray();
	}

	public static void SerializeLengthDelimited(Stream stream, GrowableEntity instance)
	{
		byte[] array = SerializeToBytes(instance);
		ProtocolParser.WriteUInt32(stream, (uint)array.Length);
		stream.Write(array, 0, array.Length);
	}

	public void InspectUids(UidInspector<ulong> action)
	{
	}
}
