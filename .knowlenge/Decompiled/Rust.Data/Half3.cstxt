using System;
using System.IO;
using Facepunch;
using ProtoBuf;
using SilentOrbit.ProtocolBuffers;

public struct Half3 : IProto, IEquatable<Half3>
{
	[NonSerialized]
	public uint x;

	[NonSerialized]
	public uint y;

	[NonSerialized]
	public uint z;

	public static void ResetToPool(Half3 instance)
	{
		instance.x = 0u;
		instance.y = 0u;
		instance.z = 0u;
	}

	public void CopyTo(Half3 instance)
	{
		instance.x = x;
		instance.y = y;
		instance.z = z;
	}

	public Half3 Copy()
	{
		Half3 half = default(Half3);
		CopyTo(half);
		return half;
	}

	public static Half3 Deserialize(Stream stream)
	{
		Half3 instance = default(Half3);
		Deserialize(stream, ref instance, isDelta: false);
		return instance;
	}

	public static Half3 DeserializeLengthDelimited(Stream stream)
	{
		Half3 instance = default(Half3);
		DeserializeLengthDelimited(stream, ref instance, isDelta: false);
		return instance;
	}

	public static Half3 DeserializeLength(Stream stream, int length)
	{
		Half3 instance = default(Half3);
		DeserializeLength(stream, length, ref instance, isDelta: false);
		return instance;
	}

	public static Half3 Deserialize(byte[] buffer)
	{
		Half3 instance = default(Half3);
		using MemoryStream stream = new MemoryStream(buffer);
		Deserialize(stream, ref instance, isDelta: false);
		return instance;
	}

	public void FromProto(Stream stream, bool isDelta = false)
	{
		Deserialize(stream, ref this, isDelta);
	}

	public void WriteToStream(Stream stream)
	{
		Serialize(stream, this);
	}

	public void WriteToStreamDelta(Stream stream, Half3 previous)
	{
		SerializeDelta(stream, this, previous);
	}

	public void ReadFromStream(Stream stream, int size, bool isDelta = false)
	{
		DeserializeLength(stream, size, ref this, isDelta);
	}

	public static Half3 Deserialize(byte[] buffer, ref Half3 instance, bool isDelta = false)
	{
		using (MemoryStream stream = new MemoryStream(buffer))
		{
			Deserialize(stream, ref instance, isDelta);
		}
		return instance;
	}

	public static Half3 Deserialize(Stream stream, ref Half3 instance, bool isDelta)
	{
		if (!isDelta)
		{
			instance.x = 0u;
			instance.y = 0u;
			instance.z = 0u;
		}
		while (true)
		{
			int num = stream.ReadByte();
			switch (num)
			{
			case 8:
				instance.x = ProtocolParser.ReadUInt32(stream);
				continue;
			case 16:
				instance.y = ProtocolParser.ReadUInt32(stream);
				continue;
			case 24:
				instance.z = ProtocolParser.ReadUInt32(stream);
				continue;
			case -1:
				return instance;
			}
			Key key = ProtocolParser.ReadKey((byte)num, stream);
			if (key.Field == 0)
			{
				throw new ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
			}
			ProtocolParser.SkipKey(stream, key);
		}
	}

	public static Half3 DeserializeLengthDelimited(Stream stream, ref Half3 instance, bool isDelta)
	{
		if (!isDelta)
		{
			instance.x = 0u;
			instance.y = 0u;
			instance.z = 0u;
		}
		long num = ProtocolParser.ReadUInt32(stream);
		num += stream.Position;
		while (stream.Position < num)
		{
			int num2 = stream.ReadByte();
			switch (num2)
			{
			case -1:
				throw new EndOfStreamException();
			case 8:
				instance.x = ProtocolParser.ReadUInt32(stream);
				continue;
			case 16:
				instance.y = ProtocolParser.ReadUInt32(stream);
				continue;
			case 24:
				instance.z = ProtocolParser.ReadUInt32(stream);
				continue;
			}
			Key key = ProtocolParser.ReadKey((byte)num2, stream);
			if (key.Field == 0)
			{
				throw new ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
			}
			ProtocolParser.SkipKey(stream, key);
		}
		if (stream.Position != num)
		{
			throw new ProtocolBufferException("Read past max limit");
		}
		return instance;
	}

	public static Half3 DeserializeLength(Stream stream, int length, ref Half3 instance, bool isDelta)
	{
		if (!isDelta)
		{
			instance.x = 0u;
			instance.y = 0u;
			instance.z = 0u;
		}
		long num = stream.Position + length;
		while (stream.Position < num)
		{
			int num2 = stream.ReadByte();
			switch (num2)
			{
			case -1:
				throw new EndOfStreamException();
			case 8:
				instance.x = ProtocolParser.ReadUInt32(stream);
				continue;
			case 16:
				instance.y = ProtocolParser.ReadUInt32(stream);
				continue;
			case 24:
				instance.z = ProtocolParser.ReadUInt32(stream);
				continue;
			}
			Key key = ProtocolParser.ReadKey((byte)num2, stream);
			if (key.Field == 0)
			{
				throw new ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
			}
			ProtocolParser.SkipKey(stream, key);
		}
		if (stream.Position != num)
		{
			throw new ProtocolBufferException("Read past max limit");
		}
		return instance;
	}

	public static void SerializeDelta(Stream stream, Half3 instance, Half3 previous)
	{
		MemoryStream obj = Pool.Get<MemoryStream>();
		if (instance.x != previous.x)
		{
			stream.WriteByte(8);
			ProtocolParser.WriteUInt32(stream, instance.x);
		}
		if (instance.y != previous.y)
		{
			stream.WriteByte(16);
			ProtocolParser.WriteUInt32(stream, instance.y);
		}
		if (instance.z != previous.z)
		{
			stream.WriteByte(24);
			ProtocolParser.WriteUInt32(stream, instance.z);
		}
		Pool.FreeUnmanaged(ref obj);
	}

	public static void Serialize(Stream stream, Half3 instance)
	{
		MemoryStream obj = Pool.Get<MemoryStream>();
		if (instance.x != 0)
		{
			stream.WriteByte(8);
			ProtocolParser.WriteUInt32(stream, instance.x);
		}
		if (instance.y != 0)
		{
			stream.WriteByte(16);
			ProtocolParser.WriteUInt32(stream, instance.y);
		}
		if (instance.z != 0)
		{
			stream.WriteByte(24);
			ProtocolParser.WriteUInt32(stream, instance.z);
		}
		Pool.FreeUnmanaged(ref obj);
	}

	public byte[] ToProtoBytes()
	{
		return SerializeToBytes(this);
	}

	public void ToProto(Stream stream)
	{
		Serialize(stream, this);
	}

	public static byte[] SerializeToBytes(Half3 instance)
	{
		using MemoryStream memoryStream = new MemoryStream();
		Serialize(memoryStream, instance);
		return memoryStream.ToArray();
	}

	public static void SerializeLengthDelimited(Stream stream, Half3 instance)
	{
		byte[] array = SerializeToBytes(instance);
		ProtocolParser.WriteUInt32(stream, (uint)array.Length);
		stream.Write(array, 0, array.Length);
	}

	public void InspectUids(UidInspector<ulong> action)
	{
	}

	public bool Equals(Half3 other)
	{
		if (x == other.x && y == other.y)
		{
			return z == other.z;
		}
		return false;
	}

	public override bool Equals(object obj)
	{
		if (obj is Half3)
		{
			return Equals((Half3)obj);
		}
		return false;
	}

	public static bool operator ==(Half3 a, Half3 b)
	{
		return a.Equals(b);
	}

	public static bool operator !=(Half3 a, Half3 b)
	{
		return !a.Equals(b);
	}

	public override int GetHashCode()
	{
		return HashCode.Combine(x, y, z);
	}
}
