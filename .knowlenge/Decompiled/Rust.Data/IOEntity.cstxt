using System;
using System.Collections.Generic;
using System.IO;
using Facepunch;
using ProtoBuf;
using SilentOrbit.ProtocolBuffers;
using UnityEngine;

public class IOEntity : IDisposable, Pool.IPooled, IProto
{
	public class IOConnection : IDisposable, Pool.IPooled, IProto
	{
		public class LineVec : IDisposable, Pool.IPooled, IProto
		{
			[NonSerialized]
			public Vector4 vec;

			public bool ShouldPool = true;

			private bool _disposed;

			public static void ResetToPool(LineVec instance)
			{
				if (instance.ShouldPool)
				{
					instance.vec = default(Vector4);
					Pool.Free(ref instance);
				}
			}

			public void ResetToPool()
			{
				ResetToPool(this);
			}

			public virtual void Dispose()
			{
				if (!ShouldPool)
				{
					throw new Exception("Trying to dispose LineVec with ShouldPool set to false!");
				}
				if (!_disposed)
				{
					ResetToPool();
					_disposed = true;
				}
			}

			public virtual void EnterPool()
			{
				_disposed = true;
			}

			public virtual void LeavePool()
			{
				_disposed = false;
			}

			public void CopyTo(LineVec instance)
			{
				instance.vec = vec;
			}

			public LineVec Copy()
			{
				LineVec lineVec = Pool.Get<LineVec>();
				CopyTo(lineVec);
				return lineVec;
			}

			public static LineVec Deserialize(Stream stream)
			{
				LineVec lineVec = Pool.Get<LineVec>();
				Deserialize(stream, lineVec, isDelta: false);
				return lineVec;
			}

			public static LineVec DeserializeLengthDelimited(Stream stream)
			{
				LineVec lineVec = Pool.Get<LineVec>();
				DeserializeLengthDelimited(stream, lineVec, isDelta: false);
				return lineVec;
			}

			public static LineVec DeserializeLength(Stream stream, int length)
			{
				LineVec lineVec = Pool.Get<LineVec>();
				DeserializeLength(stream, length, lineVec, isDelta: false);
				return lineVec;
			}

			public static LineVec Deserialize(byte[] buffer)
			{
				LineVec lineVec = Pool.Get<LineVec>();
				using MemoryStream stream = new MemoryStream(buffer);
				Deserialize(stream, lineVec, isDelta: false);
				return lineVec;
			}

			public void FromProto(Stream stream, bool isDelta = false)
			{
				Deserialize(stream, this, isDelta);
			}

			public virtual void WriteToStream(Stream stream)
			{
				Serialize(stream, this);
			}

			public virtual void WriteToStreamDelta(Stream stream, LineVec previous)
			{
				if (previous == null)
				{
					Serialize(stream, this);
				}
				else
				{
					SerializeDelta(stream, this, previous);
				}
			}

			public virtual void ReadFromStream(Stream stream, int size, bool isDelta = false)
			{
				DeserializeLength(stream, size, this, isDelta);
			}

			public static LineVec Deserialize(byte[] buffer, LineVec instance, bool isDelta = false)
			{
				using MemoryStream stream = new MemoryStream(buffer);
				Deserialize(stream, instance, isDelta);
				return instance;
			}

			public static LineVec Deserialize(Stream stream, LineVec instance, bool isDelta)
			{
				while (true)
				{
					int num = stream.ReadByte();
					switch (num)
					{
					case 10:
						Vector4Serialized.DeserializeLengthDelimited(stream, ref instance.vec, isDelta);
						continue;
					case -1:
						return instance;
					}
					Key key = ProtocolParser.ReadKey((byte)num, stream);
					if (key.Field == 0)
					{
						throw new ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
					}
					ProtocolParser.SkipKey(stream, key);
				}
			}

			public static LineVec DeserializeLengthDelimited(Stream stream, LineVec instance, bool isDelta)
			{
				long num = ProtocolParser.ReadUInt32(stream);
				num += stream.Position;
				while (stream.Position < num)
				{
					int num2 = stream.ReadByte();
					switch (num2)
					{
					case -1:
						throw new EndOfStreamException();
					case 10:
						Vector4Serialized.DeserializeLengthDelimited(stream, ref instance.vec, isDelta);
						continue;
					}
					Key key = ProtocolParser.ReadKey((byte)num2, stream);
					if (key.Field == 0)
					{
						throw new ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
					}
					ProtocolParser.SkipKey(stream, key);
				}
				if (stream.Position != num)
				{
					throw new ProtocolBufferException("Read past max limit");
				}
				return instance;
			}

			public static LineVec DeserializeLength(Stream stream, int length, LineVec instance, bool isDelta)
			{
				long num = stream.Position + length;
				while (stream.Position < num)
				{
					int num2 = stream.ReadByte();
					switch (num2)
					{
					case -1:
						throw new EndOfStreamException();
					case 10:
						Vector4Serialized.DeserializeLengthDelimited(stream, ref instance.vec, isDelta);
						continue;
					}
					Key key = ProtocolParser.ReadKey((byte)num2, stream);
					if (key.Field == 0)
					{
						throw new ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
					}
					ProtocolParser.SkipKey(stream, key);
				}
				if (stream.Position != num)
				{
					throw new ProtocolBufferException("Read past max limit");
				}
				return instance;
			}

			public static void SerializeDelta(Stream stream, LineVec instance, LineVec previous)
			{
				MemoryStream obj = Pool.Get<MemoryStream>();
				if (instance.vec != previous.vec)
				{
					stream.WriteByte(10);
					obj.SetLength(0L);
					Vector4Serialized.SerializeDelta(obj, instance.vec, previous.vec);
					uint num = (uint)obj.Length;
					ProtocolParser.WriteUInt32(stream, num);
					stream.Write(obj.GetBuffer(), 0, (int)num);
				}
				Pool.FreeUnmanaged(ref obj);
			}

			public static void Serialize(Stream stream, LineVec instance)
			{
				MemoryStream obj = Pool.Get<MemoryStream>();
				if (instance.vec != default(Vector4))
				{
					stream.WriteByte(10);
					obj.SetLength(0L);
					Vector4Serialized.Serialize(obj, instance.vec);
					uint num = (uint)obj.Length;
					ProtocolParser.WriteUInt32(stream, num);
					stream.Write(obj.GetBuffer(), 0, (int)num);
				}
				Pool.FreeUnmanaged(ref obj);
			}

			public byte[] ToProtoBytes()
			{
				return SerializeToBytes(this);
			}

			public void ToProto(Stream stream)
			{
				Serialize(stream, this);
			}

			public static byte[] SerializeToBytes(LineVec instance)
			{
				using MemoryStream memoryStream = new MemoryStream();
				Serialize(memoryStream, instance);
				return memoryStream.ToArray();
			}

			public static void SerializeLengthDelimited(Stream stream, LineVec instance)
			{
				byte[] array = SerializeToBytes(instance);
				ProtocolParser.WriteUInt32(stream, (uint)array.Length);
				stream.Write(array, 0, array.Length);
			}

			public void InspectUids(UidInspector<ulong> action)
			{
			}
		}

		public class LinePointList : IDisposable, Pool.IPooled, IProto
		{
			[NonSerialized]
			public Vector4 a;

			[NonSerialized]
			public Vector4 b;

			[NonSerialized]
			public Vector4 c;

			[NonSerialized]
			public Vector4 d;

			[NonSerialized]
			public Vector4 e;

			[NonSerialized]
			public Vector4 f;

			[NonSerialized]
			public Vector4 g;

			[NonSerialized]
			public Vector4 h;

			public bool ShouldPool = true;

			private bool _disposed;

			public static void ResetToPool(LinePointList instance)
			{
				if (instance.ShouldPool)
				{
					instance.a = default(Vector4);
					instance.b = default(Vector4);
					instance.c = default(Vector4);
					instance.d = default(Vector4);
					instance.e = default(Vector4);
					instance.f = default(Vector4);
					instance.g = default(Vector4);
					instance.h = default(Vector4);
					Pool.Free(ref instance);
				}
			}

			public void ResetToPool()
			{
				ResetToPool(this);
			}

			public virtual void Dispose()
			{
				if (!ShouldPool)
				{
					throw new Exception("Trying to dispose LinePointList with ShouldPool set to false!");
				}
				if (!_disposed)
				{
					ResetToPool();
					_disposed = true;
				}
			}

			public virtual void EnterPool()
			{
				_disposed = true;
			}

			public virtual void LeavePool()
			{
				_disposed = false;
			}

			public void CopyTo(LinePointList instance)
			{
				instance.a = a;
				instance.b = b;
				instance.c = c;
				instance.d = d;
				instance.e = e;
				instance.f = f;
				instance.g = g;
				instance.h = h;
			}

			public LinePointList Copy()
			{
				LinePointList linePointList = Pool.Get<LinePointList>();
				CopyTo(linePointList);
				return linePointList;
			}

			public static LinePointList Deserialize(Stream stream)
			{
				LinePointList linePointList = Pool.Get<LinePointList>();
				Deserialize(stream, linePointList, isDelta: false);
				return linePointList;
			}

			public static LinePointList DeserializeLengthDelimited(Stream stream)
			{
				LinePointList linePointList = Pool.Get<LinePointList>();
				DeserializeLengthDelimited(stream, linePointList, isDelta: false);
				return linePointList;
			}

			public static LinePointList DeserializeLength(Stream stream, int length)
			{
				LinePointList linePointList = Pool.Get<LinePointList>();
				DeserializeLength(stream, length, linePointList, isDelta: false);
				return linePointList;
			}

			public static LinePointList Deserialize(byte[] buffer)
			{
				LinePointList linePointList = Pool.Get<LinePointList>();
				using MemoryStream stream = new MemoryStream(buffer);
				Deserialize(stream, linePointList, isDelta: false);
				return linePointList;
			}

			public void FromProto(Stream stream, bool isDelta = false)
			{
				Deserialize(stream, this, isDelta);
			}

			public virtual void WriteToStream(Stream stream)
			{
				Serialize(stream, this);
			}

			public virtual void WriteToStreamDelta(Stream stream, LinePointList previous)
			{
				if (previous == null)
				{
					Serialize(stream, this);
				}
				else
				{
					SerializeDelta(stream, this, previous);
				}
			}

			public virtual void ReadFromStream(Stream stream, int size, bool isDelta = false)
			{
				DeserializeLength(stream, size, this, isDelta);
			}

			public static LinePointList Deserialize(byte[] buffer, LinePointList instance, bool isDelta = false)
			{
				using MemoryStream stream = new MemoryStream(buffer);
				Deserialize(stream, instance, isDelta);
				return instance;
			}

			public static LinePointList Deserialize(Stream stream, LinePointList instance, bool isDelta)
			{
				while (true)
				{
					int num = stream.ReadByte();
					switch (num)
					{
					case 10:
						Vector4Serialized.DeserializeLengthDelimited(stream, ref instance.a, isDelta);
						continue;
					case 18:
						Vector4Serialized.DeserializeLengthDelimited(stream, ref instance.b, isDelta);
						continue;
					case 26:
						Vector4Serialized.DeserializeLengthDelimited(stream, ref instance.c, isDelta);
						continue;
					case 34:
						Vector4Serialized.DeserializeLengthDelimited(stream, ref instance.d, isDelta);
						continue;
					case 42:
						Vector4Serialized.DeserializeLengthDelimited(stream, ref instance.e, isDelta);
						continue;
					case 50:
						Vector4Serialized.DeserializeLengthDelimited(stream, ref instance.f, isDelta);
						continue;
					case 58:
						Vector4Serialized.DeserializeLengthDelimited(stream, ref instance.g, isDelta);
						continue;
					case 66:
						Vector4Serialized.DeserializeLengthDelimited(stream, ref instance.h, isDelta);
						continue;
					case -1:
						return instance;
					}
					Key key = ProtocolParser.ReadKey((byte)num, stream);
					if (key.Field == 0)
					{
						throw new ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
					}
					ProtocolParser.SkipKey(stream, key);
				}
			}

			public static LinePointList DeserializeLengthDelimited(Stream stream, LinePointList instance, bool isDelta)
			{
				long num = ProtocolParser.ReadUInt32(stream);
				num += stream.Position;
				while (stream.Position < num)
				{
					int num2 = stream.ReadByte();
					switch (num2)
					{
					case -1:
						throw new EndOfStreamException();
					case 10:
						Vector4Serialized.DeserializeLengthDelimited(stream, ref instance.a, isDelta);
						continue;
					case 18:
						Vector4Serialized.DeserializeLengthDelimited(stream, ref instance.b, isDelta);
						continue;
					case 26:
						Vector4Serialized.DeserializeLengthDelimited(stream, ref instance.c, isDelta);
						continue;
					case 34:
						Vector4Serialized.DeserializeLengthDelimited(stream, ref instance.d, isDelta);
						continue;
					case 42:
						Vector4Serialized.DeserializeLengthDelimited(stream, ref instance.e, isDelta);
						continue;
					case 50:
						Vector4Serialized.DeserializeLengthDelimited(stream, ref instance.f, isDelta);
						continue;
					case 58:
						Vector4Serialized.DeserializeLengthDelimited(stream, ref instance.g, isDelta);
						continue;
					case 66:
						Vector4Serialized.DeserializeLengthDelimited(stream, ref instance.h, isDelta);
						continue;
					}
					Key key = ProtocolParser.ReadKey((byte)num2, stream);
					if (key.Field == 0)
					{
						throw new ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
					}
					ProtocolParser.SkipKey(stream, key);
				}
				if (stream.Position != num)
				{
					throw new ProtocolBufferException("Read past max limit");
				}
				return instance;
			}

			public static LinePointList DeserializeLength(Stream stream, int length, LinePointList instance, bool isDelta)
			{
				long num = stream.Position + length;
				while (stream.Position < num)
				{
					int num2 = stream.ReadByte();
					switch (num2)
					{
					case -1:
						throw new EndOfStreamException();
					case 10:
						Vector4Serialized.DeserializeLengthDelimited(stream, ref instance.a, isDelta);
						continue;
					case 18:
						Vector4Serialized.DeserializeLengthDelimited(stream, ref instance.b, isDelta);
						continue;
					case 26:
						Vector4Serialized.DeserializeLengthDelimited(stream, ref instance.c, isDelta);
						continue;
					case 34:
						Vector4Serialized.DeserializeLengthDelimited(stream, ref instance.d, isDelta);
						continue;
					case 42:
						Vector4Serialized.DeserializeLengthDelimited(stream, ref instance.e, isDelta);
						continue;
					case 50:
						Vector4Serialized.DeserializeLengthDelimited(stream, ref instance.f, isDelta);
						continue;
					case 58:
						Vector4Serialized.DeserializeLengthDelimited(stream, ref instance.g, isDelta);
						continue;
					case 66:
						Vector4Serialized.DeserializeLengthDelimited(stream, ref instance.h, isDelta);
						continue;
					}
					Key key = ProtocolParser.ReadKey((byte)num2, stream);
					if (key.Field == 0)
					{
						throw new ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
					}
					ProtocolParser.SkipKey(stream, key);
				}
				if (stream.Position != num)
				{
					throw new ProtocolBufferException("Read past max limit");
				}
				return instance;
			}

			public static void SerializeDelta(Stream stream, LinePointList instance, LinePointList previous)
			{
				MemoryStream obj = Pool.Get<MemoryStream>();
				if (instance.a != previous.a)
				{
					stream.WriteByte(10);
					obj.SetLength(0L);
					Vector4Serialized.SerializeDelta(obj, instance.a, previous.a);
					uint num = (uint)obj.Length;
					ProtocolParser.WriteUInt32(stream, num);
					stream.Write(obj.GetBuffer(), 0, (int)num);
				}
				if (instance.b != previous.b)
				{
					stream.WriteByte(18);
					obj.SetLength(0L);
					Vector4Serialized.SerializeDelta(obj, instance.b, previous.b);
					uint num2 = (uint)obj.Length;
					ProtocolParser.WriteUInt32(stream, num2);
					stream.Write(obj.GetBuffer(), 0, (int)num2);
				}
				if (instance.c != previous.c)
				{
					stream.WriteByte(26);
					obj.SetLength(0L);
					Vector4Serialized.SerializeDelta(obj, instance.c, previous.c);
					uint num3 = (uint)obj.Length;
					ProtocolParser.WriteUInt32(stream, num3);
					stream.Write(obj.GetBuffer(), 0, (int)num3);
				}
				if (instance.d != previous.d)
				{
					stream.WriteByte(34);
					obj.SetLength(0L);
					Vector4Serialized.SerializeDelta(obj, instance.d, previous.d);
					uint num4 = (uint)obj.Length;
					ProtocolParser.WriteUInt32(stream, num4);
					stream.Write(obj.GetBuffer(), 0, (int)num4);
				}
				if (instance.e != previous.e)
				{
					stream.WriteByte(42);
					obj.SetLength(0L);
					Vector4Serialized.SerializeDelta(obj, instance.e, previous.e);
					uint num5 = (uint)obj.Length;
					ProtocolParser.WriteUInt32(stream, num5);
					stream.Write(obj.GetBuffer(), 0, (int)num5);
				}
				if (instance.f != previous.f)
				{
					stream.WriteByte(50);
					obj.SetLength(0L);
					Vector4Serialized.SerializeDelta(obj, instance.f, previous.f);
					uint num6 = (uint)obj.Length;
					ProtocolParser.WriteUInt32(stream, num6);
					stream.Write(obj.GetBuffer(), 0, (int)num6);
				}
				if (instance.g != previous.g)
				{
					stream.WriteByte(58);
					obj.SetLength(0L);
					Vector4Serialized.SerializeDelta(obj, instance.g, previous.g);
					uint num7 = (uint)obj.Length;
					ProtocolParser.WriteUInt32(stream, num7);
					stream.Write(obj.GetBuffer(), 0, (int)num7);
				}
				if (instance.h != previous.h)
				{
					stream.WriteByte(66);
					obj.SetLength(0L);
					Vector4Serialized.SerializeDelta(obj, instance.h, previous.h);
					uint num8 = (uint)obj.Length;
					ProtocolParser.WriteUInt32(stream, num8);
					stream.Write(obj.GetBuffer(), 0, (int)num8);
				}
				Pool.FreeUnmanaged(ref obj);
			}

			public static void Serialize(Stream stream, LinePointList instance)
			{
				MemoryStream obj = Pool.Get<MemoryStream>();
				if (instance.a != default(Vector4))
				{
					stream.WriteByte(10);
					obj.SetLength(0L);
					Vector4Serialized.Serialize(obj, instance.a);
					uint num = (uint)obj.Length;
					ProtocolParser.WriteUInt32(stream, num);
					stream.Write(obj.GetBuffer(), 0, (int)num);
				}
				if (instance.b != default(Vector4))
				{
					stream.WriteByte(18);
					obj.SetLength(0L);
					Vector4Serialized.Serialize(obj, instance.b);
					uint num2 = (uint)obj.Length;
					ProtocolParser.WriteUInt32(stream, num2);
					stream.Write(obj.GetBuffer(), 0, (int)num2);
				}
				if (instance.c != default(Vector4))
				{
					stream.WriteByte(26);
					obj.SetLength(0L);
					Vector4Serialized.Serialize(obj, instance.c);
					uint num3 = (uint)obj.Length;
					ProtocolParser.WriteUInt32(stream, num3);
					stream.Write(obj.GetBuffer(), 0, (int)num3);
				}
				if (instance.d != default(Vector4))
				{
					stream.WriteByte(34);
					obj.SetLength(0L);
					Vector4Serialized.Serialize(obj, instance.d);
					uint num4 = (uint)obj.Length;
					ProtocolParser.WriteUInt32(stream, num4);
					stream.Write(obj.GetBuffer(), 0, (int)num4);
				}
				if (instance.e != default(Vector4))
				{
					stream.WriteByte(42);
					obj.SetLength(0L);
					Vector4Serialized.Serialize(obj, instance.e);
					uint num5 = (uint)obj.Length;
					ProtocolParser.WriteUInt32(stream, num5);
					stream.Write(obj.GetBuffer(), 0, (int)num5);
				}
				if (instance.f != default(Vector4))
				{
					stream.WriteByte(50);
					obj.SetLength(0L);
					Vector4Serialized.Serialize(obj, instance.f);
					uint num6 = (uint)obj.Length;
					ProtocolParser.WriteUInt32(stream, num6);
					stream.Write(obj.GetBuffer(), 0, (int)num6);
				}
				if (instance.g != default(Vector4))
				{
					stream.WriteByte(58);
					obj.SetLength(0L);
					Vector4Serialized.Serialize(obj, instance.g);
					uint num7 = (uint)obj.Length;
					ProtocolParser.WriteUInt32(stream, num7);
					stream.Write(obj.GetBuffer(), 0, (int)num7);
				}
				if (instance.h != default(Vector4))
				{
					stream.WriteByte(66);
					obj.SetLength(0L);
					Vector4Serialized.Serialize(obj, instance.h);
					uint num8 = (uint)obj.Length;
					ProtocolParser.WriteUInt32(stream, num8);
					stream.Write(obj.GetBuffer(), 0, (int)num8);
				}
				Pool.FreeUnmanaged(ref obj);
			}

			public byte[] ToProtoBytes()
			{
				return SerializeToBytes(this);
			}

			public void ToProto(Stream stream)
			{
				Serialize(stream, this);
			}

			public static byte[] SerializeToBytes(LinePointList instance)
			{
				using MemoryStream memoryStream = new MemoryStream();
				Serialize(memoryStream, instance);
				return memoryStream.ToArray();
			}

			public static void SerializeLengthDelimited(Stream stream, LinePointList instance)
			{
				byte[] array = SerializeToBytes(instance);
				ProtocolParser.WriteUInt32(stream, (uint)array.Length);
				stream.Write(array, 0, array.Length);
			}

			public void InspectUids(UidInspector<ulong> action)
			{
			}
		}

		[NonSerialized]
		public string niceName;

		[NonSerialized]
		public int type;

		[NonSerialized]
		public NetworkableId connectedID;

		[NonSerialized]
		public int connectedToSlot;

		[NonSerialized]
		public bool inUse;

		[NonSerialized]
		public List<LineVec> linePointList;

		[NonSerialized]
		public int colour;

		[NonSerialized]
		public Vector3 worldSpaceRotation;

		[NonSerialized]
		public float lineThickness;

		[NonSerialized]
		public List<WireLineAnchorInfo> lineAnchorList;

		[NonSerialized]
		public Vector3 originPosition;

		[NonSerialized]
		public Vector3 originRotation;

		[NonSerialized]
		public List<float> slackLevels;

		public bool ShouldPool = true;

		private bool _disposed;

		public static void ResetToPool(IOConnection instance)
		{
			if (!instance.ShouldPool)
			{
				return;
			}
			instance.niceName = string.Empty;
			instance.type = 0;
			instance.connectedID = default(NetworkableId);
			instance.connectedToSlot = 0;
			instance.inUse = false;
			if (instance.linePointList != null)
			{
				for (int i = 0; i < instance.linePointList.Count; i++)
				{
					if (instance.linePointList[i] != null)
					{
						instance.linePointList[i].ResetToPool();
						instance.linePointList[i] = null;
					}
				}
				List<LineVec> obj = instance.linePointList;
				Pool.Free(ref obj, freeElements: false);
				instance.linePointList = obj;
			}
			instance.colour = 0;
			instance.worldSpaceRotation = default(Vector3);
			instance.lineThickness = 0f;
			if (instance.lineAnchorList != null)
			{
				for (int j = 0; j < instance.lineAnchorList.Count; j++)
				{
					if (instance.lineAnchorList[j] != null)
					{
						instance.lineAnchorList[j].ResetToPool();
						instance.lineAnchorList[j] = null;
					}
				}
				List<WireLineAnchorInfo> obj2 = instance.lineAnchorList;
				Pool.Free(ref obj2, freeElements: false);
				instance.lineAnchorList = obj2;
			}
			instance.originPosition = default(Vector3);
			instance.originRotation = default(Vector3);
			if (instance.slackLevels != null)
			{
				List<float> obj3 = instance.slackLevels;
				Pool.FreeUnmanaged(ref obj3);
				instance.slackLevels = obj3;
			}
			Pool.Free(ref instance);
		}

		public void ResetToPool()
		{
			ResetToPool(this);
		}

		public virtual void Dispose()
		{
			if (!ShouldPool)
			{
				throw new Exception("Trying to dispose IOConnection with ShouldPool set to false!");
			}
			if (!_disposed)
			{
				ResetToPool();
				_disposed = true;
			}
		}

		public virtual void EnterPool()
		{
			_disposed = true;
		}

		public virtual void LeavePool()
		{
			_disposed = false;
		}

		public void CopyTo(IOConnection instance)
		{
			instance.niceName = niceName;
			instance.type = type;
			instance.connectedID = connectedID;
			instance.connectedToSlot = connectedToSlot;
			instance.inUse = inUse;
			if (linePointList != null)
			{
				instance.linePointList = Pool.Get<List<LineVec>>();
				for (int i = 0; i < linePointList.Count; i++)
				{
					LineVec item = linePointList[i].Copy();
					instance.linePointList.Add(item);
				}
			}
			else
			{
				instance.linePointList = null;
			}
			instance.colour = colour;
			instance.worldSpaceRotation = worldSpaceRotation;
			instance.lineThickness = lineThickness;
			if (lineAnchorList != null)
			{
				instance.lineAnchorList = Pool.Get<List<WireLineAnchorInfo>>();
				for (int j = 0; j < lineAnchorList.Count; j++)
				{
					WireLineAnchorInfo item2 = lineAnchorList[j].Copy();
					instance.lineAnchorList.Add(item2);
				}
			}
			else
			{
				instance.lineAnchorList = null;
			}
			instance.originPosition = originPosition;
			instance.originRotation = originRotation;
			if (slackLevels != null)
			{
				instance.slackLevels = Pool.Get<List<float>>();
				for (int k = 0; k < slackLevels.Count; k++)
				{
					float item3 = slackLevels[k];
					instance.slackLevels.Add(item3);
				}
			}
			else
			{
				instance.slackLevels = null;
			}
		}

		public IOConnection Copy()
		{
			IOConnection iOConnection = Pool.Get<IOConnection>();
			CopyTo(iOConnection);
			return iOConnection;
		}

		public static IOConnection Deserialize(Stream stream)
		{
			IOConnection iOConnection = Pool.Get<IOConnection>();
			Deserialize(stream, iOConnection, isDelta: false);
			return iOConnection;
		}

		public static IOConnection DeserializeLengthDelimited(Stream stream)
		{
			IOConnection iOConnection = Pool.Get<IOConnection>();
			DeserializeLengthDelimited(stream, iOConnection, isDelta: false);
			return iOConnection;
		}

		public static IOConnection DeserializeLength(Stream stream, int length)
		{
			IOConnection iOConnection = Pool.Get<IOConnection>();
			DeserializeLength(stream, length, iOConnection, isDelta: false);
			return iOConnection;
		}

		public static IOConnection Deserialize(byte[] buffer)
		{
			IOConnection iOConnection = Pool.Get<IOConnection>();
			using MemoryStream stream = new MemoryStream(buffer);
			Deserialize(stream, iOConnection, isDelta: false);
			return iOConnection;
		}

		public void FromProto(Stream stream, bool isDelta = false)
		{
			Deserialize(stream, this, isDelta);
		}

		public virtual void WriteToStream(Stream stream)
		{
			Serialize(stream, this);
		}

		public virtual void WriteToStreamDelta(Stream stream, IOConnection previous)
		{
			if (previous == null)
			{
				Serialize(stream, this);
			}
			else
			{
				SerializeDelta(stream, this, previous);
			}
		}

		public virtual void ReadFromStream(Stream stream, int size, bool isDelta = false)
		{
			DeserializeLength(stream, size, this, isDelta);
		}

		public static IOConnection Deserialize(byte[] buffer, IOConnection instance, bool isDelta = false)
		{
			using MemoryStream stream = new MemoryStream(buffer);
			Deserialize(stream, instance, isDelta);
			return instance;
		}

		public static IOConnection Deserialize(Stream stream, IOConnection instance, bool isDelta)
		{
			if (!isDelta)
			{
				if (instance.linePointList == null)
				{
					instance.linePointList = Pool.Get<List<LineVec>>();
				}
				if (instance.lineAnchorList == null)
				{
					instance.lineAnchorList = Pool.Get<List<WireLineAnchorInfo>>();
				}
				if (instance.slackLevels == null)
				{
					instance.slackLevels = Pool.Get<List<float>>();
				}
			}
			while (true)
			{
				int num = stream.ReadByte();
				switch (num)
				{
				case 10:
					instance.niceName = ProtocolParser.ReadString(stream);
					continue;
				case 16:
					instance.type = (int)ProtocolParser.ReadUInt64(stream);
					continue;
				case 24:
					instance.connectedID = new NetworkableId(ProtocolParser.ReadUInt64(stream));
					continue;
				case 32:
					instance.connectedToSlot = (int)ProtocolParser.ReadUInt64(stream);
					continue;
				case 40:
					instance.inUse = ProtocolParser.ReadBool(stream);
					continue;
				case 50:
					instance.linePointList.Add(LineVec.DeserializeLengthDelimited(stream));
					continue;
				case 56:
					instance.colour = (int)ProtocolParser.ReadUInt64(stream);
					continue;
				case 66:
					Vector3Serialized.DeserializeLengthDelimited(stream, ref instance.worldSpaceRotation, isDelta);
					continue;
				case 77:
					instance.lineThickness = ProtocolParser.ReadSingle(stream);
					continue;
				case 82:
					instance.lineAnchorList.Add(WireLineAnchorInfo.DeserializeLengthDelimited(stream));
					continue;
				case 90:
					Vector3Serialized.DeserializeLengthDelimited(stream, ref instance.originPosition, isDelta);
					continue;
				case 98:
					Vector3Serialized.DeserializeLengthDelimited(stream, ref instance.originRotation, isDelta);
					continue;
				case 109:
					instance.slackLevels.Add(ProtocolParser.ReadSingle(stream));
					continue;
				case -1:
					return instance;
				}
				Key key = ProtocolParser.ReadKey((byte)num, stream);
				if (key.Field == 0)
				{
					throw new ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
				}
				ProtocolParser.SkipKey(stream, key);
			}
		}

		public static IOConnection DeserializeLengthDelimited(Stream stream, IOConnection instance, bool isDelta)
		{
			if (!isDelta)
			{
				if (instance.linePointList == null)
				{
					instance.linePointList = Pool.Get<List<LineVec>>();
				}
				if (instance.lineAnchorList == null)
				{
					instance.lineAnchorList = Pool.Get<List<WireLineAnchorInfo>>();
				}
				if (instance.slackLevels == null)
				{
					instance.slackLevels = Pool.Get<List<float>>();
				}
			}
			long num = ProtocolParser.ReadUInt32(stream);
			num += stream.Position;
			while (stream.Position < num)
			{
				int num2 = stream.ReadByte();
				switch (num2)
				{
				case -1:
					throw new EndOfStreamException();
				case 10:
					instance.niceName = ProtocolParser.ReadString(stream);
					continue;
				case 16:
					instance.type = (int)ProtocolParser.ReadUInt64(stream);
					continue;
				case 24:
					instance.connectedID = new NetworkableId(ProtocolParser.ReadUInt64(stream));
					continue;
				case 32:
					instance.connectedToSlot = (int)ProtocolParser.ReadUInt64(stream);
					continue;
				case 40:
					instance.inUse = ProtocolParser.ReadBool(stream);
					continue;
				case 50:
					instance.linePointList.Add(LineVec.DeserializeLengthDelimited(stream));
					continue;
				case 56:
					instance.colour = (int)ProtocolParser.ReadUInt64(stream);
					continue;
				case 66:
					Vector3Serialized.DeserializeLengthDelimited(stream, ref instance.worldSpaceRotation, isDelta);
					continue;
				case 77:
					instance.lineThickness = ProtocolParser.ReadSingle(stream);
					continue;
				case 82:
					instance.lineAnchorList.Add(WireLineAnchorInfo.DeserializeLengthDelimited(stream));
					continue;
				case 90:
					Vector3Serialized.DeserializeLengthDelimited(stream, ref instance.originPosition, isDelta);
					continue;
				case 98:
					Vector3Serialized.DeserializeLengthDelimited(stream, ref instance.originRotation, isDelta);
					continue;
				case 109:
					instance.slackLevels.Add(ProtocolParser.ReadSingle(stream));
					continue;
				}
				Key key = ProtocolParser.ReadKey((byte)num2, stream);
				if (key.Field == 0)
				{
					throw new ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
				}
				ProtocolParser.SkipKey(stream, key);
			}
			if (stream.Position != num)
			{
				throw new ProtocolBufferException("Read past max limit");
			}
			return instance;
		}

		public static IOConnection DeserializeLength(Stream stream, int length, IOConnection instance, bool isDelta)
		{
			if (!isDelta)
			{
				if (instance.linePointList == null)
				{
					instance.linePointList = Pool.Get<List<LineVec>>();
				}
				if (instance.lineAnchorList == null)
				{
					instance.lineAnchorList = Pool.Get<List<WireLineAnchorInfo>>();
				}
				if (instance.slackLevels == null)
				{
					instance.slackLevels = Pool.Get<List<float>>();
				}
			}
			long num = stream.Position + length;
			while (stream.Position < num)
			{
				int num2 = stream.ReadByte();
				switch (num2)
				{
				case -1:
					throw new EndOfStreamException();
				case 10:
					instance.niceName = ProtocolParser.ReadString(stream);
					continue;
				case 16:
					instance.type = (int)ProtocolParser.ReadUInt64(stream);
					continue;
				case 24:
					instance.connectedID = new NetworkableId(ProtocolParser.ReadUInt64(stream));
					continue;
				case 32:
					instance.connectedToSlot = (int)ProtocolParser.ReadUInt64(stream);
					continue;
				case 40:
					instance.inUse = ProtocolParser.ReadBool(stream);
					continue;
				case 50:
					instance.linePointList.Add(LineVec.DeserializeLengthDelimited(stream));
					continue;
				case 56:
					instance.colour = (int)ProtocolParser.ReadUInt64(stream);
					continue;
				case 66:
					Vector3Serialized.DeserializeLengthDelimited(stream, ref instance.worldSpaceRotation, isDelta);
					continue;
				case 77:
					instance.lineThickness = ProtocolParser.ReadSingle(stream);
					continue;
				case 82:
					instance.lineAnchorList.Add(WireLineAnchorInfo.DeserializeLengthDelimited(stream));
					continue;
				case 90:
					Vector3Serialized.DeserializeLengthDelimited(stream, ref instance.originPosition, isDelta);
					continue;
				case 98:
					Vector3Serialized.DeserializeLengthDelimited(stream, ref instance.originRotation, isDelta);
					continue;
				case 109:
					instance.slackLevels.Add(ProtocolParser.ReadSingle(stream));
					continue;
				}
				Key key = ProtocolParser.ReadKey((byte)num2, stream);
				if (key.Field == 0)
				{
					throw new ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
				}
				ProtocolParser.SkipKey(stream, key);
			}
			if (stream.Position != num)
			{
				throw new ProtocolBufferException("Read past max limit");
			}
			return instance;
		}

		public static void SerializeDelta(Stream stream, IOConnection instance, IOConnection previous)
		{
			MemoryStream obj = Pool.Get<MemoryStream>();
			if (instance.niceName != null && instance.niceName != previous.niceName)
			{
				stream.WriteByte(10);
				ProtocolParser.WriteString(stream, instance.niceName);
			}
			if (instance.type != previous.type)
			{
				stream.WriteByte(16);
				ProtocolParser.WriteUInt64(stream, (ulong)instance.type);
			}
			stream.WriteByte(24);
			ProtocolParser.WriteUInt64(stream, instance.connectedID.Value);
			if (instance.connectedToSlot != previous.connectedToSlot)
			{
				stream.WriteByte(32);
				ProtocolParser.WriteUInt64(stream, (ulong)instance.connectedToSlot);
			}
			stream.WriteByte(40);
			ProtocolParser.WriteBool(stream, instance.inUse);
			if (instance.linePointList != null)
			{
				for (int i = 0; i < instance.linePointList.Count; i++)
				{
					LineVec lineVec = instance.linePointList[i];
					stream.WriteByte(50);
					obj.SetLength(0L);
					LineVec.SerializeDelta(obj, lineVec, lineVec);
					uint num = (uint)obj.Length;
					ProtocolParser.WriteUInt32(stream, num);
					stream.Write(obj.GetBuffer(), 0, (int)num);
				}
			}
			if (instance.colour != previous.colour)
			{
				stream.WriteByte(56);
				ProtocolParser.WriteUInt64(stream, (ulong)instance.colour);
			}
			if (instance.worldSpaceRotation != previous.worldSpaceRotation)
			{
				stream.WriteByte(66);
				obj.SetLength(0L);
				Vector3Serialized.SerializeDelta(obj, instance.worldSpaceRotation, previous.worldSpaceRotation);
				uint num2 = (uint)obj.Length;
				ProtocolParser.WriteUInt32(stream, num2);
				stream.Write(obj.GetBuffer(), 0, (int)num2);
			}
			if (instance.lineThickness != previous.lineThickness)
			{
				stream.WriteByte(77);
				ProtocolParser.WriteSingle(stream, instance.lineThickness);
			}
			if (instance.lineAnchorList != null)
			{
				for (int j = 0; j < instance.lineAnchorList.Count; j++)
				{
					WireLineAnchorInfo wireLineAnchorInfo = instance.lineAnchorList[j];
					stream.WriteByte(82);
					obj.SetLength(0L);
					WireLineAnchorInfo.SerializeDelta(obj, wireLineAnchorInfo, wireLineAnchorInfo);
					uint num3 = (uint)obj.Length;
					ProtocolParser.WriteUInt32(stream, num3);
					stream.Write(obj.GetBuffer(), 0, (int)num3);
				}
			}
			if (instance.originPosition != previous.originPosition)
			{
				stream.WriteByte(90);
				obj.SetLength(0L);
				Vector3Serialized.SerializeDelta(obj, instance.originPosition, previous.originPosition);
				uint num4 = (uint)obj.Length;
				ProtocolParser.WriteUInt32(stream, num4);
				stream.Write(obj.GetBuffer(), 0, (int)num4);
			}
			if (instance.originRotation != previous.originRotation)
			{
				stream.WriteByte(98);
				obj.SetLength(0L);
				Vector3Serialized.SerializeDelta(obj, instance.originRotation, previous.originRotation);
				uint num5 = (uint)obj.Length;
				ProtocolParser.WriteUInt32(stream, num5);
				stream.Write(obj.GetBuffer(), 0, (int)num5);
			}
			if (instance.slackLevels != null)
			{
				for (int k = 0; k < instance.slackLevels.Count; k++)
				{
					float f = instance.slackLevels[k];
					stream.WriteByte(109);
					ProtocolParser.WriteSingle(stream, f);
				}
			}
			Pool.FreeUnmanaged(ref obj);
		}

		public static void Serialize(Stream stream, IOConnection instance)
		{
			MemoryStream obj = Pool.Get<MemoryStream>();
			if (instance.niceName != null)
			{
				stream.WriteByte(10);
				ProtocolParser.WriteString(stream, instance.niceName);
			}
			if (instance.type != 0)
			{
				stream.WriteByte(16);
				ProtocolParser.WriteUInt64(stream, (ulong)instance.type);
			}
			if (instance.connectedID != default(NetworkableId))
			{
				stream.WriteByte(24);
				ProtocolParser.WriteUInt64(stream, instance.connectedID.Value);
			}
			if (instance.connectedToSlot != 0)
			{
				stream.WriteByte(32);
				ProtocolParser.WriteUInt64(stream, (ulong)instance.connectedToSlot);
			}
			if (instance.inUse)
			{
				stream.WriteByte(40);
				ProtocolParser.WriteBool(stream, instance.inUse);
			}
			if (instance.linePointList != null)
			{
				for (int i = 0; i < instance.linePointList.Count; i++)
				{
					LineVec instance2 = instance.linePointList[i];
					stream.WriteByte(50);
					obj.SetLength(0L);
					LineVec.Serialize(obj, instance2);
					uint num = (uint)obj.Length;
					ProtocolParser.WriteUInt32(stream, num);
					stream.Write(obj.GetBuffer(), 0, (int)num);
				}
			}
			if (instance.colour != 0)
			{
				stream.WriteByte(56);
				ProtocolParser.WriteUInt64(stream, (ulong)instance.colour);
			}
			if (instance.worldSpaceRotation != default(Vector3))
			{
				stream.WriteByte(66);
				obj.SetLength(0L);
				Vector3Serialized.Serialize(obj, instance.worldSpaceRotation);
				uint num2 = (uint)obj.Length;
				ProtocolParser.WriteUInt32(stream, num2);
				stream.Write(obj.GetBuffer(), 0, (int)num2);
			}
			if (instance.lineThickness != 0f)
			{
				stream.WriteByte(77);
				ProtocolParser.WriteSingle(stream, instance.lineThickness);
			}
			if (instance.lineAnchorList != null)
			{
				for (int j = 0; j < instance.lineAnchorList.Count; j++)
				{
					WireLineAnchorInfo instance3 = instance.lineAnchorList[j];
					stream.WriteByte(82);
					obj.SetLength(0L);
					WireLineAnchorInfo.Serialize(obj, instance3);
					uint num3 = (uint)obj.Length;
					ProtocolParser.WriteUInt32(stream, num3);
					stream.Write(obj.GetBuffer(), 0, (int)num3);
				}
			}
			if (instance.originPosition != default(Vector3))
			{
				stream.WriteByte(90);
				obj.SetLength(0L);
				Vector3Serialized.Serialize(obj, instance.originPosition);
				uint num4 = (uint)obj.Length;
				ProtocolParser.WriteUInt32(stream, num4);
				stream.Write(obj.GetBuffer(), 0, (int)num4);
			}
			if (instance.originRotation != default(Vector3))
			{
				stream.WriteByte(98);
				obj.SetLength(0L);
				Vector3Serialized.Serialize(obj, instance.originRotation);
				uint num5 = (uint)obj.Length;
				ProtocolParser.WriteUInt32(stream, num5);
				stream.Write(obj.GetBuffer(), 0, (int)num5);
			}
			if (instance.slackLevels != null)
			{
				for (int k = 0; k < instance.slackLevels.Count; k++)
				{
					float f = instance.slackLevels[k];
					stream.WriteByte(109);
					ProtocolParser.WriteSingle(stream, f);
				}
			}
			Pool.FreeUnmanaged(ref obj);
		}

		public byte[] ToProtoBytes()
		{
			return SerializeToBytes(this);
		}

		public void ToProto(Stream stream)
		{
			Serialize(stream, this);
		}

		public static byte[] SerializeToBytes(IOConnection instance)
		{
			using MemoryStream memoryStream = new MemoryStream();
			Serialize(memoryStream, instance);
			return memoryStream.ToArray();
		}

		public static void SerializeLengthDelimited(Stream stream, IOConnection instance)
		{
			byte[] array = SerializeToBytes(instance);
			ProtocolParser.WriteUInt32(stream, (uint)array.Length);
			stream.Write(array, 0, array.Length);
		}

		public void InspectUids(UidInspector<ulong> action)
		{
			action(UidType.NetworkableId, ref connectedID.Value);
			if (linePointList != null)
			{
				for (int i = 0; i < linePointList.Count; i++)
				{
					linePointList[i]?.InspectUids(action);
				}
			}
			if (lineAnchorList != null)
			{
				for (int j = 0; j < lineAnchorList.Count; j++)
				{
					lineAnchorList[j]?.InspectUids(action);
				}
			}
		}
	}

	[NonSerialized]
	public List<IOConnection> inputs;

	[NonSerialized]
	public List<IOConnection> outputs;

	[NonSerialized]
	public NetworkableId genericEntRef1;

	[NonSerialized]
	public NetworkableId genericEntRef2;

	[NonSerialized]
	public NetworkableId genericEntRef3;

	[NonSerialized]
	public int genericInt1;

	[NonSerialized]
	public int genericInt2;

	[NonSerialized]
	public float genericFloat1;

	[NonSerialized]
	public float genericFloat2;

	[NonSerialized]
	public int genericInt3;

	public bool ShouldPool = true;

	private bool _disposed;

	public static void ResetToPool(IOEntity instance)
	{
		if (!instance.ShouldPool)
		{
			return;
		}
		if (instance.inputs != null)
		{
			for (int i = 0; i < instance.inputs.Count; i++)
			{
				if (instance.inputs[i] != null)
				{
					instance.inputs[i].ResetToPool();
					instance.inputs[i] = null;
				}
			}
			List<IOConnection> obj = instance.inputs;
			Pool.Free(ref obj, freeElements: false);
			instance.inputs = obj;
		}
		if (instance.outputs != null)
		{
			for (int j = 0; j < instance.outputs.Count; j++)
			{
				if (instance.outputs[j] != null)
				{
					instance.outputs[j].ResetToPool();
					instance.outputs[j] = null;
				}
			}
			List<IOConnection> obj2 = instance.outputs;
			Pool.Free(ref obj2, freeElements: false);
			instance.outputs = obj2;
		}
		instance.genericEntRef1 = default(NetworkableId);
		instance.genericEntRef2 = default(NetworkableId);
		instance.genericEntRef3 = default(NetworkableId);
		instance.genericInt1 = 0;
		instance.genericInt2 = 0;
		instance.genericFloat1 = 0f;
		instance.genericFloat2 = 0f;
		instance.genericInt3 = 0;
		Pool.Free(ref instance);
	}

	public void ResetToPool()
	{
		ResetToPool(this);
	}

	public virtual void Dispose()
	{
		if (!ShouldPool)
		{
			throw new Exception("Trying to dispose IOEntity with ShouldPool set to false!");
		}
		if (!_disposed)
		{
			ResetToPool();
			_disposed = true;
		}
	}

	public virtual void EnterPool()
	{
		_disposed = true;
	}

	public virtual void LeavePool()
	{
		_disposed = false;
	}

	public void CopyTo(IOEntity instance)
	{
		if (inputs != null)
		{
			instance.inputs = Pool.Get<List<IOConnection>>();
			for (int i = 0; i < inputs.Count; i++)
			{
				IOConnection item = inputs[i].Copy();
				instance.inputs.Add(item);
			}
		}
		else
		{
			instance.inputs = null;
		}
		if (outputs != null)
		{
			instance.outputs = Pool.Get<List<IOConnection>>();
			for (int j = 0; j < outputs.Count; j++)
			{
				IOConnection item2 = outputs[j].Copy();
				instance.outputs.Add(item2);
			}
		}
		else
		{
			instance.outputs = null;
		}
		instance.genericEntRef1 = genericEntRef1;
		instance.genericEntRef2 = genericEntRef2;
		instance.genericEntRef3 = genericEntRef3;
		instance.genericInt1 = genericInt1;
		instance.genericInt2 = genericInt2;
		instance.genericFloat1 = genericFloat1;
		instance.genericFloat2 = genericFloat2;
		instance.genericInt3 = genericInt3;
	}

	public IOEntity Copy()
	{
		IOEntity iOEntity = Pool.Get<IOEntity>();
		CopyTo(iOEntity);
		return iOEntity;
	}

	public static IOEntity Deserialize(Stream stream)
	{
		IOEntity iOEntity = Pool.Get<IOEntity>();
		Deserialize(stream, iOEntity, isDelta: false);
		return iOEntity;
	}

	public static IOEntity DeserializeLengthDelimited(Stream stream)
	{
		IOEntity iOEntity = Pool.Get<IOEntity>();
		DeserializeLengthDelimited(stream, iOEntity, isDelta: false);
		return iOEntity;
	}

	public static IOEntity DeserializeLength(Stream stream, int length)
	{
		IOEntity iOEntity = Pool.Get<IOEntity>();
		DeserializeLength(stream, length, iOEntity, isDelta: false);
		return iOEntity;
	}

	public static IOEntity Deserialize(byte[] buffer)
	{
		IOEntity iOEntity = Pool.Get<IOEntity>();
		using MemoryStream stream = new MemoryStream(buffer);
		Deserialize(stream, iOEntity, isDelta: false);
		return iOEntity;
	}

	public void FromProto(Stream stream, bool isDelta = false)
	{
		Deserialize(stream, this, isDelta);
	}

	public virtual void WriteToStream(Stream stream)
	{
		Serialize(stream, this);
	}

	public virtual void WriteToStreamDelta(Stream stream, IOEntity previous)
	{
		if (previous == null)
		{
			Serialize(stream, this);
		}
		else
		{
			SerializeDelta(stream, this, previous);
		}
	}

	public virtual void ReadFromStream(Stream stream, int size, bool isDelta = false)
	{
		DeserializeLength(stream, size, this, isDelta);
	}

	public static IOEntity Deserialize(byte[] buffer, IOEntity instance, bool isDelta = false)
	{
		using MemoryStream stream = new MemoryStream(buffer);
		Deserialize(stream, instance, isDelta);
		return instance;
	}

	public static IOEntity Deserialize(Stream stream, IOEntity instance, bool isDelta)
	{
		if (!isDelta)
		{
			if (instance.inputs == null)
			{
				instance.inputs = Pool.Get<List<IOConnection>>();
			}
			if (instance.outputs == null)
			{
				instance.outputs = Pool.Get<List<IOConnection>>();
			}
		}
		while (true)
		{
			int num = stream.ReadByte();
			switch (num)
			{
			case 10:
				instance.inputs.Add(IOConnection.DeserializeLengthDelimited(stream));
				continue;
			case 18:
				instance.outputs.Add(IOConnection.DeserializeLengthDelimited(stream));
				continue;
			case 24:
				instance.genericEntRef1 = new NetworkableId(ProtocolParser.ReadUInt64(stream));
				continue;
			case 32:
				instance.genericEntRef2 = new NetworkableId(ProtocolParser.ReadUInt64(stream));
				continue;
			case 40:
				instance.genericEntRef3 = new NetworkableId(ProtocolParser.ReadUInt64(stream));
				continue;
			case 48:
				instance.genericInt1 = (int)ProtocolParser.ReadUInt64(stream);
				continue;
			case 56:
				instance.genericInt2 = (int)ProtocolParser.ReadUInt64(stream);
				continue;
			case 69:
				instance.genericFloat1 = ProtocolParser.ReadSingle(stream);
				continue;
			case 77:
				instance.genericFloat2 = ProtocolParser.ReadSingle(stream);
				continue;
			case 80:
				instance.genericInt3 = (int)ProtocolParser.ReadUInt64(stream);
				continue;
			case -1:
				return instance;
			}
			Key key = ProtocolParser.ReadKey((byte)num, stream);
			if (key.Field == 0)
			{
				throw new ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
			}
			ProtocolParser.SkipKey(stream, key);
		}
	}

	public static IOEntity DeserializeLengthDelimited(Stream stream, IOEntity instance, bool isDelta)
	{
		if (!isDelta)
		{
			if (instance.inputs == null)
			{
				instance.inputs = Pool.Get<List<IOConnection>>();
			}
			if (instance.outputs == null)
			{
				instance.outputs = Pool.Get<List<IOConnection>>();
			}
		}
		long num = ProtocolParser.ReadUInt32(stream);
		num += stream.Position;
		while (stream.Position < num)
		{
			int num2 = stream.ReadByte();
			switch (num2)
			{
			case -1:
				throw new EndOfStreamException();
			case 10:
				instance.inputs.Add(IOConnection.DeserializeLengthDelimited(stream));
				continue;
			case 18:
				instance.outputs.Add(IOConnection.DeserializeLengthDelimited(stream));
				continue;
			case 24:
				instance.genericEntRef1 = new NetworkableId(ProtocolParser.ReadUInt64(stream));
				continue;
			case 32:
				instance.genericEntRef2 = new NetworkableId(ProtocolParser.ReadUInt64(stream));
				continue;
			case 40:
				instance.genericEntRef3 = new NetworkableId(ProtocolParser.ReadUInt64(stream));
				continue;
			case 48:
				instance.genericInt1 = (int)ProtocolParser.ReadUInt64(stream);
				continue;
			case 56:
				instance.genericInt2 = (int)ProtocolParser.ReadUInt64(stream);
				continue;
			case 69:
				instance.genericFloat1 = ProtocolParser.ReadSingle(stream);
				continue;
			case 77:
				instance.genericFloat2 = ProtocolParser.ReadSingle(stream);
				continue;
			case 80:
				instance.genericInt3 = (int)ProtocolParser.ReadUInt64(stream);
				continue;
			}
			Key key = ProtocolParser.ReadKey((byte)num2, stream);
			if (key.Field == 0)
			{
				throw new ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
			}
			ProtocolParser.SkipKey(stream, key);
		}
		if (stream.Position != num)
		{
			throw new ProtocolBufferException("Read past max limit");
		}
		return instance;
	}

	public static IOEntity DeserializeLength(Stream stream, int length, IOEntity instance, bool isDelta)
	{
		if (!isDelta)
		{
			if (instance.inputs == null)
			{
				instance.inputs = Pool.Get<List<IOConnection>>();
			}
			if (instance.outputs == null)
			{
				instance.outputs = Pool.Get<List<IOConnection>>();
			}
		}
		long num = stream.Position + length;
		while (stream.Position < num)
		{
			int num2 = stream.ReadByte();
			switch (num2)
			{
			case -1:
				throw new EndOfStreamException();
			case 10:
				instance.inputs.Add(IOConnection.DeserializeLengthDelimited(stream));
				continue;
			case 18:
				instance.outputs.Add(IOConnection.DeserializeLengthDelimited(stream));
				continue;
			case 24:
				instance.genericEntRef1 = new NetworkableId(ProtocolParser.ReadUInt64(stream));
				continue;
			case 32:
				instance.genericEntRef2 = new NetworkableId(ProtocolParser.ReadUInt64(stream));
				continue;
			case 40:
				instance.genericEntRef3 = new NetworkableId(ProtocolParser.ReadUInt64(stream));
				continue;
			case 48:
				instance.genericInt1 = (int)ProtocolParser.ReadUInt64(stream);
				continue;
			case 56:
				instance.genericInt2 = (int)ProtocolParser.ReadUInt64(stream);
				continue;
			case 69:
				instance.genericFloat1 = ProtocolParser.ReadSingle(stream);
				continue;
			case 77:
				instance.genericFloat2 = ProtocolParser.ReadSingle(stream);
				continue;
			case 80:
				instance.genericInt3 = (int)ProtocolParser.ReadUInt64(stream);
				continue;
			}
			Key key = ProtocolParser.ReadKey((byte)num2, stream);
			if (key.Field == 0)
			{
				throw new ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
			}
			ProtocolParser.SkipKey(stream, key);
		}
		if (stream.Position != num)
		{
			throw new ProtocolBufferException("Read past max limit");
		}
		return instance;
	}

	public static void SerializeDelta(Stream stream, IOEntity instance, IOEntity previous)
	{
		MemoryStream obj = Pool.Get<MemoryStream>();
		if (instance.inputs != null)
		{
			for (int i = 0; i < instance.inputs.Count; i++)
			{
				IOConnection iOConnection = instance.inputs[i];
				stream.WriteByte(10);
				obj.SetLength(0L);
				IOConnection.SerializeDelta(obj, iOConnection, iOConnection);
				uint num = (uint)obj.Length;
				ProtocolParser.WriteUInt32(stream, num);
				stream.Write(obj.GetBuffer(), 0, (int)num);
			}
		}
		if (instance.outputs != null)
		{
			for (int j = 0; j < instance.outputs.Count; j++)
			{
				IOConnection iOConnection2 = instance.outputs[j];
				stream.WriteByte(18);
				obj.SetLength(0L);
				IOConnection.SerializeDelta(obj, iOConnection2, iOConnection2);
				uint num2 = (uint)obj.Length;
				ProtocolParser.WriteUInt32(stream, num2);
				stream.Write(obj.GetBuffer(), 0, (int)num2);
			}
		}
		stream.WriteByte(24);
		ProtocolParser.WriteUInt64(stream, instance.genericEntRef1.Value);
		stream.WriteByte(32);
		ProtocolParser.WriteUInt64(stream, instance.genericEntRef2.Value);
		stream.WriteByte(40);
		ProtocolParser.WriteUInt64(stream, instance.genericEntRef3.Value);
		if (instance.genericInt1 != previous.genericInt1)
		{
			stream.WriteByte(48);
			ProtocolParser.WriteUInt64(stream, (ulong)instance.genericInt1);
		}
		if (instance.genericInt2 != previous.genericInt2)
		{
			stream.WriteByte(56);
			ProtocolParser.WriteUInt64(stream, (ulong)instance.genericInt2);
		}
		if (instance.genericFloat1 != previous.genericFloat1)
		{
			stream.WriteByte(69);
			ProtocolParser.WriteSingle(stream, instance.genericFloat1);
		}
		if (instance.genericFloat2 != previous.genericFloat2)
		{
			stream.WriteByte(77);
			ProtocolParser.WriteSingle(stream, instance.genericFloat2);
		}
		if (instance.genericInt3 != previous.genericInt3)
		{
			stream.WriteByte(80);
			ProtocolParser.WriteUInt64(stream, (ulong)instance.genericInt3);
		}
		Pool.FreeUnmanaged(ref obj);
	}

	public static void Serialize(Stream stream, IOEntity instance)
	{
		MemoryStream obj = Pool.Get<MemoryStream>();
		if (instance.inputs != null)
		{
			for (int i = 0; i < instance.inputs.Count; i++)
			{
				IOConnection instance2 = instance.inputs[i];
				stream.WriteByte(10);
				obj.SetLength(0L);
				IOConnection.Serialize(obj, instance2);
				uint num = (uint)obj.Length;
				ProtocolParser.WriteUInt32(stream, num);
				stream.Write(obj.GetBuffer(), 0, (int)num);
			}
		}
		if (instance.outputs != null)
		{
			for (int j = 0; j < instance.outputs.Count; j++)
			{
				IOConnection instance3 = instance.outputs[j];
				stream.WriteByte(18);
				obj.SetLength(0L);
				IOConnection.Serialize(obj, instance3);
				uint num2 = (uint)obj.Length;
				ProtocolParser.WriteUInt32(stream, num2);
				stream.Write(obj.GetBuffer(), 0, (int)num2);
			}
		}
		if (instance.genericEntRef1 != default(NetworkableId))
		{
			stream.WriteByte(24);
			ProtocolParser.WriteUInt64(stream, instance.genericEntRef1.Value);
		}
		if (instance.genericEntRef2 != default(NetworkableId))
		{
			stream.WriteByte(32);
			ProtocolParser.WriteUInt64(stream, instance.genericEntRef2.Value);
		}
		if (instance.genericEntRef3 != default(NetworkableId))
		{
			stream.WriteByte(40);
			ProtocolParser.WriteUInt64(stream, instance.genericEntRef3.Value);
		}
		if (instance.genericInt1 != 0)
		{
			stream.WriteByte(48);
			ProtocolParser.WriteUInt64(stream, (ulong)instance.genericInt1);
		}
		if (instance.genericInt2 != 0)
		{
			stream.WriteByte(56);
			ProtocolParser.WriteUInt64(stream, (ulong)instance.genericInt2);
		}
		if (instance.genericFloat1 != 0f)
		{
			stream.WriteByte(69);
			ProtocolParser.WriteSingle(stream, instance.genericFloat1);
		}
		if (instance.genericFloat2 != 0f)
		{
			stream.WriteByte(77);
			ProtocolParser.WriteSingle(stream, instance.genericFloat2);
		}
		if (instance.genericInt3 != 0)
		{
			stream.WriteByte(80);
			ProtocolParser.WriteUInt64(stream, (ulong)instance.genericInt3);
		}
		Pool.FreeUnmanaged(ref obj);
	}

	public byte[] ToProtoBytes()
	{
		return SerializeToBytes(this);
	}

	public void ToProto(Stream stream)
	{
		Serialize(stream, this);
	}

	public static byte[] SerializeToBytes(IOEntity instance)
	{
		using MemoryStream memoryStream = new MemoryStream();
		Serialize(memoryStream, instance);
		return memoryStream.ToArray();
	}

	public static void SerializeLengthDelimited(Stream stream, IOEntity instance)
	{
		byte[] array = SerializeToBytes(instance);
		ProtocolParser.WriteUInt32(stream, (uint)array.Length);
		stream.Write(array, 0, array.Length);
	}

	public void InspectUids(UidInspector<ulong> action)
	{
		if (inputs != null)
		{
			for (int i = 0; i < inputs.Count; i++)
			{
				inputs[i]?.InspectUids(action);
			}
		}
		if (outputs != null)
		{
			for (int j = 0; j < outputs.Count; j++)
			{
				outputs[j]?.InspectUids(action);
			}
		}
		action(UidType.NetworkableId, ref genericEntRef1.Value);
		action(UidType.NetworkableId, ref genericEntRef2.Value);
		action(UidType.NetworkableId, ref genericEntRef3.Value);
	}
}
