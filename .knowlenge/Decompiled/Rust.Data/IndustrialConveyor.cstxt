using System;
using System.Collections.Generic;
using System.IO;
using Facepunch;
using ProtoBuf;
using SilentOrbit.ProtocolBuffers;

public class IndustrialConveyor : IDisposable, Pool.IPooled, IProto
{
	public class ItemFilter : IDisposable, Pool.IPooled, IProto
	{
		[NonSerialized]
		public int itemDef;

		[NonSerialized]
		public int itemCategory;

		[NonSerialized]
		public int maxAmountInDestination;

		[NonSerialized]
		public int isBlueprint;

		[NonSerialized]
		public int bufferAmount;

		[NonSerialized]
		public int retainMinimum;

		[NonSerialized]
		public int bufferTransferRemaining;

		public bool ShouldPool = true;

		private bool _disposed;

		public static void ResetToPool(ItemFilter instance)
		{
			if (instance.ShouldPool)
			{
				instance.itemDef = 0;
				instance.itemCategory = 0;
				instance.maxAmountInDestination = 0;
				instance.isBlueprint = 0;
				instance.bufferAmount = 0;
				instance.retainMinimum = 0;
				instance.bufferTransferRemaining = 0;
				Pool.Free(ref instance);
			}
		}

		public void ResetToPool()
		{
			ResetToPool(this);
		}

		public virtual void Dispose()
		{
			if (!ShouldPool)
			{
				throw new Exception("Trying to dispose ItemFilter with ShouldPool set to false!");
			}
			if (!_disposed)
			{
				ResetToPool();
				_disposed = true;
			}
		}

		public virtual void EnterPool()
		{
			_disposed = true;
		}

		public virtual void LeavePool()
		{
			_disposed = false;
		}

		public void CopyTo(ItemFilter instance)
		{
			instance.itemDef = itemDef;
			instance.itemCategory = itemCategory;
			instance.maxAmountInDestination = maxAmountInDestination;
			instance.isBlueprint = isBlueprint;
			instance.bufferAmount = bufferAmount;
			instance.retainMinimum = retainMinimum;
			instance.bufferTransferRemaining = bufferTransferRemaining;
		}

		public ItemFilter Copy()
		{
			ItemFilter itemFilter = Pool.Get<ItemFilter>();
			CopyTo(itemFilter);
			return itemFilter;
		}

		public static ItemFilter Deserialize(Stream stream)
		{
			ItemFilter itemFilter = Pool.Get<ItemFilter>();
			Deserialize(stream, itemFilter, isDelta: false);
			return itemFilter;
		}

		public static ItemFilter DeserializeLengthDelimited(Stream stream)
		{
			ItemFilter itemFilter = Pool.Get<ItemFilter>();
			DeserializeLengthDelimited(stream, itemFilter, isDelta: false);
			return itemFilter;
		}

		public static ItemFilter DeserializeLength(Stream stream, int length)
		{
			ItemFilter itemFilter = Pool.Get<ItemFilter>();
			DeserializeLength(stream, length, itemFilter, isDelta: false);
			return itemFilter;
		}

		public static ItemFilter Deserialize(byte[] buffer)
		{
			ItemFilter itemFilter = Pool.Get<ItemFilter>();
			using MemoryStream stream = new MemoryStream(buffer);
			Deserialize(stream, itemFilter, isDelta: false);
			return itemFilter;
		}

		public void FromProto(Stream stream, bool isDelta = false)
		{
			Deserialize(stream, this, isDelta);
		}

		public virtual void WriteToStream(Stream stream)
		{
			Serialize(stream, this);
		}

		public virtual void WriteToStreamDelta(Stream stream, ItemFilter previous)
		{
			if (previous == null)
			{
				Serialize(stream, this);
			}
			else
			{
				SerializeDelta(stream, this, previous);
			}
		}

		public virtual void ReadFromStream(Stream stream, int size, bool isDelta = false)
		{
			DeserializeLength(stream, size, this, isDelta);
		}

		public static ItemFilter Deserialize(byte[] buffer, ItemFilter instance, bool isDelta = false)
		{
			using MemoryStream stream = new MemoryStream(buffer);
			Deserialize(stream, instance, isDelta);
			return instance;
		}

		public static ItemFilter Deserialize(Stream stream, ItemFilter instance, bool isDelta)
		{
			while (true)
			{
				int num = stream.ReadByte();
				switch (num)
				{
				case 8:
					instance.itemDef = (int)ProtocolParser.ReadUInt64(stream);
					continue;
				case 16:
					instance.itemCategory = (int)ProtocolParser.ReadUInt64(stream);
					continue;
				case 24:
					instance.maxAmountInDestination = (int)ProtocolParser.ReadUInt64(stream);
					continue;
				case 32:
					instance.isBlueprint = (int)ProtocolParser.ReadUInt64(stream);
					continue;
				case 40:
					instance.bufferAmount = (int)ProtocolParser.ReadUInt64(stream);
					continue;
				case 48:
					instance.retainMinimum = (int)ProtocolParser.ReadUInt64(stream);
					continue;
				case 56:
					instance.bufferTransferRemaining = (int)ProtocolParser.ReadUInt64(stream);
					continue;
				case -1:
					return instance;
				}
				Key key = ProtocolParser.ReadKey((byte)num, stream);
				if (key.Field == 0)
				{
					throw new ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
				}
				ProtocolParser.SkipKey(stream, key);
			}
		}

		public static ItemFilter DeserializeLengthDelimited(Stream stream, ItemFilter instance, bool isDelta)
		{
			long num = ProtocolParser.ReadUInt32(stream);
			num += stream.Position;
			while (stream.Position < num)
			{
				int num2 = stream.ReadByte();
				switch (num2)
				{
				case -1:
					throw new EndOfStreamException();
				case 8:
					instance.itemDef = (int)ProtocolParser.ReadUInt64(stream);
					continue;
				case 16:
					instance.itemCategory = (int)ProtocolParser.ReadUInt64(stream);
					continue;
				case 24:
					instance.maxAmountInDestination = (int)ProtocolParser.ReadUInt64(stream);
					continue;
				case 32:
					instance.isBlueprint = (int)ProtocolParser.ReadUInt64(stream);
					continue;
				case 40:
					instance.bufferAmount = (int)ProtocolParser.ReadUInt64(stream);
					continue;
				case 48:
					instance.retainMinimum = (int)ProtocolParser.ReadUInt64(stream);
					continue;
				case 56:
					instance.bufferTransferRemaining = (int)ProtocolParser.ReadUInt64(stream);
					continue;
				}
				Key key = ProtocolParser.ReadKey((byte)num2, stream);
				if (key.Field == 0)
				{
					throw new ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
				}
				ProtocolParser.SkipKey(stream, key);
			}
			if (stream.Position != num)
			{
				throw new ProtocolBufferException("Read past max limit");
			}
			return instance;
		}

		public static ItemFilter DeserializeLength(Stream stream, int length, ItemFilter instance, bool isDelta)
		{
			long num = stream.Position + length;
			while (stream.Position < num)
			{
				int num2 = stream.ReadByte();
				switch (num2)
				{
				case -1:
					throw new EndOfStreamException();
				case 8:
					instance.itemDef = (int)ProtocolParser.ReadUInt64(stream);
					continue;
				case 16:
					instance.itemCategory = (int)ProtocolParser.ReadUInt64(stream);
					continue;
				case 24:
					instance.maxAmountInDestination = (int)ProtocolParser.ReadUInt64(stream);
					continue;
				case 32:
					instance.isBlueprint = (int)ProtocolParser.ReadUInt64(stream);
					continue;
				case 40:
					instance.bufferAmount = (int)ProtocolParser.ReadUInt64(stream);
					continue;
				case 48:
					instance.retainMinimum = (int)ProtocolParser.ReadUInt64(stream);
					continue;
				case 56:
					instance.bufferTransferRemaining = (int)ProtocolParser.ReadUInt64(stream);
					continue;
				}
				Key key = ProtocolParser.ReadKey((byte)num2, stream);
				if (key.Field == 0)
				{
					throw new ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
				}
				ProtocolParser.SkipKey(stream, key);
			}
			if (stream.Position != num)
			{
				throw new ProtocolBufferException("Read past max limit");
			}
			return instance;
		}

		public static void SerializeDelta(Stream stream, ItemFilter instance, ItemFilter previous)
		{
			MemoryStream obj = Pool.Get<MemoryStream>();
			if (instance.itemDef != previous.itemDef)
			{
				stream.WriteByte(8);
				ProtocolParser.WriteUInt64(stream, (ulong)instance.itemDef);
			}
			if (instance.itemCategory != previous.itemCategory)
			{
				stream.WriteByte(16);
				ProtocolParser.WriteUInt64(stream, (ulong)instance.itemCategory);
			}
			if (instance.maxAmountInDestination != previous.maxAmountInDestination)
			{
				stream.WriteByte(24);
				ProtocolParser.WriteUInt64(stream, (ulong)instance.maxAmountInDestination);
			}
			if (instance.isBlueprint != previous.isBlueprint)
			{
				stream.WriteByte(32);
				ProtocolParser.WriteUInt64(stream, (ulong)instance.isBlueprint);
			}
			if (instance.bufferAmount != previous.bufferAmount)
			{
				stream.WriteByte(40);
				ProtocolParser.WriteUInt64(stream, (ulong)instance.bufferAmount);
			}
			if (instance.retainMinimum != previous.retainMinimum)
			{
				stream.WriteByte(48);
				ProtocolParser.WriteUInt64(stream, (ulong)instance.retainMinimum);
			}
			if (instance.bufferTransferRemaining != previous.bufferTransferRemaining)
			{
				stream.WriteByte(56);
				ProtocolParser.WriteUInt64(stream, (ulong)instance.bufferTransferRemaining);
			}
			Pool.FreeUnmanaged(ref obj);
		}

		public static void Serialize(Stream stream, ItemFilter instance)
		{
			MemoryStream obj = Pool.Get<MemoryStream>();
			if (instance.itemDef != 0)
			{
				stream.WriteByte(8);
				ProtocolParser.WriteUInt64(stream, (ulong)instance.itemDef);
			}
			if (instance.itemCategory != 0)
			{
				stream.WriteByte(16);
				ProtocolParser.WriteUInt64(stream, (ulong)instance.itemCategory);
			}
			if (instance.maxAmountInDestination != 0)
			{
				stream.WriteByte(24);
				ProtocolParser.WriteUInt64(stream, (ulong)instance.maxAmountInDestination);
			}
			if (instance.isBlueprint != 0)
			{
				stream.WriteByte(32);
				ProtocolParser.WriteUInt64(stream, (ulong)instance.isBlueprint);
			}
			if (instance.bufferAmount != 0)
			{
				stream.WriteByte(40);
				ProtocolParser.WriteUInt64(stream, (ulong)instance.bufferAmount);
			}
			if (instance.retainMinimum != 0)
			{
				stream.WriteByte(48);
				ProtocolParser.WriteUInt64(stream, (ulong)instance.retainMinimum);
			}
			if (instance.bufferTransferRemaining != 0)
			{
				stream.WriteByte(56);
				ProtocolParser.WriteUInt64(stream, (ulong)instance.bufferTransferRemaining);
			}
			Pool.FreeUnmanaged(ref obj);
		}

		public byte[] ToProtoBytes()
		{
			return SerializeToBytes(this);
		}

		public void ToProto(Stream stream)
		{
			Serialize(stream, this);
		}

		public static byte[] SerializeToBytes(ItemFilter instance)
		{
			using MemoryStream memoryStream = new MemoryStream();
			Serialize(memoryStream, instance);
			return memoryStream.ToArray();
		}

		public static void SerializeLengthDelimited(Stream stream, ItemFilter instance)
		{
			byte[] array = SerializeToBytes(instance);
			ProtocolParser.WriteUInt32(stream, (uint)array.Length);
			stream.Write(array, 0, array.Length);
		}

		public void InspectUids(UidInspector<ulong> action)
		{
		}
	}

	public class ItemFilterList : IDisposable, Pool.IPooled, IProto
	{
		[NonSerialized]
		public List<ItemFilter> filters;

		public bool ShouldPool = true;

		private bool _disposed;

		public static void ResetToPool(ItemFilterList instance)
		{
			if (!instance.ShouldPool)
			{
				return;
			}
			if (instance.filters != null)
			{
				for (int i = 0; i < instance.filters.Count; i++)
				{
					if (instance.filters[i] != null)
					{
						instance.filters[i].ResetToPool();
						instance.filters[i] = null;
					}
				}
				List<ItemFilter> obj = instance.filters;
				Pool.Free(ref obj, freeElements: false);
				instance.filters = obj;
			}
			Pool.Free(ref instance);
		}

		public void ResetToPool()
		{
			ResetToPool(this);
		}

		public virtual void Dispose()
		{
			if (!ShouldPool)
			{
				throw new Exception("Trying to dispose ItemFilterList with ShouldPool set to false!");
			}
			if (!_disposed)
			{
				ResetToPool();
				_disposed = true;
			}
		}

		public virtual void EnterPool()
		{
			_disposed = true;
		}

		public virtual void LeavePool()
		{
			_disposed = false;
		}

		public void CopyTo(ItemFilterList instance)
		{
			if (filters != null)
			{
				instance.filters = Pool.Get<List<ItemFilter>>();
				for (int i = 0; i < filters.Count; i++)
				{
					ItemFilter item = filters[i].Copy();
					instance.filters.Add(item);
				}
			}
			else
			{
				instance.filters = null;
			}
		}

		public ItemFilterList Copy()
		{
			ItemFilterList itemFilterList = Pool.Get<ItemFilterList>();
			CopyTo(itemFilterList);
			return itemFilterList;
		}

		public static ItemFilterList Deserialize(Stream stream)
		{
			ItemFilterList itemFilterList = Pool.Get<ItemFilterList>();
			Deserialize(stream, itemFilterList, isDelta: false);
			return itemFilterList;
		}

		public static ItemFilterList DeserializeLengthDelimited(Stream stream)
		{
			ItemFilterList itemFilterList = Pool.Get<ItemFilterList>();
			DeserializeLengthDelimited(stream, itemFilterList, isDelta: false);
			return itemFilterList;
		}

		public static ItemFilterList DeserializeLength(Stream stream, int length)
		{
			ItemFilterList itemFilterList = Pool.Get<ItemFilterList>();
			DeserializeLength(stream, length, itemFilterList, isDelta: false);
			return itemFilterList;
		}

		public static ItemFilterList Deserialize(byte[] buffer)
		{
			ItemFilterList itemFilterList = Pool.Get<ItemFilterList>();
			using MemoryStream stream = new MemoryStream(buffer);
			Deserialize(stream, itemFilterList, isDelta: false);
			return itemFilterList;
		}

		public void FromProto(Stream stream, bool isDelta = false)
		{
			Deserialize(stream, this, isDelta);
		}

		public virtual void WriteToStream(Stream stream)
		{
			Serialize(stream, this);
		}

		public virtual void WriteToStreamDelta(Stream stream, ItemFilterList previous)
		{
			if (previous == null)
			{
				Serialize(stream, this);
			}
			else
			{
				SerializeDelta(stream, this, previous);
			}
		}

		public virtual void ReadFromStream(Stream stream, int size, bool isDelta = false)
		{
			DeserializeLength(stream, size, this, isDelta);
		}

		public static ItemFilterList Deserialize(byte[] buffer, ItemFilterList instance, bool isDelta = false)
		{
			using MemoryStream stream = new MemoryStream(buffer);
			Deserialize(stream, instance, isDelta);
			return instance;
		}

		public static ItemFilterList Deserialize(Stream stream, ItemFilterList instance, bool isDelta)
		{
			if (!isDelta && instance.filters == null)
			{
				instance.filters = Pool.Get<List<ItemFilter>>();
			}
			while (true)
			{
				int num = stream.ReadByte();
				switch (num)
				{
				case 10:
					instance.filters.Add(ItemFilter.DeserializeLengthDelimited(stream));
					continue;
				case -1:
					return instance;
				}
				Key key = ProtocolParser.ReadKey((byte)num, stream);
				if (key.Field == 0)
				{
					throw new ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
				}
				ProtocolParser.SkipKey(stream, key);
			}
		}

		public static ItemFilterList DeserializeLengthDelimited(Stream stream, ItemFilterList instance, bool isDelta)
		{
			if (!isDelta && instance.filters == null)
			{
				instance.filters = Pool.Get<List<ItemFilter>>();
			}
			long num = ProtocolParser.ReadUInt32(stream);
			num += stream.Position;
			while (stream.Position < num)
			{
				int num2 = stream.ReadByte();
				switch (num2)
				{
				case -1:
					throw new EndOfStreamException();
				case 10:
					instance.filters.Add(ItemFilter.DeserializeLengthDelimited(stream));
					continue;
				}
				Key key = ProtocolParser.ReadKey((byte)num2, stream);
				if (key.Field == 0)
				{
					throw new ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
				}
				ProtocolParser.SkipKey(stream, key);
			}
			if (stream.Position != num)
			{
				throw new ProtocolBufferException("Read past max limit");
			}
			return instance;
		}

		public static ItemFilterList DeserializeLength(Stream stream, int length, ItemFilterList instance, bool isDelta)
		{
			if (!isDelta && instance.filters == null)
			{
				instance.filters = Pool.Get<List<ItemFilter>>();
			}
			long num = stream.Position + length;
			while (stream.Position < num)
			{
				int num2 = stream.ReadByte();
				switch (num2)
				{
				case -1:
					throw new EndOfStreamException();
				case 10:
					instance.filters.Add(ItemFilter.DeserializeLengthDelimited(stream));
					continue;
				}
				Key key = ProtocolParser.ReadKey((byte)num2, stream);
				if (key.Field == 0)
				{
					throw new ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
				}
				ProtocolParser.SkipKey(stream, key);
			}
			if (stream.Position != num)
			{
				throw new ProtocolBufferException("Read past max limit");
			}
			return instance;
		}

		public static void SerializeDelta(Stream stream, ItemFilterList instance, ItemFilterList previous)
		{
			MemoryStream obj = Pool.Get<MemoryStream>();
			if (instance.filters != null)
			{
				for (int i = 0; i < instance.filters.Count; i++)
				{
					ItemFilter itemFilter = instance.filters[i];
					stream.WriteByte(10);
					obj.SetLength(0L);
					ItemFilter.SerializeDelta(obj, itemFilter, itemFilter);
					uint num = (uint)obj.Length;
					ProtocolParser.WriteUInt32(stream, num);
					stream.Write(obj.GetBuffer(), 0, (int)num);
				}
			}
			Pool.FreeUnmanaged(ref obj);
		}

		public static void Serialize(Stream stream, ItemFilterList instance)
		{
			MemoryStream obj = Pool.Get<MemoryStream>();
			if (instance.filters != null)
			{
				for (int i = 0; i < instance.filters.Count; i++)
				{
					ItemFilter instance2 = instance.filters[i];
					stream.WriteByte(10);
					obj.SetLength(0L);
					ItemFilter.Serialize(obj, instance2);
					uint num = (uint)obj.Length;
					ProtocolParser.WriteUInt32(stream, num);
					stream.Write(obj.GetBuffer(), 0, (int)num);
				}
			}
			Pool.FreeUnmanaged(ref obj);
		}

		public byte[] ToProtoBytes()
		{
			return SerializeToBytes(this);
		}

		public void ToProto(Stream stream)
		{
			Serialize(stream, this);
		}

		public static byte[] SerializeToBytes(ItemFilterList instance)
		{
			using MemoryStream memoryStream = new MemoryStream();
			Serialize(memoryStream, instance);
			return memoryStream.ToArray();
		}

		public static void SerializeLengthDelimited(Stream stream, ItemFilterList instance)
		{
			byte[] array = SerializeToBytes(instance);
			ProtocolParser.WriteUInt32(stream, (uint)array.Length);
			stream.Write(array, 0, array.Length);
		}

		public void InspectUids(UidInspector<ulong> action)
		{
			if (filters != null)
			{
				for (int i = 0; i < filters.Count; i++)
				{
					filters[i]?.InspectUids(action);
				}
			}
		}
	}

	[NonSerialized]
	public List<ItemFilter> filters;

	[NonSerialized]
	public int conveyorMode;

	public bool ShouldPool = true;

	private bool _disposed;

	public static void ResetToPool(IndustrialConveyor instance)
	{
		if (!instance.ShouldPool)
		{
			return;
		}
		if (instance.filters != null)
		{
			for (int i = 0; i < instance.filters.Count; i++)
			{
				if (instance.filters[i] != null)
				{
					instance.filters[i].ResetToPool();
					instance.filters[i] = null;
				}
			}
			List<ItemFilter> obj = instance.filters;
			Pool.Free(ref obj, freeElements: false);
			instance.filters = obj;
		}
		instance.conveyorMode = 0;
		Pool.Free(ref instance);
	}

	public void ResetToPool()
	{
		ResetToPool(this);
	}

	public virtual void Dispose()
	{
		if (!ShouldPool)
		{
			throw new Exception("Trying to dispose IndustrialConveyor with ShouldPool set to false!");
		}
		if (!_disposed)
		{
			ResetToPool();
			_disposed = true;
		}
	}

	public virtual void EnterPool()
	{
		_disposed = true;
	}

	public virtual void LeavePool()
	{
		_disposed = false;
	}

	public void CopyTo(IndustrialConveyor instance)
	{
		if (filters != null)
		{
			instance.filters = Pool.Get<List<ItemFilter>>();
			for (int i = 0; i < filters.Count; i++)
			{
				ItemFilter item = filters[i].Copy();
				instance.filters.Add(item);
			}
		}
		else
		{
			instance.filters = null;
		}
		instance.conveyorMode = conveyorMode;
	}

	public IndustrialConveyor Copy()
	{
		IndustrialConveyor industrialConveyor = Pool.Get<IndustrialConveyor>();
		CopyTo(industrialConveyor);
		return industrialConveyor;
	}

	public static IndustrialConveyor Deserialize(Stream stream)
	{
		IndustrialConveyor industrialConveyor = Pool.Get<IndustrialConveyor>();
		Deserialize(stream, industrialConveyor, isDelta: false);
		return industrialConveyor;
	}

	public static IndustrialConveyor DeserializeLengthDelimited(Stream stream)
	{
		IndustrialConveyor industrialConveyor = Pool.Get<IndustrialConveyor>();
		DeserializeLengthDelimited(stream, industrialConveyor, isDelta: false);
		return industrialConveyor;
	}

	public static IndustrialConveyor DeserializeLength(Stream stream, int length)
	{
		IndustrialConveyor industrialConveyor = Pool.Get<IndustrialConveyor>();
		DeserializeLength(stream, length, industrialConveyor, isDelta: false);
		return industrialConveyor;
	}

	public static IndustrialConveyor Deserialize(byte[] buffer)
	{
		IndustrialConveyor industrialConveyor = Pool.Get<IndustrialConveyor>();
		using MemoryStream stream = new MemoryStream(buffer);
		Deserialize(stream, industrialConveyor, isDelta: false);
		return industrialConveyor;
	}

	public void FromProto(Stream stream, bool isDelta = false)
	{
		Deserialize(stream, this, isDelta);
	}

	public virtual void WriteToStream(Stream stream)
	{
		Serialize(stream, this);
	}

	public virtual void WriteToStreamDelta(Stream stream, IndustrialConveyor previous)
	{
		if (previous == null)
		{
			Serialize(stream, this);
		}
		else
		{
			SerializeDelta(stream, this, previous);
		}
	}

	public virtual void ReadFromStream(Stream stream, int size, bool isDelta = false)
	{
		DeserializeLength(stream, size, this, isDelta);
	}

	public static IndustrialConveyor Deserialize(byte[] buffer, IndustrialConveyor instance, bool isDelta = false)
	{
		using MemoryStream stream = new MemoryStream(buffer);
		Deserialize(stream, instance, isDelta);
		return instance;
	}

	public static IndustrialConveyor Deserialize(Stream stream, IndustrialConveyor instance, bool isDelta)
	{
		if (!isDelta && instance.filters == null)
		{
			instance.filters = Pool.Get<List<ItemFilter>>();
		}
		while (true)
		{
			int num = stream.ReadByte();
			switch (num)
			{
			case 10:
				instance.filters.Add(ItemFilter.DeserializeLengthDelimited(stream));
				continue;
			case 16:
				instance.conveyorMode = (int)ProtocolParser.ReadUInt64(stream);
				continue;
			case -1:
				return instance;
			}
			Key key = ProtocolParser.ReadKey((byte)num, stream);
			if (key.Field == 0)
			{
				throw new ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
			}
			ProtocolParser.SkipKey(stream, key);
		}
	}

	public static IndustrialConveyor DeserializeLengthDelimited(Stream stream, IndustrialConveyor instance, bool isDelta)
	{
		if (!isDelta && instance.filters == null)
		{
			instance.filters = Pool.Get<List<ItemFilter>>();
		}
		long num = ProtocolParser.ReadUInt32(stream);
		num += stream.Position;
		while (stream.Position < num)
		{
			int num2 = stream.ReadByte();
			switch (num2)
			{
			case -1:
				throw new EndOfStreamException();
			case 10:
				instance.filters.Add(ItemFilter.DeserializeLengthDelimited(stream));
				continue;
			case 16:
				instance.conveyorMode = (int)ProtocolParser.ReadUInt64(stream);
				continue;
			}
			Key key = ProtocolParser.ReadKey((byte)num2, stream);
			if (key.Field == 0)
			{
				throw new ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
			}
			ProtocolParser.SkipKey(stream, key);
		}
		if (stream.Position != num)
		{
			throw new ProtocolBufferException("Read past max limit");
		}
		return instance;
	}

	public static IndustrialConveyor DeserializeLength(Stream stream, int length, IndustrialConveyor instance, bool isDelta)
	{
		if (!isDelta && instance.filters == null)
		{
			instance.filters = Pool.Get<List<ItemFilter>>();
		}
		long num = stream.Position + length;
		while (stream.Position < num)
		{
			int num2 = stream.ReadByte();
			switch (num2)
			{
			case -1:
				throw new EndOfStreamException();
			case 10:
				instance.filters.Add(ItemFilter.DeserializeLengthDelimited(stream));
				continue;
			case 16:
				instance.conveyorMode = (int)ProtocolParser.ReadUInt64(stream);
				continue;
			}
			Key key = ProtocolParser.ReadKey((byte)num2, stream);
			if (key.Field == 0)
			{
				throw new ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
			}
			ProtocolParser.SkipKey(stream, key);
		}
		if (stream.Position != num)
		{
			throw new ProtocolBufferException("Read past max limit");
		}
		return instance;
	}

	public static void SerializeDelta(Stream stream, IndustrialConveyor instance, IndustrialConveyor previous)
	{
		MemoryStream obj = Pool.Get<MemoryStream>();
		if (instance.filters != null)
		{
			for (int i = 0; i < instance.filters.Count; i++)
			{
				ItemFilter itemFilter = instance.filters[i];
				stream.WriteByte(10);
				obj.SetLength(0L);
				ItemFilter.SerializeDelta(obj, itemFilter, itemFilter);
				uint num = (uint)obj.Length;
				ProtocolParser.WriteUInt32(stream, num);
				stream.Write(obj.GetBuffer(), 0, (int)num);
			}
		}
		if (instance.conveyorMode != previous.conveyorMode)
		{
			stream.WriteByte(16);
			ProtocolParser.WriteUInt64(stream, (ulong)instance.conveyorMode);
		}
		Pool.FreeUnmanaged(ref obj);
	}

	public static void Serialize(Stream stream, IndustrialConveyor instance)
	{
		MemoryStream obj = Pool.Get<MemoryStream>();
		if (instance.filters != null)
		{
			for (int i = 0; i < instance.filters.Count; i++)
			{
				ItemFilter instance2 = instance.filters[i];
				stream.WriteByte(10);
				obj.SetLength(0L);
				ItemFilter.Serialize(obj, instance2);
				uint num = (uint)obj.Length;
				ProtocolParser.WriteUInt32(stream, num);
				stream.Write(obj.GetBuffer(), 0, (int)num);
			}
		}
		if (instance.conveyorMode != 0)
		{
			stream.WriteByte(16);
			ProtocolParser.WriteUInt64(stream, (ulong)instance.conveyorMode);
		}
		Pool.FreeUnmanaged(ref obj);
	}

	public byte[] ToProtoBytes()
	{
		return SerializeToBytes(this);
	}

	public void ToProto(Stream stream)
	{
		Serialize(stream, this);
	}

	public static byte[] SerializeToBytes(IndustrialConveyor instance)
	{
		using MemoryStream memoryStream = new MemoryStream();
		Serialize(memoryStream, instance);
		return memoryStream.ToArray();
	}

	public static void SerializeLengthDelimited(Stream stream, IndustrialConveyor instance)
	{
		byte[] array = SerializeToBytes(instance);
		ProtocolParser.WriteUInt32(stream, (uint)array.Length);
		stream.Write(array, 0, array.Length);
	}

	public void InspectUids(UidInspector<ulong> action)
	{
		if (filters != null)
		{
			for (int i = 0; i < filters.Count; i++)
			{
				filters[i]?.InspectUids(action);
			}
		}
	}
}
