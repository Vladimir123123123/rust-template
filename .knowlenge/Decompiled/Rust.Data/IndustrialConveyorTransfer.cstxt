using System;
using System.Collections.Generic;
using System.IO;
using Facepunch;
using ProtoBuf;
using SilentOrbit.ProtocolBuffers;

public class IndustrialConveyorTransfer : IDisposable, Pool.IPooled, IProto
{
	public struct ItemTransfer : IProto
	{
		[NonSerialized]
		public int itemId;

		[NonSerialized]
		public int amount;

		public static void ResetToPool(ItemTransfer instance)
		{
			instance.itemId = 0;
			instance.amount = 0;
		}

		public void CopyTo(ItemTransfer instance)
		{
			instance.itemId = itemId;
			instance.amount = amount;
		}

		public ItemTransfer Copy()
		{
			ItemTransfer itemTransfer = default(ItemTransfer);
			CopyTo(itemTransfer);
			return itemTransfer;
		}

		public static ItemTransfer Deserialize(Stream stream)
		{
			ItemTransfer instance = default(ItemTransfer);
			Deserialize(stream, ref instance, isDelta: false);
			return instance;
		}

		public static ItemTransfer DeserializeLengthDelimited(Stream stream)
		{
			ItemTransfer instance = default(ItemTransfer);
			DeserializeLengthDelimited(stream, ref instance, isDelta: false);
			return instance;
		}

		public static ItemTransfer DeserializeLength(Stream stream, int length)
		{
			ItemTransfer instance = default(ItemTransfer);
			DeserializeLength(stream, length, ref instance, isDelta: false);
			return instance;
		}

		public static ItemTransfer Deserialize(byte[] buffer)
		{
			ItemTransfer instance = default(ItemTransfer);
			using MemoryStream stream = new MemoryStream(buffer);
			Deserialize(stream, ref instance, isDelta: false);
			return instance;
		}

		public void FromProto(Stream stream, bool isDelta = false)
		{
			Deserialize(stream, ref this, isDelta);
		}

		public void WriteToStream(Stream stream)
		{
			Serialize(stream, this);
		}

		public void WriteToStreamDelta(Stream stream, ItemTransfer previous)
		{
			SerializeDelta(stream, this, previous);
		}

		public void ReadFromStream(Stream stream, int size, bool isDelta = false)
		{
			DeserializeLength(stream, size, ref this, isDelta);
		}

		public static ItemTransfer Deserialize(byte[] buffer, ref ItemTransfer instance, bool isDelta = false)
		{
			using (MemoryStream stream = new MemoryStream(buffer))
			{
				Deserialize(stream, ref instance, isDelta);
			}
			return instance;
		}

		public static ItemTransfer Deserialize(Stream stream, ref ItemTransfer instance, bool isDelta)
		{
			while (true)
			{
				int num = stream.ReadByte();
				switch (num)
				{
				case 8:
					instance.itemId = (int)ProtocolParser.ReadUInt64(stream);
					continue;
				case 16:
					instance.amount = (int)ProtocolParser.ReadUInt64(stream);
					continue;
				case -1:
					return instance;
				}
				Key key = ProtocolParser.ReadKey((byte)num, stream);
				if (key.Field == 0)
				{
					throw new ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
				}
				ProtocolParser.SkipKey(stream, key);
			}
		}

		public static ItemTransfer DeserializeLengthDelimited(Stream stream, ref ItemTransfer instance, bool isDelta)
		{
			long num = ProtocolParser.ReadUInt32(stream);
			num += stream.Position;
			while (stream.Position < num)
			{
				int num2 = stream.ReadByte();
				switch (num2)
				{
				case -1:
					throw new EndOfStreamException();
				case 8:
					instance.itemId = (int)ProtocolParser.ReadUInt64(stream);
					continue;
				case 16:
					instance.amount = (int)ProtocolParser.ReadUInt64(stream);
					continue;
				}
				Key key = ProtocolParser.ReadKey((byte)num2, stream);
				if (key.Field == 0)
				{
					throw new ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
				}
				ProtocolParser.SkipKey(stream, key);
			}
			if (stream.Position != num)
			{
				throw new ProtocolBufferException("Read past max limit");
			}
			return instance;
		}

		public static ItemTransfer DeserializeLength(Stream stream, int length, ref ItemTransfer instance, bool isDelta)
		{
			long num = stream.Position + length;
			while (stream.Position < num)
			{
				int num2 = stream.ReadByte();
				switch (num2)
				{
				case -1:
					throw new EndOfStreamException();
				case 8:
					instance.itemId = (int)ProtocolParser.ReadUInt64(stream);
					continue;
				case 16:
					instance.amount = (int)ProtocolParser.ReadUInt64(stream);
					continue;
				}
				Key key = ProtocolParser.ReadKey((byte)num2, stream);
				if (key.Field == 0)
				{
					throw new ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
				}
				ProtocolParser.SkipKey(stream, key);
			}
			if (stream.Position != num)
			{
				throw new ProtocolBufferException("Read past max limit");
			}
			return instance;
		}

		public static void SerializeDelta(Stream stream, ItemTransfer instance, ItemTransfer previous)
		{
			MemoryStream obj = Pool.Get<MemoryStream>();
			if (instance.itemId != previous.itemId)
			{
				stream.WriteByte(8);
				ProtocolParser.WriteUInt64(stream, (ulong)instance.itemId);
			}
			if (instance.amount != previous.amount)
			{
				stream.WriteByte(16);
				ProtocolParser.WriteUInt64(stream, (ulong)instance.amount);
			}
			Pool.FreeUnmanaged(ref obj);
		}

		public static void Serialize(Stream stream, ItemTransfer instance)
		{
			MemoryStream obj = Pool.Get<MemoryStream>();
			if (instance.itemId != 0)
			{
				stream.WriteByte(8);
				ProtocolParser.WriteUInt64(stream, (ulong)instance.itemId);
			}
			if (instance.amount != 0)
			{
				stream.WriteByte(16);
				ProtocolParser.WriteUInt64(stream, (ulong)instance.amount);
			}
			Pool.FreeUnmanaged(ref obj);
		}

		public byte[] ToProtoBytes()
		{
			return SerializeToBytes(this);
		}

		public void ToProto(Stream stream)
		{
			Serialize(stream, this);
		}

		public static byte[] SerializeToBytes(ItemTransfer instance)
		{
			using MemoryStream memoryStream = new MemoryStream();
			Serialize(memoryStream, instance);
			return memoryStream.ToArray();
		}

		public static void SerializeLengthDelimited(Stream stream, ItemTransfer instance)
		{
			byte[] array = SerializeToBytes(instance);
			ProtocolParser.WriteUInt32(stream, (uint)array.Length);
			stream.Write(array, 0, array.Length);
		}

		public void InspectUids(UidInspector<ulong> action)
		{
		}
	}

	[NonSerialized]
	public List<ItemTransfer> ItemTransfers;

	[NonSerialized]
	public List<NetworkableId> inputEntities;

	[NonSerialized]
	public List<NetworkableId> outputEntities;

	public bool ShouldPool = true;

	private bool _disposed;

	public static void ResetToPool(IndustrialConveyorTransfer instance)
	{
		if (instance.ShouldPool)
		{
			if (instance.ItemTransfers != null)
			{
				List<ItemTransfer> obj = instance.ItemTransfers;
				Pool.FreeUnmanaged(ref obj);
				instance.ItemTransfers = obj;
			}
			if (instance.inputEntities != null)
			{
				List<NetworkableId> obj2 = instance.inputEntities;
				Pool.FreeUnmanaged(ref obj2);
				instance.inputEntities = obj2;
			}
			if (instance.outputEntities != null)
			{
				List<NetworkableId> obj3 = instance.outputEntities;
				Pool.FreeUnmanaged(ref obj3);
				instance.outputEntities = obj3;
			}
			Pool.Free(ref instance);
		}
	}

	public void ResetToPool()
	{
		ResetToPool(this);
	}

	public virtual void Dispose()
	{
		if (!ShouldPool)
		{
			throw new Exception("Trying to dispose IndustrialConveyorTransfer with ShouldPool set to false!");
		}
		if (!_disposed)
		{
			ResetToPool();
			_disposed = true;
		}
	}

	public virtual void EnterPool()
	{
		_disposed = true;
	}

	public virtual void LeavePool()
	{
		_disposed = false;
	}

	public void CopyTo(IndustrialConveyorTransfer instance)
	{
		if (ItemTransfers != null)
		{
			instance.ItemTransfers = Pool.Get<List<ItemTransfer>>();
			for (int i = 0; i < ItemTransfers.Count; i++)
			{
				ItemTransfer item = ItemTransfers[i];
				instance.ItemTransfers.Add(item);
			}
		}
		else
		{
			instance.ItemTransfers = null;
		}
		if (inputEntities != null)
		{
			instance.inputEntities = Pool.Get<List<NetworkableId>>();
			for (int j = 0; j < inputEntities.Count; j++)
			{
				NetworkableId item2 = inputEntities[j];
				instance.inputEntities.Add(item2);
			}
		}
		else
		{
			instance.inputEntities = null;
		}
		if (outputEntities != null)
		{
			instance.outputEntities = Pool.Get<List<NetworkableId>>();
			for (int k = 0; k < outputEntities.Count; k++)
			{
				NetworkableId item3 = outputEntities[k];
				instance.outputEntities.Add(item3);
			}
		}
		else
		{
			instance.outputEntities = null;
		}
	}

	public IndustrialConveyorTransfer Copy()
	{
		IndustrialConveyorTransfer industrialConveyorTransfer = Pool.Get<IndustrialConveyorTransfer>();
		CopyTo(industrialConveyorTransfer);
		return industrialConveyorTransfer;
	}

	public static IndustrialConveyorTransfer Deserialize(Stream stream)
	{
		IndustrialConveyorTransfer industrialConveyorTransfer = Pool.Get<IndustrialConveyorTransfer>();
		Deserialize(stream, industrialConveyorTransfer, isDelta: false);
		return industrialConveyorTransfer;
	}

	public static IndustrialConveyorTransfer DeserializeLengthDelimited(Stream stream)
	{
		IndustrialConveyorTransfer industrialConveyorTransfer = Pool.Get<IndustrialConveyorTransfer>();
		DeserializeLengthDelimited(stream, industrialConveyorTransfer, isDelta: false);
		return industrialConveyorTransfer;
	}

	public static IndustrialConveyorTransfer DeserializeLength(Stream stream, int length)
	{
		IndustrialConveyorTransfer industrialConveyorTransfer = Pool.Get<IndustrialConveyorTransfer>();
		DeserializeLength(stream, length, industrialConveyorTransfer, isDelta: false);
		return industrialConveyorTransfer;
	}

	public static IndustrialConveyorTransfer Deserialize(byte[] buffer)
	{
		IndustrialConveyorTransfer industrialConveyorTransfer = Pool.Get<IndustrialConveyorTransfer>();
		using MemoryStream stream = new MemoryStream(buffer);
		Deserialize(stream, industrialConveyorTransfer, isDelta: false);
		return industrialConveyorTransfer;
	}

	public void FromProto(Stream stream, bool isDelta = false)
	{
		Deserialize(stream, this, isDelta);
	}

	public virtual void WriteToStream(Stream stream)
	{
		Serialize(stream, this);
	}

	public virtual void WriteToStreamDelta(Stream stream, IndustrialConveyorTransfer previous)
	{
		if (previous == null)
		{
			Serialize(stream, this);
		}
		else
		{
			SerializeDelta(stream, this, previous);
		}
	}

	public virtual void ReadFromStream(Stream stream, int size, bool isDelta = false)
	{
		DeserializeLength(stream, size, this, isDelta);
	}

	public static IndustrialConveyorTransfer Deserialize(byte[] buffer, IndustrialConveyorTransfer instance, bool isDelta = false)
	{
		using MemoryStream stream = new MemoryStream(buffer);
		Deserialize(stream, instance, isDelta);
		return instance;
	}

	public static IndustrialConveyorTransfer Deserialize(Stream stream, IndustrialConveyorTransfer instance, bool isDelta)
	{
		if (!isDelta)
		{
			if (instance.ItemTransfers == null)
			{
				instance.ItemTransfers = Pool.Get<List<ItemTransfer>>();
			}
			if (instance.inputEntities == null)
			{
				instance.inputEntities = Pool.Get<List<NetworkableId>>();
			}
			if (instance.outputEntities == null)
			{
				instance.outputEntities = Pool.Get<List<NetworkableId>>();
			}
		}
		while (true)
		{
			int num = stream.ReadByte();
			switch (num)
			{
			case 10:
			{
				ItemTransfer instance2 = default(ItemTransfer);
				ItemTransfer.DeserializeLengthDelimited(stream, ref instance2, isDelta);
				instance.ItemTransfers.Add(instance2);
				continue;
			}
			case 16:
				instance.inputEntities.Add(new NetworkableId(ProtocolParser.ReadUInt64(stream)));
				continue;
			case 24:
				instance.outputEntities.Add(new NetworkableId(ProtocolParser.ReadUInt64(stream)));
				continue;
			case -1:
				return instance;
			}
			Key key = ProtocolParser.ReadKey((byte)num, stream);
			if (key.Field == 0)
			{
				throw new ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
			}
			ProtocolParser.SkipKey(stream, key);
		}
	}

	public static IndustrialConveyorTransfer DeserializeLengthDelimited(Stream stream, IndustrialConveyorTransfer instance, bool isDelta)
	{
		if (!isDelta)
		{
			if (instance.ItemTransfers == null)
			{
				instance.ItemTransfers = Pool.Get<List<ItemTransfer>>();
			}
			if (instance.inputEntities == null)
			{
				instance.inputEntities = Pool.Get<List<NetworkableId>>();
			}
			if (instance.outputEntities == null)
			{
				instance.outputEntities = Pool.Get<List<NetworkableId>>();
			}
		}
		long num = ProtocolParser.ReadUInt32(stream);
		num += stream.Position;
		while (stream.Position < num)
		{
			int num2 = stream.ReadByte();
			switch (num2)
			{
			case -1:
				throw new EndOfStreamException();
			case 10:
			{
				ItemTransfer instance2 = default(ItemTransfer);
				ItemTransfer.DeserializeLengthDelimited(stream, ref instance2, isDelta);
				instance.ItemTransfers.Add(instance2);
				continue;
			}
			case 16:
				instance.inputEntities.Add(new NetworkableId(ProtocolParser.ReadUInt64(stream)));
				continue;
			case 24:
				instance.outputEntities.Add(new NetworkableId(ProtocolParser.ReadUInt64(stream)));
				continue;
			}
			Key key = ProtocolParser.ReadKey((byte)num2, stream);
			if (key.Field == 0)
			{
				throw new ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
			}
			ProtocolParser.SkipKey(stream, key);
		}
		if (stream.Position != num)
		{
			throw new ProtocolBufferException("Read past max limit");
		}
		return instance;
	}

	public static IndustrialConveyorTransfer DeserializeLength(Stream stream, int length, IndustrialConveyorTransfer instance, bool isDelta)
	{
		if (!isDelta)
		{
			if (instance.ItemTransfers == null)
			{
				instance.ItemTransfers = Pool.Get<List<ItemTransfer>>();
			}
			if (instance.inputEntities == null)
			{
				instance.inputEntities = Pool.Get<List<NetworkableId>>();
			}
			if (instance.outputEntities == null)
			{
				instance.outputEntities = Pool.Get<List<NetworkableId>>();
			}
		}
		long num = stream.Position + length;
		while (stream.Position < num)
		{
			int num2 = stream.ReadByte();
			switch (num2)
			{
			case -1:
				throw new EndOfStreamException();
			case 10:
			{
				ItemTransfer instance2 = default(ItemTransfer);
				ItemTransfer.DeserializeLengthDelimited(stream, ref instance2, isDelta);
				instance.ItemTransfers.Add(instance2);
				continue;
			}
			case 16:
				instance.inputEntities.Add(new NetworkableId(ProtocolParser.ReadUInt64(stream)));
				continue;
			case 24:
				instance.outputEntities.Add(new NetworkableId(ProtocolParser.ReadUInt64(stream)));
				continue;
			}
			Key key = ProtocolParser.ReadKey((byte)num2, stream);
			if (key.Field == 0)
			{
				throw new ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
			}
			ProtocolParser.SkipKey(stream, key);
		}
		if (stream.Position != num)
		{
			throw new ProtocolBufferException("Read past max limit");
		}
		return instance;
	}

	public static void SerializeDelta(Stream stream, IndustrialConveyorTransfer instance, IndustrialConveyorTransfer previous)
	{
		MemoryStream obj = Pool.Get<MemoryStream>();
		if (instance.ItemTransfers != null)
		{
			for (int i = 0; i < instance.ItemTransfers.Count; i++)
			{
				ItemTransfer itemTransfer = instance.ItemTransfers[i];
				stream.WriteByte(10);
				obj.SetLength(0L);
				ItemTransfer.SerializeDelta(obj, itemTransfer, itemTransfer);
				uint num = (uint)obj.Length;
				ProtocolParser.WriteUInt32(stream, num);
				stream.Write(obj.GetBuffer(), 0, (int)num);
			}
		}
		if (instance.inputEntities != null)
		{
			for (int j = 0; j < instance.inputEntities.Count; j++)
			{
				NetworkableId networkableId = instance.inputEntities[j];
				stream.WriteByte(16);
				ProtocolParser.WriteUInt64(stream, networkableId.Value);
			}
		}
		if (instance.outputEntities != null)
		{
			for (int k = 0; k < instance.outputEntities.Count; k++)
			{
				NetworkableId networkableId2 = instance.outputEntities[k];
				stream.WriteByte(24);
				ProtocolParser.WriteUInt64(stream, networkableId2.Value);
			}
		}
		Pool.FreeUnmanaged(ref obj);
	}

	public static void Serialize(Stream stream, IndustrialConveyorTransfer instance)
	{
		MemoryStream obj = Pool.Get<MemoryStream>();
		if (instance.ItemTransfers != null)
		{
			for (int i = 0; i < instance.ItemTransfers.Count; i++)
			{
				ItemTransfer instance2 = instance.ItemTransfers[i];
				stream.WriteByte(10);
				obj.SetLength(0L);
				ItemTransfer.Serialize(obj, instance2);
				uint num = (uint)obj.Length;
				ProtocolParser.WriteUInt32(stream, num);
				stream.Write(obj.GetBuffer(), 0, (int)num);
			}
		}
		if (instance.inputEntities != null)
		{
			for (int j = 0; j < instance.inputEntities.Count; j++)
			{
				NetworkableId networkableId = instance.inputEntities[j];
				stream.WriteByte(16);
				ProtocolParser.WriteUInt64(stream, networkableId.Value);
			}
		}
		if (instance.outputEntities != null)
		{
			for (int k = 0; k < instance.outputEntities.Count; k++)
			{
				NetworkableId networkableId2 = instance.outputEntities[k];
				stream.WriteByte(24);
				ProtocolParser.WriteUInt64(stream, networkableId2.Value);
			}
		}
		Pool.FreeUnmanaged(ref obj);
	}

	public byte[] ToProtoBytes()
	{
		return SerializeToBytes(this);
	}

	public void ToProto(Stream stream)
	{
		Serialize(stream, this);
	}

	public static byte[] SerializeToBytes(IndustrialConveyorTransfer instance)
	{
		using MemoryStream memoryStream = new MemoryStream();
		Serialize(memoryStream, instance);
		return memoryStream.ToArray();
	}

	public static void SerializeLengthDelimited(Stream stream, IndustrialConveyorTransfer instance)
	{
		byte[] array = SerializeToBytes(instance);
		ProtocolParser.WriteUInt32(stream, (uint)array.Length);
		stream.Write(array, 0, array.Length);
	}

	public void InspectUids(UidInspector<ulong> action)
	{
		if (ItemTransfers != null)
		{
			for (int i = 0; i < ItemTransfers.Count; i++)
			{
				ItemTransfers[i].InspectUids(action);
			}
		}
		for (int j = 0; j < inputEntities.Count; j++)
		{
			NetworkableId value = inputEntities[j];
			action(UidType.NetworkableId, ref value.Value);
			inputEntities[j] = value;
		}
		for (int k = 0; k < outputEntities.Count; k++)
		{
			NetworkableId value2 = outputEntities[k];
			action(UidType.NetworkableId, ref value2.Value);
			outputEntities[k] = value2;
		}
	}
}
