using System;
using System.Collections.Generic;
using System.IO;
using Facepunch;
using ProtoBuf;
using SilentOrbit.ProtocolBuffers;

public class LootableCorpse : IDisposable, Pool.IPooled, IProto
{
	public class Private : IDisposable, Pool.IPooled, IProto
	{
		[NonSerialized]
		public List<ItemContainer> container;

		public bool ShouldPool = true;

		private bool _disposed;

		public static void ResetToPool(Private instance)
		{
			if (!instance.ShouldPool)
			{
				return;
			}
			if (instance.container != null)
			{
				for (int i = 0; i < instance.container.Count; i++)
				{
					if (instance.container[i] != null)
					{
						instance.container[i].ResetToPool();
						instance.container[i] = null;
					}
				}
				List<ItemContainer> obj = instance.container;
				Pool.Free(ref obj, freeElements: false);
				instance.container = obj;
			}
			Pool.Free(ref instance);
		}

		public void ResetToPool()
		{
			ResetToPool(this);
		}

		public virtual void Dispose()
		{
			if (!ShouldPool)
			{
				throw new Exception("Trying to dispose Private with ShouldPool set to false!");
			}
			if (!_disposed)
			{
				ResetToPool();
				_disposed = true;
			}
		}

		public virtual void EnterPool()
		{
			_disposed = true;
		}

		public virtual void LeavePool()
		{
			_disposed = false;
		}

		public void CopyTo(Private instance)
		{
			if (container != null)
			{
				instance.container = Pool.Get<List<ItemContainer>>();
				for (int i = 0; i < container.Count; i++)
				{
					ItemContainer item = container[i].Copy();
					instance.container.Add(item);
				}
			}
			else
			{
				instance.container = null;
			}
		}

		public Private Copy()
		{
			Private @private = Pool.Get<Private>();
			CopyTo(@private);
			return @private;
		}

		public static Private Deserialize(Stream stream)
		{
			Private @private = Pool.Get<Private>();
			Deserialize(stream, @private, isDelta: false);
			return @private;
		}

		public static Private DeserializeLengthDelimited(Stream stream)
		{
			Private @private = Pool.Get<Private>();
			DeserializeLengthDelimited(stream, @private, isDelta: false);
			return @private;
		}

		public static Private DeserializeLength(Stream stream, int length)
		{
			Private @private = Pool.Get<Private>();
			DeserializeLength(stream, length, @private, isDelta: false);
			return @private;
		}

		public static Private Deserialize(byte[] buffer)
		{
			Private @private = Pool.Get<Private>();
			using MemoryStream stream = new MemoryStream(buffer);
			Deserialize(stream, @private, isDelta: false);
			return @private;
		}

		public void FromProto(Stream stream, bool isDelta = false)
		{
			Deserialize(stream, this, isDelta);
		}

		public virtual void WriteToStream(Stream stream)
		{
			Serialize(stream, this);
		}

		public virtual void WriteToStreamDelta(Stream stream, Private previous)
		{
			if (previous == null)
			{
				Serialize(stream, this);
			}
			else
			{
				SerializeDelta(stream, this, previous);
			}
		}

		public virtual void ReadFromStream(Stream stream, int size, bool isDelta = false)
		{
			DeserializeLength(stream, size, this, isDelta);
		}

		public static Private Deserialize(byte[] buffer, Private instance, bool isDelta = false)
		{
			using MemoryStream stream = new MemoryStream(buffer);
			Deserialize(stream, instance, isDelta);
			return instance;
		}

		public static Private Deserialize(Stream stream, Private instance, bool isDelta)
		{
			if (!isDelta && instance.container == null)
			{
				instance.container = Pool.Get<List<ItemContainer>>();
			}
			while (true)
			{
				int num = stream.ReadByte();
				switch (num)
				{
				case 10:
					instance.container.Add(ItemContainer.DeserializeLengthDelimited(stream));
					continue;
				case -1:
					return instance;
				}
				Key key = ProtocolParser.ReadKey((byte)num, stream);
				if (key.Field == 0)
				{
					throw new ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
				}
				ProtocolParser.SkipKey(stream, key);
			}
		}

		public static Private DeserializeLengthDelimited(Stream stream, Private instance, bool isDelta)
		{
			if (!isDelta && instance.container == null)
			{
				instance.container = Pool.Get<List<ItemContainer>>();
			}
			long num = ProtocolParser.ReadUInt32(stream);
			num += stream.Position;
			while (stream.Position < num)
			{
				int num2 = stream.ReadByte();
				switch (num2)
				{
				case -1:
					throw new EndOfStreamException();
				case 10:
					instance.container.Add(ItemContainer.DeserializeLengthDelimited(stream));
					continue;
				}
				Key key = ProtocolParser.ReadKey((byte)num2, stream);
				if (key.Field == 0)
				{
					throw new ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
				}
				ProtocolParser.SkipKey(stream, key);
			}
			if (stream.Position != num)
			{
				throw new ProtocolBufferException("Read past max limit");
			}
			return instance;
		}

		public static Private DeserializeLength(Stream stream, int length, Private instance, bool isDelta)
		{
			if (!isDelta && instance.container == null)
			{
				instance.container = Pool.Get<List<ItemContainer>>();
			}
			long num = stream.Position + length;
			while (stream.Position < num)
			{
				int num2 = stream.ReadByte();
				switch (num2)
				{
				case -1:
					throw new EndOfStreamException();
				case 10:
					instance.container.Add(ItemContainer.DeserializeLengthDelimited(stream));
					continue;
				}
				Key key = ProtocolParser.ReadKey((byte)num2, stream);
				if (key.Field == 0)
				{
					throw new ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
				}
				ProtocolParser.SkipKey(stream, key);
			}
			if (stream.Position != num)
			{
				throw new ProtocolBufferException("Read past max limit");
			}
			return instance;
		}

		public static void SerializeDelta(Stream stream, Private instance, Private previous)
		{
			MemoryStream obj = Pool.Get<MemoryStream>();
			if (instance.container != null)
			{
				for (int i = 0; i < instance.container.Count; i++)
				{
					ItemContainer itemContainer = instance.container[i];
					stream.WriteByte(10);
					obj.SetLength(0L);
					ItemContainer.SerializeDelta(obj, itemContainer, itemContainer);
					uint num = (uint)obj.Length;
					ProtocolParser.WriteUInt32(stream, num);
					stream.Write(obj.GetBuffer(), 0, (int)num);
				}
			}
			Pool.FreeUnmanaged(ref obj);
		}

		public static void Serialize(Stream stream, Private instance)
		{
			MemoryStream obj = Pool.Get<MemoryStream>();
			if (instance.container != null)
			{
				for (int i = 0; i < instance.container.Count; i++)
				{
					ItemContainer instance2 = instance.container[i];
					stream.WriteByte(10);
					obj.SetLength(0L);
					ItemContainer.Serialize(obj, instance2);
					uint num = (uint)obj.Length;
					ProtocolParser.WriteUInt32(stream, num);
					stream.Write(obj.GetBuffer(), 0, (int)num);
				}
			}
			Pool.FreeUnmanaged(ref obj);
		}

		public byte[] ToProtoBytes()
		{
			return SerializeToBytes(this);
		}

		public void ToProto(Stream stream)
		{
			Serialize(stream, this);
		}

		public static byte[] SerializeToBytes(Private instance)
		{
			using MemoryStream memoryStream = new MemoryStream();
			Serialize(memoryStream, instance);
			return memoryStream.ToArray();
		}

		public static void SerializeLengthDelimited(Stream stream, Private instance)
		{
			byte[] array = SerializeToBytes(instance);
			ProtocolParser.WriteUInt32(stream, (uint)array.Length);
			stream.Write(array, 0, array.Length);
		}

		public void InspectUids(UidInspector<ulong> action)
		{
			if (container != null)
			{
				for (int i = 0; i < container.Count; i++)
				{
					container[i]?.InspectUids(action);
				}
			}
		}
	}

	[NonSerialized]
	public Private privateData;

	[NonSerialized]
	public ulong playerID;

	[NonSerialized]
	public string playerName;

	[NonSerialized]
	public uint underwearSkin;

	[NonSerialized]
	public string streamerName;

	public bool ShouldPool = true;

	private bool _disposed;

	public static void ResetToPool(LootableCorpse instance)
	{
		if (instance.ShouldPool)
		{
			if (instance.privateData != null)
			{
				instance.privateData.ResetToPool();
				instance.privateData = null;
			}
			instance.playerID = 0uL;
			instance.playerName = string.Empty;
			instance.underwearSkin = 0u;
			instance.streamerName = string.Empty;
			Pool.Free(ref instance);
		}
	}

	public void ResetToPool()
	{
		ResetToPool(this);
	}

	public virtual void Dispose()
	{
		if (!ShouldPool)
		{
			throw new Exception("Trying to dispose LootableCorpse with ShouldPool set to false!");
		}
		if (!_disposed)
		{
			ResetToPool();
			_disposed = true;
		}
	}

	public virtual void EnterPool()
	{
		_disposed = true;
	}

	public virtual void LeavePool()
	{
		_disposed = false;
	}

	public void CopyTo(LootableCorpse instance)
	{
		if (privateData != null)
		{
			if (instance.privateData == null)
			{
				instance.privateData = privateData.Copy();
			}
			else
			{
				privateData.CopyTo(instance.privateData);
			}
		}
		else
		{
			instance.privateData = null;
		}
		instance.playerID = playerID;
		instance.playerName = playerName;
		instance.underwearSkin = underwearSkin;
		instance.streamerName = streamerName;
	}

	public LootableCorpse Copy()
	{
		LootableCorpse lootableCorpse = Pool.Get<LootableCorpse>();
		CopyTo(lootableCorpse);
		return lootableCorpse;
	}

	public static LootableCorpse Deserialize(Stream stream)
	{
		LootableCorpse lootableCorpse = Pool.Get<LootableCorpse>();
		Deserialize(stream, lootableCorpse, isDelta: false);
		return lootableCorpse;
	}

	public static LootableCorpse DeserializeLengthDelimited(Stream stream)
	{
		LootableCorpse lootableCorpse = Pool.Get<LootableCorpse>();
		DeserializeLengthDelimited(stream, lootableCorpse, isDelta: false);
		return lootableCorpse;
	}

	public static LootableCorpse DeserializeLength(Stream stream, int length)
	{
		LootableCorpse lootableCorpse = Pool.Get<LootableCorpse>();
		DeserializeLength(stream, length, lootableCorpse, isDelta: false);
		return lootableCorpse;
	}

	public static LootableCorpse Deserialize(byte[] buffer)
	{
		LootableCorpse lootableCorpse = Pool.Get<LootableCorpse>();
		using MemoryStream stream = new MemoryStream(buffer);
		Deserialize(stream, lootableCorpse, isDelta: false);
		return lootableCorpse;
	}

	public void FromProto(Stream stream, bool isDelta = false)
	{
		Deserialize(stream, this, isDelta);
	}

	public virtual void WriteToStream(Stream stream)
	{
		Serialize(stream, this);
	}

	public virtual void WriteToStreamDelta(Stream stream, LootableCorpse previous)
	{
		if (previous == null)
		{
			Serialize(stream, this);
		}
		else
		{
			SerializeDelta(stream, this, previous);
		}
	}

	public virtual void ReadFromStream(Stream stream, int size, bool isDelta = false)
	{
		DeserializeLength(stream, size, this, isDelta);
	}

	public static LootableCorpse Deserialize(byte[] buffer, LootableCorpse instance, bool isDelta = false)
	{
		using MemoryStream stream = new MemoryStream(buffer);
		Deserialize(stream, instance, isDelta);
		return instance;
	}

	public static LootableCorpse Deserialize(Stream stream, LootableCorpse instance, bool isDelta)
	{
		while (true)
		{
			int num = stream.ReadByte();
			switch (num)
			{
			case 10:
				if (instance.privateData == null)
				{
					instance.privateData = Private.DeserializeLengthDelimited(stream);
				}
				else
				{
					Private.DeserializeLengthDelimited(stream, instance.privateData, isDelta);
				}
				continue;
			case 16:
				instance.playerID = ProtocolParser.ReadUInt64(stream);
				continue;
			case 26:
				instance.playerName = ProtocolParser.ReadString(stream);
				continue;
			case 32:
				instance.underwearSkin = ProtocolParser.ReadUInt32(stream);
				continue;
			case 42:
				instance.streamerName = ProtocolParser.ReadString(stream);
				continue;
			case -1:
				return instance;
			}
			Key key = ProtocolParser.ReadKey((byte)num, stream);
			if (key.Field == 0)
			{
				throw new ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
			}
			ProtocolParser.SkipKey(stream, key);
		}
	}

	public static LootableCorpse DeserializeLengthDelimited(Stream stream, LootableCorpse instance, bool isDelta)
	{
		long num = ProtocolParser.ReadUInt32(stream);
		num += stream.Position;
		while (stream.Position < num)
		{
			int num2 = stream.ReadByte();
			switch (num2)
			{
			case -1:
				throw new EndOfStreamException();
			case 10:
				if (instance.privateData == null)
				{
					instance.privateData = Private.DeserializeLengthDelimited(stream);
				}
				else
				{
					Private.DeserializeLengthDelimited(stream, instance.privateData, isDelta);
				}
				continue;
			case 16:
				instance.playerID = ProtocolParser.ReadUInt64(stream);
				continue;
			case 26:
				instance.playerName = ProtocolParser.ReadString(stream);
				continue;
			case 32:
				instance.underwearSkin = ProtocolParser.ReadUInt32(stream);
				continue;
			case 42:
				instance.streamerName = ProtocolParser.ReadString(stream);
				continue;
			}
			Key key = ProtocolParser.ReadKey((byte)num2, stream);
			if (key.Field == 0)
			{
				throw new ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
			}
			ProtocolParser.SkipKey(stream, key);
		}
		if (stream.Position != num)
		{
			throw new ProtocolBufferException("Read past max limit");
		}
		return instance;
	}

	public static LootableCorpse DeserializeLength(Stream stream, int length, LootableCorpse instance, bool isDelta)
	{
		long num = stream.Position + length;
		while (stream.Position < num)
		{
			int num2 = stream.ReadByte();
			switch (num2)
			{
			case -1:
				throw new EndOfStreamException();
			case 10:
				if (instance.privateData == null)
				{
					instance.privateData = Private.DeserializeLengthDelimited(stream);
				}
				else
				{
					Private.DeserializeLengthDelimited(stream, instance.privateData, isDelta);
				}
				continue;
			case 16:
				instance.playerID = ProtocolParser.ReadUInt64(stream);
				continue;
			case 26:
				instance.playerName = ProtocolParser.ReadString(stream);
				continue;
			case 32:
				instance.underwearSkin = ProtocolParser.ReadUInt32(stream);
				continue;
			case 42:
				instance.streamerName = ProtocolParser.ReadString(stream);
				continue;
			}
			Key key = ProtocolParser.ReadKey((byte)num2, stream);
			if (key.Field == 0)
			{
				throw new ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
			}
			ProtocolParser.SkipKey(stream, key);
		}
		if (stream.Position != num)
		{
			throw new ProtocolBufferException("Read past max limit");
		}
		return instance;
	}

	public static void SerializeDelta(Stream stream, LootableCorpse instance, LootableCorpse previous)
	{
		MemoryStream obj = Pool.Get<MemoryStream>();
		if (instance.privateData != null)
		{
			stream.WriteByte(10);
			obj.SetLength(0L);
			Private.SerializeDelta(obj, instance.privateData, previous.privateData);
			uint num = (uint)obj.Length;
			ProtocolParser.WriteUInt32(stream, num);
			stream.Write(obj.GetBuffer(), 0, (int)num);
		}
		if (instance.playerID != previous.playerID)
		{
			stream.WriteByte(16);
			ProtocolParser.WriteUInt64(stream, instance.playerID);
		}
		if (instance.playerName != null && instance.playerName != previous.playerName)
		{
			stream.WriteByte(26);
			ProtocolParser.WriteString(stream, instance.playerName);
		}
		if (instance.underwearSkin != previous.underwearSkin)
		{
			stream.WriteByte(32);
			ProtocolParser.WriteUInt32(stream, instance.underwearSkin);
		}
		if (instance.streamerName != null && instance.streamerName != previous.streamerName)
		{
			stream.WriteByte(42);
			ProtocolParser.WriteString(stream, instance.streamerName);
		}
		Pool.FreeUnmanaged(ref obj);
	}

	public static void Serialize(Stream stream, LootableCorpse instance)
	{
		MemoryStream obj = Pool.Get<MemoryStream>();
		if (instance.privateData != null)
		{
			stream.WriteByte(10);
			obj.SetLength(0L);
			Private.Serialize(obj, instance.privateData);
			uint num = (uint)obj.Length;
			ProtocolParser.WriteUInt32(stream, num);
			stream.Write(obj.GetBuffer(), 0, (int)num);
		}
		if (instance.playerID != 0L)
		{
			stream.WriteByte(16);
			ProtocolParser.WriteUInt64(stream, instance.playerID);
		}
		if (instance.playerName != null)
		{
			stream.WriteByte(26);
			ProtocolParser.WriteString(stream, instance.playerName);
		}
		if (instance.underwearSkin != 0)
		{
			stream.WriteByte(32);
			ProtocolParser.WriteUInt32(stream, instance.underwearSkin);
		}
		if (instance.streamerName != null)
		{
			stream.WriteByte(42);
			ProtocolParser.WriteString(stream, instance.streamerName);
		}
		Pool.FreeUnmanaged(ref obj);
	}

	public byte[] ToProtoBytes()
	{
		return SerializeToBytes(this);
	}

	public void ToProto(Stream stream)
	{
		Serialize(stream, this);
	}

	public static byte[] SerializeToBytes(LootableCorpse instance)
	{
		using MemoryStream memoryStream = new MemoryStream();
		Serialize(memoryStream, instance);
		return memoryStream.ToArray();
	}

	public static void SerializeLengthDelimited(Stream stream, LootableCorpse instance)
	{
		byte[] array = SerializeToBytes(instance);
		ProtocolParser.WriteUInt32(stream, (uint)array.Length);
		stream.Write(array, 0, array.Length);
	}

	public void InspectUids(UidInspector<ulong> action)
	{
		privateData?.InspectUids(action);
	}
}
