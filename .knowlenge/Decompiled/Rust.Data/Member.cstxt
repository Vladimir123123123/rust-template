using System;
using System.IO;
using Facepunch;
using SilentOrbit.ProtocolBuffers;

public class Member : IDisposable, Pool.IPooled, IProto
{
	[NonSerialized]
	public ulong steamId;

	[NonSerialized]
	public int roleId;

	[NonSerialized]
	public long joined;

	[NonSerialized]
	public long lastSeen;

	[NonSerialized]
	public string notes;

	[NonSerialized]
	public bool online;

	public bool ShouldPool = true;

	private bool _disposed;

	public static void ResetToPool(Member instance)
	{
		if (instance.ShouldPool)
		{
			instance.steamId = 0uL;
			instance.roleId = 0;
			instance.joined = 0L;
			instance.lastSeen = 0L;
			instance.notes = string.Empty;
			instance.online = false;
			Pool.Free(ref instance);
		}
	}

	public void ResetToPool()
	{
		ResetToPool(this);
	}

	public virtual void Dispose()
	{
		if (!ShouldPool)
		{
			throw new Exception("Trying to dispose Member with ShouldPool set to false!");
		}
		if (!_disposed)
		{
			ResetToPool();
			_disposed = true;
		}
	}

	public virtual void EnterPool()
	{
		_disposed = true;
	}

	public virtual void LeavePool()
	{
		_disposed = false;
	}

	public void CopyTo(Member instance)
	{
		instance.steamId = steamId;
		instance.roleId = roleId;
		instance.joined = joined;
		instance.lastSeen = lastSeen;
		instance.notes = notes;
		instance.online = online;
	}

	public Member Copy()
	{
		Member member = Pool.Get<Member>();
		CopyTo(member);
		return member;
	}

	public static Member Deserialize(Stream stream)
	{
		Member member = Pool.Get<Member>();
		Deserialize(stream, member, isDelta: false);
		return member;
	}

	public static Member DeserializeLengthDelimited(Stream stream)
	{
		Member member = Pool.Get<Member>();
		DeserializeLengthDelimited(stream, member, isDelta: false);
		return member;
	}

	public static Member DeserializeLength(Stream stream, int length)
	{
		Member member = Pool.Get<Member>();
		DeserializeLength(stream, length, member, isDelta: false);
		return member;
	}

	public static Member Deserialize(byte[] buffer)
	{
		Member member = Pool.Get<Member>();
		using MemoryStream stream = new MemoryStream(buffer);
		Deserialize(stream, member, isDelta: false);
		return member;
	}

	public void FromProto(Stream stream, bool isDelta = false)
	{
		Deserialize(stream, this, isDelta);
	}

	public virtual void WriteToStream(Stream stream)
	{
		Serialize(stream, this);
	}

	public virtual void WriteToStreamDelta(Stream stream, Member previous)
	{
		if (previous == null)
		{
			Serialize(stream, this);
		}
		else
		{
			SerializeDelta(stream, this, previous);
		}
	}

	public virtual void ReadFromStream(Stream stream, int size, bool isDelta = false)
	{
		DeserializeLength(stream, size, this, isDelta);
	}

	public static Member Deserialize(byte[] buffer, Member instance, bool isDelta = false)
	{
		using MemoryStream stream = new MemoryStream(buffer);
		Deserialize(stream, instance, isDelta);
		return instance;
	}

	public static Member Deserialize(Stream stream, Member instance, bool isDelta)
	{
		if (!isDelta)
		{
			instance.steamId = 0uL;
			instance.roleId = 0;
			instance.joined = 0L;
			instance.lastSeen = 0L;
			instance.online = false;
		}
		while (true)
		{
			int num = stream.ReadByte();
			switch (num)
			{
			case 8:
				instance.steamId = ProtocolParser.ReadUInt64(stream);
				continue;
			case 16:
				instance.roleId = (int)ProtocolParser.ReadUInt64(stream);
				continue;
			case 24:
				instance.joined = (long)ProtocolParser.ReadUInt64(stream);
				continue;
			case 32:
				instance.lastSeen = (long)ProtocolParser.ReadUInt64(stream);
				continue;
			case 42:
				instance.notes = ProtocolParser.ReadString(stream);
				continue;
			case 48:
				instance.online = ProtocolParser.ReadBool(stream);
				continue;
			case -1:
				return instance;
			}
			Key key = ProtocolParser.ReadKey((byte)num, stream);
			if (key.Field == 0)
			{
				throw new ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
			}
			ProtocolParser.SkipKey(stream, key);
		}
	}

	public static Member DeserializeLengthDelimited(Stream stream, Member instance, bool isDelta)
	{
		if (!isDelta)
		{
			instance.steamId = 0uL;
			instance.roleId = 0;
			instance.joined = 0L;
			instance.lastSeen = 0L;
			instance.online = false;
		}
		long num = ProtocolParser.ReadUInt32(stream);
		num += stream.Position;
		while (stream.Position < num)
		{
			int num2 = stream.ReadByte();
			switch (num2)
			{
			case -1:
				throw new EndOfStreamException();
			case 8:
				instance.steamId = ProtocolParser.ReadUInt64(stream);
				continue;
			case 16:
				instance.roleId = (int)ProtocolParser.ReadUInt64(stream);
				continue;
			case 24:
				instance.joined = (long)ProtocolParser.ReadUInt64(stream);
				continue;
			case 32:
				instance.lastSeen = (long)ProtocolParser.ReadUInt64(stream);
				continue;
			case 42:
				instance.notes = ProtocolParser.ReadString(stream);
				continue;
			case 48:
				instance.online = ProtocolParser.ReadBool(stream);
				continue;
			}
			Key key = ProtocolParser.ReadKey((byte)num2, stream);
			if (key.Field == 0)
			{
				throw new ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
			}
			ProtocolParser.SkipKey(stream, key);
		}
		if (stream.Position != num)
		{
			throw new ProtocolBufferException("Read past max limit");
		}
		return instance;
	}

	public static Member DeserializeLength(Stream stream, int length, Member instance, bool isDelta)
	{
		if (!isDelta)
		{
			instance.steamId = 0uL;
			instance.roleId = 0;
			instance.joined = 0L;
			instance.lastSeen = 0L;
			instance.online = false;
		}
		long num = stream.Position + length;
		while (stream.Position < num)
		{
			int num2 = stream.ReadByte();
			switch (num2)
			{
			case -1:
				throw new EndOfStreamException();
			case 8:
				instance.steamId = ProtocolParser.ReadUInt64(stream);
				continue;
			case 16:
				instance.roleId = (int)ProtocolParser.ReadUInt64(stream);
				continue;
			case 24:
				instance.joined = (long)ProtocolParser.ReadUInt64(stream);
				continue;
			case 32:
				instance.lastSeen = (long)ProtocolParser.ReadUInt64(stream);
				continue;
			case 42:
				instance.notes = ProtocolParser.ReadString(stream);
				continue;
			case 48:
				instance.online = ProtocolParser.ReadBool(stream);
				continue;
			}
			Key key = ProtocolParser.ReadKey((byte)num2, stream);
			if (key.Field == 0)
			{
				throw new ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
			}
			ProtocolParser.SkipKey(stream, key);
		}
		if (stream.Position != num)
		{
			throw new ProtocolBufferException("Read past max limit");
		}
		return instance;
	}

	public static void SerializeDelta(Stream stream, Member instance, Member previous)
	{
		MemoryStream obj = Pool.Get<MemoryStream>();
		if (instance.steamId != previous.steamId)
		{
			stream.WriteByte(8);
			ProtocolParser.WriteUInt64(stream, instance.steamId);
		}
		if (instance.roleId != previous.roleId)
		{
			stream.WriteByte(16);
			ProtocolParser.WriteUInt64(stream, (ulong)instance.roleId);
		}
		stream.WriteByte(24);
		ProtocolParser.WriteUInt64(stream, (ulong)instance.joined);
		stream.WriteByte(32);
		ProtocolParser.WriteUInt64(stream, (ulong)instance.lastSeen);
		if (instance.notes != null && instance.notes != previous.notes)
		{
			stream.WriteByte(42);
			ProtocolParser.WriteString(stream, instance.notes);
		}
		stream.WriteByte(48);
		ProtocolParser.WriteBool(stream, instance.online);
		Pool.FreeUnmanaged(ref obj);
	}

	public static void Serialize(Stream stream, Member instance)
	{
		MemoryStream obj = Pool.Get<MemoryStream>();
		if (instance.steamId != 0L)
		{
			stream.WriteByte(8);
			ProtocolParser.WriteUInt64(stream, instance.steamId);
		}
		if (instance.roleId != 0)
		{
			stream.WriteByte(16);
			ProtocolParser.WriteUInt64(stream, (ulong)instance.roleId);
		}
		if (instance.joined != 0L)
		{
			stream.WriteByte(24);
			ProtocolParser.WriteUInt64(stream, (ulong)instance.joined);
		}
		if (instance.lastSeen != 0L)
		{
			stream.WriteByte(32);
			ProtocolParser.WriteUInt64(stream, (ulong)instance.lastSeen);
		}
		if (instance.notes != null)
		{
			stream.WriteByte(42);
			ProtocolParser.WriteString(stream, instance.notes);
		}
		if (instance.online)
		{
			stream.WriteByte(48);
			ProtocolParser.WriteBool(stream, instance.online);
		}
		Pool.FreeUnmanaged(ref obj);
	}

	public byte[] ToProtoBytes()
	{
		return SerializeToBytes(this);
	}

	public void ToProto(Stream stream)
	{
		Serialize(stream, this);
	}

	public static byte[] SerializeToBytes(Member instance)
	{
		using MemoryStream memoryStream = new MemoryStream();
		Serialize(memoryStream, instance);
		return memoryStream.ToArray();
	}

	public static void SerializeLengthDelimited(Stream stream, Member instance)
	{
		byte[] array = SerializeToBytes(instance);
		ProtocolParser.WriteUInt32(stream, (uint)array.Length);
		stream.Write(array, 0, array.Length);
	}

	public void InspectUids(UidInspector<ulong> action)
	{
	}
}
