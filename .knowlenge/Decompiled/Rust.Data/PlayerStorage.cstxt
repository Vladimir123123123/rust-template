using System;
using System.Collections.Generic;
using System.IO;
using Facepunch;
using SilentOrbit.ProtocolBuffers;

public class PlayerStorage : IDisposable, Pool.IPooled, IProto
{
	public class PlayerStoredVehicle : IDisposable, Pool.IPooled, IProto
	{
		[NonSerialized]
		public string shortname;

		[NonSerialized]
		public string resourcePath;

		[NonSerialized]
		public float health;

		public bool ShouldPool = true;

		private bool _disposed;

		public static void ResetToPool(PlayerStoredVehicle instance)
		{
			if (instance.ShouldPool)
			{
				instance.shortname = string.Empty;
				instance.resourcePath = string.Empty;
				instance.health = 0f;
				Pool.Free(ref instance);
			}
		}

		public void ResetToPool()
		{
			ResetToPool(this);
		}

		public virtual void Dispose()
		{
			if (!ShouldPool)
			{
				throw new Exception("Trying to dispose PlayerStoredVehicle with ShouldPool set to false!");
			}
			if (!_disposed)
			{
				ResetToPool();
				_disposed = true;
			}
		}

		public virtual void EnterPool()
		{
			_disposed = true;
		}

		public virtual void LeavePool()
		{
			_disposed = false;
		}

		public void CopyTo(PlayerStoredVehicle instance)
		{
			instance.shortname = shortname;
			instance.resourcePath = resourcePath;
			instance.health = health;
		}

		public PlayerStoredVehicle Copy()
		{
			PlayerStoredVehicle playerStoredVehicle = Pool.Get<PlayerStoredVehicle>();
			CopyTo(playerStoredVehicle);
			return playerStoredVehicle;
		}

		public static PlayerStoredVehicle Deserialize(Stream stream)
		{
			PlayerStoredVehicle playerStoredVehicle = Pool.Get<PlayerStoredVehicle>();
			Deserialize(stream, playerStoredVehicle, isDelta: false);
			return playerStoredVehicle;
		}

		public static PlayerStoredVehicle DeserializeLengthDelimited(Stream stream)
		{
			PlayerStoredVehicle playerStoredVehicle = Pool.Get<PlayerStoredVehicle>();
			DeserializeLengthDelimited(stream, playerStoredVehicle, isDelta: false);
			return playerStoredVehicle;
		}

		public static PlayerStoredVehicle DeserializeLength(Stream stream, int length)
		{
			PlayerStoredVehicle playerStoredVehicle = Pool.Get<PlayerStoredVehicle>();
			DeserializeLength(stream, length, playerStoredVehicle, isDelta: false);
			return playerStoredVehicle;
		}

		public static PlayerStoredVehicle Deserialize(byte[] buffer)
		{
			PlayerStoredVehicle playerStoredVehicle = Pool.Get<PlayerStoredVehicle>();
			using MemoryStream stream = new MemoryStream(buffer);
			Deserialize(stream, playerStoredVehicle, isDelta: false);
			return playerStoredVehicle;
		}

		public void FromProto(Stream stream, bool isDelta = false)
		{
			Deserialize(stream, this, isDelta);
		}

		public virtual void WriteToStream(Stream stream)
		{
			Serialize(stream, this);
		}

		public virtual void WriteToStreamDelta(Stream stream, PlayerStoredVehicle previous)
		{
			if (previous == null)
			{
				Serialize(stream, this);
			}
			else
			{
				SerializeDelta(stream, this, previous);
			}
		}

		public virtual void ReadFromStream(Stream stream, int size, bool isDelta = false)
		{
			DeserializeLength(stream, size, this, isDelta);
		}

		public static PlayerStoredVehicle Deserialize(byte[] buffer, PlayerStoredVehicle instance, bool isDelta = false)
		{
			using MemoryStream stream = new MemoryStream(buffer);
			Deserialize(stream, instance, isDelta);
			return instance;
		}

		public static PlayerStoredVehicle Deserialize(Stream stream, PlayerStoredVehicle instance, bool isDelta)
		{
			while (true)
			{
				int num = stream.ReadByte();
				switch (num)
				{
				case 10:
					instance.shortname = ProtocolParser.ReadString(stream);
					continue;
				case 18:
					instance.resourcePath = ProtocolParser.ReadString(stream);
					continue;
				case 29:
					instance.health = ProtocolParser.ReadSingle(stream);
					continue;
				case -1:
					return instance;
				}
				Key key = ProtocolParser.ReadKey((byte)num, stream);
				if (key.Field == 0)
				{
					throw new ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
				}
				ProtocolParser.SkipKey(stream, key);
			}
		}

		public static PlayerStoredVehicle DeserializeLengthDelimited(Stream stream, PlayerStoredVehicle instance, bool isDelta)
		{
			long num = ProtocolParser.ReadUInt32(stream);
			num += stream.Position;
			while (stream.Position < num)
			{
				int num2 = stream.ReadByte();
				switch (num2)
				{
				case -1:
					throw new EndOfStreamException();
				case 10:
					instance.shortname = ProtocolParser.ReadString(stream);
					continue;
				case 18:
					instance.resourcePath = ProtocolParser.ReadString(stream);
					continue;
				case 29:
					instance.health = ProtocolParser.ReadSingle(stream);
					continue;
				}
				Key key = ProtocolParser.ReadKey((byte)num2, stream);
				if (key.Field == 0)
				{
					throw new ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
				}
				ProtocolParser.SkipKey(stream, key);
			}
			if (stream.Position != num)
			{
				throw new ProtocolBufferException("Read past max limit");
			}
			return instance;
		}

		public static PlayerStoredVehicle DeserializeLength(Stream stream, int length, PlayerStoredVehicle instance, bool isDelta)
		{
			long num = stream.Position + length;
			while (stream.Position < num)
			{
				int num2 = stream.ReadByte();
				switch (num2)
				{
				case -1:
					throw new EndOfStreamException();
				case 10:
					instance.shortname = ProtocolParser.ReadString(stream);
					continue;
				case 18:
					instance.resourcePath = ProtocolParser.ReadString(stream);
					continue;
				case 29:
					instance.health = ProtocolParser.ReadSingle(stream);
					continue;
				}
				Key key = ProtocolParser.ReadKey((byte)num2, stream);
				if (key.Field == 0)
				{
					throw new ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
				}
				ProtocolParser.SkipKey(stream, key);
			}
			if (stream.Position != num)
			{
				throw new ProtocolBufferException("Read past max limit");
			}
			return instance;
		}

		public static void SerializeDelta(Stream stream, PlayerStoredVehicle instance, PlayerStoredVehicle previous)
		{
			MemoryStream obj = Pool.Get<MemoryStream>();
			if (instance.shortname != null && instance.shortname != previous.shortname)
			{
				stream.WriteByte(10);
				ProtocolParser.WriteString(stream, instance.shortname);
			}
			if (instance.resourcePath != null && instance.resourcePath != previous.resourcePath)
			{
				stream.WriteByte(18);
				ProtocolParser.WriteString(stream, instance.resourcePath);
			}
			if (instance.health != previous.health)
			{
				stream.WriteByte(29);
				ProtocolParser.WriteSingle(stream, instance.health);
			}
			Pool.FreeUnmanaged(ref obj);
		}

		public static void Serialize(Stream stream, PlayerStoredVehicle instance)
		{
			MemoryStream obj = Pool.Get<MemoryStream>();
			if (instance.shortname != null)
			{
				stream.WriteByte(10);
				ProtocolParser.WriteString(stream, instance.shortname);
			}
			if (instance.resourcePath != null)
			{
				stream.WriteByte(18);
				ProtocolParser.WriteString(stream, instance.resourcePath);
			}
			if (instance.health != 0f)
			{
				stream.WriteByte(29);
				ProtocolParser.WriteSingle(stream, instance.health);
			}
			Pool.FreeUnmanaged(ref obj);
		}

		public byte[] ToProtoBytes()
		{
			return SerializeToBytes(this);
		}

		public void ToProto(Stream stream)
		{
			Serialize(stream, this);
		}

		public static byte[] SerializeToBytes(PlayerStoredVehicle instance)
		{
			using MemoryStream memoryStream = new MemoryStream();
			Serialize(memoryStream, instance);
			return memoryStream.ToArray();
		}

		public static void SerializeLengthDelimited(Stream stream, PlayerStoredVehicle instance)
		{
			byte[] array = SerializeToBytes(instance);
			ProtocolParser.WriteUInt32(stream, (uint)array.Length);
			stream.Write(array, 0, array.Length);
		}

		public void InspectUids(UidInspector<ulong> action)
		{
		}
	}

	[NonSerialized]
	public ulong userid;

	[NonSerialized]
	public List<PlayerStoredVehicle> storedVehicles;

	public bool ShouldPool = true;

	private bool _disposed;

	public static void ResetToPool(PlayerStorage instance)
	{
		if (!instance.ShouldPool)
		{
			return;
		}
		instance.userid = 0uL;
		if (instance.storedVehicles != null)
		{
			for (int i = 0; i < instance.storedVehicles.Count; i++)
			{
				if (instance.storedVehicles[i] != null)
				{
					instance.storedVehicles[i].ResetToPool();
					instance.storedVehicles[i] = null;
				}
			}
			List<PlayerStoredVehicle> obj = instance.storedVehicles;
			Pool.Free(ref obj, freeElements: false);
			instance.storedVehicles = obj;
		}
		Pool.Free(ref instance);
	}

	public void ResetToPool()
	{
		ResetToPool(this);
	}

	public virtual void Dispose()
	{
		if (!ShouldPool)
		{
			throw new Exception("Trying to dispose PlayerStorage with ShouldPool set to false!");
		}
		if (!_disposed)
		{
			ResetToPool();
			_disposed = true;
		}
	}

	public virtual void EnterPool()
	{
		_disposed = true;
	}

	public virtual void LeavePool()
	{
		_disposed = false;
	}

	public void CopyTo(PlayerStorage instance)
	{
		instance.userid = userid;
		if (storedVehicles != null)
		{
			instance.storedVehicles = Pool.Get<List<PlayerStoredVehicle>>();
			for (int i = 0; i < storedVehicles.Count; i++)
			{
				PlayerStoredVehicle item = storedVehicles[i].Copy();
				instance.storedVehicles.Add(item);
			}
		}
		else
		{
			instance.storedVehicles = null;
		}
	}

	public PlayerStorage Copy()
	{
		PlayerStorage playerStorage = Pool.Get<PlayerStorage>();
		CopyTo(playerStorage);
		return playerStorage;
	}

	public static PlayerStorage Deserialize(Stream stream)
	{
		PlayerStorage playerStorage = Pool.Get<PlayerStorage>();
		Deserialize(stream, playerStorage, isDelta: false);
		return playerStorage;
	}

	public static PlayerStorage DeserializeLengthDelimited(Stream stream)
	{
		PlayerStorage playerStorage = Pool.Get<PlayerStorage>();
		DeserializeLengthDelimited(stream, playerStorage, isDelta: false);
		return playerStorage;
	}

	public static PlayerStorage DeserializeLength(Stream stream, int length)
	{
		PlayerStorage playerStorage = Pool.Get<PlayerStorage>();
		DeserializeLength(stream, length, playerStorage, isDelta: false);
		return playerStorage;
	}

	public static PlayerStorage Deserialize(byte[] buffer)
	{
		PlayerStorage playerStorage = Pool.Get<PlayerStorage>();
		using MemoryStream stream = new MemoryStream(buffer);
		Deserialize(stream, playerStorage, isDelta: false);
		return playerStorage;
	}

	public void FromProto(Stream stream, bool isDelta = false)
	{
		Deserialize(stream, this, isDelta);
	}

	public virtual void WriteToStream(Stream stream)
	{
		Serialize(stream, this);
	}

	public virtual void WriteToStreamDelta(Stream stream, PlayerStorage previous)
	{
		if (previous == null)
		{
			Serialize(stream, this);
		}
		else
		{
			SerializeDelta(stream, this, previous);
		}
	}

	public virtual void ReadFromStream(Stream stream, int size, bool isDelta = false)
	{
		DeserializeLength(stream, size, this, isDelta);
	}

	public static PlayerStorage Deserialize(byte[] buffer, PlayerStorage instance, bool isDelta = false)
	{
		using MemoryStream stream = new MemoryStream(buffer);
		Deserialize(stream, instance, isDelta);
		return instance;
	}

	public static PlayerStorage Deserialize(Stream stream, PlayerStorage instance, bool isDelta)
	{
		if (!isDelta && instance.storedVehicles == null)
		{
			instance.storedVehicles = Pool.Get<List<PlayerStoredVehicle>>();
		}
		while (true)
		{
			int num = stream.ReadByte();
			switch (num)
			{
			case 8:
				instance.userid = ProtocolParser.ReadUInt64(stream);
				continue;
			case 18:
				instance.storedVehicles.Add(PlayerStoredVehicle.DeserializeLengthDelimited(stream));
				continue;
			case -1:
				return instance;
			}
			Key key = ProtocolParser.ReadKey((byte)num, stream);
			if (key.Field == 0)
			{
				throw new ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
			}
			ProtocolParser.SkipKey(stream, key);
		}
	}

	public static PlayerStorage DeserializeLengthDelimited(Stream stream, PlayerStorage instance, bool isDelta)
	{
		if (!isDelta && instance.storedVehicles == null)
		{
			instance.storedVehicles = Pool.Get<List<PlayerStoredVehicle>>();
		}
		long num = ProtocolParser.ReadUInt32(stream);
		num += stream.Position;
		while (stream.Position < num)
		{
			int num2 = stream.ReadByte();
			switch (num2)
			{
			case -1:
				throw new EndOfStreamException();
			case 8:
				instance.userid = ProtocolParser.ReadUInt64(stream);
				continue;
			case 18:
				instance.storedVehicles.Add(PlayerStoredVehicle.DeserializeLengthDelimited(stream));
				continue;
			}
			Key key = ProtocolParser.ReadKey((byte)num2, stream);
			if (key.Field == 0)
			{
				throw new ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
			}
			ProtocolParser.SkipKey(stream, key);
		}
		if (stream.Position != num)
		{
			throw new ProtocolBufferException("Read past max limit");
		}
		return instance;
	}

	public static PlayerStorage DeserializeLength(Stream stream, int length, PlayerStorage instance, bool isDelta)
	{
		if (!isDelta && instance.storedVehicles == null)
		{
			instance.storedVehicles = Pool.Get<List<PlayerStoredVehicle>>();
		}
		long num = stream.Position + length;
		while (stream.Position < num)
		{
			int num2 = stream.ReadByte();
			switch (num2)
			{
			case -1:
				throw new EndOfStreamException();
			case 8:
				instance.userid = ProtocolParser.ReadUInt64(stream);
				continue;
			case 18:
				instance.storedVehicles.Add(PlayerStoredVehicle.DeserializeLengthDelimited(stream));
				continue;
			}
			Key key = ProtocolParser.ReadKey((byte)num2, stream);
			if (key.Field == 0)
			{
				throw new ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
			}
			ProtocolParser.SkipKey(stream, key);
		}
		if (stream.Position != num)
		{
			throw new ProtocolBufferException("Read past max limit");
		}
		return instance;
	}

	public static void SerializeDelta(Stream stream, PlayerStorage instance, PlayerStorage previous)
	{
		MemoryStream obj = Pool.Get<MemoryStream>();
		if (instance.userid != previous.userid)
		{
			stream.WriteByte(8);
			ProtocolParser.WriteUInt64(stream, instance.userid);
		}
		if (instance.storedVehicles != null)
		{
			for (int i = 0; i < instance.storedVehicles.Count; i++)
			{
				PlayerStoredVehicle playerStoredVehicle = instance.storedVehicles[i];
				stream.WriteByte(18);
				obj.SetLength(0L);
				PlayerStoredVehicle.SerializeDelta(obj, playerStoredVehicle, playerStoredVehicle);
				uint num = (uint)obj.Length;
				ProtocolParser.WriteUInt32(stream, num);
				stream.Write(obj.GetBuffer(), 0, (int)num);
			}
		}
		Pool.FreeUnmanaged(ref obj);
	}

	public static void Serialize(Stream stream, PlayerStorage instance)
	{
		MemoryStream obj = Pool.Get<MemoryStream>();
		if (instance.userid != 0L)
		{
			stream.WriteByte(8);
			ProtocolParser.WriteUInt64(stream, instance.userid);
		}
		if (instance.storedVehicles != null)
		{
			for (int i = 0; i < instance.storedVehicles.Count; i++)
			{
				PlayerStoredVehicle instance2 = instance.storedVehicles[i];
				stream.WriteByte(18);
				obj.SetLength(0L);
				PlayerStoredVehicle.Serialize(obj, instance2);
				uint num = (uint)obj.Length;
				ProtocolParser.WriteUInt32(stream, num);
				stream.Write(obj.GetBuffer(), 0, (int)num);
			}
		}
		Pool.FreeUnmanaged(ref obj);
	}

	public byte[] ToProtoBytes()
	{
		return SerializeToBytes(this);
	}

	public void ToProto(Stream stream)
	{
		Serialize(stream, this);
	}

	public static byte[] SerializeToBytes(PlayerStorage instance)
	{
		using MemoryStream memoryStream = new MemoryStream();
		Serialize(memoryStream, instance);
		return memoryStream.ToArray();
	}

	public static void SerializeLengthDelimited(Stream stream, PlayerStorage instance)
	{
		byte[] array = SerializeToBytes(instance);
		ProtocolParser.WriteUInt32(stream, (uint)array.Length);
		stream.Write(array, 0, array.Length);
	}

	public void InspectUids(UidInspector<ulong> action)
	{
		if (storedVehicles != null)
		{
			for (int i = 0; i < storedVehicles.Count; i++)
			{
				storedVehicles[i]?.InspectUids(action);
			}
		}
	}
}
