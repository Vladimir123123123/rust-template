using System;
using System.IO;
using Facepunch;
using SilentOrbit.ProtocolBuffers;

public class PlayerStoredVehicle : IDisposable, Pool.IPooled, IProto
{
	[NonSerialized]
	public string shortname;

	[NonSerialized]
	public string resourcePath;

	[NonSerialized]
	public float health;

	public bool ShouldPool = true;

	private bool _disposed;

	public static void ResetToPool(PlayerStoredVehicle instance)
	{
		if (instance.ShouldPool)
		{
			instance.shortname = string.Empty;
			instance.resourcePath = string.Empty;
			instance.health = 0f;
			Pool.Free(ref instance);
		}
	}

	public void ResetToPool()
	{
		ResetToPool(this);
	}

	public virtual void Dispose()
	{
		if (!ShouldPool)
		{
			throw new Exception("Trying to dispose PlayerStoredVehicle with ShouldPool set to false!");
		}
		if (!_disposed)
		{
			ResetToPool();
			_disposed = true;
		}
	}

	public virtual void EnterPool()
	{
		_disposed = true;
	}

	public virtual void LeavePool()
	{
		_disposed = false;
	}

	public void CopyTo(PlayerStoredVehicle instance)
	{
		instance.shortname = shortname;
		instance.resourcePath = resourcePath;
		instance.health = health;
	}

	public PlayerStoredVehicle Copy()
	{
		PlayerStoredVehicle playerStoredVehicle = Pool.Get<PlayerStoredVehicle>();
		CopyTo(playerStoredVehicle);
		return playerStoredVehicle;
	}

	public static PlayerStoredVehicle Deserialize(Stream stream)
	{
		PlayerStoredVehicle playerStoredVehicle = Pool.Get<PlayerStoredVehicle>();
		Deserialize(stream, playerStoredVehicle, isDelta: false);
		return playerStoredVehicle;
	}

	public static PlayerStoredVehicle DeserializeLengthDelimited(Stream stream)
	{
		PlayerStoredVehicle playerStoredVehicle = Pool.Get<PlayerStoredVehicle>();
		DeserializeLengthDelimited(stream, playerStoredVehicle, isDelta: false);
		return playerStoredVehicle;
	}

	public static PlayerStoredVehicle DeserializeLength(Stream stream, int length)
	{
		PlayerStoredVehicle playerStoredVehicle = Pool.Get<PlayerStoredVehicle>();
		DeserializeLength(stream, length, playerStoredVehicle, isDelta: false);
		return playerStoredVehicle;
	}

	public static PlayerStoredVehicle Deserialize(byte[] buffer)
	{
		PlayerStoredVehicle playerStoredVehicle = Pool.Get<PlayerStoredVehicle>();
		using MemoryStream stream = new MemoryStream(buffer);
		Deserialize(stream, playerStoredVehicle, isDelta: false);
		return playerStoredVehicle;
	}

	public void FromProto(Stream stream, bool isDelta = false)
	{
		Deserialize(stream, this, isDelta);
	}

	public virtual void WriteToStream(Stream stream)
	{
		Serialize(stream, this);
	}

	public virtual void WriteToStreamDelta(Stream stream, PlayerStoredVehicle previous)
	{
		if (previous == null)
		{
			Serialize(stream, this);
		}
		else
		{
			SerializeDelta(stream, this, previous);
		}
	}

	public virtual void ReadFromStream(Stream stream, int size, bool isDelta = false)
	{
		DeserializeLength(stream, size, this, isDelta);
	}

	public static PlayerStoredVehicle Deserialize(byte[] buffer, PlayerStoredVehicle instance, bool isDelta = false)
	{
		using MemoryStream stream = new MemoryStream(buffer);
		Deserialize(stream, instance, isDelta);
		return instance;
	}

	public static PlayerStoredVehicle Deserialize(Stream stream, PlayerStoredVehicle instance, bool isDelta)
	{
		while (true)
		{
			int num = stream.ReadByte();
			switch (num)
			{
			case 10:
				instance.shortname = ProtocolParser.ReadString(stream);
				continue;
			case 18:
				instance.resourcePath = ProtocolParser.ReadString(stream);
				continue;
			case 29:
				instance.health = ProtocolParser.ReadSingle(stream);
				continue;
			case -1:
				return instance;
			}
			Key key = ProtocolParser.ReadKey((byte)num, stream);
			if (key.Field == 0)
			{
				throw new ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
			}
			ProtocolParser.SkipKey(stream, key);
		}
	}

	public static PlayerStoredVehicle DeserializeLengthDelimited(Stream stream, PlayerStoredVehicle instance, bool isDelta)
	{
		long num = ProtocolParser.ReadUInt32(stream);
		num += stream.Position;
		while (stream.Position < num)
		{
			int num2 = stream.ReadByte();
			switch (num2)
			{
			case -1:
				throw new EndOfStreamException();
			case 10:
				instance.shortname = ProtocolParser.ReadString(stream);
				continue;
			case 18:
				instance.resourcePath = ProtocolParser.ReadString(stream);
				continue;
			case 29:
				instance.health = ProtocolParser.ReadSingle(stream);
				continue;
			}
			Key key = ProtocolParser.ReadKey((byte)num2, stream);
			if (key.Field == 0)
			{
				throw new ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
			}
			ProtocolParser.SkipKey(stream, key);
		}
		if (stream.Position != num)
		{
			throw new ProtocolBufferException("Read past max limit");
		}
		return instance;
	}

	public static PlayerStoredVehicle DeserializeLength(Stream stream, int length, PlayerStoredVehicle instance, bool isDelta)
	{
		long num = stream.Position + length;
		while (stream.Position < num)
		{
			int num2 = stream.ReadByte();
			switch (num2)
			{
			case -1:
				throw new EndOfStreamException();
			case 10:
				instance.shortname = ProtocolParser.ReadString(stream);
				continue;
			case 18:
				instance.resourcePath = ProtocolParser.ReadString(stream);
				continue;
			case 29:
				instance.health = ProtocolParser.ReadSingle(stream);
				continue;
			}
			Key key = ProtocolParser.ReadKey((byte)num2, stream);
			if (key.Field == 0)
			{
				throw new ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
			}
			ProtocolParser.SkipKey(stream, key);
		}
		if (stream.Position != num)
		{
			throw new ProtocolBufferException("Read past max limit");
		}
		return instance;
	}

	public static void SerializeDelta(Stream stream, PlayerStoredVehicle instance, PlayerStoredVehicle previous)
	{
		MemoryStream obj = Pool.Get<MemoryStream>();
		if (instance.shortname != null && instance.shortname != previous.shortname)
		{
			stream.WriteByte(10);
			ProtocolParser.WriteString(stream, instance.shortname);
		}
		if (instance.resourcePath != null && instance.resourcePath != previous.resourcePath)
		{
			stream.WriteByte(18);
			ProtocolParser.WriteString(stream, instance.resourcePath);
		}
		if (instance.health != previous.health)
		{
			stream.WriteByte(29);
			ProtocolParser.WriteSingle(stream, instance.health);
		}
		Pool.FreeUnmanaged(ref obj);
	}

	public static void Serialize(Stream stream, PlayerStoredVehicle instance)
	{
		MemoryStream obj = Pool.Get<MemoryStream>();
		if (instance.shortname != null)
		{
			stream.WriteByte(10);
			ProtocolParser.WriteString(stream, instance.shortname);
		}
		if (instance.resourcePath != null)
		{
			stream.WriteByte(18);
			ProtocolParser.WriteString(stream, instance.resourcePath);
		}
		if (instance.health != 0f)
		{
			stream.WriteByte(29);
			ProtocolParser.WriteSingle(stream, instance.health);
		}
		Pool.FreeUnmanaged(ref obj);
	}

	public byte[] ToProtoBytes()
	{
		return SerializeToBytes(this);
	}

	public void ToProto(Stream stream)
	{
		Serialize(stream, this);
	}

	public static byte[] SerializeToBytes(PlayerStoredVehicle instance)
	{
		using MemoryStream memoryStream = new MemoryStream();
		Serialize(memoryStream, instance);
		return memoryStream.ToArray();
	}

	public static void SerializeLengthDelimited(Stream stream, PlayerStoredVehicle instance)
	{
		byte[] array = SerializeToBytes(instance);
		ProtocolParser.WriteUInt32(stream, (uint)array.Length);
		stream.Write(array, 0, array.Length);
	}

	public void InspectUids(UidInspector<ulong> action)
	{
	}
}
