using System;
using System.IO;
using Facepunch;
using SilentOrbit.ProtocolBuffers;
using UnityEngine;

public class PlayerTick : IDisposable, Pool.IPooled, IProto
{
	[NonSerialized]
	public InputMessage inputState;

	[NonSerialized]
	public Vector3 position;

	[NonSerialized]
	public ModelState modelState;

	[NonSerialized]
	public ItemId activeItem;

	[NonSerialized]
	public Vector3 eyePos;

	[NonSerialized]
	public NetworkableId parentID;

	[NonSerialized]
	public uint deltaMs;

	public bool ShouldPool = true;

	private bool _disposed;

	public static void ResetToPool(PlayerTick instance)
	{
		if (instance.ShouldPool)
		{
			if (instance.inputState != null)
			{
				instance.inputState.ResetToPool();
				instance.inputState = null;
			}
			instance.position = default(Vector3);
			if (instance.modelState != null)
			{
				instance.modelState.ResetToPool();
				instance.modelState = null;
			}
			instance.activeItem = default(ItemId);
			instance.eyePos = default(Vector3);
			instance.parentID = default(NetworkableId);
			instance.deltaMs = 0u;
			Pool.Free(ref instance);
		}
	}

	public void ResetToPool()
	{
		ResetToPool(this);
	}

	public virtual void Dispose()
	{
		if (!ShouldPool)
		{
			throw new Exception("Trying to dispose PlayerTick with ShouldPool set to false!");
		}
		if (!_disposed)
		{
			ResetToPool();
			_disposed = true;
		}
	}

	public virtual void EnterPool()
	{
		_disposed = true;
	}

	public virtual void LeavePool()
	{
		_disposed = false;
	}

	public void CopyTo(PlayerTick instance)
	{
		if (inputState != null)
		{
			if (instance.inputState == null)
			{
				instance.inputState = inputState.Copy();
			}
			else
			{
				inputState.CopyTo(instance.inputState);
			}
		}
		else
		{
			instance.inputState = null;
		}
		instance.position = position;
		if (modelState != null)
		{
			if (instance.modelState == null)
			{
				instance.modelState = modelState.Copy();
			}
			else
			{
				modelState.CopyTo(instance.modelState);
			}
		}
		else
		{
			instance.modelState = null;
		}
		instance.activeItem = activeItem;
		instance.eyePos = eyePos;
		instance.parentID = parentID;
		instance.deltaMs = deltaMs;
	}

	public PlayerTick Copy()
	{
		PlayerTick playerTick = Pool.Get<PlayerTick>();
		CopyTo(playerTick);
		return playerTick;
	}

	public static PlayerTick Deserialize(Stream stream)
	{
		PlayerTick playerTick = Pool.Get<PlayerTick>();
		Deserialize(stream, playerTick, isDelta: false);
		return playerTick;
	}

	public static PlayerTick DeserializeLengthDelimited(Stream stream)
	{
		PlayerTick playerTick = Pool.Get<PlayerTick>();
		DeserializeLengthDelimited(stream, playerTick, isDelta: false);
		return playerTick;
	}

	public static PlayerTick DeserializeLength(Stream stream, int length)
	{
		PlayerTick playerTick = Pool.Get<PlayerTick>();
		DeserializeLength(stream, length, playerTick, isDelta: false);
		return playerTick;
	}

	public static PlayerTick Deserialize(byte[] buffer)
	{
		PlayerTick playerTick = Pool.Get<PlayerTick>();
		using MemoryStream stream = new MemoryStream(buffer);
		Deserialize(stream, playerTick, isDelta: false);
		return playerTick;
	}

	public void FromProto(Stream stream, bool isDelta = false)
	{
		Deserialize(stream, this, isDelta);
	}

	public virtual void WriteToStream(Stream stream)
	{
		Serialize(stream, this);
	}

	public virtual void WriteToStreamDelta(Stream stream, PlayerTick previous)
	{
		if (previous == null)
		{
			Serialize(stream, this);
		}
		else
		{
			SerializeDelta(stream, this, previous);
		}
	}

	public virtual void ReadFromStream(Stream stream, int size, bool isDelta = false)
	{
		DeserializeLength(stream, size, this, isDelta);
	}

	public static PlayerTick Deserialize(byte[] buffer, PlayerTick instance, bool isDelta = false)
	{
		using MemoryStream stream = new MemoryStream(buffer);
		Deserialize(stream, instance, isDelta);
		return instance;
	}

	public static PlayerTick Deserialize(Stream stream, PlayerTick instance, bool isDelta)
	{
		while (true)
		{
			int num = stream.ReadByte();
			switch (num)
			{
			case 10:
				if (instance.inputState == null)
				{
					instance.inputState = InputMessage.DeserializeLengthDelimited(stream);
				}
				else
				{
					InputMessage.DeserializeLengthDelimited(stream, instance.inputState, isDelta);
				}
				continue;
			case 18:
				Vector3Serialized.DeserializeLengthDelimited(stream, ref instance.position, isDelta);
				continue;
			case 34:
				if (instance.modelState == null)
				{
					instance.modelState = ModelState.DeserializeLengthDelimited(stream);
				}
				else
				{
					ModelState.DeserializeLengthDelimited(stream, instance.modelState, isDelta);
				}
				continue;
			case 40:
				instance.activeItem = new ItemId(ProtocolParser.ReadUInt64(stream));
				continue;
			case 50:
				Vector3Serialized.DeserializeLengthDelimited(stream, ref instance.eyePos, isDelta);
				continue;
			case 56:
				instance.parentID = new NetworkableId(ProtocolParser.ReadUInt64(stream));
				continue;
			case 64:
				instance.deltaMs = ProtocolParser.ReadUInt32(stream);
				continue;
			case -1:
				return instance;
			}
			Key key = ProtocolParser.ReadKey((byte)num, stream);
			if (key.Field == 0)
			{
				throw new ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
			}
			ProtocolParser.SkipKey(stream, key);
		}
	}

	public static PlayerTick DeserializeLengthDelimited(Stream stream, PlayerTick instance, bool isDelta)
	{
		long num = ProtocolParser.ReadUInt32(stream);
		num += stream.Position;
		while (stream.Position < num)
		{
			int num2 = stream.ReadByte();
			switch (num2)
			{
			case -1:
				throw new EndOfStreamException();
			case 10:
				if (instance.inputState == null)
				{
					instance.inputState = InputMessage.DeserializeLengthDelimited(stream);
				}
				else
				{
					InputMessage.DeserializeLengthDelimited(stream, instance.inputState, isDelta);
				}
				continue;
			case 18:
				Vector3Serialized.DeserializeLengthDelimited(stream, ref instance.position, isDelta);
				continue;
			case 34:
				if (instance.modelState == null)
				{
					instance.modelState = ModelState.DeserializeLengthDelimited(stream);
				}
				else
				{
					ModelState.DeserializeLengthDelimited(stream, instance.modelState, isDelta);
				}
				continue;
			case 40:
				instance.activeItem = new ItemId(ProtocolParser.ReadUInt64(stream));
				continue;
			case 50:
				Vector3Serialized.DeserializeLengthDelimited(stream, ref instance.eyePos, isDelta);
				continue;
			case 56:
				instance.parentID = new NetworkableId(ProtocolParser.ReadUInt64(stream));
				continue;
			case 64:
				instance.deltaMs = ProtocolParser.ReadUInt32(stream);
				continue;
			}
			Key key = ProtocolParser.ReadKey((byte)num2, stream);
			if (key.Field == 0)
			{
				throw new ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
			}
			ProtocolParser.SkipKey(stream, key);
		}
		if (stream.Position != num)
		{
			throw new ProtocolBufferException("Read past max limit");
		}
		return instance;
	}

	public static PlayerTick DeserializeLength(Stream stream, int length, PlayerTick instance, bool isDelta)
	{
		long num = stream.Position + length;
		while (stream.Position < num)
		{
			int num2 = stream.ReadByte();
			switch (num2)
			{
			case -1:
				throw new EndOfStreamException();
			case 10:
				if (instance.inputState == null)
				{
					instance.inputState = InputMessage.DeserializeLengthDelimited(stream);
				}
				else
				{
					InputMessage.DeserializeLengthDelimited(stream, instance.inputState, isDelta);
				}
				continue;
			case 18:
				Vector3Serialized.DeserializeLengthDelimited(stream, ref instance.position, isDelta);
				continue;
			case 34:
				if (instance.modelState == null)
				{
					instance.modelState = ModelState.DeserializeLengthDelimited(stream);
				}
				else
				{
					ModelState.DeserializeLengthDelimited(stream, instance.modelState, isDelta);
				}
				continue;
			case 40:
				instance.activeItem = new ItemId(ProtocolParser.ReadUInt64(stream));
				continue;
			case 50:
				Vector3Serialized.DeserializeLengthDelimited(stream, ref instance.eyePos, isDelta);
				continue;
			case 56:
				instance.parentID = new NetworkableId(ProtocolParser.ReadUInt64(stream));
				continue;
			case 64:
				instance.deltaMs = ProtocolParser.ReadUInt32(stream);
				continue;
			}
			Key key = ProtocolParser.ReadKey((byte)num2, stream);
			if (key.Field == 0)
			{
				throw new ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
			}
			ProtocolParser.SkipKey(stream, key);
		}
		if (stream.Position != num)
		{
			throw new ProtocolBufferException("Read past max limit");
		}
		return instance;
	}

	public static void SerializeDelta(Stream stream, PlayerTick instance, PlayerTick previous)
	{
		MemoryStream obj = Pool.Get<MemoryStream>();
		if (instance.inputState == null)
		{
			throw new ArgumentNullException("inputState", "Required by proto specification.");
		}
		stream.WriteByte(10);
		obj.SetLength(0L);
		InputMessage.SerializeDelta(obj, instance.inputState, previous.inputState);
		uint num = (uint)obj.Length;
		ProtocolParser.WriteUInt32(stream, num);
		stream.Write(obj.GetBuffer(), 0, (int)num);
		if (instance.position != previous.position)
		{
			stream.WriteByte(18);
			obj.SetLength(0L);
			Vector3Serialized.SerializeDelta(obj, instance.position, previous.position);
			uint num2 = (uint)obj.Length;
			ProtocolParser.WriteUInt32(stream, num2);
			stream.Write(obj.GetBuffer(), 0, (int)num2);
		}
		if (instance.modelState == null)
		{
			throw new ArgumentNullException("modelState", "Required by proto specification.");
		}
		stream.WriteByte(34);
		obj.SetLength(0L);
		ModelState.SerializeDelta(obj, instance.modelState, previous.modelState);
		uint num3 = (uint)obj.Length;
		ProtocolParser.WriteUInt32(stream, num3);
		stream.Write(obj.GetBuffer(), 0, (int)num3);
		stream.WriteByte(40);
		ProtocolParser.WriteUInt64(stream, instance.activeItem.Value);
		if (instance.eyePos != previous.eyePos)
		{
			stream.WriteByte(50);
			obj.SetLength(0L);
			Vector3Serialized.SerializeDelta(obj, instance.eyePos, previous.eyePos);
			uint num4 = (uint)obj.Length;
			ProtocolParser.WriteUInt32(stream, num4);
			stream.Write(obj.GetBuffer(), 0, (int)num4);
		}
		stream.WriteByte(56);
		ProtocolParser.WriteUInt64(stream, instance.parentID.Value);
		if (instance.deltaMs != previous.deltaMs)
		{
			stream.WriteByte(64);
			ProtocolParser.WriteUInt32(stream, instance.deltaMs);
		}
		Pool.FreeUnmanaged(ref obj);
	}

	public static void Serialize(Stream stream, PlayerTick instance)
	{
		MemoryStream obj = Pool.Get<MemoryStream>();
		if (instance.inputState == null)
		{
			throw new ArgumentNullException("inputState", "Required by proto specification.");
		}
		stream.WriteByte(10);
		obj.SetLength(0L);
		InputMessage.Serialize(obj, instance.inputState);
		uint num = (uint)obj.Length;
		ProtocolParser.WriteUInt32(stream, num);
		stream.Write(obj.GetBuffer(), 0, (int)num);
		if (instance.position != default(Vector3))
		{
			stream.WriteByte(18);
			obj.SetLength(0L);
			Vector3Serialized.Serialize(obj, instance.position);
			uint num2 = (uint)obj.Length;
			ProtocolParser.WriteUInt32(stream, num2);
			stream.Write(obj.GetBuffer(), 0, (int)num2);
		}
		if (instance.modelState == null)
		{
			throw new ArgumentNullException("modelState", "Required by proto specification.");
		}
		stream.WriteByte(34);
		obj.SetLength(0L);
		ModelState.Serialize(obj, instance.modelState);
		uint num3 = (uint)obj.Length;
		ProtocolParser.WriteUInt32(stream, num3);
		stream.Write(obj.GetBuffer(), 0, (int)num3);
		if (instance.activeItem != default(ItemId))
		{
			stream.WriteByte(40);
			ProtocolParser.WriteUInt64(stream, instance.activeItem.Value);
		}
		if (instance.eyePos != default(Vector3))
		{
			stream.WriteByte(50);
			obj.SetLength(0L);
			Vector3Serialized.Serialize(obj, instance.eyePos);
			uint num4 = (uint)obj.Length;
			ProtocolParser.WriteUInt32(stream, num4);
			stream.Write(obj.GetBuffer(), 0, (int)num4);
		}
		if (instance.parentID != default(NetworkableId))
		{
			stream.WriteByte(56);
			ProtocolParser.WriteUInt64(stream, instance.parentID.Value);
		}
		if (instance.deltaMs != 0)
		{
			stream.WriteByte(64);
			ProtocolParser.WriteUInt32(stream, instance.deltaMs);
		}
		Pool.FreeUnmanaged(ref obj);
	}

	public byte[] ToProtoBytes()
	{
		return SerializeToBytes(this);
	}

	public void ToProto(Stream stream)
	{
		Serialize(stream, this);
	}

	public static byte[] SerializeToBytes(PlayerTick instance)
	{
		using MemoryStream memoryStream = new MemoryStream();
		Serialize(memoryStream, instance);
		return memoryStream.ToArray();
	}

	public static void SerializeLengthDelimited(Stream stream, PlayerTick instance)
	{
		byte[] array = SerializeToBytes(instance);
		ProtocolParser.WriteUInt32(stream, (uint)array.Length);
		stream.Write(array, 0, array.Length);
	}

	public void InspectUids(UidInspector<ulong> action)
	{
		inputState?.InspectUids(action);
		modelState?.InspectUids(action);
		action(UidType.ItemId, ref activeItem.Value);
		action(UidType.NetworkableId, ref parentID.Value);
	}
}
