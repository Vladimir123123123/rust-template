using System;
using System.Collections.Generic;
using System.IO;
using Facepunch;
using SilentOrbit.ProtocolBuffers;

public class Private : IDisposable, Pool.IPooled, IProto
{
	[NonSerialized]
	public string code;

	[NonSerialized]
	public List<ulong> users;

	[NonSerialized]
	public string guestCode;

	[NonSerialized]
	public List<ulong> guestUsers;

	public bool ShouldPool = true;

	private bool _disposed;

	public static void ResetToPool(Private instance)
	{
		if (instance.ShouldPool)
		{
			instance.code = string.Empty;
			if (instance.users != null)
			{
				List<ulong> obj = instance.users;
				Pool.FreeUnmanaged(ref obj);
				instance.users = obj;
			}
			instance.guestCode = string.Empty;
			if (instance.guestUsers != null)
			{
				List<ulong> obj2 = instance.guestUsers;
				Pool.FreeUnmanaged(ref obj2);
				instance.guestUsers = obj2;
			}
			Pool.Free(ref instance);
		}
	}

	public void ResetToPool()
	{
		ResetToPool(this);
	}

	public virtual void Dispose()
	{
		if (!ShouldPool)
		{
			throw new Exception("Trying to dispose Private with ShouldPool set to false!");
		}
		if (!_disposed)
		{
			ResetToPool();
			_disposed = true;
		}
	}

	public virtual void EnterPool()
	{
		_disposed = true;
	}

	public virtual void LeavePool()
	{
		_disposed = false;
	}

	public void CopyTo(Private instance)
	{
		instance.code = code;
		if (users != null)
		{
			instance.users = Pool.Get<List<ulong>>();
			for (int i = 0; i < users.Count; i++)
			{
				ulong item = users[i];
				instance.users.Add(item);
			}
		}
		else
		{
			instance.users = null;
		}
		instance.guestCode = guestCode;
		if (guestUsers != null)
		{
			instance.guestUsers = Pool.Get<List<ulong>>();
			for (int j = 0; j < guestUsers.Count; j++)
			{
				ulong item2 = guestUsers[j];
				instance.guestUsers.Add(item2);
			}
		}
		else
		{
			instance.guestUsers = null;
		}
	}

	public Private Copy()
	{
		Private @private = Pool.Get<Private>();
		CopyTo(@private);
		return @private;
	}

	public static Private Deserialize(Stream stream)
	{
		Private @private = Pool.Get<Private>();
		Deserialize(stream, @private, isDelta: false);
		return @private;
	}

	public static Private DeserializeLengthDelimited(Stream stream)
	{
		Private @private = Pool.Get<Private>();
		DeserializeLengthDelimited(stream, @private, isDelta: false);
		return @private;
	}

	public static Private DeserializeLength(Stream stream, int length)
	{
		Private @private = Pool.Get<Private>();
		DeserializeLength(stream, length, @private, isDelta: false);
		return @private;
	}

	public static Private Deserialize(byte[] buffer)
	{
		Private @private = Pool.Get<Private>();
		using MemoryStream stream = new MemoryStream(buffer);
		Deserialize(stream, @private, isDelta: false);
		return @private;
	}

	public void FromProto(Stream stream, bool isDelta = false)
	{
		Deserialize(stream, this, isDelta);
	}

	public virtual void WriteToStream(Stream stream)
	{
		Serialize(stream, this);
	}

	public virtual void WriteToStreamDelta(Stream stream, Private previous)
	{
		if (previous == null)
		{
			Serialize(stream, this);
		}
		else
		{
			SerializeDelta(stream, this, previous);
		}
	}

	public virtual void ReadFromStream(Stream stream, int size, bool isDelta = false)
	{
		DeserializeLength(stream, size, this, isDelta);
	}

	public static Private Deserialize(byte[] buffer, Private instance, bool isDelta = false)
	{
		using MemoryStream stream = new MemoryStream(buffer);
		Deserialize(stream, instance, isDelta);
		return instance;
	}

	public static Private Deserialize(Stream stream, Private instance, bool isDelta)
	{
		if (!isDelta)
		{
			if (instance.users == null)
			{
				instance.users = Pool.Get<List<ulong>>();
			}
			if (instance.guestUsers == null)
			{
				instance.guestUsers = Pool.Get<List<ulong>>();
			}
		}
		while (true)
		{
			int num = stream.ReadByte();
			switch (num)
			{
			case 10:
				instance.code = ProtocolParser.ReadString(stream);
				continue;
			case 16:
				instance.users.Add(ProtocolParser.ReadUInt64(stream));
				continue;
			case 34:
				instance.guestCode = ProtocolParser.ReadString(stream);
				continue;
			case 40:
				instance.guestUsers.Add(ProtocolParser.ReadUInt64(stream));
				continue;
			case -1:
				return instance;
			}
			Key key = ProtocolParser.ReadKey((byte)num, stream);
			if (key.Field == 0)
			{
				throw new ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
			}
			ProtocolParser.SkipKey(stream, key);
		}
	}

	public static Private DeserializeLengthDelimited(Stream stream, Private instance, bool isDelta)
	{
		if (!isDelta)
		{
			if (instance.users == null)
			{
				instance.users = Pool.Get<List<ulong>>();
			}
			if (instance.guestUsers == null)
			{
				instance.guestUsers = Pool.Get<List<ulong>>();
			}
		}
		long num = ProtocolParser.ReadUInt32(stream);
		num += stream.Position;
		while (stream.Position < num)
		{
			int num2 = stream.ReadByte();
			switch (num2)
			{
			case -1:
				throw new EndOfStreamException();
			case 10:
				instance.code = ProtocolParser.ReadString(stream);
				continue;
			case 16:
				instance.users.Add(ProtocolParser.ReadUInt64(stream));
				continue;
			case 34:
				instance.guestCode = ProtocolParser.ReadString(stream);
				continue;
			case 40:
				instance.guestUsers.Add(ProtocolParser.ReadUInt64(stream));
				continue;
			}
			Key key = ProtocolParser.ReadKey((byte)num2, stream);
			if (key.Field == 0)
			{
				throw new ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
			}
			ProtocolParser.SkipKey(stream, key);
		}
		if (stream.Position != num)
		{
			throw new ProtocolBufferException("Read past max limit");
		}
		return instance;
	}

	public static Private DeserializeLength(Stream stream, int length, Private instance, bool isDelta)
	{
		if (!isDelta)
		{
			if (instance.users == null)
			{
				instance.users = Pool.Get<List<ulong>>();
			}
			if (instance.guestUsers == null)
			{
				instance.guestUsers = Pool.Get<List<ulong>>();
			}
		}
		long num = stream.Position + length;
		while (stream.Position < num)
		{
			int num2 = stream.ReadByte();
			switch (num2)
			{
			case -1:
				throw new EndOfStreamException();
			case 10:
				instance.code = ProtocolParser.ReadString(stream);
				continue;
			case 16:
				instance.users.Add(ProtocolParser.ReadUInt64(stream));
				continue;
			case 34:
				instance.guestCode = ProtocolParser.ReadString(stream);
				continue;
			case 40:
				instance.guestUsers.Add(ProtocolParser.ReadUInt64(stream));
				continue;
			}
			Key key = ProtocolParser.ReadKey((byte)num2, stream);
			if (key.Field == 0)
			{
				throw new ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
			}
			ProtocolParser.SkipKey(stream, key);
		}
		if (stream.Position != num)
		{
			throw new ProtocolBufferException("Read past max limit");
		}
		return instance;
	}

	public static void SerializeDelta(Stream stream, Private instance, Private previous)
	{
		MemoryStream obj = Pool.Get<MemoryStream>();
		if (instance.code != null && instance.code != previous.code)
		{
			stream.WriteByte(10);
			ProtocolParser.WriteString(stream, instance.code);
		}
		if (instance.users != null)
		{
			for (int i = 0; i < instance.users.Count; i++)
			{
				ulong val = instance.users[i];
				stream.WriteByte(16);
				ProtocolParser.WriteUInt64(stream, val);
			}
		}
		if (instance.guestCode != null && instance.guestCode != previous.guestCode)
		{
			stream.WriteByte(34);
			ProtocolParser.WriteString(stream, instance.guestCode);
		}
		if (instance.guestUsers != null)
		{
			for (int j = 0; j < instance.guestUsers.Count; j++)
			{
				ulong val2 = instance.guestUsers[j];
				stream.WriteByte(40);
				ProtocolParser.WriteUInt64(stream, val2);
			}
		}
		Pool.FreeUnmanaged(ref obj);
	}

	public static void Serialize(Stream stream, Private instance)
	{
		MemoryStream obj = Pool.Get<MemoryStream>();
		if (instance.code != null)
		{
			stream.WriteByte(10);
			ProtocolParser.WriteString(stream, instance.code);
		}
		if (instance.users != null)
		{
			for (int i = 0; i < instance.users.Count; i++)
			{
				ulong val = instance.users[i];
				stream.WriteByte(16);
				ProtocolParser.WriteUInt64(stream, val);
			}
		}
		if (instance.guestCode != null)
		{
			stream.WriteByte(34);
			ProtocolParser.WriteString(stream, instance.guestCode);
		}
		if (instance.guestUsers != null)
		{
			for (int j = 0; j < instance.guestUsers.Count; j++)
			{
				ulong val2 = instance.guestUsers[j];
				stream.WriteByte(40);
				ProtocolParser.WriteUInt64(stream, val2);
			}
		}
		Pool.FreeUnmanaged(ref obj);
	}

	public byte[] ToProtoBytes()
	{
		return SerializeToBytes(this);
	}

	public void ToProto(Stream stream)
	{
		Serialize(stream, this);
	}

	public static byte[] SerializeToBytes(Private instance)
	{
		using MemoryStream memoryStream = new MemoryStream();
		Serialize(memoryStream, instance);
		return memoryStream.ToArray();
	}

	public static void SerializeLengthDelimited(Stream stream, Private instance)
	{
		byte[] array = SerializeToBytes(instance);
		ProtocolParser.WriteUInt32(stream, (uint)array.Length);
		stream.Write(array, 0, array.Length);
	}

	public void InspectUids(UidInspector<ulong> action)
	{
	}
}
