using System.IO;
using Facepunch;
using SilentOrbit.ProtocolBuffers;
using UnityEngine;

public class RaySerialized
{
	public static void ResetToPool(Ray instance)
	{
		instance.origin = default(Vector3);
		instance.direction = default(Vector3);
	}

	public static Ray Deserialize(byte[] buffer, ref Ray instance, bool isDelta = false)
	{
		using (MemoryStream stream = new MemoryStream(buffer))
		{
			Deserialize(stream, ref instance, isDelta);
		}
		return instance;
	}

	public static Ray Deserialize(Stream stream, ref Ray instance, bool isDelta)
	{
		while (true)
		{
			int num = stream.ReadByte();
			switch (num)
			{
			case 10:
			{
				Vector3 instance3 = instance.origin;
				instance.origin = Vector3Serialized.DeserializeLengthDelimited(stream, ref instance3, isDelta);
				continue;
			}
			case 18:
			{
				Vector3 instance2 = instance.direction;
				instance.direction = Vector3Serialized.DeserializeLengthDelimited(stream, ref instance2, isDelta);
				continue;
			}
			case -1:
				return instance;
			}
			Key key = ProtocolParser.ReadKey((byte)num, stream);
			if (key.Field == 0)
			{
				throw new ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
			}
			ProtocolParser.SkipKey(stream, key);
		}
	}

	public static Ray DeserializeLengthDelimited(Stream stream, ref Ray instance, bool isDelta)
	{
		long num = ProtocolParser.ReadUInt32(stream);
		num += stream.Position;
		while (stream.Position < num)
		{
			int num2 = stream.ReadByte();
			switch (num2)
			{
			case -1:
				throw new EndOfStreamException();
			case 10:
			{
				Vector3 instance2 = instance.origin;
				instance.origin = Vector3Serialized.DeserializeLengthDelimited(stream, ref instance2, isDelta);
				continue;
			}
			case 18:
			{
				Vector3 instance3 = instance.direction;
				instance.direction = Vector3Serialized.DeserializeLengthDelimited(stream, ref instance3, isDelta);
				continue;
			}
			}
			Key key = ProtocolParser.ReadKey((byte)num2, stream);
			if (key.Field == 0)
			{
				throw new ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
			}
			ProtocolParser.SkipKey(stream, key);
		}
		if (stream.Position != num)
		{
			throw new ProtocolBufferException("Read past max limit");
		}
		return instance;
	}

	public static Ray DeserializeLength(Stream stream, int length, ref Ray instance, bool isDelta)
	{
		long num = stream.Position + length;
		while (stream.Position < num)
		{
			int num2 = stream.ReadByte();
			switch (num2)
			{
			case -1:
				throw new EndOfStreamException();
			case 10:
			{
				Vector3 instance2 = instance.origin;
				instance.origin = Vector3Serialized.DeserializeLengthDelimited(stream, ref instance2, isDelta);
				continue;
			}
			case 18:
			{
				Vector3 instance3 = instance.direction;
				instance.direction = Vector3Serialized.DeserializeLengthDelimited(stream, ref instance3, isDelta);
				continue;
			}
			}
			Key key = ProtocolParser.ReadKey((byte)num2, stream);
			if (key.Field == 0)
			{
				throw new ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
			}
			ProtocolParser.SkipKey(stream, key);
		}
		if (stream.Position != num)
		{
			throw new ProtocolBufferException("Read past max limit");
		}
		return instance;
	}

	public static void SerializeDelta(Stream stream, Ray instance, Ray previous)
	{
		MemoryStream obj = Pool.Get<MemoryStream>();
		if (instance.origin != previous.origin)
		{
			stream.WriteByte(10);
			obj.SetLength(0L);
			Vector3Serialized.SerializeDelta(obj, instance.origin, previous.origin);
			uint num = (uint)obj.Length;
			ProtocolParser.WriteUInt32(stream, num);
			stream.Write(obj.GetBuffer(), 0, (int)num);
		}
		if (instance.direction != previous.direction)
		{
			stream.WriteByte(18);
			obj.SetLength(0L);
			Vector3Serialized.SerializeDelta(obj, instance.direction, previous.direction);
			uint num2 = (uint)obj.Length;
			ProtocolParser.WriteUInt32(stream, num2);
			stream.Write(obj.GetBuffer(), 0, (int)num2);
		}
		Pool.FreeUnmanaged(ref obj);
	}

	public static void Serialize(Stream stream, Ray instance)
	{
		MemoryStream obj = Pool.Get<MemoryStream>();
		if (instance.origin != default(Vector3))
		{
			stream.WriteByte(10);
			obj.SetLength(0L);
			Vector3Serialized.Serialize(obj, instance.origin);
			uint num = (uint)obj.Length;
			ProtocolParser.WriteUInt32(stream, num);
			stream.Write(obj.GetBuffer(), 0, (int)num);
		}
		if (instance.direction != default(Vector3))
		{
			stream.WriteByte(18);
			obj.SetLength(0L);
			Vector3Serialized.Serialize(obj, instance.direction);
			uint num2 = (uint)obj.Length;
			ProtocolParser.WriteUInt32(stream, num2);
			stream.Write(obj.GetBuffer(), 0, (int)num2);
		}
		Pool.FreeUnmanaged(ref obj);
	}

	public static byte[] SerializeToBytes(Ray instance)
	{
		using MemoryStream memoryStream = new MemoryStream();
		Serialize(memoryStream, instance);
		return memoryStream.ToArray();
	}

	public static void SerializeLengthDelimited(Stream stream, Ray instance)
	{
		byte[] array = SerializeToBytes(instance);
		ProtocolParser.WriteUInt32(stream, (uint)array.Length);
		stream.Write(array, 0, array.Length);
	}

	public void InspectUids(UidInspector<ulong> action)
	{
	}
}
