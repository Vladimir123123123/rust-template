using System;
using System.Collections.Generic;
using System.IO;
using Facepunch;
using ProtoBuf;
using SilentOrbit.ProtocolBuffers;

public class ReclaimManager : IDisposable, Pool.IPooled, IProto
{
	public class ReclaimInfo : IDisposable, Pool.IPooled, IProto
	{
		[NonSerialized]
		public ulong victimID;

		[NonSerialized]
		public ulong killerID;

		[NonSerialized]
		public string killerString;

		[NonSerialized]
		public ItemContainer inventory;

		public bool ShouldPool = true;

		private bool _disposed;

		public static void ResetToPool(ReclaimInfo instance)
		{
			if (instance.ShouldPool)
			{
				instance.victimID = 0uL;
				instance.killerID = 0uL;
				instance.killerString = string.Empty;
				if (instance.inventory != null)
				{
					instance.inventory.ResetToPool();
					instance.inventory = null;
				}
				Pool.Free(ref instance);
			}
		}

		public void ResetToPool()
		{
			ResetToPool(this);
		}

		public virtual void Dispose()
		{
			if (!ShouldPool)
			{
				throw new Exception("Trying to dispose ReclaimInfo with ShouldPool set to false!");
			}
			if (!_disposed)
			{
				ResetToPool();
				_disposed = true;
			}
		}

		public virtual void EnterPool()
		{
			_disposed = true;
		}

		public virtual void LeavePool()
		{
			_disposed = false;
		}

		public void CopyTo(ReclaimInfo instance)
		{
			instance.victimID = victimID;
			instance.killerID = killerID;
			instance.killerString = killerString;
			if (inventory != null)
			{
				if (instance.inventory == null)
				{
					instance.inventory = inventory.Copy();
				}
				else
				{
					inventory.CopyTo(instance.inventory);
				}
			}
			else
			{
				instance.inventory = null;
			}
		}

		public ReclaimInfo Copy()
		{
			ReclaimInfo reclaimInfo = Pool.Get<ReclaimInfo>();
			CopyTo(reclaimInfo);
			return reclaimInfo;
		}

		public static ReclaimInfo Deserialize(Stream stream)
		{
			ReclaimInfo reclaimInfo = Pool.Get<ReclaimInfo>();
			Deserialize(stream, reclaimInfo, isDelta: false);
			return reclaimInfo;
		}

		public static ReclaimInfo DeserializeLengthDelimited(Stream stream)
		{
			ReclaimInfo reclaimInfo = Pool.Get<ReclaimInfo>();
			DeserializeLengthDelimited(stream, reclaimInfo, isDelta: false);
			return reclaimInfo;
		}

		public static ReclaimInfo DeserializeLength(Stream stream, int length)
		{
			ReclaimInfo reclaimInfo = Pool.Get<ReclaimInfo>();
			DeserializeLength(stream, length, reclaimInfo, isDelta: false);
			return reclaimInfo;
		}

		public static ReclaimInfo Deserialize(byte[] buffer)
		{
			ReclaimInfo reclaimInfo = Pool.Get<ReclaimInfo>();
			using MemoryStream stream = new MemoryStream(buffer);
			Deserialize(stream, reclaimInfo, isDelta: false);
			return reclaimInfo;
		}

		public void FromProto(Stream stream, bool isDelta = false)
		{
			Deserialize(stream, this, isDelta);
		}

		public virtual void WriteToStream(Stream stream)
		{
			Serialize(stream, this);
		}

		public virtual void WriteToStreamDelta(Stream stream, ReclaimInfo previous)
		{
			if (previous == null)
			{
				Serialize(stream, this);
			}
			else
			{
				SerializeDelta(stream, this, previous);
			}
		}

		public virtual void ReadFromStream(Stream stream, int size, bool isDelta = false)
		{
			DeserializeLength(stream, size, this, isDelta);
		}

		public static ReclaimInfo Deserialize(byte[] buffer, ReclaimInfo instance, bool isDelta = false)
		{
			using MemoryStream stream = new MemoryStream(buffer);
			Deserialize(stream, instance, isDelta);
			return instance;
		}

		public static ReclaimInfo Deserialize(Stream stream, ReclaimInfo instance, bool isDelta)
		{
			while (true)
			{
				int num = stream.ReadByte();
				switch (num)
				{
				case 8:
					instance.victimID = ProtocolParser.ReadUInt64(stream);
					continue;
				case 16:
					instance.killerID = ProtocolParser.ReadUInt64(stream);
					continue;
				case 26:
					instance.killerString = ProtocolParser.ReadString(stream);
					continue;
				case 34:
					if (instance.inventory == null)
					{
						instance.inventory = ItemContainer.DeserializeLengthDelimited(stream);
					}
					else
					{
						ItemContainer.DeserializeLengthDelimited(stream, instance.inventory, isDelta);
					}
					continue;
				case -1:
					return instance;
				}
				Key key = ProtocolParser.ReadKey((byte)num, stream);
				if (key.Field == 0)
				{
					throw new ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
				}
				ProtocolParser.SkipKey(stream, key);
			}
		}

		public static ReclaimInfo DeserializeLengthDelimited(Stream stream, ReclaimInfo instance, bool isDelta)
		{
			long num = ProtocolParser.ReadUInt32(stream);
			num += stream.Position;
			while (stream.Position < num)
			{
				int num2 = stream.ReadByte();
				switch (num2)
				{
				case -1:
					throw new EndOfStreamException();
				case 8:
					instance.victimID = ProtocolParser.ReadUInt64(stream);
					continue;
				case 16:
					instance.killerID = ProtocolParser.ReadUInt64(stream);
					continue;
				case 26:
					instance.killerString = ProtocolParser.ReadString(stream);
					continue;
				case 34:
					if (instance.inventory == null)
					{
						instance.inventory = ItemContainer.DeserializeLengthDelimited(stream);
					}
					else
					{
						ItemContainer.DeserializeLengthDelimited(stream, instance.inventory, isDelta);
					}
					continue;
				}
				Key key = ProtocolParser.ReadKey((byte)num2, stream);
				if (key.Field == 0)
				{
					throw new ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
				}
				ProtocolParser.SkipKey(stream, key);
			}
			if (stream.Position != num)
			{
				throw new ProtocolBufferException("Read past max limit");
			}
			return instance;
		}

		public static ReclaimInfo DeserializeLength(Stream stream, int length, ReclaimInfo instance, bool isDelta)
		{
			long num = stream.Position + length;
			while (stream.Position < num)
			{
				int num2 = stream.ReadByte();
				switch (num2)
				{
				case -1:
					throw new EndOfStreamException();
				case 8:
					instance.victimID = ProtocolParser.ReadUInt64(stream);
					continue;
				case 16:
					instance.killerID = ProtocolParser.ReadUInt64(stream);
					continue;
				case 26:
					instance.killerString = ProtocolParser.ReadString(stream);
					continue;
				case 34:
					if (instance.inventory == null)
					{
						instance.inventory = ItemContainer.DeserializeLengthDelimited(stream);
					}
					else
					{
						ItemContainer.DeserializeLengthDelimited(stream, instance.inventory, isDelta);
					}
					continue;
				}
				Key key = ProtocolParser.ReadKey((byte)num2, stream);
				if (key.Field == 0)
				{
					throw new ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
				}
				ProtocolParser.SkipKey(stream, key);
			}
			if (stream.Position != num)
			{
				throw new ProtocolBufferException("Read past max limit");
			}
			return instance;
		}

		public static void SerializeDelta(Stream stream, ReclaimInfo instance, ReclaimInfo previous)
		{
			MemoryStream obj = Pool.Get<MemoryStream>();
			if (instance.victimID != previous.victimID)
			{
				stream.WriteByte(8);
				ProtocolParser.WriteUInt64(stream, instance.victimID);
			}
			if (instance.killerID != previous.killerID)
			{
				stream.WriteByte(16);
				ProtocolParser.WriteUInt64(stream, instance.killerID);
			}
			if (instance.killerString != previous.killerString)
			{
				if (instance.killerString == null)
				{
					throw new ArgumentNullException("killerString", "Required by proto specification.");
				}
				stream.WriteByte(26);
				ProtocolParser.WriteString(stream, instance.killerString);
			}
			if (instance.inventory == null)
			{
				throw new ArgumentNullException("inventory", "Required by proto specification.");
			}
			stream.WriteByte(34);
			obj.SetLength(0L);
			ItemContainer.SerializeDelta(obj, instance.inventory, previous.inventory);
			uint num = (uint)obj.Length;
			ProtocolParser.WriteUInt32(stream, num);
			stream.Write(obj.GetBuffer(), 0, (int)num);
			Pool.FreeUnmanaged(ref obj);
		}

		public static void Serialize(Stream stream, ReclaimInfo instance)
		{
			MemoryStream obj = Pool.Get<MemoryStream>();
			if (instance.victimID != 0L)
			{
				stream.WriteByte(8);
				ProtocolParser.WriteUInt64(stream, instance.victimID);
			}
			if (instance.killerID != 0L)
			{
				stream.WriteByte(16);
				ProtocolParser.WriteUInt64(stream, instance.killerID);
			}
			if (instance.killerString == null)
			{
				throw new ArgumentNullException("killerString", "Required by proto specification.");
			}
			stream.WriteByte(26);
			ProtocolParser.WriteString(stream, instance.killerString);
			if (instance.inventory == null)
			{
				throw new ArgumentNullException("inventory", "Required by proto specification.");
			}
			stream.WriteByte(34);
			obj.SetLength(0L);
			ItemContainer.Serialize(obj, instance.inventory);
			uint num = (uint)obj.Length;
			ProtocolParser.WriteUInt32(stream, num);
			stream.Write(obj.GetBuffer(), 0, (int)num);
			Pool.FreeUnmanaged(ref obj);
		}

		public byte[] ToProtoBytes()
		{
			return SerializeToBytes(this);
		}

		public void ToProto(Stream stream)
		{
			Serialize(stream, this);
		}

		public static byte[] SerializeToBytes(ReclaimInfo instance)
		{
			using MemoryStream memoryStream = new MemoryStream();
			Serialize(memoryStream, instance);
			return memoryStream.ToArray();
		}

		public static void SerializeLengthDelimited(Stream stream, ReclaimInfo instance)
		{
			byte[] array = SerializeToBytes(instance);
			ProtocolParser.WriteUInt32(stream, (uint)array.Length);
			stream.Write(array, 0, array.Length);
		}

		public void InspectUids(UidInspector<ulong> action)
		{
			inventory?.InspectUids(action);
		}
	}

	[NonSerialized]
	public List<ReclaimInfo> reclaimEntries;

	[NonSerialized]
	public int lastReclaimID;

	public bool ShouldPool = true;

	private bool _disposed;

	public static void ResetToPool(ReclaimManager instance)
	{
		if (!instance.ShouldPool)
		{
			return;
		}
		if (instance.reclaimEntries != null)
		{
			for (int i = 0; i < instance.reclaimEntries.Count; i++)
			{
				if (instance.reclaimEntries[i] != null)
				{
					instance.reclaimEntries[i].ResetToPool();
					instance.reclaimEntries[i] = null;
				}
			}
			List<ReclaimInfo> obj = instance.reclaimEntries;
			Pool.Free(ref obj, freeElements: false);
			instance.reclaimEntries = obj;
		}
		instance.lastReclaimID = 0;
		Pool.Free(ref instance);
	}

	public void ResetToPool()
	{
		ResetToPool(this);
	}

	public virtual void Dispose()
	{
		if (!ShouldPool)
		{
			throw new Exception("Trying to dispose ReclaimManager with ShouldPool set to false!");
		}
		if (!_disposed)
		{
			ResetToPool();
			_disposed = true;
		}
	}

	public virtual void EnterPool()
	{
		_disposed = true;
	}

	public virtual void LeavePool()
	{
		_disposed = false;
	}

	public void CopyTo(ReclaimManager instance)
	{
		if (reclaimEntries != null)
		{
			instance.reclaimEntries = Pool.Get<List<ReclaimInfo>>();
			for (int i = 0; i < reclaimEntries.Count; i++)
			{
				ReclaimInfo item = reclaimEntries[i].Copy();
				instance.reclaimEntries.Add(item);
			}
		}
		else
		{
			instance.reclaimEntries = null;
		}
		instance.lastReclaimID = lastReclaimID;
	}

	public ReclaimManager Copy()
	{
		ReclaimManager reclaimManager = Pool.Get<ReclaimManager>();
		CopyTo(reclaimManager);
		return reclaimManager;
	}

	public static ReclaimManager Deserialize(Stream stream)
	{
		ReclaimManager reclaimManager = Pool.Get<ReclaimManager>();
		Deserialize(stream, reclaimManager, isDelta: false);
		return reclaimManager;
	}

	public static ReclaimManager DeserializeLengthDelimited(Stream stream)
	{
		ReclaimManager reclaimManager = Pool.Get<ReclaimManager>();
		DeserializeLengthDelimited(stream, reclaimManager, isDelta: false);
		return reclaimManager;
	}

	public static ReclaimManager DeserializeLength(Stream stream, int length)
	{
		ReclaimManager reclaimManager = Pool.Get<ReclaimManager>();
		DeserializeLength(stream, length, reclaimManager, isDelta: false);
		return reclaimManager;
	}

	public static ReclaimManager Deserialize(byte[] buffer)
	{
		ReclaimManager reclaimManager = Pool.Get<ReclaimManager>();
		using MemoryStream stream = new MemoryStream(buffer);
		Deserialize(stream, reclaimManager, isDelta: false);
		return reclaimManager;
	}

	public void FromProto(Stream stream, bool isDelta = false)
	{
		Deserialize(stream, this, isDelta);
	}

	public virtual void WriteToStream(Stream stream)
	{
		Serialize(stream, this);
	}

	public virtual void WriteToStreamDelta(Stream stream, ReclaimManager previous)
	{
		if (previous == null)
		{
			Serialize(stream, this);
		}
		else
		{
			SerializeDelta(stream, this, previous);
		}
	}

	public virtual void ReadFromStream(Stream stream, int size, bool isDelta = false)
	{
		DeserializeLength(stream, size, this, isDelta);
	}

	public static ReclaimManager Deserialize(byte[] buffer, ReclaimManager instance, bool isDelta = false)
	{
		using MemoryStream stream = new MemoryStream(buffer);
		Deserialize(stream, instance, isDelta);
		return instance;
	}

	public static ReclaimManager Deserialize(Stream stream, ReclaimManager instance, bool isDelta)
	{
		if (!isDelta && instance.reclaimEntries == null)
		{
			instance.reclaimEntries = Pool.Get<List<ReclaimInfo>>();
		}
		while (true)
		{
			int num = stream.ReadByte();
			switch (num)
			{
			case 10:
				instance.reclaimEntries.Add(ReclaimInfo.DeserializeLengthDelimited(stream));
				continue;
			case 16:
				instance.lastReclaimID = (int)ProtocolParser.ReadUInt64(stream);
				continue;
			case -1:
				return instance;
			}
			Key key = ProtocolParser.ReadKey((byte)num, stream);
			if (key.Field == 0)
			{
				throw new ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
			}
			ProtocolParser.SkipKey(stream, key);
		}
	}

	public static ReclaimManager DeserializeLengthDelimited(Stream stream, ReclaimManager instance, bool isDelta)
	{
		if (!isDelta && instance.reclaimEntries == null)
		{
			instance.reclaimEntries = Pool.Get<List<ReclaimInfo>>();
		}
		long num = ProtocolParser.ReadUInt32(stream);
		num += stream.Position;
		while (stream.Position < num)
		{
			int num2 = stream.ReadByte();
			switch (num2)
			{
			case -1:
				throw new EndOfStreamException();
			case 10:
				instance.reclaimEntries.Add(ReclaimInfo.DeserializeLengthDelimited(stream));
				continue;
			case 16:
				instance.lastReclaimID = (int)ProtocolParser.ReadUInt64(stream);
				continue;
			}
			Key key = ProtocolParser.ReadKey((byte)num2, stream);
			if (key.Field == 0)
			{
				throw new ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
			}
			ProtocolParser.SkipKey(stream, key);
		}
		if (stream.Position != num)
		{
			throw new ProtocolBufferException("Read past max limit");
		}
		return instance;
	}

	public static ReclaimManager DeserializeLength(Stream stream, int length, ReclaimManager instance, bool isDelta)
	{
		if (!isDelta && instance.reclaimEntries == null)
		{
			instance.reclaimEntries = Pool.Get<List<ReclaimInfo>>();
		}
		long num = stream.Position + length;
		while (stream.Position < num)
		{
			int num2 = stream.ReadByte();
			switch (num2)
			{
			case -1:
				throw new EndOfStreamException();
			case 10:
				instance.reclaimEntries.Add(ReclaimInfo.DeserializeLengthDelimited(stream));
				continue;
			case 16:
				instance.lastReclaimID = (int)ProtocolParser.ReadUInt64(stream);
				continue;
			}
			Key key = ProtocolParser.ReadKey((byte)num2, stream);
			if (key.Field == 0)
			{
				throw new ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
			}
			ProtocolParser.SkipKey(stream, key);
		}
		if (stream.Position != num)
		{
			throw new ProtocolBufferException("Read past max limit");
		}
		return instance;
	}

	public static void SerializeDelta(Stream stream, ReclaimManager instance, ReclaimManager previous)
	{
		MemoryStream obj = Pool.Get<MemoryStream>();
		if (instance.reclaimEntries != null)
		{
			for (int i = 0; i < instance.reclaimEntries.Count; i++)
			{
				ReclaimInfo reclaimInfo = instance.reclaimEntries[i];
				stream.WriteByte(10);
				obj.SetLength(0L);
				ReclaimInfo.SerializeDelta(obj, reclaimInfo, reclaimInfo);
				uint num = (uint)obj.Length;
				ProtocolParser.WriteUInt32(stream, num);
				stream.Write(obj.GetBuffer(), 0, (int)num);
			}
		}
		if (instance.lastReclaimID != previous.lastReclaimID)
		{
			stream.WriteByte(16);
			ProtocolParser.WriteUInt64(stream, (ulong)instance.lastReclaimID);
		}
		Pool.FreeUnmanaged(ref obj);
	}

	public static void Serialize(Stream stream, ReclaimManager instance)
	{
		MemoryStream obj = Pool.Get<MemoryStream>();
		if (instance.reclaimEntries != null)
		{
			for (int i = 0; i < instance.reclaimEntries.Count; i++)
			{
				ReclaimInfo instance2 = instance.reclaimEntries[i];
				stream.WriteByte(10);
				obj.SetLength(0L);
				ReclaimInfo.Serialize(obj, instance2);
				uint num = (uint)obj.Length;
				ProtocolParser.WriteUInt32(stream, num);
				stream.Write(obj.GetBuffer(), 0, (int)num);
			}
		}
		if (instance.lastReclaimID != 0)
		{
			stream.WriteByte(16);
			ProtocolParser.WriteUInt64(stream, (ulong)instance.lastReclaimID);
		}
		Pool.FreeUnmanaged(ref obj);
	}

	public byte[] ToProtoBytes()
	{
		return SerializeToBytes(this);
	}

	public void ToProto(Stream stream)
	{
		Serialize(stream, this);
	}

	public static byte[] SerializeToBytes(ReclaimManager instance)
	{
		using MemoryStream memoryStream = new MemoryStream();
		Serialize(memoryStream, instance);
		return memoryStream.ToArray();
	}

	public static void SerializeLengthDelimited(Stream stream, ReclaimManager instance)
	{
		byte[] array = SerializeToBytes(instance);
		ProtocolParser.WriteUInt32(stream, (uint)array.Length);
		stream.Write(array, 0, array.Length);
	}

	public void InspectUids(UidInspector<ulong> action)
	{
		if (reclaimEntries != null)
		{
			for (int i = 0; i < reclaimEntries.Count; i++)
			{
				reclaimEntries[i]?.InspectUids(action);
			}
		}
	}
}
