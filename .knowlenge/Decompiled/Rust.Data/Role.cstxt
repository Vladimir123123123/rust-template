using System;
using System.IO;
using Facepunch;
using SilentOrbit.ProtocolBuffers;

public class Role : IDisposable, Pool.IPooled, IProto
{
	[NonSerialized]
	public int roleId;

	[NonSerialized]
	public int rank;

	[NonSerialized]
	public string name;

	[NonSerialized]
	public bool canSetMotd;

	[NonSerialized]
	public bool canSetLogo;

	[NonSerialized]
	public bool canInvite;

	[NonSerialized]
	public bool canKick;

	[NonSerialized]
	public bool canPromote;

	[NonSerialized]
	public bool canDemote;

	[NonSerialized]
	public bool canSetPlayerNotes;

	[NonSerialized]
	public bool canAccessLogs;

	[NonSerialized]
	public bool canAccessScoreEvents;

	public bool ShouldPool = true;

	private bool _disposed;

	public static void ResetToPool(Role instance)
	{
		if (instance.ShouldPool)
		{
			instance.roleId = 0;
			instance.rank = 0;
			instance.name = string.Empty;
			instance.canSetMotd = false;
			instance.canSetLogo = false;
			instance.canInvite = false;
			instance.canKick = false;
			instance.canPromote = false;
			instance.canDemote = false;
			instance.canSetPlayerNotes = false;
			instance.canAccessLogs = false;
			instance.canAccessScoreEvents = false;
			Pool.Free(ref instance);
		}
	}

	public void ResetToPool()
	{
		ResetToPool(this);
	}

	public virtual void Dispose()
	{
		if (!ShouldPool)
		{
			throw new Exception("Trying to dispose Role with ShouldPool set to false!");
		}
		if (!_disposed)
		{
			ResetToPool();
			_disposed = true;
		}
	}

	public virtual void EnterPool()
	{
		_disposed = true;
	}

	public virtual void LeavePool()
	{
		_disposed = false;
	}

	public void CopyTo(Role instance)
	{
		instance.roleId = roleId;
		instance.rank = rank;
		instance.name = name;
		instance.canSetMotd = canSetMotd;
		instance.canSetLogo = canSetLogo;
		instance.canInvite = canInvite;
		instance.canKick = canKick;
		instance.canPromote = canPromote;
		instance.canDemote = canDemote;
		instance.canSetPlayerNotes = canSetPlayerNotes;
		instance.canAccessLogs = canAccessLogs;
		instance.canAccessScoreEvents = canAccessScoreEvents;
	}

	public Role Copy()
	{
		Role role = Pool.Get<Role>();
		CopyTo(role);
		return role;
	}

	public static Role Deserialize(Stream stream)
	{
		Role role = Pool.Get<Role>();
		Deserialize(stream, role, isDelta: false);
		return role;
	}

	public static Role DeserializeLengthDelimited(Stream stream)
	{
		Role role = Pool.Get<Role>();
		DeserializeLengthDelimited(stream, role, isDelta: false);
		return role;
	}

	public static Role DeserializeLength(Stream stream, int length)
	{
		Role role = Pool.Get<Role>();
		DeserializeLength(stream, length, role, isDelta: false);
		return role;
	}

	public static Role Deserialize(byte[] buffer)
	{
		Role role = Pool.Get<Role>();
		using MemoryStream stream = new MemoryStream(buffer);
		Deserialize(stream, role, isDelta: false);
		return role;
	}

	public void FromProto(Stream stream, bool isDelta = false)
	{
		Deserialize(stream, this, isDelta);
	}

	public virtual void WriteToStream(Stream stream)
	{
		Serialize(stream, this);
	}

	public virtual void WriteToStreamDelta(Stream stream, Role previous)
	{
		if (previous == null)
		{
			Serialize(stream, this);
		}
		else
		{
			SerializeDelta(stream, this, previous);
		}
	}

	public virtual void ReadFromStream(Stream stream, int size, bool isDelta = false)
	{
		DeserializeLength(stream, size, this, isDelta);
	}

	public static Role Deserialize(byte[] buffer, Role instance, bool isDelta = false)
	{
		using MemoryStream stream = new MemoryStream(buffer);
		Deserialize(stream, instance, isDelta);
		return instance;
	}

	public static Role Deserialize(Stream stream, Role instance, bool isDelta)
	{
		if (!isDelta)
		{
			instance.roleId = 0;
			instance.rank = 0;
			instance.canSetMotd = false;
			instance.canSetLogo = false;
			instance.canInvite = false;
			instance.canKick = false;
			instance.canPromote = false;
			instance.canDemote = false;
			instance.canSetPlayerNotes = false;
			instance.canAccessLogs = false;
			instance.canAccessScoreEvents = false;
		}
		while (true)
		{
			int num = stream.ReadByte();
			switch (num)
			{
			case 8:
				instance.roleId = (int)ProtocolParser.ReadUInt64(stream);
				continue;
			case 16:
				instance.rank = (int)ProtocolParser.ReadUInt64(stream);
				continue;
			case 26:
				instance.name = ProtocolParser.ReadString(stream);
				continue;
			case 32:
				instance.canSetMotd = ProtocolParser.ReadBool(stream);
				continue;
			case 40:
				instance.canSetLogo = ProtocolParser.ReadBool(stream);
				continue;
			case 48:
				instance.canInvite = ProtocolParser.ReadBool(stream);
				continue;
			case 56:
				instance.canKick = ProtocolParser.ReadBool(stream);
				continue;
			case 64:
				instance.canPromote = ProtocolParser.ReadBool(stream);
				continue;
			case 72:
				instance.canDemote = ProtocolParser.ReadBool(stream);
				continue;
			case 80:
				instance.canSetPlayerNotes = ProtocolParser.ReadBool(stream);
				continue;
			case 88:
				instance.canAccessLogs = ProtocolParser.ReadBool(stream);
				continue;
			case 96:
				instance.canAccessScoreEvents = ProtocolParser.ReadBool(stream);
				continue;
			case -1:
				return instance;
			}
			Key key = ProtocolParser.ReadKey((byte)num, stream);
			if (key.Field == 0)
			{
				throw new ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
			}
			ProtocolParser.SkipKey(stream, key);
		}
	}

	public static Role DeserializeLengthDelimited(Stream stream, Role instance, bool isDelta)
	{
		if (!isDelta)
		{
			instance.roleId = 0;
			instance.rank = 0;
			instance.canSetMotd = false;
			instance.canSetLogo = false;
			instance.canInvite = false;
			instance.canKick = false;
			instance.canPromote = false;
			instance.canDemote = false;
			instance.canSetPlayerNotes = false;
			instance.canAccessLogs = false;
			instance.canAccessScoreEvents = false;
		}
		long num = ProtocolParser.ReadUInt32(stream);
		num += stream.Position;
		while (stream.Position < num)
		{
			int num2 = stream.ReadByte();
			switch (num2)
			{
			case -1:
				throw new EndOfStreamException();
			case 8:
				instance.roleId = (int)ProtocolParser.ReadUInt64(stream);
				continue;
			case 16:
				instance.rank = (int)ProtocolParser.ReadUInt64(stream);
				continue;
			case 26:
				instance.name = ProtocolParser.ReadString(stream);
				continue;
			case 32:
				instance.canSetMotd = ProtocolParser.ReadBool(stream);
				continue;
			case 40:
				instance.canSetLogo = ProtocolParser.ReadBool(stream);
				continue;
			case 48:
				instance.canInvite = ProtocolParser.ReadBool(stream);
				continue;
			case 56:
				instance.canKick = ProtocolParser.ReadBool(stream);
				continue;
			case 64:
				instance.canPromote = ProtocolParser.ReadBool(stream);
				continue;
			case 72:
				instance.canDemote = ProtocolParser.ReadBool(stream);
				continue;
			case 80:
				instance.canSetPlayerNotes = ProtocolParser.ReadBool(stream);
				continue;
			case 88:
				instance.canAccessLogs = ProtocolParser.ReadBool(stream);
				continue;
			case 96:
				instance.canAccessScoreEvents = ProtocolParser.ReadBool(stream);
				continue;
			}
			Key key = ProtocolParser.ReadKey((byte)num2, stream);
			if (key.Field == 0)
			{
				throw new ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
			}
			ProtocolParser.SkipKey(stream, key);
		}
		if (stream.Position != num)
		{
			throw new ProtocolBufferException("Read past max limit");
		}
		return instance;
	}

	public static Role DeserializeLength(Stream stream, int length, Role instance, bool isDelta)
	{
		if (!isDelta)
		{
			instance.roleId = 0;
			instance.rank = 0;
			instance.canSetMotd = false;
			instance.canSetLogo = false;
			instance.canInvite = false;
			instance.canKick = false;
			instance.canPromote = false;
			instance.canDemote = false;
			instance.canSetPlayerNotes = false;
			instance.canAccessLogs = false;
			instance.canAccessScoreEvents = false;
		}
		long num = stream.Position + length;
		while (stream.Position < num)
		{
			int num2 = stream.ReadByte();
			switch (num2)
			{
			case -1:
				throw new EndOfStreamException();
			case 8:
				instance.roleId = (int)ProtocolParser.ReadUInt64(stream);
				continue;
			case 16:
				instance.rank = (int)ProtocolParser.ReadUInt64(stream);
				continue;
			case 26:
				instance.name = ProtocolParser.ReadString(stream);
				continue;
			case 32:
				instance.canSetMotd = ProtocolParser.ReadBool(stream);
				continue;
			case 40:
				instance.canSetLogo = ProtocolParser.ReadBool(stream);
				continue;
			case 48:
				instance.canInvite = ProtocolParser.ReadBool(stream);
				continue;
			case 56:
				instance.canKick = ProtocolParser.ReadBool(stream);
				continue;
			case 64:
				instance.canPromote = ProtocolParser.ReadBool(stream);
				continue;
			case 72:
				instance.canDemote = ProtocolParser.ReadBool(stream);
				continue;
			case 80:
				instance.canSetPlayerNotes = ProtocolParser.ReadBool(stream);
				continue;
			case 88:
				instance.canAccessLogs = ProtocolParser.ReadBool(stream);
				continue;
			case 96:
				instance.canAccessScoreEvents = ProtocolParser.ReadBool(stream);
				continue;
			}
			Key key = ProtocolParser.ReadKey((byte)num2, stream);
			if (key.Field == 0)
			{
				throw new ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
			}
			ProtocolParser.SkipKey(stream, key);
		}
		if (stream.Position != num)
		{
			throw new ProtocolBufferException("Read past max limit");
		}
		return instance;
	}

	public static void SerializeDelta(Stream stream, Role instance, Role previous)
	{
		MemoryStream obj = Pool.Get<MemoryStream>();
		if (instance.roleId != previous.roleId)
		{
			stream.WriteByte(8);
			ProtocolParser.WriteUInt64(stream, (ulong)instance.roleId);
		}
		if (instance.rank != previous.rank)
		{
			stream.WriteByte(16);
			ProtocolParser.WriteUInt64(stream, (ulong)instance.rank);
		}
		if (instance.name != previous.name)
		{
			if (instance.name == null)
			{
				throw new ArgumentNullException("name", "Required by proto specification.");
			}
			stream.WriteByte(26);
			ProtocolParser.WriteString(stream, instance.name);
		}
		stream.WriteByte(32);
		ProtocolParser.WriteBool(stream, instance.canSetMotd);
		stream.WriteByte(40);
		ProtocolParser.WriteBool(stream, instance.canSetLogo);
		stream.WriteByte(48);
		ProtocolParser.WriteBool(stream, instance.canInvite);
		stream.WriteByte(56);
		ProtocolParser.WriteBool(stream, instance.canKick);
		stream.WriteByte(64);
		ProtocolParser.WriteBool(stream, instance.canPromote);
		stream.WriteByte(72);
		ProtocolParser.WriteBool(stream, instance.canDemote);
		stream.WriteByte(80);
		ProtocolParser.WriteBool(stream, instance.canSetPlayerNotes);
		stream.WriteByte(88);
		ProtocolParser.WriteBool(stream, instance.canAccessLogs);
		stream.WriteByte(96);
		ProtocolParser.WriteBool(stream, instance.canAccessScoreEvents);
		Pool.FreeUnmanaged(ref obj);
	}

	public static void Serialize(Stream stream, Role instance)
	{
		MemoryStream obj = Pool.Get<MemoryStream>();
		if (instance.roleId != 0)
		{
			stream.WriteByte(8);
			ProtocolParser.WriteUInt64(stream, (ulong)instance.roleId);
		}
		if (instance.rank != 0)
		{
			stream.WriteByte(16);
			ProtocolParser.WriteUInt64(stream, (ulong)instance.rank);
		}
		if (instance.name == null)
		{
			throw new ArgumentNullException("name", "Required by proto specification.");
		}
		stream.WriteByte(26);
		ProtocolParser.WriteString(stream, instance.name);
		if (instance.canSetMotd)
		{
			stream.WriteByte(32);
			ProtocolParser.WriteBool(stream, instance.canSetMotd);
		}
		if (instance.canSetLogo)
		{
			stream.WriteByte(40);
			ProtocolParser.WriteBool(stream, instance.canSetLogo);
		}
		if (instance.canInvite)
		{
			stream.WriteByte(48);
			ProtocolParser.WriteBool(stream, instance.canInvite);
		}
		if (instance.canKick)
		{
			stream.WriteByte(56);
			ProtocolParser.WriteBool(stream, instance.canKick);
		}
		if (instance.canPromote)
		{
			stream.WriteByte(64);
			ProtocolParser.WriteBool(stream, instance.canPromote);
		}
		if (instance.canDemote)
		{
			stream.WriteByte(72);
			ProtocolParser.WriteBool(stream, instance.canDemote);
		}
		if (instance.canSetPlayerNotes)
		{
			stream.WriteByte(80);
			ProtocolParser.WriteBool(stream, instance.canSetPlayerNotes);
		}
		if (instance.canAccessLogs)
		{
			stream.WriteByte(88);
			ProtocolParser.WriteBool(stream, instance.canAccessLogs);
		}
		if (instance.canAccessScoreEvents)
		{
			stream.WriteByte(96);
			ProtocolParser.WriteBool(stream, instance.canAccessScoreEvents);
		}
		Pool.FreeUnmanaged(ref obj);
	}

	public byte[] ToProtoBytes()
	{
		return SerializeToBytes(this);
	}

	public void ToProto(Stream stream)
	{
		Serialize(stream, this);
	}

	public static byte[] SerializeToBytes(Role instance)
	{
		using MemoryStream memoryStream = new MemoryStream();
		Serialize(memoryStream, instance);
		return memoryStream.ToArray();
	}

	public static void SerializeLengthDelimited(Stream stream, Role instance)
	{
		byte[] array = SerializeToBytes(instance);
		ProtocolParser.WriteUInt32(stream, (uint)array.Length);
		stream.Write(array, 0, array.Length);
	}

	public void InspectUids(UidInspector<ulong> action)
	{
	}
}
