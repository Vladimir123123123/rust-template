using System;
using System.Collections.Generic;
using System.IO;
using Facepunch;
using SilentOrbit.ProtocolBuffers;

public class RoundResults : IDisposable, Pool.IPooled, IProto
{
	public class Result : IDisposable, Pool.IPooled, IProto
	{
		[NonSerialized]
		public ulong ID;

		[NonSerialized]
		public int winnings;

		[NonSerialized]
		public int resultCode;

		public bool ShouldPool = true;

		private bool _disposed;

		public static void ResetToPool(Result instance)
		{
			if (instance.ShouldPool)
			{
				instance.ID = 0uL;
				instance.winnings = 0;
				instance.resultCode = 0;
				Pool.Free(ref instance);
			}
		}

		public void ResetToPool()
		{
			ResetToPool(this);
		}

		public virtual void Dispose()
		{
			if (!ShouldPool)
			{
				throw new Exception("Trying to dispose Result with ShouldPool set to false!");
			}
			if (!_disposed)
			{
				ResetToPool();
				_disposed = true;
			}
		}

		public virtual void EnterPool()
		{
			_disposed = true;
		}

		public virtual void LeavePool()
		{
			_disposed = false;
		}

		public void CopyTo(Result instance)
		{
			instance.ID = ID;
			instance.winnings = winnings;
			instance.resultCode = resultCode;
		}

		public Result Copy()
		{
			Result result = Pool.Get<Result>();
			CopyTo(result);
			return result;
		}

		public static Result Deserialize(Stream stream)
		{
			Result result = Pool.Get<Result>();
			Deserialize(stream, result, isDelta: false);
			return result;
		}

		public static Result DeserializeLengthDelimited(Stream stream)
		{
			Result result = Pool.Get<Result>();
			DeserializeLengthDelimited(stream, result, isDelta: false);
			return result;
		}

		public static Result DeserializeLength(Stream stream, int length)
		{
			Result result = Pool.Get<Result>();
			DeserializeLength(stream, length, result, isDelta: false);
			return result;
		}

		public static Result Deserialize(byte[] buffer)
		{
			Result result = Pool.Get<Result>();
			using MemoryStream stream = new MemoryStream(buffer);
			Deserialize(stream, result, isDelta: false);
			return result;
		}

		public void FromProto(Stream stream, bool isDelta = false)
		{
			Deserialize(stream, this, isDelta);
		}

		public virtual void WriteToStream(Stream stream)
		{
			Serialize(stream, this);
		}

		public virtual void WriteToStreamDelta(Stream stream, Result previous)
		{
			if (previous == null)
			{
				Serialize(stream, this);
			}
			else
			{
				SerializeDelta(stream, this, previous);
			}
		}

		public virtual void ReadFromStream(Stream stream, int size, bool isDelta = false)
		{
			DeserializeLength(stream, size, this, isDelta);
		}

		public static Result Deserialize(byte[] buffer, Result instance, bool isDelta = false)
		{
			using MemoryStream stream = new MemoryStream(buffer);
			Deserialize(stream, instance, isDelta);
			return instance;
		}

		public static Result Deserialize(Stream stream, Result instance, bool isDelta)
		{
			while (true)
			{
				int num = stream.ReadByte();
				switch (num)
				{
				case 8:
					instance.ID = ProtocolParser.ReadUInt64(stream);
					continue;
				case 16:
					instance.winnings = (int)ProtocolParser.ReadUInt64(stream);
					continue;
				case 24:
					instance.resultCode = (int)ProtocolParser.ReadUInt64(stream);
					continue;
				case -1:
					return instance;
				}
				Key key = ProtocolParser.ReadKey((byte)num, stream);
				if (key.Field == 0)
				{
					throw new ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
				}
				ProtocolParser.SkipKey(stream, key);
			}
		}

		public static Result DeserializeLengthDelimited(Stream stream, Result instance, bool isDelta)
		{
			long num = ProtocolParser.ReadUInt32(stream);
			num += stream.Position;
			while (stream.Position < num)
			{
				int num2 = stream.ReadByte();
				switch (num2)
				{
				case -1:
					throw new EndOfStreamException();
				case 8:
					instance.ID = ProtocolParser.ReadUInt64(stream);
					continue;
				case 16:
					instance.winnings = (int)ProtocolParser.ReadUInt64(stream);
					continue;
				case 24:
					instance.resultCode = (int)ProtocolParser.ReadUInt64(stream);
					continue;
				}
				Key key = ProtocolParser.ReadKey((byte)num2, stream);
				if (key.Field == 0)
				{
					throw new ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
				}
				ProtocolParser.SkipKey(stream, key);
			}
			if (stream.Position != num)
			{
				throw new ProtocolBufferException("Read past max limit");
			}
			return instance;
		}

		public static Result DeserializeLength(Stream stream, int length, Result instance, bool isDelta)
		{
			long num = stream.Position + length;
			while (stream.Position < num)
			{
				int num2 = stream.ReadByte();
				switch (num2)
				{
				case -1:
					throw new EndOfStreamException();
				case 8:
					instance.ID = ProtocolParser.ReadUInt64(stream);
					continue;
				case 16:
					instance.winnings = (int)ProtocolParser.ReadUInt64(stream);
					continue;
				case 24:
					instance.resultCode = (int)ProtocolParser.ReadUInt64(stream);
					continue;
				}
				Key key = ProtocolParser.ReadKey((byte)num2, stream);
				if (key.Field == 0)
				{
					throw new ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
				}
				ProtocolParser.SkipKey(stream, key);
			}
			if (stream.Position != num)
			{
				throw new ProtocolBufferException("Read past max limit");
			}
			return instance;
		}

		public static void SerializeDelta(Stream stream, Result instance, Result previous)
		{
			MemoryStream obj = Pool.Get<MemoryStream>();
			if (instance.ID != previous.ID)
			{
				stream.WriteByte(8);
				ProtocolParser.WriteUInt64(stream, instance.ID);
			}
			if (instance.winnings != previous.winnings)
			{
				stream.WriteByte(16);
				ProtocolParser.WriteUInt64(stream, (ulong)instance.winnings);
			}
			if (instance.resultCode != previous.resultCode)
			{
				stream.WriteByte(24);
				ProtocolParser.WriteUInt64(stream, (ulong)instance.resultCode);
			}
			Pool.FreeUnmanaged(ref obj);
		}

		public static void Serialize(Stream stream, Result instance)
		{
			MemoryStream obj = Pool.Get<MemoryStream>();
			if (instance.ID != 0L)
			{
				stream.WriteByte(8);
				ProtocolParser.WriteUInt64(stream, instance.ID);
			}
			if (instance.winnings != 0)
			{
				stream.WriteByte(16);
				ProtocolParser.WriteUInt64(stream, (ulong)instance.winnings);
			}
			if (instance.resultCode != 0)
			{
				stream.WriteByte(24);
				ProtocolParser.WriteUInt64(stream, (ulong)instance.resultCode);
			}
			Pool.FreeUnmanaged(ref obj);
		}

		public byte[] ToProtoBytes()
		{
			return SerializeToBytes(this);
		}

		public void ToProto(Stream stream)
		{
			Serialize(stream, this);
		}

		public static byte[] SerializeToBytes(Result instance)
		{
			using MemoryStream memoryStream = new MemoryStream();
			Serialize(memoryStream, instance);
			return memoryStream.ToArray();
		}

		public static void SerializeLengthDelimited(Stream stream, Result instance)
		{
			byte[] array = SerializeToBytes(instance);
			ProtocolParser.WriteUInt32(stream, (uint)array.Length);
			stream.Write(array, 0, array.Length);
		}

		public void InspectUids(UidInspector<ulong> action)
		{
		}
	}

	[NonSerialized]
	public List<Result> results;

	[NonSerialized]
	public int winningScore;

	public bool ShouldPool = true;

	private bool _disposed;

	public static void ResetToPool(RoundResults instance)
	{
		if (!instance.ShouldPool)
		{
			return;
		}
		if (instance.results != null)
		{
			for (int i = 0; i < instance.results.Count; i++)
			{
				if (instance.results[i] != null)
				{
					instance.results[i].ResetToPool();
					instance.results[i] = null;
				}
			}
			List<Result> obj = instance.results;
			Pool.Free(ref obj, freeElements: false);
			instance.results = obj;
		}
		instance.winningScore = 0;
		Pool.Free(ref instance);
	}

	public void ResetToPool()
	{
		ResetToPool(this);
	}

	public virtual void Dispose()
	{
		if (!ShouldPool)
		{
			throw new Exception("Trying to dispose RoundResults with ShouldPool set to false!");
		}
		if (!_disposed)
		{
			ResetToPool();
			_disposed = true;
		}
	}

	public virtual void EnterPool()
	{
		_disposed = true;
	}

	public virtual void LeavePool()
	{
		_disposed = false;
	}

	public void CopyTo(RoundResults instance)
	{
		if (results != null)
		{
			instance.results = Pool.Get<List<Result>>();
			for (int i = 0; i < results.Count; i++)
			{
				Result item = results[i].Copy();
				instance.results.Add(item);
			}
		}
		else
		{
			instance.results = null;
		}
		instance.winningScore = winningScore;
	}

	public RoundResults Copy()
	{
		RoundResults roundResults = Pool.Get<RoundResults>();
		CopyTo(roundResults);
		return roundResults;
	}

	public static RoundResults Deserialize(Stream stream)
	{
		RoundResults roundResults = Pool.Get<RoundResults>();
		Deserialize(stream, roundResults, isDelta: false);
		return roundResults;
	}

	public static RoundResults DeserializeLengthDelimited(Stream stream)
	{
		RoundResults roundResults = Pool.Get<RoundResults>();
		DeserializeLengthDelimited(stream, roundResults, isDelta: false);
		return roundResults;
	}

	public static RoundResults DeserializeLength(Stream stream, int length)
	{
		RoundResults roundResults = Pool.Get<RoundResults>();
		DeserializeLength(stream, length, roundResults, isDelta: false);
		return roundResults;
	}

	public static RoundResults Deserialize(byte[] buffer)
	{
		RoundResults roundResults = Pool.Get<RoundResults>();
		using MemoryStream stream = new MemoryStream(buffer);
		Deserialize(stream, roundResults, isDelta: false);
		return roundResults;
	}

	public void FromProto(Stream stream, bool isDelta = false)
	{
		Deserialize(stream, this, isDelta);
	}

	public virtual void WriteToStream(Stream stream)
	{
		Serialize(stream, this);
	}

	public virtual void WriteToStreamDelta(Stream stream, RoundResults previous)
	{
		if (previous == null)
		{
			Serialize(stream, this);
		}
		else
		{
			SerializeDelta(stream, this, previous);
		}
	}

	public virtual void ReadFromStream(Stream stream, int size, bool isDelta = false)
	{
		DeserializeLength(stream, size, this, isDelta);
	}

	public static RoundResults Deserialize(byte[] buffer, RoundResults instance, bool isDelta = false)
	{
		using MemoryStream stream = new MemoryStream(buffer);
		Deserialize(stream, instance, isDelta);
		return instance;
	}

	public static RoundResults Deserialize(Stream stream, RoundResults instance, bool isDelta)
	{
		if (!isDelta && instance.results == null)
		{
			instance.results = Pool.Get<List<Result>>();
		}
		while (true)
		{
			int num = stream.ReadByte();
			switch (num)
			{
			case 10:
				instance.results.Add(Result.DeserializeLengthDelimited(stream));
				continue;
			case 16:
				instance.winningScore = (int)ProtocolParser.ReadUInt64(stream);
				continue;
			case -1:
				return instance;
			}
			Key key = ProtocolParser.ReadKey((byte)num, stream);
			if (key.Field == 0)
			{
				throw new ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
			}
			ProtocolParser.SkipKey(stream, key);
		}
	}

	public static RoundResults DeserializeLengthDelimited(Stream stream, RoundResults instance, bool isDelta)
	{
		if (!isDelta && instance.results == null)
		{
			instance.results = Pool.Get<List<Result>>();
		}
		long num = ProtocolParser.ReadUInt32(stream);
		num += stream.Position;
		while (stream.Position < num)
		{
			int num2 = stream.ReadByte();
			switch (num2)
			{
			case -1:
				throw new EndOfStreamException();
			case 10:
				instance.results.Add(Result.DeserializeLengthDelimited(stream));
				continue;
			case 16:
				instance.winningScore = (int)ProtocolParser.ReadUInt64(stream);
				continue;
			}
			Key key = ProtocolParser.ReadKey((byte)num2, stream);
			if (key.Field == 0)
			{
				throw new ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
			}
			ProtocolParser.SkipKey(stream, key);
		}
		if (stream.Position != num)
		{
			throw new ProtocolBufferException("Read past max limit");
		}
		return instance;
	}

	public static RoundResults DeserializeLength(Stream stream, int length, RoundResults instance, bool isDelta)
	{
		if (!isDelta && instance.results == null)
		{
			instance.results = Pool.Get<List<Result>>();
		}
		long num = stream.Position + length;
		while (stream.Position < num)
		{
			int num2 = stream.ReadByte();
			switch (num2)
			{
			case -1:
				throw new EndOfStreamException();
			case 10:
				instance.results.Add(Result.DeserializeLengthDelimited(stream));
				continue;
			case 16:
				instance.winningScore = (int)ProtocolParser.ReadUInt64(stream);
				continue;
			}
			Key key = ProtocolParser.ReadKey((byte)num2, stream);
			if (key.Field == 0)
			{
				throw new ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
			}
			ProtocolParser.SkipKey(stream, key);
		}
		if (stream.Position != num)
		{
			throw new ProtocolBufferException("Read past max limit");
		}
		return instance;
	}

	public static void SerializeDelta(Stream stream, RoundResults instance, RoundResults previous)
	{
		MemoryStream obj = Pool.Get<MemoryStream>();
		if (instance.results != null)
		{
			for (int i = 0; i < instance.results.Count; i++)
			{
				Result result = instance.results[i];
				stream.WriteByte(10);
				obj.SetLength(0L);
				Result.SerializeDelta(obj, result, result);
				uint num = (uint)obj.Length;
				ProtocolParser.WriteUInt32(stream, num);
				stream.Write(obj.GetBuffer(), 0, (int)num);
			}
		}
		if (instance.winningScore != previous.winningScore)
		{
			stream.WriteByte(16);
			ProtocolParser.WriteUInt64(stream, (ulong)instance.winningScore);
		}
		Pool.FreeUnmanaged(ref obj);
	}

	public static void Serialize(Stream stream, RoundResults instance)
	{
		MemoryStream obj = Pool.Get<MemoryStream>();
		if (instance.results != null)
		{
			for (int i = 0; i < instance.results.Count; i++)
			{
				Result instance2 = instance.results[i];
				stream.WriteByte(10);
				obj.SetLength(0L);
				Result.Serialize(obj, instance2);
				uint num = (uint)obj.Length;
				ProtocolParser.WriteUInt32(stream, num);
				stream.Write(obj.GetBuffer(), 0, (int)num);
			}
		}
		if (instance.winningScore != 0)
		{
			stream.WriteByte(16);
			ProtocolParser.WriteUInt64(stream, (ulong)instance.winningScore);
		}
		Pool.FreeUnmanaged(ref obj);
	}

	public byte[] ToProtoBytes()
	{
		return SerializeToBytes(this);
	}

	public void ToProto(Stream stream)
	{
		Serialize(stream, this);
	}

	public static byte[] SerializeToBytes(RoundResults instance)
	{
		using MemoryStream memoryStream = new MemoryStream();
		Serialize(memoryStream, instance);
		return memoryStream.ToArray();
	}

	public static void SerializeLengthDelimited(Stream stream, RoundResults instance)
	{
		byte[] array = SerializeToBytes(instance);
		ProtocolParser.WriteUInt32(stream, (uint)array.Length);
		stream.Write(array, 0, array.Length);
	}

	public void InspectUids(UidInspector<ulong> action)
	{
		if (results != null)
		{
			for (int i = 0; i < results.Count; i++)
			{
				results[i]?.InspectUids(action);
			}
		}
	}
}
