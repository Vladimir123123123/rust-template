using System;
using System.Collections.Generic;
using System.IO;
using Facepunch;
using ProtoBuf;
using SilentOrbit.ProtocolBuffers;

public class Sign : IDisposable, Pool.IPooled, IProto
{
	[NonSerialized]
	public uint imageid;

	[NonSerialized]
	public List<uint> imageIds;

	[NonSerialized]
	public List<ulong> editHistory;

	public bool ShouldPool = true;

	private bool _disposed;

	public static void ResetToPool(Sign instance)
	{
		if (instance.ShouldPool)
		{
			instance.imageid = 0u;
			if (instance.imageIds != null)
			{
				List<uint> obj = instance.imageIds;
				Pool.FreeUnmanaged(ref obj);
				instance.imageIds = obj;
			}
			if (instance.editHistory != null)
			{
				List<ulong> obj2 = instance.editHistory;
				Pool.FreeUnmanaged(ref obj2);
				instance.editHistory = obj2;
			}
			Pool.Free(ref instance);
		}
	}

	public void ResetToPool()
	{
		ResetToPool(this);
	}

	public virtual void Dispose()
	{
		if (!ShouldPool)
		{
			throw new Exception("Trying to dispose Sign with ShouldPool set to false!");
		}
		if (!_disposed)
		{
			ResetToPool();
			_disposed = true;
		}
	}

	public virtual void EnterPool()
	{
		_disposed = true;
	}

	public virtual void LeavePool()
	{
		_disposed = false;
	}

	public void CopyTo(Sign instance)
	{
		instance.imageid = imageid;
		if (imageIds != null)
		{
			instance.imageIds = Pool.Get<List<uint>>();
			for (int i = 0; i < imageIds.Count; i++)
			{
				uint item = imageIds[i];
				instance.imageIds.Add(item);
			}
		}
		else
		{
			instance.imageIds = null;
		}
		if (editHistory != null)
		{
			instance.editHistory = Pool.Get<List<ulong>>();
			for (int j = 0; j < editHistory.Count; j++)
			{
				ulong item2 = editHistory[j];
				instance.editHistory.Add(item2);
			}
		}
		else
		{
			instance.editHistory = null;
		}
	}

	public Sign Copy()
	{
		Sign sign = Pool.Get<Sign>();
		CopyTo(sign);
		return sign;
	}

	public static Sign Deserialize(Stream stream)
	{
		Sign sign = Pool.Get<Sign>();
		Deserialize(stream, sign, isDelta: false);
		return sign;
	}

	public static Sign DeserializeLengthDelimited(Stream stream)
	{
		Sign sign = Pool.Get<Sign>();
		DeserializeLengthDelimited(stream, sign, isDelta: false);
		return sign;
	}

	public static Sign DeserializeLength(Stream stream, int length)
	{
		Sign sign = Pool.Get<Sign>();
		DeserializeLength(stream, length, sign, isDelta: false);
		return sign;
	}

	public static Sign Deserialize(byte[] buffer)
	{
		Sign sign = Pool.Get<Sign>();
		using MemoryStream stream = new MemoryStream(buffer);
		Deserialize(stream, sign, isDelta: false);
		return sign;
	}

	public void FromProto(Stream stream, bool isDelta = false)
	{
		Deserialize(stream, this, isDelta);
	}

	public virtual void WriteToStream(Stream stream)
	{
		Serialize(stream, this);
	}

	public virtual void WriteToStreamDelta(Stream stream, Sign previous)
	{
		if (previous == null)
		{
			Serialize(stream, this);
		}
		else
		{
			SerializeDelta(stream, this, previous);
		}
	}

	public virtual void ReadFromStream(Stream stream, int size, bool isDelta = false)
	{
		DeserializeLength(stream, size, this, isDelta);
	}

	public static Sign Deserialize(byte[] buffer, Sign instance, bool isDelta = false)
	{
		using MemoryStream stream = new MemoryStream(buffer);
		Deserialize(stream, instance, isDelta);
		return instance;
	}

	public static Sign Deserialize(Stream stream, Sign instance, bool isDelta)
	{
		if (!isDelta)
		{
			if (instance.imageIds == null)
			{
				instance.imageIds = Pool.Get<List<uint>>();
			}
			if (instance.editHistory == null)
			{
				instance.editHistory = Pool.Get<List<ulong>>();
			}
		}
		while (true)
		{
			int num = stream.ReadByte();
			switch (num)
			{
			case 24:
				instance.imageid = ProtocolParser.ReadUInt32(stream);
				continue;
			case 32:
				instance.imageIds.Add(ProtocolParser.ReadUInt32(stream));
				continue;
			case 40:
				instance.editHistory.Add(ProtocolParser.ReadUInt64(stream));
				continue;
			case -1:
				return instance;
			}
			Key key = ProtocolParser.ReadKey((byte)num, stream);
			if (key.Field == 0)
			{
				throw new ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
			}
			ProtocolParser.SkipKey(stream, key);
		}
	}

	public static Sign DeserializeLengthDelimited(Stream stream, Sign instance, bool isDelta)
	{
		if (!isDelta)
		{
			if (instance.imageIds == null)
			{
				instance.imageIds = Pool.Get<List<uint>>();
			}
			if (instance.editHistory == null)
			{
				instance.editHistory = Pool.Get<List<ulong>>();
			}
		}
		long num = ProtocolParser.ReadUInt32(stream);
		num += stream.Position;
		while (stream.Position < num)
		{
			int num2 = stream.ReadByte();
			switch (num2)
			{
			case -1:
				throw new EndOfStreamException();
			case 24:
				instance.imageid = ProtocolParser.ReadUInt32(stream);
				continue;
			case 32:
				instance.imageIds.Add(ProtocolParser.ReadUInt32(stream));
				continue;
			case 40:
				instance.editHistory.Add(ProtocolParser.ReadUInt64(stream));
				continue;
			}
			Key key = ProtocolParser.ReadKey((byte)num2, stream);
			if (key.Field == 0)
			{
				throw new ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
			}
			ProtocolParser.SkipKey(stream, key);
		}
		if (stream.Position != num)
		{
			throw new ProtocolBufferException("Read past max limit");
		}
		return instance;
	}

	public static Sign DeserializeLength(Stream stream, int length, Sign instance, bool isDelta)
	{
		if (!isDelta)
		{
			if (instance.imageIds == null)
			{
				instance.imageIds = Pool.Get<List<uint>>();
			}
			if (instance.editHistory == null)
			{
				instance.editHistory = Pool.Get<List<ulong>>();
			}
		}
		long num = stream.Position + length;
		while (stream.Position < num)
		{
			int num2 = stream.ReadByte();
			switch (num2)
			{
			case -1:
				throw new EndOfStreamException();
			case 24:
				instance.imageid = ProtocolParser.ReadUInt32(stream);
				continue;
			case 32:
				instance.imageIds.Add(ProtocolParser.ReadUInt32(stream));
				continue;
			case 40:
				instance.editHistory.Add(ProtocolParser.ReadUInt64(stream));
				continue;
			}
			Key key = ProtocolParser.ReadKey((byte)num2, stream);
			if (key.Field == 0)
			{
				throw new ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
			}
			ProtocolParser.SkipKey(stream, key);
		}
		if (stream.Position != num)
		{
			throw new ProtocolBufferException("Read past max limit");
		}
		return instance;
	}

	public static void SerializeDelta(Stream stream, Sign instance, Sign previous)
	{
		MemoryStream obj = Pool.Get<MemoryStream>();
		if (instance.imageid != previous.imageid)
		{
			stream.WriteByte(24);
			ProtocolParser.WriteUInt32(stream, instance.imageid);
		}
		if (instance.imageIds != null)
		{
			for (int i = 0; i < instance.imageIds.Count; i++)
			{
				uint val = instance.imageIds[i];
				stream.WriteByte(32);
				ProtocolParser.WriteUInt32(stream, val);
			}
		}
		if (instance.editHistory != null)
		{
			for (int j = 0; j < instance.editHistory.Count; j++)
			{
				ulong val2 = instance.editHistory[j];
				stream.WriteByte(40);
				ProtocolParser.WriteUInt64(stream, val2);
			}
		}
		Pool.FreeUnmanaged(ref obj);
	}

	public static void Serialize(Stream stream, Sign instance)
	{
		MemoryStream obj = Pool.Get<MemoryStream>();
		if (instance.imageid != 0)
		{
			stream.WriteByte(24);
			ProtocolParser.WriteUInt32(stream, instance.imageid);
		}
		if (instance.imageIds != null)
		{
			for (int i = 0; i < instance.imageIds.Count; i++)
			{
				uint val = instance.imageIds[i];
				stream.WriteByte(32);
				ProtocolParser.WriteUInt32(stream, val);
			}
		}
		if (instance.editHistory != null)
		{
			for (int j = 0; j < instance.editHistory.Count; j++)
			{
				ulong val2 = instance.editHistory[j];
				stream.WriteByte(40);
				ProtocolParser.WriteUInt64(stream, val2);
			}
		}
		Pool.FreeUnmanaged(ref obj);
	}

	public byte[] ToProtoBytes()
	{
		return SerializeToBytes(this);
	}

	public void ToProto(Stream stream)
	{
		Serialize(stream, this);
	}

	public static byte[] SerializeToBytes(Sign instance)
	{
		using MemoryStream memoryStream = new MemoryStream();
		Serialize(memoryStream, instance);
		return memoryStream.ToArray();
	}

	public static void SerializeLengthDelimited(Stream stream, Sign instance)
	{
		byte[] array = SerializeToBytes(instance);
		ProtocolParser.WriteUInt32(stream, (uint)array.Length);
		stream.Write(array, 0, array.Length);
	}

	public void InspectUids(UidInspector<ulong> action)
	{
	}
}
