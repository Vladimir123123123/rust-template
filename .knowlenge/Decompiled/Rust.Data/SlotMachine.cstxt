using System;
using System.IO;
using Facepunch;
using ProtoBuf;
using SilentOrbit.ProtocolBuffers;

public class SlotMachine : IDisposable, Pool.IPooled, IProto
{
	[NonSerialized]
	public int oldResult1;

	[NonSerialized]
	public int oldResult2;

	[NonSerialized]
	public int oldResult3;

	[NonSerialized]
	public int newResult1;

	[NonSerialized]
	public int newResult2;

	[NonSerialized]
	public int newResult3;

	[NonSerialized]
	public bool isSpinning;

	[NonSerialized]
	public float spinTime;

	[NonSerialized]
	public NetworkableId storageID;

	[NonSerialized]
	public int multiplier;

	public bool ShouldPool = true;

	private bool _disposed;

	public static void ResetToPool(SlotMachine instance)
	{
		if (instance.ShouldPool)
		{
			instance.oldResult1 = 0;
			instance.oldResult2 = 0;
			instance.oldResult3 = 0;
			instance.newResult1 = 0;
			instance.newResult2 = 0;
			instance.newResult3 = 0;
			instance.isSpinning = false;
			instance.spinTime = 0f;
			instance.storageID = default(NetworkableId);
			instance.multiplier = 0;
			Pool.Free(ref instance);
		}
	}

	public void ResetToPool()
	{
		ResetToPool(this);
	}

	public virtual void Dispose()
	{
		if (!ShouldPool)
		{
			throw new Exception("Trying to dispose SlotMachine with ShouldPool set to false!");
		}
		if (!_disposed)
		{
			ResetToPool();
			_disposed = true;
		}
	}

	public virtual void EnterPool()
	{
		_disposed = true;
	}

	public virtual void LeavePool()
	{
		_disposed = false;
	}

	public void CopyTo(SlotMachine instance)
	{
		instance.oldResult1 = oldResult1;
		instance.oldResult2 = oldResult2;
		instance.oldResult3 = oldResult3;
		instance.newResult1 = newResult1;
		instance.newResult2 = newResult2;
		instance.newResult3 = newResult3;
		instance.isSpinning = isSpinning;
		instance.spinTime = spinTime;
		instance.storageID = storageID;
		instance.multiplier = multiplier;
	}

	public SlotMachine Copy()
	{
		SlotMachine slotMachine = Pool.Get<SlotMachine>();
		CopyTo(slotMachine);
		return slotMachine;
	}

	public static SlotMachine Deserialize(Stream stream)
	{
		SlotMachine slotMachine = Pool.Get<SlotMachine>();
		Deserialize(stream, slotMachine, isDelta: false);
		return slotMachine;
	}

	public static SlotMachine DeserializeLengthDelimited(Stream stream)
	{
		SlotMachine slotMachine = Pool.Get<SlotMachine>();
		DeserializeLengthDelimited(stream, slotMachine, isDelta: false);
		return slotMachine;
	}

	public static SlotMachine DeserializeLength(Stream stream, int length)
	{
		SlotMachine slotMachine = Pool.Get<SlotMachine>();
		DeserializeLength(stream, length, slotMachine, isDelta: false);
		return slotMachine;
	}

	public static SlotMachine Deserialize(byte[] buffer)
	{
		SlotMachine slotMachine = Pool.Get<SlotMachine>();
		using MemoryStream stream = new MemoryStream(buffer);
		Deserialize(stream, slotMachine, isDelta: false);
		return slotMachine;
	}

	public void FromProto(Stream stream, bool isDelta = false)
	{
		Deserialize(stream, this, isDelta);
	}

	public virtual void WriteToStream(Stream stream)
	{
		Serialize(stream, this);
	}

	public virtual void WriteToStreamDelta(Stream stream, SlotMachine previous)
	{
		if (previous == null)
		{
			Serialize(stream, this);
		}
		else
		{
			SerializeDelta(stream, this, previous);
		}
	}

	public virtual void ReadFromStream(Stream stream, int size, bool isDelta = false)
	{
		DeserializeLength(stream, size, this, isDelta);
	}

	public static SlotMachine Deserialize(byte[] buffer, SlotMachine instance, bool isDelta = false)
	{
		using MemoryStream stream = new MemoryStream(buffer);
		Deserialize(stream, instance, isDelta);
		return instance;
	}

	public static SlotMachine Deserialize(Stream stream, SlotMachine instance, bool isDelta)
	{
		while (true)
		{
			int num = stream.ReadByte();
			switch (num)
			{
			case 8:
				instance.oldResult1 = (int)ProtocolParser.ReadUInt64(stream);
				continue;
			case 16:
				instance.oldResult2 = (int)ProtocolParser.ReadUInt64(stream);
				continue;
			case 24:
				instance.oldResult3 = (int)ProtocolParser.ReadUInt64(stream);
				continue;
			case 32:
				instance.newResult1 = (int)ProtocolParser.ReadUInt64(stream);
				continue;
			case 40:
				instance.newResult2 = (int)ProtocolParser.ReadUInt64(stream);
				continue;
			case 48:
				instance.newResult3 = (int)ProtocolParser.ReadUInt64(stream);
				continue;
			case 56:
				instance.isSpinning = ProtocolParser.ReadBool(stream);
				continue;
			case 69:
				instance.spinTime = ProtocolParser.ReadSingle(stream);
				continue;
			case 72:
				instance.storageID = new NetworkableId(ProtocolParser.ReadUInt64(stream));
				continue;
			case 80:
				instance.multiplier = (int)ProtocolParser.ReadUInt64(stream);
				continue;
			case -1:
				return instance;
			}
			Key key = ProtocolParser.ReadKey((byte)num, stream);
			if (key.Field == 0)
			{
				throw new ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
			}
			ProtocolParser.SkipKey(stream, key);
		}
	}

	public static SlotMachine DeserializeLengthDelimited(Stream stream, SlotMachine instance, bool isDelta)
	{
		long num = ProtocolParser.ReadUInt32(stream);
		num += stream.Position;
		while (stream.Position < num)
		{
			int num2 = stream.ReadByte();
			switch (num2)
			{
			case -1:
				throw new EndOfStreamException();
			case 8:
				instance.oldResult1 = (int)ProtocolParser.ReadUInt64(stream);
				continue;
			case 16:
				instance.oldResult2 = (int)ProtocolParser.ReadUInt64(stream);
				continue;
			case 24:
				instance.oldResult3 = (int)ProtocolParser.ReadUInt64(stream);
				continue;
			case 32:
				instance.newResult1 = (int)ProtocolParser.ReadUInt64(stream);
				continue;
			case 40:
				instance.newResult2 = (int)ProtocolParser.ReadUInt64(stream);
				continue;
			case 48:
				instance.newResult3 = (int)ProtocolParser.ReadUInt64(stream);
				continue;
			case 56:
				instance.isSpinning = ProtocolParser.ReadBool(stream);
				continue;
			case 69:
				instance.spinTime = ProtocolParser.ReadSingle(stream);
				continue;
			case 72:
				instance.storageID = new NetworkableId(ProtocolParser.ReadUInt64(stream));
				continue;
			case 80:
				instance.multiplier = (int)ProtocolParser.ReadUInt64(stream);
				continue;
			}
			Key key = ProtocolParser.ReadKey((byte)num2, stream);
			if (key.Field == 0)
			{
				throw new ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
			}
			ProtocolParser.SkipKey(stream, key);
		}
		if (stream.Position != num)
		{
			throw new ProtocolBufferException("Read past max limit");
		}
		return instance;
	}

	public static SlotMachine DeserializeLength(Stream stream, int length, SlotMachine instance, bool isDelta)
	{
		long num = stream.Position + length;
		while (stream.Position < num)
		{
			int num2 = stream.ReadByte();
			switch (num2)
			{
			case -1:
				throw new EndOfStreamException();
			case 8:
				instance.oldResult1 = (int)ProtocolParser.ReadUInt64(stream);
				continue;
			case 16:
				instance.oldResult2 = (int)ProtocolParser.ReadUInt64(stream);
				continue;
			case 24:
				instance.oldResult3 = (int)ProtocolParser.ReadUInt64(stream);
				continue;
			case 32:
				instance.newResult1 = (int)ProtocolParser.ReadUInt64(stream);
				continue;
			case 40:
				instance.newResult2 = (int)ProtocolParser.ReadUInt64(stream);
				continue;
			case 48:
				instance.newResult3 = (int)ProtocolParser.ReadUInt64(stream);
				continue;
			case 56:
				instance.isSpinning = ProtocolParser.ReadBool(stream);
				continue;
			case 69:
				instance.spinTime = ProtocolParser.ReadSingle(stream);
				continue;
			case 72:
				instance.storageID = new NetworkableId(ProtocolParser.ReadUInt64(stream));
				continue;
			case 80:
				instance.multiplier = (int)ProtocolParser.ReadUInt64(stream);
				continue;
			}
			Key key = ProtocolParser.ReadKey((byte)num2, stream);
			if (key.Field == 0)
			{
				throw new ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
			}
			ProtocolParser.SkipKey(stream, key);
		}
		if (stream.Position != num)
		{
			throw new ProtocolBufferException("Read past max limit");
		}
		return instance;
	}

	public static void SerializeDelta(Stream stream, SlotMachine instance, SlotMachine previous)
	{
		MemoryStream obj = Pool.Get<MemoryStream>();
		if (instance.oldResult1 != previous.oldResult1)
		{
			stream.WriteByte(8);
			ProtocolParser.WriteUInt64(stream, (ulong)instance.oldResult1);
		}
		if (instance.oldResult2 != previous.oldResult2)
		{
			stream.WriteByte(16);
			ProtocolParser.WriteUInt64(stream, (ulong)instance.oldResult2);
		}
		if (instance.oldResult3 != previous.oldResult3)
		{
			stream.WriteByte(24);
			ProtocolParser.WriteUInt64(stream, (ulong)instance.oldResult3);
		}
		if (instance.newResult1 != previous.newResult1)
		{
			stream.WriteByte(32);
			ProtocolParser.WriteUInt64(stream, (ulong)instance.newResult1);
		}
		if (instance.newResult2 != previous.newResult2)
		{
			stream.WriteByte(40);
			ProtocolParser.WriteUInt64(stream, (ulong)instance.newResult2);
		}
		if (instance.newResult3 != previous.newResult3)
		{
			stream.WriteByte(48);
			ProtocolParser.WriteUInt64(stream, (ulong)instance.newResult3);
		}
		stream.WriteByte(56);
		ProtocolParser.WriteBool(stream, instance.isSpinning);
		if (instance.spinTime != previous.spinTime)
		{
			stream.WriteByte(69);
			ProtocolParser.WriteSingle(stream, instance.spinTime);
		}
		stream.WriteByte(72);
		ProtocolParser.WriteUInt64(stream, instance.storageID.Value);
		if (instance.multiplier != previous.multiplier)
		{
			stream.WriteByte(80);
			ProtocolParser.WriteUInt64(stream, (ulong)instance.multiplier);
		}
		Pool.FreeUnmanaged(ref obj);
	}

	public static void Serialize(Stream stream, SlotMachine instance)
	{
		MemoryStream obj = Pool.Get<MemoryStream>();
		if (instance.oldResult1 != 0)
		{
			stream.WriteByte(8);
			ProtocolParser.WriteUInt64(stream, (ulong)instance.oldResult1);
		}
		if (instance.oldResult2 != 0)
		{
			stream.WriteByte(16);
			ProtocolParser.WriteUInt64(stream, (ulong)instance.oldResult2);
		}
		if (instance.oldResult3 != 0)
		{
			stream.WriteByte(24);
			ProtocolParser.WriteUInt64(stream, (ulong)instance.oldResult3);
		}
		if (instance.newResult1 != 0)
		{
			stream.WriteByte(32);
			ProtocolParser.WriteUInt64(stream, (ulong)instance.newResult1);
		}
		if (instance.newResult2 != 0)
		{
			stream.WriteByte(40);
			ProtocolParser.WriteUInt64(stream, (ulong)instance.newResult2);
		}
		if (instance.newResult3 != 0)
		{
			stream.WriteByte(48);
			ProtocolParser.WriteUInt64(stream, (ulong)instance.newResult3);
		}
		if (instance.isSpinning)
		{
			stream.WriteByte(56);
			ProtocolParser.WriteBool(stream, instance.isSpinning);
		}
		if (instance.spinTime != 0f)
		{
			stream.WriteByte(69);
			ProtocolParser.WriteSingle(stream, instance.spinTime);
		}
		if (instance.storageID != default(NetworkableId))
		{
			stream.WriteByte(72);
			ProtocolParser.WriteUInt64(stream, instance.storageID.Value);
		}
		if (instance.multiplier != 0)
		{
			stream.WriteByte(80);
			ProtocolParser.WriteUInt64(stream, (ulong)instance.multiplier);
		}
		Pool.FreeUnmanaged(ref obj);
	}

	public byte[] ToProtoBytes()
	{
		return SerializeToBytes(this);
	}

	public void ToProto(Stream stream)
	{
		Serialize(stream, this);
	}

	public static byte[] SerializeToBytes(SlotMachine instance)
	{
		using MemoryStream memoryStream = new MemoryStream();
		Serialize(memoryStream, instance);
		return memoryStream.ToArray();
	}

	public static void SerializeLengthDelimited(Stream stream, SlotMachine instance)
	{
		byte[] array = SerializeToBytes(instance);
		ProtocolParser.WriteUInt32(stream, (uint)array.Length);
		stream.Write(array, 0, array.Length);
	}

	public void InspectUids(UidInspector<ulong> action)
	{
		action(UidType.NetworkableId, ref storageID.Value);
	}
}
