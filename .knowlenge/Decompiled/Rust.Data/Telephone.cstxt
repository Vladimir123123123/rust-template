using System;
using System.Collections.Generic;
using System.IO;
using Facepunch;
using ProtoBuf;
using SilentOrbit.ProtocolBuffers;

public class Telephone : IDisposable, Pool.IPooled, IProto
{
	[NonSerialized]
	public int lastNumber;

	[NonSerialized]
	public int phoneNumber;

	[NonSerialized]
	public NetworkableId usingPlayer;

	[NonSerialized]
	public string phoneName;

	[NonSerialized]
	public PhoneDirectory savedNumbers;

	[NonSerialized]
	public List<VoicemailEntry> voicemail;

	public bool ShouldPool = true;

	private bool _disposed;

	public static void ResetToPool(Telephone instance)
	{
		if (!instance.ShouldPool)
		{
			return;
		}
		instance.lastNumber = 0;
		instance.phoneNumber = 0;
		instance.usingPlayer = default(NetworkableId);
		instance.phoneName = string.Empty;
		if (instance.savedNumbers != null)
		{
			instance.savedNumbers.ResetToPool();
			instance.savedNumbers = null;
		}
		if (instance.voicemail != null)
		{
			for (int i = 0; i < instance.voicemail.Count; i++)
			{
				if (instance.voicemail[i] != null)
				{
					instance.voicemail[i].ResetToPool();
					instance.voicemail[i] = null;
				}
			}
			List<VoicemailEntry> obj = instance.voicemail;
			Pool.Free(ref obj, freeElements: false);
			instance.voicemail = obj;
		}
		Pool.Free(ref instance);
	}

	public void ResetToPool()
	{
		ResetToPool(this);
	}

	public virtual void Dispose()
	{
		if (!ShouldPool)
		{
			throw new Exception("Trying to dispose Telephone with ShouldPool set to false!");
		}
		if (!_disposed)
		{
			ResetToPool();
			_disposed = true;
		}
	}

	public virtual void EnterPool()
	{
		_disposed = true;
	}

	public virtual void LeavePool()
	{
		_disposed = false;
	}

	public void CopyTo(Telephone instance)
	{
		instance.lastNumber = lastNumber;
		instance.phoneNumber = phoneNumber;
		instance.usingPlayer = usingPlayer;
		instance.phoneName = phoneName;
		if (savedNumbers != null)
		{
			if (instance.savedNumbers == null)
			{
				instance.savedNumbers = savedNumbers.Copy();
			}
			else
			{
				savedNumbers.CopyTo(instance.savedNumbers);
			}
		}
		else
		{
			instance.savedNumbers = null;
		}
		if (voicemail != null)
		{
			instance.voicemail = Pool.Get<List<VoicemailEntry>>();
			for (int i = 0; i < voicemail.Count; i++)
			{
				VoicemailEntry item = voicemail[i].Copy();
				instance.voicemail.Add(item);
			}
		}
		else
		{
			instance.voicemail = null;
		}
	}

	public Telephone Copy()
	{
		Telephone telephone = Pool.Get<Telephone>();
		CopyTo(telephone);
		return telephone;
	}

	public static Telephone Deserialize(Stream stream)
	{
		Telephone telephone = Pool.Get<Telephone>();
		Deserialize(stream, telephone, isDelta: false);
		return telephone;
	}

	public static Telephone DeserializeLengthDelimited(Stream stream)
	{
		Telephone telephone = Pool.Get<Telephone>();
		DeserializeLengthDelimited(stream, telephone, isDelta: false);
		return telephone;
	}

	public static Telephone DeserializeLength(Stream stream, int length)
	{
		Telephone telephone = Pool.Get<Telephone>();
		DeserializeLength(stream, length, telephone, isDelta: false);
		return telephone;
	}

	public static Telephone Deserialize(byte[] buffer)
	{
		Telephone telephone = Pool.Get<Telephone>();
		using MemoryStream stream = new MemoryStream(buffer);
		Deserialize(stream, telephone, isDelta: false);
		return telephone;
	}

	public void FromProto(Stream stream, bool isDelta = false)
	{
		Deserialize(stream, this, isDelta);
	}

	public virtual void WriteToStream(Stream stream)
	{
		Serialize(stream, this);
	}

	public virtual void WriteToStreamDelta(Stream stream, Telephone previous)
	{
		if (previous == null)
		{
			Serialize(stream, this);
		}
		else
		{
			SerializeDelta(stream, this, previous);
		}
	}

	public virtual void ReadFromStream(Stream stream, int size, bool isDelta = false)
	{
		DeserializeLength(stream, size, this, isDelta);
	}

	public static Telephone Deserialize(byte[] buffer, Telephone instance, bool isDelta = false)
	{
		using MemoryStream stream = new MemoryStream(buffer);
		Deserialize(stream, instance, isDelta);
		return instance;
	}

	public static Telephone Deserialize(Stream stream, Telephone instance, bool isDelta)
	{
		if (!isDelta && instance.voicemail == null)
		{
			instance.voicemail = Pool.Get<List<VoicemailEntry>>();
		}
		while (true)
		{
			int num = stream.ReadByte();
			switch (num)
			{
			case 8:
				instance.lastNumber = (int)ProtocolParser.ReadUInt64(stream);
				continue;
			case 16:
				instance.phoneNumber = (int)ProtocolParser.ReadUInt64(stream);
				continue;
			case 32:
				instance.usingPlayer = new NetworkableId(ProtocolParser.ReadUInt64(stream));
				continue;
			case 42:
				instance.phoneName = ProtocolParser.ReadString(stream);
				continue;
			case 50:
				if (instance.savedNumbers == null)
				{
					instance.savedNumbers = PhoneDirectory.DeserializeLengthDelimited(stream);
				}
				else
				{
					PhoneDirectory.DeserializeLengthDelimited(stream, instance.savedNumbers, isDelta);
				}
				continue;
			case 58:
				instance.voicemail.Add(VoicemailEntry.DeserializeLengthDelimited(stream));
				continue;
			case -1:
				return instance;
			}
			Key key = ProtocolParser.ReadKey((byte)num, stream);
			if (key.Field == 0)
			{
				throw new ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
			}
			ProtocolParser.SkipKey(stream, key);
		}
	}

	public static Telephone DeserializeLengthDelimited(Stream stream, Telephone instance, bool isDelta)
	{
		if (!isDelta && instance.voicemail == null)
		{
			instance.voicemail = Pool.Get<List<VoicemailEntry>>();
		}
		long num = ProtocolParser.ReadUInt32(stream);
		num += stream.Position;
		while (stream.Position < num)
		{
			int num2 = stream.ReadByte();
			switch (num2)
			{
			case -1:
				throw new EndOfStreamException();
			case 8:
				instance.lastNumber = (int)ProtocolParser.ReadUInt64(stream);
				continue;
			case 16:
				instance.phoneNumber = (int)ProtocolParser.ReadUInt64(stream);
				continue;
			case 32:
				instance.usingPlayer = new NetworkableId(ProtocolParser.ReadUInt64(stream));
				continue;
			case 42:
				instance.phoneName = ProtocolParser.ReadString(stream);
				continue;
			case 50:
				if (instance.savedNumbers == null)
				{
					instance.savedNumbers = PhoneDirectory.DeserializeLengthDelimited(stream);
				}
				else
				{
					PhoneDirectory.DeserializeLengthDelimited(stream, instance.savedNumbers, isDelta);
				}
				continue;
			case 58:
				instance.voicemail.Add(VoicemailEntry.DeserializeLengthDelimited(stream));
				continue;
			}
			Key key = ProtocolParser.ReadKey((byte)num2, stream);
			if (key.Field == 0)
			{
				throw new ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
			}
			ProtocolParser.SkipKey(stream, key);
		}
		if (stream.Position != num)
		{
			throw new ProtocolBufferException("Read past max limit");
		}
		return instance;
	}

	public static Telephone DeserializeLength(Stream stream, int length, Telephone instance, bool isDelta)
	{
		if (!isDelta && instance.voicemail == null)
		{
			instance.voicemail = Pool.Get<List<VoicemailEntry>>();
		}
		long num = stream.Position + length;
		while (stream.Position < num)
		{
			int num2 = stream.ReadByte();
			switch (num2)
			{
			case -1:
				throw new EndOfStreamException();
			case 8:
				instance.lastNumber = (int)ProtocolParser.ReadUInt64(stream);
				continue;
			case 16:
				instance.phoneNumber = (int)ProtocolParser.ReadUInt64(stream);
				continue;
			case 32:
				instance.usingPlayer = new NetworkableId(ProtocolParser.ReadUInt64(stream));
				continue;
			case 42:
				instance.phoneName = ProtocolParser.ReadString(stream);
				continue;
			case 50:
				if (instance.savedNumbers == null)
				{
					instance.savedNumbers = PhoneDirectory.DeserializeLengthDelimited(stream);
				}
				else
				{
					PhoneDirectory.DeserializeLengthDelimited(stream, instance.savedNumbers, isDelta);
				}
				continue;
			case 58:
				instance.voicemail.Add(VoicemailEntry.DeserializeLengthDelimited(stream));
				continue;
			}
			Key key = ProtocolParser.ReadKey((byte)num2, stream);
			if (key.Field == 0)
			{
				throw new ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
			}
			ProtocolParser.SkipKey(stream, key);
		}
		if (stream.Position != num)
		{
			throw new ProtocolBufferException("Read past max limit");
		}
		return instance;
	}

	public static void SerializeDelta(Stream stream, Telephone instance, Telephone previous)
	{
		MemoryStream obj = Pool.Get<MemoryStream>();
		if (instance.lastNumber != previous.lastNumber)
		{
			stream.WriteByte(8);
			ProtocolParser.WriteUInt64(stream, (ulong)instance.lastNumber);
		}
		if (instance.phoneNumber != previous.phoneNumber)
		{
			stream.WriteByte(16);
			ProtocolParser.WriteUInt64(stream, (ulong)instance.phoneNumber);
		}
		stream.WriteByte(32);
		ProtocolParser.WriteUInt64(stream, instance.usingPlayer.Value);
		if (instance.phoneName != null && instance.phoneName != previous.phoneName)
		{
			stream.WriteByte(42);
			ProtocolParser.WriteString(stream, instance.phoneName);
		}
		if (instance.savedNumbers != null)
		{
			stream.WriteByte(50);
			obj.SetLength(0L);
			PhoneDirectory.SerializeDelta(obj, instance.savedNumbers, previous.savedNumbers);
			uint num = (uint)obj.Length;
			ProtocolParser.WriteUInt32(stream, num);
			stream.Write(obj.GetBuffer(), 0, (int)num);
		}
		if (instance.voicemail != null)
		{
			for (int i = 0; i < instance.voicemail.Count; i++)
			{
				VoicemailEntry voicemailEntry = instance.voicemail[i];
				stream.WriteByte(58);
				obj.SetLength(0L);
				VoicemailEntry.SerializeDelta(obj, voicemailEntry, voicemailEntry);
				uint num2 = (uint)obj.Length;
				ProtocolParser.WriteUInt32(stream, num2);
				stream.Write(obj.GetBuffer(), 0, (int)num2);
			}
		}
		Pool.FreeUnmanaged(ref obj);
	}

	public static void Serialize(Stream stream, Telephone instance)
	{
		MemoryStream obj = Pool.Get<MemoryStream>();
		if (instance.lastNumber != 0)
		{
			stream.WriteByte(8);
			ProtocolParser.WriteUInt64(stream, (ulong)instance.lastNumber);
		}
		if (instance.phoneNumber != 0)
		{
			stream.WriteByte(16);
			ProtocolParser.WriteUInt64(stream, (ulong)instance.phoneNumber);
		}
		if (instance.usingPlayer != default(NetworkableId))
		{
			stream.WriteByte(32);
			ProtocolParser.WriteUInt64(stream, instance.usingPlayer.Value);
		}
		if (instance.phoneName != null)
		{
			stream.WriteByte(42);
			ProtocolParser.WriteString(stream, instance.phoneName);
		}
		if (instance.savedNumbers != null)
		{
			stream.WriteByte(50);
			obj.SetLength(0L);
			PhoneDirectory.Serialize(obj, instance.savedNumbers);
			uint num = (uint)obj.Length;
			ProtocolParser.WriteUInt32(stream, num);
			stream.Write(obj.GetBuffer(), 0, (int)num);
		}
		if (instance.voicemail != null)
		{
			for (int i = 0; i < instance.voicemail.Count; i++)
			{
				VoicemailEntry instance2 = instance.voicemail[i];
				stream.WriteByte(58);
				obj.SetLength(0L);
				VoicemailEntry.Serialize(obj, instance2);
				uint num2 = (uint)obj.Length;
				ProtocolParser.WriteUInt32(stream, num2);
				stream.Write(obj.GetBuffer(), 0, (int)num2);
			}
		}
		Pool.FreeUnmanaged(ref obj);
	}

	public byte[] ToProtoBytes()
	{
		return SerializeToBytes(this);
	}

	public void ToProto(Stream stream)
	{
		Serialize(stream, this);
	}

	public static byte[] SerializeToBytes(Telephone instance)
	{
		using MemoryStream memoryStream = new MemoryStream();
		Serialize(memoryStream, instance);
		return memoryStream.ToArray();
	}

	public static void SerializeLengthDelimited(Stream stream, Telephone instance)
	{
		byte[] array = SerializeToBytes(instance);
		ProtocolParser.WriteUInt32(stream, (uint)array.Length);
		stream.Write(array, 0, array.Length);
	}

	public void InspectUids(UidInspector<ulong> action)
	{
		action(UidType.NetworkableId, ref usingPlayer.Value);
		savedNumbers?.InspectUids(action);
		if (voicemail != null)
		{
			for (int i = 0; i < voicemail.Count; i++)
			{
				voicemail[i]?.InspectUids(action);
			}
		}
	}
}
