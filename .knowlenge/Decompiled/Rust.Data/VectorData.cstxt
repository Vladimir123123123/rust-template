using System;
using System.IO;
using Facepunch;
using ProtoBuf;
using SilentOrbit.ProtocolBuffers;
using UnityEngine;

public struct VectorData : IProto, IEquatable<VectorData>
{
	[NonSerialized]
	public float x;

	[NonSerialized]
	public float y;

	[NonSerialized]
	public float z;

	public static void ResetToPool(VectorData instance)
	{
		instance.x = 0f;
		instance.y = 0f;
		instance.z = 0f;
	}

	public void CopyTo(VectorData instance)
	{
		instance.x = x;
		instance.y = y;
		instance.z = z;
	}

	public VectorData Copy()
	{
		VectorData vectorData = default(VectorData);
		CopyTo(vectorData);
		return vectorData;
	}

	public static VectorData Deserialize(Stream stream)
	{
		VectorData instance = default(VectorData);
		Deserialize(stream, ref instance, isDelta: false);
		return instance;
	}

	public static VectorData DeserializeLengthDelimited(Stream stream)
	{
		VectorData instance = default(VectorData);
		DeserializeLengthDelimited(stream, ref instance, isDelta: false);
		return instance;
	}

	public static VectorData DeserializeLength(Stream stream, int length)
	{
		VectorData instance = default(VectorData);
		DeserializeLength(stream, length, ref instance, isDelta: false);
		return instance;
	}

	public static VectorData Deserialize(byte[] buffer)
	{
		VectorData instance = default(VectorData);
		using MemoryStream stream = new MemoryStream(buffer);
		Deserialize(stream, ref instance, isDelta: false);
		return instance;
	}

	public void FromProto(Stream stream, bool isDelta = false)
	{
		Deserialize(stream, ref this, isDelta);
	}

	public void WriteToStream(Stream stream)
	{
		Serialize(stream, this);
	}

	public void WriteToStreamDelta(Stream stream, VectorData previous)
	{
		SerializeDelta(stream, this, previous);
	}

	public void ReadFromStream(Stream stream, int size, bool isDelta = false)
	{
		DeserializeLength(stream, size, ref this, isDelta);
	}

	public static VectorData Deserialize(byte[] buffer, ref VectorData instance, bool isDelta = false)
	{
		using (MemoryStream stream = new MemoryStream(buffer))
		{
			Deserialize(stream, ref instance, isDelta);
		}
		return instance;
	}

	public static VectorData Deserialize(Stream stream, ref VectorData instance, bool isDelta)
	{
		while (true)
		{
			int num = stream.ReadByte();
			switch (num)
			{
			case 13:
				instance.x = ProtocolParser.ReadSingle(stream);
				continue;
			case 21:
				instance.y = ProtocolParser.ReadSingle(stream);
				continue;
			case 29:
				instance.z = ProtocolParser.ReadSingle(stream);
				continue;
			case -1:
				return instance;
			}
			Key key = ProtocolParser.ReadKey((byte)num, stream);
			if (key.Field == 0)
			{
				throw new ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
			}
			ProtocolParser.SkipKey(stream, key);
		}
	}

	public static VectorData DeserializeLengthDelimited(Stream stream, ref VectorData instance, bool isDelta)
	{
		long num = ProtocolParser.ReadUInt32(stream);
		num += stream.Position;
		while (stream.Position < num)
		{
			int num2 = stream.ReadByte();
			switch (num2)
			{
			case -1:
				throw new EndOfStreamException();
			case 13:
				instance.x = ProtocolParser.ReadSingle(stream);
				continue;
			case 21:
				instance.y = ProtocolParser.ReadSingle(stream);
				continue;
			case 29:
				instance.z = ProtocolParser.ReadSingle(stream);
				continue;
			}
			Key key = ProtocolParser.ReadKey((byte)num2, stream);
			if (key.Field == 0)
			{
				throw new ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
			}
			ProtocolParser.SkipKey(stream, key);
		}
		if (stream.Position != num)
		{
			throw new ProtocolBufferException("Read past max limit");
		}
		return instance;
	}

	public static VectorData DeserializeLength(Stream stream, int length, ref VectorData instance, bool isDelta)
	{
		long num = stream.Position + length;
		while (stream.Position < num)
		{
			int num2 = stream.ReadByte();
			switch (num2)
			{
			case -1:
				throw new EndOfStreamException();
			case 13:
				instance.x = ProtocolParser.ReadSingle(stream);
				continue;
			case 21:
				instance.y = ProtocolParser.ReadSingle(stream);
				continue;
			case 29:
				instance.z = ProtocolParser.ReadSingle(stream);
				continue;
			}
			Key key = ProtocolParser.ReadKey((byte)num2, stream);
			if (key.Field == 0)
			{
				throw new ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
			}
			ProtocolParser.SkipKey(stream, key);
		}
		if (stream.Position != num)
		{
			throw new ProtocolBufferException("Read past max limit");
		}
		return instance;
	}

	public static void SerializeDelta(Stream stream, VectorData instance, VectorData previous)
	{
		MemoryStream obj = Pool.Get<MemoryStream>();
		if (instance.x != previous.x)
		{
			stream.WriteByte(13);
			ProtocolParser.WriteSingle(stream, instance.x);
		}
		if (instance.y != previous.y)
		{
			stream.WriteByte(21);
			ProtocolParser.WriteSingle(stream, instance.y);
		}
		if (instance.z != previous.z)
		{
			stream.WriteByte(29);
			ProtocolParser.WriteSingle(stream, instance.z);
		}
		Pool.FreeUnmanaged(ref obj);
	}

	public static void Serialize(Stream stream, VectorData instance)
	{
		MemoryStream obj = Pool.Get<MemoryStream>();
		if (instance.x != 0f)
		{
			stream.WriteByte(13);
			ProtocolParser.WriteSingle(stream, instance.x);
		}
		if (instance.y != 0f)
		{
			stream.WriteByte(21);
			ProtocolParser.WriteSingle(stream, instance.y);
		}
		if (instance.z != 0f)
		{
			stream.WriteByte(29);
			ProtocolParser.WriteSingle(stream, instance.z);
		}
		Pool.FreeUnmanaged(ref obj);
	}

	public byte[] ToProtoBytes()
	{
		return SerializeToBytes(this);
	}

	public void ToProto(Stream stream)
	{
		Serialize(stream, this);
	}

	public static byte[] SerializeToBytes(VectorData instance)
	{
		using MemoryStream memoryStream = new MemoryStream();
		Serialize(memoryStream, instance);
		return memoryStream.ToArray();
	}

	public static void SerializeLengthDelimited(Stream stream, VectorData instance)
	{
		byte[] array = SerializeToBytes(instance);
		ProtocolParser.WriteUInt32(stream, (uint)array.Length);
		stream.Write(array, 0, array.Length);
	}

	public void InspectUids(UidInspector<ulong> action)
	{
	}

	public VectorData(float x, float y, float z)
	{
		this.x = x;
		this.y = y;
		this.z = z;
	}

	public static implicit operator VectorData(Vector3 v)
	{
		return new VectorData(v.x, v.y, v.z);
	}

	public static implicit operator VectorData(Quaternion q)
	{
		return q.eulerAngles;
	}

	public static implicit operator Vector3(VectorData v)
	{
		return new Vector3(v.x, v.y, v.z);
	}

	public static implicit operator Quaternion(VectorData v)
	{
		return Quaternion.Euler(v);
	}

	public bool Equals(VectorData other)
	{
		if (x == other.x && y == other.y)
		{
			return z == other.z;
		}
		return false;
	}

	public override bool Equals(object obj)
	{
		if (obj is VectorData)
		{
			return Equals((VectorData)obj);
		}
		return false;
	}

	public static bool operator ==(VectorData a, VectorData b)
	{
		return a.Equals(b);
	}

	public static bool operator !=(VectorData a, VectorData b)
	{
		return !a.Equals(b);
	}

	public override int GetHashCode()
	{
		return HashCode.Combine(x, y, z);
	}
}
