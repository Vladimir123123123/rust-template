using System;
using System.Collections.Generic;
using System.IO;
using Facepunch;
using ProtoBuf;
using SilentOrbit.ProtocolBuffers;

public class VendingMachine : IDisposable, Pool.IPooled, IProto
{
	public class SellOrder : IDisposable, Pool.IPooled, IProto
	{
		[NonSerialized]
		public int itemToSellID;

		[NonSerialized]
		public int itemToSellAmount;

		[NonSerialized]
		public int currencyID;

		[NonSerialized]
		public int currencyAmountPerItem;

		[NonSerialized]
		public int inStock;

		[NonSerialized]
		public bool currencyIsBP;

		[NonSerialized]
		public bool itemToSellIsBP;

		[NonSerialized]
		public float itemCondition;

		[NonSerialized]
		public float itemConditionMax;

		[NonSerialized]
		public int instanceData;

		[NonSerialized]
		public List<int> attachmentsList;

		[NonSerialized]
		public int totalAttachmentSlots;

		[NonSerialized]
		public float priceMultiplier;

		[NonSerialized]
		public int ammoType;

		[NonSerialized]
		public int ammoCount;

		[NonSerialized]
		public float receivedQuantityMultiplier;

		public bool ShouldPool = true;

		private bool _disposed;

		public static void ResetToPool(SellOrder instance)
		{
			if (instance.ShouldPool)
			{
				instance.itemToSellID = 0;
				instance.itemToSellAmount = 0;
				instance.currencyID = 0;
				instance.currencyAmountPerItem = 0;
				instance.inStock = 0;
				instance.currencyIsBP = false;
				instance.itemToSellIsBP = false;
				instance.itemCondition = 0f;
				instance.itemConditionMax = 0f;
				instance.instanceData = 0;
				if (instance.attachmentsList != null)
				{
					List<int> obj = instance.attachmentsList;
					Pool.FreeUnmanaged(ref obj);
					instance.attachmentsList = obj;
				}
				instance.totalAttachmentSlots = 0;
				instance.priceMultiplier = 0f;
				instance.ammoType = 0;
				instance.ammoCount = 0;
				instance.receivedQuantityMultiplier = 0f;
				Pool.Free(ref instance);
			}
		}

		public void ResetToPool()
		{
			ResetToPool(this);
		}

		public virtual void Dispose()
		{
			if (!ShouldPool)
			{
				throw new Exception("Trying to dispose SellOrder with ShouldPool set to false!");
			}
			if (!_disposed)
			{
				ResetToPool();
				_disposed = true;
			}
		}

		public virtual void EnterPool()
		{
			_disposed = true;
		}

		public virtual void LeavePool()
		{
			_disposed = false;
		}

		public void CopyTo(SellOrder instance)
		{
			instance.itemToSellID = itemToSellID;
			instance.itemToSellAmount = itemToSellAmount;
			instance.currencyID = currencyID;
			instance.currencyAmountPerItem = currencyAmountPerItem;
			instance.inStock = inStock;
			instance.currencyIsBP = currencyIsBP;
			instance.itemToSellIsBP = itemToSellIsBP;
			instance.itemCondition = itemCondition;
			instance.itemConditionMax = itemConditionMax;
			instance.instanceData = instanceData;
			if (attachmentsList != null)
			{
				instance.attachmentsList = Pool.Get<List<int>>();
				for (int i = 0; i < attachmentsList.Count; i++)
				{
					int item = attachmentsList[i];
					instance.attachmentsList.Add(item);
				}
			}
			else
			{
				instance.attachmentsList = null;
			}
			instance.totalAttachmentSlots = totalAttachmentSlots;
			instance.priceMultiplier = priceMultiplier;
			instance.ammoType = ammoType;
			instance.ammoCount = ammoCount;
			instance.receivedQuantityMultiplier = receivedQuantityMultiplier;
		}

		public SellOrder Copy()
		{
			SellOrder sellOrder = Pool.Get<SellOrder>();
			CopyTo(sellOrder);
			return sellOrder;
		}

		public static SellOrder Deserialize(Stream stream)
		{
			SellOrder sellOrder = Pool.Get<SellOrder>();
			Deserialize(stream, sellOrder, isDelta: false);
			return sellOrder;
		}

		public static SellOrder DeserializeLengthDelimited(Stream stream)
		{
			SellOrder sellOrder = Pool.Get<SellOrder>();
			DeserializeLengthDelimited(stream, sellOrder, isDelta: false);
			return sellOrder;
		}

		public static SellOrder DeserializeLength(Stream stream, int length)
		{
			SellOrder sellOrder = Pool.Get<SellOrder>();
			DeserializeLength(stream, length, sellOrder, isDelta: false);
			return sellOrder;
		}

		public static SellOrder Deserialize(byte[] buffer)
		{
			SellOrder sellOrder = Pool.Get<SellOrder>();
			using MemoryStream stream = new MemoryStream(buffer);
			Deserialize(stream, sellOrder, isDelta: false);
			return sellOrder;
		}

		public void FromProto(Stream stream, bool isDelta = false)
		{
			Deserialize(stream, this, isDelta);
		}

		public virtual void WriteToStream(Stream stream)
		{
			Serialize(stream, this);
		}

		public virtual void WriteToStreamDelta(Stream stream, SellOrder previous)
		{
			if (previous == null)
			{
				Serialize(stream, this);
			}
			else
			{
				SerializeDelta(stream, this, previous);
			}
		}

		public virtual void ReadFromStream(Stream stream, int size, bool isDelta = false)
		{
			DeserializeLength(stream, size, this, isDelta);
		}

		public static SellOrder Deserialize(byte[] buffer, SellOrder instance, bool isDelta = false)
		{
			using MemoryStream stream = new MemoryStream(buffer);
			Deserialize(stream, instance, isDelta);
			return instance;
		}

		public static SellOrder Deserialize(Stream stream, SellOrder instance, bool isDelta)
		{
			if (!isDelta && instance.attachmentsList == null)
			{
				instance.attachmentsList = Pool.Get<List<int>>();
			}
			while (true)
			{
				int num = stream.ReadByte();
				switch (num)
				{
				case 8:
					instance.itemToSellID = (int)ProtocolParser.ReadUInt64(stream);
					continue;
				case 16:
					instance.itemToSellAmount = (int)ProtocolParser.ReadUInt64(stream);
					continue;
				case 24:
					instance.currencyID = (int)ProtocolParser.ReadUInt64(stream);
					continue;
				case 32:
					instance.currencyAmountPerItem = (int)ProtocolParser.ReadUInt64(stream);
					continue;
				case 40:
					instance.inStock = (int)ProtocolParser.ReadUInt64(stream);
					continue;
				case 48:
					instance.currencyIsBP = ProtocolParser.ReadBool(stream);
					continue;
				case 56:
					instance.itemToSellIsBP = ProtocolParser.ReadBool(stream);
					continue;
				case 69:
					instance.itemCondition = ProtocolParser.ReadSingle(stream);
					continue;
				case 77:
					instance.itemConditionMax = ProtocolParser.ReadSingle(stream);
					continue;
				case 80:
					instance.instanceData = (int)ProtocolParser.ReadUInt64(stream);
					continue;
				case 88:
					instance.attachmentsList.Add((int)ProtocolParser.ReadUInt64(stream));
					continue;
				case 96:
					instance.totalAttachmentSlots = (int)ProtocolParser.ReadUInt64(stream);
					continue;
				case 109:
					instance.priceMultiplier = ProtocolParser.ReadSingle(stream);
					continue;
				case 112:
					instance.ammoType = (int)ProtocolParser.ReadUInt64(stream);
					continue;
				case 120:
					instance.ammoCount = (int)ProtocolParser.ReadUInt64(stream);
					continue;
				case -1:
					return instance;
				}
				Key key = ProtocolParser.ReadKey((byte)num, stream);
				switch (key.Field)
				{
				case 0u:
					throw new ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
				case 16u:
					if (key.WireType == Wire.Fixed32)
					{
						instance.receivedQuantityMultiplier = ProtocolParser.ReadSingle(stream);
					}
					break;
				default:
					ProtocolParser.SkipKey(stream, key);
					break;
				}
			}
		}

		public static SellOrder DeserializeLengthDelimited(Stream stream, SellOrder instance, bool isDelta)
		{
			if (!isDelta && instance.attachmentsList == null)
			{
				instance.attachmentsList = Pool.Get<List<int>>();
			}
			long num = ProtocolParser.ReadUInt32(stream);
			num += stream.Position;
			while (stream.Position < num)
			{
				int num2 = stream.ReadByte();
				switch (num2)
				{
				case -1:
					throw new EndOfStreamException();
				case 8:
					instance.itemToSellID = (int)ProtocolParser.ReadUInt64(stream);
					continue;
				case 16:
					instance.itemToSellAmount = (int)ProtocolParser.ReadUInt64(stream);
					continue;
				case 24:
					instance.currencyID = (int)ProtocolParser.ReadUInt64(stream);
					continue;
				case 32:
					instance.currencyAmountPerItem = (int)ProtocolParser.ReadUInt64(stream);
					continue;
				case 40:
					instance.inStock = (int)ProtocolParser.ReadUInt64(stream);
					continue;
				case 48:
					instance.currencyIsBP = ProtocolParser.ReadBool(stream);
					continue;
				case 56:
					instance.itemToSellIsBP = ProtocolParser.ReadBool(stream);
					continue;
				case 69:
					instance.itemCondition = ProtocolParser.ReadSingle(stream);
					continue;
				case 77:
					instance.itemConditionMax = ProtocolParser.ReadSingle(stream);
					continue;
				case 80:
					instance.instanceData = (int)ProtocolParser.ReadUInt64(stream);
					continue;
				case 88:
					instance.attachmentsList.Add((int)ProtocolParser.ReadUInt64(stream));
					continue;
				case 96:
					instance.totalAttachmentSlots = (int)ProtocolParser.ReadUInt64(stream);
					continue;
				case 109:
					instance.priceMultiplier = ProtocolParser.ReadSingle(stream);
					continue;
				case 112:
					instance.ammoType = (int)ProtocolParser.ReadUInt64(stream);
					continue;
				case 120:
					instance.ammoCount = (int)ProtocolParser.ReadUInt64(stream);
					continue;
				}
				Key key = ProtocolParser.ReadKey((byte)num2, stream);
				switch (key.Field)
				{
				case 0u:
					throw new ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
				case 16u:
					if (key.WireType == Wire.Fixed32)
					{
						instance.receivedQuantityMultiplier = ProtocolParser.ReadSingle(stream);
					}
					break;
				default:
					ProtocolParser.SkipKey(stream, key);
					break;
				}
			}
			if (stream.Position != num)
			{
				throw new ProtocolBufferException("Read past max limit");
			}
			return instance;
		}

		public static SellOrder DeserializeLength(Stream stream, int length, SellOrder instance, bool isDelta)
		{
			if (!isDelta && instance.attachmentsList == null)
			{
				instance.attachmentsList = Pool.Get<List<int>>();
			}
			long num = stream.Position + length;
			while (stream.Position < num)
			{
				int num2 = stream.ReadByte();
				switch (num2)
				{
				case -1:
					throw new EndOfStreamException();
				case 8:
					instance.itemToSellID = (int)ProtocolParser.ReadUInt64(stream);
					continue;
				case 16:
					instance.itemToSellAmount = (int)ProtocolParser.ReadUInt64(stream);
					continue;
				case 24:
					instance.currencyID = (int)ProtocolParser.ReadUInt64(stream);
					continue;
				case 32:
					instance.currencyAmountPerItem = (int)ProtocolParser.ReadUInt64(stream);
					continue;
				case 40:
					instance.inStock = (int)ProtocolParser.ReadUInt64(stream);
					continue;
				case 48:
					instance.currencyIsBP = ProtocolParser.ReadBool(stream);
					continue;
				case 56:
					instance.itemToSellIsBP = ProtocolParser.ReadBool(stream);
					continue;
				case 69:
					instance.itemCondition = ProtocolParser.ReadSingle(stream);
					continue;
				case 77:
					instance.itemConditionMax = ProtocolParser.ReadSingle(stream);
					continue;
				case 80:
					instance.instanceData = (int)ProtocolParser.ReadUInt64(stream);
					continue;
				case 88:
					instance.attachmentsList.Add((int)ProtocolParser.ReadUInt64(stream));
					continue;
				case 96:
					instance.totalAttachmentSlots = (int)ProtocolParser.ReadUInt64(stream);
					continue;
				case 109:
					instance.priceMultiplier = ProtocolParser.ReadSingle(stream);
					continue;
				case 112:
					instance.ammoType = (int)ProtocolParser.ReadUInt64(stream);
					continue;
				case 120:
					instance.ammoCount = (int)ProtocolParser.ReadUInt64(stream);
					continue;
				}
				Key key = ProtocolParser.ReadKey((byte)num2, stream);
				switch (key.Field)
				{
				case 0u:
					throw new ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
				case 16u:
					if (key.WireType == Wire.Fixed32)
					{
						instance.receivedQuantityMultiplier = ProtocolParser.ReadSingle(stream);
					}
					break;
				default:
					ProtocolParser.SkipKey(stream, key);
					break;
				}
			}
			if (stream.Position != num)
			{
				throw new ProtocolBufferException("Read past max limit");
			}
			return instance;
		}

		public static void SerializeDelta(Stream stream, SellOrder instance, SellOrder previous)
		{
			MemoryStream obj = Pool.Get<MemoryStream>();
			if (instance.itemToSellID != previous.itemToSellID)
			{
				stream.WriteByte(8);
				ProtocolParser.WriteUInt64(stream, (ulong)instance.itemToSellID);
			}
			if (instance.itemToSellAmount != previous.itemToSellAmount)
			{
				stream.WriteByte(16);
				ProtocolParser.WriteUInt64(stream, (ulong)instance.itemToSellAmount);
			}
			if (instance.currencyID != previous.currencyID)
			{
				stream.WriteByte(24);
				ProtocolParser.WriteUInt64(stream, (ulong)instance.currencyID);
			}
			if (instance.currencyAmountPerItem != previous.currencyAmountPerItem)
			{
				stream.WriteByte(32);
				ProtocolParser.WriteUInt64(stream, (ulong)instance.currencyAmountPerItem);
			}
			if (instance.inStock != previous.inStock)
			{
				stream.WriteByte(40);
				ProtocolParser.WriteUInt64(stream, (ulong)instance.inStock);
			}
			stream.WriteByte(48);
			ProtocolParser.WriteBool(stream, instance.currencyIsBP);
			stream.WriteByte(56);
			ProtocolParser.WriteBool(stream, instance.itemToSellIsBP);
			if (instance.itemCondition != previous.itemCondition)
			{
				stream.WriteByte(69);
				ProtocolParser.WriteSingle(stream, instance.itemCondition);
			}
			if (instance.itemConditionMax != previous.itemConditionMax)
			{
				stream.WriteByte(77);
				ProtocolParser.WriteSingle(stream, instance.itemConditionMax);
			}
			if (instance.instanceData != previous.instanceData)
			{
				stream.WriteByte(80);
				ProtocolParser.WriteUInt64(stream, (ulong)instance.instanceData);
			}
			if (instance.attachmentsList != null)
			{
				for (int i = 0; i < instance.attachmentsList.Count; i++)
				{
					int num = instance.attachmentsList[i];
					stream.WriteByte(88);
					ProtocolParser.WriteUInt64(stream, (ulong)num);
				}
			}
			if (instance.totalAttachmentSlots != previous.totalAttachmentSlots)
			{
				stream.WriteByte(96);
				ProtocolParser.WriteUInt64(stream, (ulong)instance.totalAttachmentSlots);
			}
			if (instance.priceMultiplier != previous.priceMultiplier)
			{
				stream.WriteByte(109);
				ProtocolParser.WriteSingle(stream, instance.priceMultiplier);
			}
			if (instance.ammoType != previous.ammoType)
			{
				stream.WriteByte(112);
				ProtocolParser.WriteUInt64(stream, (ulong)instance.ammoType);
			}
			if (instance.ammoCount != previous.ammoCount)
			{
				stream.WriteByte(120);
				ProtocolParser.WriteUInt64(stream, (ulong)instance.ammoCount);
			}
			if (instance.receivedQuantityMultiplier != previous.receivedQuantityMultiplier)
			{
				stream.WriteByte(133);
				stream.WriteByte(1);
				ProtocolParser.WriteSingle(stream, instance.receivedQuantityMultiplier);
			}
			Pool.FreeUnmanaged(ref obj);
		}

		public static void Serialize(Stream stream, SellOrder instance)
		{
			MemoryStream obj = Pool.Get<MemoryStream>();
			if (instance.itemToSellID != 0)
			{
				stream.WriteByte(8);
				ProtocolParser.WriteUInt64(stream, (ulong)instance.itemToSellID);
			}
			if (instance.itemToSellAmount != 0)
			{
				stream.WriteByte(16);
				ProtocolParser.WriteUInt64(stream, (ulong)instance.itemToSellAmount);
			}
			if (instance.currencyID != 0)
			{
				stream.WriteByte(24);
				ProtocolParser.WriteUInt64(stream, (ulong)instance.currencyID);
			}
			if (instance.currencyAmountPerItem != 0)
			{
				stream.WriteByte(32);
				ProtocolParser.WriteUInt64(stream, (ulong)instance.currencyAmountPerItem);
			}
			if (instance.inStock != 0)
			{
				stream.WriteByte(40);
				ProtocolParser.WriteUInt64(stream, (ulong)instance.inStock);
			}
			if (instance.currencyIsBP)
			{
				stream.WriteByte(48);
				ProtocolParser.WriteBool(stream, instance.currencyIsBP);
			}
			if (instance.itemToSellIsBP)
			{
				stream.WriteByte(56);
				ProtocolParser.WriteBool(stream, instance.itemToSellIsBP);
			}
			if (instance.itemCondition != 0f)
			{
				stream.WriteByte(69);
				ProtocolParser.WriteSingle(stream, instance.itemCondition);
			}
			if (instance.itemConditionMax != 0f)
			{
				stream.WriteByte(77);
				ProtocolParser.WriteSingle(stream, instance.itemConditionMax);
			}
			if (instance.instanceData != 0)
			{
				stream.WriteByte(80);
				ProtocolParser.WriteUInt64(stream, (ulong)instance.instanceData);
			}
			if (instance.attachmentsList != null)
			{
				for (int i = 0; i < instance.attachmentsList.Count; i++)
				{
					int num = instance.attachmentsList[i];
					stream.WriteByte(88);
					ProtocolParser.WriteUInt64(stream, (ulong)num);
				}
			}
			if (instance.totalAttachmentSlots != 0)
			{
				stream.WriteByte(96);
				ProtocolParser.WriteUInt64(stream, (ulong)instance.totalAttachmentSlots);
			}
			if (instance.priceMultiplier != 0f)
			{
				stream.WriteByte(109);
				ProtocolParser.WriteSingle(stream, instance.priceMultiplier);
			}
			if (instance.ammoType != 0)
			{
				stream.WriteByte(112);
				ProtocolParser.WriteUInt64(stream, (ulong)instance.ammoType);
			}
			if (instance.ammoCount != 0)
			{
				stream.WriteByte(120);
				ProtocolParser.WriteUInt64(stream, (ulong)instance.ammoCount);
			}
			if (instance.receivedQuantityMultiplier != 0f)
			{
				stream.WriteByte(133);
				stream.WriteByte(1);
				ProtocolParser.WriteSingle(stream, instance.receivedQuantityMultiplier);
			}
			Pool.FreeUnmanaged(ref obj);
		}

		public byte[] ToProtoBytes()
		{
			return SerializeToBytes(this);
		}

		public void ToProto(Stream stream)
		{
			Serialize(stream, this);
		}

		public static byte[] SerializeToBytes(SellOrder instance)
		{
			using MemoryStream memoryStream = new MemoryStream();
			Serialize(memoryStream, instance);
			return memoryStream.ToArray();
		}

		public static void SerializeLengthDelimited(Stream stream, SellOrder instance)
		{
			byte[] array = SerializeToBytes(instance);
			ProtocolParser.WriteUInt32(stream, (uint)array.Length);
			stream.Write(array, 0, array.Length);
		}

		public void InspectUids(UidInspector<ulong> action)
		{
		}
	}

	public class SellOrderContainer : IDisposable, Pool.IPooled, IProto
	{
		[NonSerialized]
		public List<SellOrder> sellOrders;

		public bool ShouldPool = true;

		private bool _disposed;

		public static void ResetToPool(SellOrderContainer instance)
		{
			if (!instance.ShouldPool)
			{
				return;
			}
			if (instance.sellOrders != null)
			{
				for (int i = 0; i < instance.sellOrders.Count; i++)
				{
					if (instance.sellOrders[i] != null)
					{
						instance.sellOrders[i].ResetToPool();
						instance.sellOrders[i] = null;
					}
				}
				List<SellOrder> obj = instance.sellOrders;
				Pool.Free(ref obj, freeElements: false);
				instance.sellOrders = obj;
			}
			Pool.Free(ref instance);
		}

		public void ResetToPool()
		{
			ResetToPool(this);
		}

		public virtual void Dispose()
		{
			if (!ShouldPool)
			{
				throw new Exception("Trying to dispose SellOrderContainer with ShouldPool set to false!");
			}
			if (!_disposed)
			{
				ResetToPool();
				_disposed = true;
			}
		}

		public virtual void EnterPool()
		{
			_disposed = true;
		}

		public virtual void LeavePool()
		{
			_disposed = false;
		}

		public void CopyTo(SellOrderContainer instance)
		{
			if (sellOrders != null)
			{
				instance.sellOrders = Pool.Get<List<SellOrder>>();
				for (int i = 0; i < sellOrders.Count; i++)
				{
					SellOrder item = sellOrders[i].Copy();
					instance.sellOrders.Add(item);
				}
			}
			else
			{
				instance.sellOrders = null;
			}
		}

		public SellOrderContainer Copy()
		{
			SellOrderContainer sellOrderContainer = Pool.Get<SellOrderContainer>();
			CopyTo(sellOrderContainer);
			return sellOrderContainer;
		}

		public static SellOrderContainer Deserialize(Stream stream)
		{
			SellOrderContainer sellOrderContainer = Pool.Get<SellOrderContainer>();
			Deserialize(stream, sellOrderContainer, isDelta: false);
			return sellOrderContainer;
		}

		public static SellOrderContainer DeserializeLengthDelimited(Stream stream)
		{
			SellOrderContainer sellOrderContainer = Pool.Get<SellOrderContainer>();
			DeserializeLengthDelimited(stream, sellOrderContainer, isDelta: false);
			return sellOrderContainer;
		}

		public static SellOrderContainer DeserializeLength(Stream stream, int length)
		{
			SellOrderContainer sellOrderContainer = Pool.Get<SellOrderContainer>();
			DeserializeLength(stream, length, sellOrderContainer, isDelta: false);
			return sellOrderContainer;
		}

		public static SellOrderContainer Deserialize(byte[] buffer)
		{
			SellOrderContainer sellOrderContainer = Pool.Get<SellOrderContainer>();
			using MemoryStream stream = new MemoryStream(buffer);
			Deserialize(stream, sellOrderContainer, isDelta: false);
			return sellOrderContainer;
		}

		public void FromProto(Stream stream, bool isDelta = false)
		{
			Deserialize(stream, this, isDelta);
		}

		public virtual void WriteToStream(Stream stream)
		{
			Serialize(stream, this);
		}

		public virtual void WriteToStreamDelta(Stream stream, SellOrderContainer previous)
		{
			if (previous == null)
			{
				Serialize(stream, this);
			}
			else
			{
				SerializeDelta(stream, this, previous);
			}
		}

		public virtual void ReadFromStream(Stream stream, int size, bool isDelta = false)
		{
			DeserializeLength(stream, size, this, isDelta);
		}

		public static SellOrderContainer Deserialize(byte[] buffer, SellOrderContainer instance, bool isDelta = false)
		{
			using MemoryStream stream = new MemoryStream(buffer);
			Deserialize(stream, instance, isDelta);
			return instance;
		}

		public static SellOrderContainer Deserialize(Stream stream, SellOrderContainer instance, bool isDelta)
		{
			if (!isDelta && instance.sellOrders == null)
			{
				instance.sellOrders = Pool.Get<List<SellOrder>>();
			}
			while (true)
			{
				int num = stream.ReadByte();
				switch (num)
				{
				case 10:
					instance.sellOrders.Add(SellOrder.DeserializeLengthDelimited(stream));
					continue;
				case -1:
					return instance;
				}
				Key key = ProtocolParser.ReadKey((byte)num, stream);
				if (key.Field == 0)
				{
					throw new ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
				}
				ProtocolParser.SkipKey(stream, key);
			}
		}

		public static SellOrderContainer DeserializeLengthDelimited(Stream stream, SellOrderContainer instance, bool isDelta)
		{
			if (!isDelta && instance.sellOrders == null)
			{
				instance.sellOrders = Pool.Get<List<SellOrder>>();
			}
			long num = ProtocolParser.ReadUInt32(stream);
			num += stream.Position;
			while (stream.Position < num)
			{
				int num2 = stream.ReadByte();
				switch (num2)
				{
				case -1:
					throw new EndOfStreamException();
				case 10:
					instance.sellOrders.Add(SellOrder.DeserializeLengthDelimited(stream));
					continue;
				}
				Key key = ProtocolParser.ReadKey((byte)num2, stream);
				if (key.Field == 0)
				{
					throw new ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
				}
				ProtocolParser.SkipKey(stream, key);
			}
			if (stream.Position != num)
			{
				throw new ProtocolBufferException("Read past max limit");
			}
			return instance;
		}

		public static SellOrderContainer DeserializeLength(Stream stream, int length, SellOrderContainer instance, bool isDelta)
		{
			if (!isDelta && instance.sellOrders == null)
			{
				instance.sellOrders = Pool.Get<List<SellOrder>>();
			}
			long num = stream.Position + length;
			while (stream.Position < num)
			{
				int num2 = stream.ReadByte();
				switch (num2)
				{
				case -1:
					throw new EndOfStreamException();
				case 10:
					instance.sellOrders.Add(SellOrder.DeserializeLengthDelimited(stream));
					continue;
				}
				Key key = ProtocolParser.ReadKey((byte)num2, stream);
				if (key.Field == 0)
				{
					throw new ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
				}
				ProtocolParser.SkipKey(stream, key);
			}
			if (stream.Position != num)
			{
				throw new ProtocolBufferException("Read past max limit");
			}
			return instance;
		}

		public static void SerializeDelta(Stream stream, SellOrderContainer instance, SellOrderContainer previous)
		{
			MemoryStream obj = Pool.Get<MemoryStream>();
			if (instance.sellOrders != null)
			{
				for (int i = 0; i < instance.sellOrders.Count; i++)
				{
					SellOrder sellOrder = instance.sellOrders[i];
					stream.WriteByte(10);
					obj.SetLength(0L);
					SellOrder.SerializeDelta(obj, sellOrder, sellOrder);
					uint num = (uint)obj.Length;
					ProtocolParser.WriteUInt32(stream, num);
					stream.Write(obj.GetBuffer(), 0, (int)num);
				}
			}
			Pool.FreeUnmanaged(ref obj);
		}

		public static void Serialize(Stream stream, SellOrderContainer instance)
		{
			MemoryStream obj = Pool.Get<MemoryStream>();
			if (instance.sellOrders != null)
			{
				for (int i = 0; i < instance.sellOrders.Count; i++)
				{
					SellOrder instance2 = instance.sellOrders[i];
					stream.WriteByte(10);
					obj.SetLength(0L);
					SellOrder.Serialize(obj, instance2);
					uint num = (uint)obj.Length;
					ProtocolParser.WriteUInt32(stream, num);
					stream.Write(obj.GetBuffer(), 0, (int)num);
				}
			}
			Pool.FreeUnmanaged(ref obj);
		}

		public byte[] ToProtoBytes()
		{
			return SerializeToBytes(this);
		}

		public void ToProto(Stream stream)
		{
			Serialize(stream, this);
		}

		public static byte[] SerializeToBytes(SellOrderContainer instance)
		{
			using MemoryStream memoryStream = new MemoryStream();
			Serialize(memoryStream, instance);
			return memoryStream.ToArray();
		}

		public static void SerializeLengthDelimited(Stream stream, SellOrderContainer instance)
		{
			byte[] array = SerializeToBytes(instance);
			ProtocolParser.WriteUInt32(stream, (uint)array.Length);
			stream.Write(array, 0, array.Length);
		}

		public void InspectUids(UidInspector<ulong> action)
		{
			if (sellOrders != null)
			{
				for (int i = 0; i < sellOrders.Count; i++)
				{
					sellOrders[i]?.InspectUids(action);
				}
			}
		}
	}

	[NonSerialized]
	public SellOrderContainer sellOrderContainer;

	[NonSerialized]
	public string shopName;

	[NonSerialized]
	public int vmoIndex;

	[NonSerialized]
	public NetworkableId networkID;

	[NonSerialized]
	public string translationToken;

	[NonSerialized]
	public ulong nameLastEditedBy;

	public bool ShouldPool = true;

	private bool _disposed;

	public static void ResetToPool(VendingMachine instance)
	{
		if (instance.ShouldPool)
		{
			if (instance.sellOrderContainer != null)
			{
				instance.sellOrderContainer.ResetToPool();
				instance.sellOrderContainer = null;
			}
			instance.shopName = string.Empty;
			instance.vmoIndex = 0;
			instance.networkID = default(NetworkableId);
			instance.translationToken = string.Empty;
			instance.nameLastEditedBy = 0uL;
			Pool.Free(ref instance);
		}
	}

	public void ResetToPool()
	{
		ResetToPool(this);
	}

	public virtual void Dispose()
	{
		if (!ShouldPool)
		{
			throw new Exception("Trying to dispose VendingMachine with ShouldPool set to false!");
		}
		if (!_disposed)
		{
			ResetToPool();
			_disposed = true;
		}
	}

	public virtual void EnterPool()
	{
		_disposed = true;
	}

	public virtual void LeavePool()
	{
		_disposed = false;
	}

	public void CopyTo(VendingMachine instance)
	{
		if (sellOrderContainer != null)
		{
			if (instance.sellOrderContainer == null)
			{
				instance.sellOrderContainer = sellOrderContainer.Copy();
			}
			else
			{
				sellOrderContainer.CopyTo(instance.sellOrderContainer);
			}
		}
		else
		{
			instance.sellOrderContainer = null;
		}
		instance.shopName = shopName;
		instance.vmoIndex = vmoIndex;
		instance.networkID = networkID;
		instance.translationToken = translationToken;
		instance.nameLastEditedBy = nameLastEditedBy;
	}

	public VendingMachine Copy()
	{
		VendingMachine vendingMachine = Pool.Get<VendingMachine>();
		CopyTo(vendingMachine);
		return vendingMachine;
	}

	public static VendingMachine Deserialize(Stream stream)
	{
		VendingMachine vendingMachine = Pool.Get<VendingMachine>();
		Deserialize(stream, vendingMachine, isDelta: false);
		return vendingMachine;
	}

	public static VendingMachine DeserializeLengthDelimited(Stream stream)
	{
		VendingMachine vendingMachine = Pool.Get<VendingMachine>();
		DeserializeLengthDelimited(stream, vendingMachine, isDelta: false);
		return vendingMachine;
	}

	public static VendingMachine DeserializeLength(Stream stream, int length)
	{
		VendingMachine vendingMachine = Pool.Get<VendingMachine>();
		DeserializeLength(stream, length, vendingMachine, isDelta: false);
		return vendingMachine;
	}

	public static VendingMachine Deserialize(byte[] buffer)
	{
		VendingMachine vendingMachine = Pool.Get<VendingMachine>();
		using MemoryStream stream = new MemoryStream(buffer);
		Deserialize(stream, vendingMachine, isDelta: false);
		return vendingMachine;
	}

	public void FromProto(Stream stream, bool isDelta = false)
	{
		Deserialize(stream, this, isDelta);
	}

	public virtual void WriteToStream(Stream stream)
	{
		Serialize(stream, this);
	}

	public virtual void WriteToStreamDelta(Stream stream, VendingMachine previous)
	{
		if (previous == null)
		{
			Serialize(stream, this);
		}
		else
		{
			SerializeDelta(stream, this, previous);
		}
	}

	public virtual void ReadFromStream(Stream stream, int size, bool isDelta = false)
	{
		DeserializeLength(stream, size, this, isDelta);
	}

	public static VendingMachine Deserialize(byte[] buffer, VendingMachine instance, bool isDelta = false)
	{
		using MemoryStream stream = new MemoryStream(buffer);
		Deserialize(stream, instance, isDelta);
		return instance;
	}

	public static VendingMachine Deserialize(Stream stream, VendingMachine instance, bool isDelta)
	{
		while (true)
		{
			int num = stream.ReadByte();
			switch (num)
			{
			case 10:
				if (instance.sellOrderContainer == null)
				{
					instance.sellOrderContainer = SellOrderContainer.DeserializeLengthDelimited(stream);
				}
				else
				{
					SellOrderContainer.DeserializeLengthDelimited(stream, instance.sellOrderContainer, isDelta);
				}
				continue;
			case 18:
				instance.shopName = ProtocolParser.ReadString(stream);
				continue;
			case 24:
				instance.vmoIndex = (int)ProtocolParser.ReadUInt64(stream);
				continue;
			case 32:
				instance.networkID = new NetworkableId(ProtocolParser.ReadUInt64(stream));
				continue;
			case 42:
				instance.translationToken = ProtocolParser.ReadString(stream);
				continue;
			case 48:
				instance.nameLastEditedBy = ProtocolParser.ReadUInt64(stream);
				continue;
			case -1:
				return instance;
			}
			Key key = ProtocolParser.ReadKey((byte)num, stream);
			if (key.Field == 0)
			{
				throw new ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
			}
			ProtocolParser.SkipKey(stream, key);
		}
	}

	public static VendingMachine DeserializeLengthDelimited(Stream stream, VendingMachine instance, bool isDelta)
	{
		long num = ProtocolParser.ReadUInt32(stream);
		num += stream.Position;
		while (stream.Position < num)
		{
			int num2 = stream.ReadByte();
			switch (num2)
			{
			case -1:
				throw new EndOfStreamException();
			case 10:
				if (instance.sellOrderContainer == null)
				{
					instance.sellOrderContainer = SellOrderContainer.DeserializeLengthDelimited(stream);
				}
				else
				{
					SellOrderContainer.DeserializeLengthDelimited(stream, instance.sellOrderContainer, isDelta);
				}
				continue;
			case 18:
				instance.shopName = ProtocolParser.ReadString(stream);
				continue;
			case 24:
				instance.vmoIndex = (int)ProtocolParser.ReadUInt64(stream);
				continue;
			case 32:
				instance.networkID = new NetworkableId(ProtocolParser.ReadUInt64(stream));
				continue;
			case 42:
				instance.translationToken = ProtocolParser.ReadString(stream);
				continue;
			case 48:
				instance.nameLastEditedBy = ProtocolParser.ReadUInt64(stream);
				continue;
			}
			Key key = ProtocolParser.ReadKey((byte)num2, stream);
			if (key.Field == 0)
			{
				throw new ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
			}
			ProtocolParser.SkipKey(stream, key);
		}
		if (stream.Position != num)
		{
			throw new ProtocolBufferException("Read past max limit");
		}
		return instance;
	}

	public static VendingMachine DeserializeLength(Stream stream, int length, VendingMachine instance, bool isDelta)
	{
		long num = stream.Position + length;
		while (stream.Position < num)
		{
			int num2 = stream.ReadByte();
			switch (num2)
			{
			case -1:
				throw new EndOfStreamException();
			case 10:
				if (instance.sellOrderContainer == null)
				{
					instance.sellOrderContainer = SellOrderContainer.DeserializeLengthDelimited(stream);
				}
				else
				{
					SellOrderContainer.DeserializeLengthDelimited(stream, instance.sellOrderContainer, isDelta);
				}
				continue;
			case 18:
				instance.shopName = ProtocolParser.ReadString(stream);
				continue;
			case 24:
				instance.vmoIndex = (int)ProtocolParser.ReadUInt64(stream);
				continue;
			case 32:
				instance.networkID = new NetworkableId(ProtocolParser.ReadUInt64(stream));
				continue;
			case 42:
				instance.translationToken = ProtocolParser.ReadString(stream);
				continue;
			case 48:
				instance.nameLastEditedBy = ProtocolParser.ReadUInt64(stream);
				continue;
			}
			Key key = ProtocolParser.ReadKey((byte)num2, stream);
			if (key.Field == 0)
			{
				throw new ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
			}
			ProtocolParser.SkipKey(stream, key);
		}
		if (stream.Position != num)
		{
			throw new ProtocolBufferException("Read past max limit");
		}
		return instance;
	}

	public static void SerializeDelta(Stream stream, VendingMachine instance, VendingMachine previous)
	{
		MemoryStream obj = Pool.Get<MemoryStream>();
		if (instance.sellOrderContainer != null)
		{
			stream.WriteByte(10);
			obj.SetLength(0L);
			SellOrderContainer.SerializeDelta(obj, instance.sellOrderContainer, previous.sellOrderContainer);
			uint num = (uint)obj.Length;
			ProtocolParser.WriteUInt32(stream, num);
			stream.Write(obj.GetBuffer(), 0, (int)num);
		}
		if (instance.shopName != null && instance.shopName != previous.shopName)
		{
			stream.WriteByte(18);
			ProtocolParser.WriteString(stream, instance.shopName);
		}
		if (instance.vmoIndex != previous.vmoIndex)
		{
			stream.WriteByte(24);
			ProtocolParser.WriteUInt64(stream, (ulong)instance.vmoIndex);
		}
		stream.WriteByte(32);
		ProtocolParser.WriteUInt64(stream, instance.networkID.Value);
		if (instance.translationToken != null && instance.translationToken != previous.translationToken)
		{
			stream.WriteByte(42);
			ProtocolParser.WriteString(stream, instance.translationToken);
		}
		if (instance.nameLastEditedBy != previous.nameLastEditedBy)
		{
			stream.WriteByte(48);
			ProtocolParser.WriteUInt64(stream, instance.nameLastEditedBy);
		}
		Pool.FreeUnmanaged(ref obj);
	}

	public static void Serialize(Stream stream, VendingMachine instance)
	{
		MemoryStream obj = Pool.Get<MemoryStream>();
		if (instance.sellOrderContainer != null)
		{
			stream.WriteByte(10);
			obj.SetLength(0L);
			SellOrderContainer.Serialize(obj, instance.sellOrderContainer);
			uint num = (uint)obj.Length;
			ProtocolParser.WriteUInt32(stream, num);
			stream.Write(obj.GetBuffer(), 0, (int)num);
		}
		if (instance.shopName != null)
		{
			stream.WriteByte(18);
			ProtocolParser.WriteString(stream, instance.shopName);
		}
		if (instance.vmoIndex != 0)
		{
			stream.WriteByte(24);
			ProtocolParser.WriteUInt64(stream, (ulong)instance.vmoIndex);
		}
		if (instance.networkID != default(NetworkableId))
		{
			stream.WriteByte(32);
			ProtocolParser.WriteUInt64(stream, instance.networkID.Value);
		}
		if (instance.translationToken != null)
		{
			stream.WriteByte(42);
			ProtocolParser.WriteString(stream, instance.translationToken);
		}
		if (instance.nameLastEditedBy != 0L)
		{
			stream.WriteByte(48);
			ProtocolParser.WriteUInt64(stream, instance.nameLastEditedBy);
		}
		Pool.FreeUnmanaged(ref obj);
	}

	public byte[] ToProtoBytes()
	{
		return SerializeToBytes(this);
	}

	public void ToProto(Stream stream)
	{
		Serialize(stream, this);
	}

	public static byte[] SerializeToBytes(VendingMachine instance)
	{
		using MemoryStream memoryStream = new MemoryStream();
		Serialize(memoryStream, instance);
		return memoryStream.ToArray();
	}

	public static void SerializeLengthDelimited(Stream stream, VendingMachine instance)
	{
		byte[] array = SerializeToBytes(instance);
		ProtocolParser.WriteUInt32(stream, (uint)array.Length);
		stream.Write(array, 0, array.Length);
	}

	public void InspectUids(UidInspector<ulong> action)
	{
		sellOrderContainer?.InspectUids(action);
		action(UidType.NetworkableId, ref networkID.Value);
	}
}
