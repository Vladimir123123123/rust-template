using System;
using System.Collections.Generic;
using System.IO;
using Facepunch;
using ProtoBuf;
using SilentOrbit.ProtocolBuffers;

public class WorldMessage : IDisposable, Pool.IPooled, IProto
{
	public enum MessageType
	{
		Request = 1,
		Receive,
		Done
	}

	[NonSerialized]
	public MessageType status;

	[NonSerialized]
	public List<PrefabData> prefabs;

	[NonSerialized]
	public List<PathData> paths;

	public bool ShouldPool = true;

	private bool _disposed;

	public static void ResetToPool(WorldMessage instance)
	{
		if (!instance.ShouldPool)
		{
			return;
		}
		instance.status = (MessageType)0;
		if (instance.prefabs != null)
		{
			for (int i = 0; i < instance.prefabs.Count; i++)
			{
				if (instance.prefabs[i] != null)
				{
					instance.prefabs[i].ResetToPool();
					instance.prefabs[i] = null;
				}
			}
			List<PrefabData> obj = instance.prefabs;
			Pool.Free(ref obj, freeElements: false);
			instance.prefabs = obj;
		}
		if (instance.paths != null)
		{
			for (int j = 0; j < instance.paths.Count; j++)
			{
				if (instance.paths[j] != null)
				{
					instance.paths[j].ResetToPool();
					instance.paths[j] = null;
				}
			}
			List<PathData> obj2 = instance.paths;
			Pool.Free(ref obj2, freeElements: false);
			instance.paths = obj2;
		}
		Pool.Free(ref instance);
	}

	public void ResetToPool()
	{
		ResetToPool(this);
	}

	public virtual void Dispose()
	{
		if (!ShouldPool)
		{
			throw new Exception("Trying to dispose WorldMessage with ShouldPool set to false!");
		}
		if (!_disposed)
		{
			ResetToPool();
			_disposed = true;
		}
	}

	public virtual void EnterPool()
	{
		_disposed = true;
	}

	public virtual void LeavePool()
	{
		_disposed = false;
	}

	public void CopyTo(WorldMessage instance)
	{
		instance.status = status;
		if (prefabs != null)
		{
			instance.prefabs = Pool.Get<List<PrefabData>>();
			for (int i = 0; i < prefabs.Count; i++)
			{
				PrefabData item = prefabs[i].Copy();
				instance.prefabs.Add(item);
			}
		}
		else
		{
			instance.prefabs = null;
		}
		if (paths != null)
		{
			instance.paths = Pool.Get<List<PathData>>();
			for (int j = 0; j < paths.Count; j++)
			{
				PathData item2 = paths[j].Copy();
				instance.paths.Add(item2);
			}
		}
		else
		{
			instance.paths = null;
		}
	}

	public WorldMessage Copy()
	{
		WorldMessage worldMessage = Pool.Get<WorldMessage>();
		CopyTo(worldMessage);
		return worldMessage;
	}

	public static WorldMessage Deserialize(Stream stream)
	{
		WorldMessage worldMessage = Pool.Get<WorldMessage>();
		Deserialize(stream, worldMessage, isDelta: false);
		return worldMessage;
	}

	public static WorldMessage DeserializeLengthDelimited(Stream stream)
	{
		WorldMessage worldMessage = Pool.Get<WorldMessage>();
		DeserializeLengthDelimited(stream, worldMessage, isDelta: false);
		return worldMessage;
	}

	public static WorldMessage DeserializeLength(Stream stream, int length)
	{
		WorldMessage worldMessage = Pool.Get<WorldMessage>();
		DeserializeLength(stream, length, worldMessage, isDelta: false);
		return worldMessage;
	}

	public static WorldMessage Deserialize(byte[] buffer)
	{
		WorldMessage worldMessage = Pool.Get<WorldMessage>();
		using MemoryStream stream = new MemoryStream(buffer);
		Deserialize(stream, worldMessage, isDelta: false);
		return worldMessage;
	}

	public void FromProto(Stream stream, bool isDelta = false)
	{
		Deserialize(stream, this, isDelta);
	}

	public virtual void WriteToStream(Stream stream)
	{
		Serialize(stream, this);
	}

	public virtual void WriteToStreamDelta(Stream stream, WorldMessage previous)
	{
		if (previous == null)
		{
			Serialize(stream, this);
		}
		else
		{
			SerializeDelta(stream, this, previous);
		}
	}

	public virtual void ReadFromStream(Stream stream, int size, bool isDelta = false)
	{
		DeserializeLength(stream, size, this, isDelta);
	}

	public static WorldMessage Deserialize(byte[] buffer, WorldMessage instance, bool isDelta = false)
	{
		using MemoryStream stream = new MemoryStream(buffer);
		Deserialize(stream, instance, isDelta);
		return instance;
	}

	public static WorldMessage Deserialize(Stream stream, WorldMessage instance, bool isDelta)
	{
		if (!isDelta)
		{
			if (instance.prefabs == null)
			{
				instance.prefabs = Pool.Get<List<PrefabData>>();
			}
			if (instance.paths == null)
			{
				instance.paths = Pool.Get<List<PathData>>();
			}
		}
		while (true)
		{
			int num = stream.ReadByte();
			switch (num)
			{
			case 8:
				instance.status = (MessageType)ProtocolParser.ReadUInt64(stream);
				continue;
			case 18:
				instance.prefabs.Add(PrefabData.DeserializeLengthDelimited(stream));
				continue;
			case 26:
				instance.paths.Add(PathData.DeserializeLengthDelimited(stream));
				continue;
			case -1:
				return instance;
			}
			Key key = ProtocolParser.ReadKey((byte)num, stream);
			if (key.Field == 0)
			{
				throw new ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
			}
			ProtocolParser.SkipKey(stream, key);
		}
	}

	public static WorldMessage DeserializeLengthDelimited(Stream stream, WorldMessage instance, bool isDelta)
	{
		if (!isDelta)
		{
			if (instance.prefabs == null)
			{
				instance.prefabs = Pool.Get<List<PrefabData>>();
			}
			if (instance.paths == null)
			{
				instance.paths = Pool.Get<List<PathData>>();
			}
		}
		long num = ProtocolParser.ReadUInt32(stream);
		num += stream.Position;
		while (stream.Position < num)
		{
			int num2 = stream.ReadByte();
			switch (num2)
			{
			case -1:
				throw new EndOfStreamException();
			case 8:
				instance.status = (MessageType)ProtocolParser.ReadUInt64(stream);
				continue;
			case 18:
				instance.prefabs.Add(PrefabData.DeserializeLengthDelimited(stream));
				continue;
			case 26:
				instance.paths.Add(PathData.DeserializeLengthDelimited(stream));
				continue;
			}
			Key key = ProtocolParser.ReadKey((byte)num2, stream);
			if (key.Field == 0)
			{
				throw new ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
			}
			ProtocolParser.SkipKey(stream, key);
		}
		if (stream.Position != num)
		{
			throw new ProtocolBufferException("Read past max limit");
		}
		return instance;
	}

	public static WorldMessage DeserializeLength(Stream stream, int length, WorldMessage instance, bool isDelta)
	{
		if (!isDelta)
		{
			if (instance.prefabs == null)
			{
				instance.prefabs = Pool.Get<List<PrefabData>>();
			}
			if (instance.paths == null)
			{
				instance.paths = Pool.Get<List<PathData>>();
			}
		}
		long num = stream.Position + length;
		while (stream.Position < num)
		{
			int num2 = stream.ReadByte();
			switch (num2)
			{
			case -1:
				throw new EndOfStreamException();
			case 8:
				instance.status = (MessageType)ProtocolParser.ReadUInt64(stream);
				continue;
			case 18:
				instance.prefabs.Add(PrefabData.DeserializeLengthDelimited(stream));
				continue;
			case 26:
				instance.paths.Add(PathData.DeserializeLengthDelimited(stream));
				continue;
			}
			Key key = ProtocolParser.ReadKey((byte)num2, stream);
			if (key.Field == 0)
			{
				throw new ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
			}
			ProtocolParser.SkipKey(stream, key);
		}
		if (stream.Position != num)
		{
			throw new ProtocolBufferException("Read past max limit");
		}
		return instance;
	}

	public static void SerializeDelta(Stream stream, WorldMessage instance, WorldMessage previous)
	{
		MemoryStream obj = Pool.Get<MemoryStream>();
		stream.WriteByte(8);
		ProtocolParser.WriteUInt64(stream, (ulong)instance.status);
		if (instance.prefabs != null)
		{
			for (int i = 0; i < instance.prefabs.Count; i++)
			{
				PrefabData prefabData = instance.prefabs[i];
				stream.WriteByte(18);
				obj.SetLength(0L);
				PrefabData.SerializeDelta(obj, prefabData, prefabData);
				uint num = (uint)obj.Length;
				ProtocolParser.WriteUInt32(stream, num);
				stream.Write(obj.GetBuffer(), 0, (int)num);
			}
		}
		if (instance.paths != null)
		{
			for (int j = 0; j < instance.paths.Count; j++)
			{
				PathData pathData = instance.paths[j];
				stream.WriteByte(26);
				obj.SetLength(0L);
				PathData.SerializeDelta(obj, pathData, pathData);
				uint num2 = (uint)obj.Length;
				ProtocolParser.WriteUInt32(stream, num2);
				stream.Write(obj.GetBuffer(), 0, (int)num2);
			}
		}
		Pool.FreeUnmanaged(ref obj);
	}

	public static void Serialize(Stream stream, WorldMessage instance)
	{
		MemoryStream obj = Pool.Get<MemoryStream>();
		stream.WriteByte(8);
		ProtocolParser.WriteUInt64(stream, (ulong)instance.status);
		if (instance.prefabs != null)
		{
			for (int i = 0; i < instance.prefabs.Count; i++)
			{
				PrefabData instance2 = instance.prefabs[i];
				stream.WriteByte(18);
				obj.SetLength(0L);
				PrefabData.Serialize(obj, instance2);
				uint num = (uint)obj.Length;
				ProtocolParser.WriteUInt32(stream, num);
				stream.Write(obj.GetBuffer(), 0, (int)num);
			}
		}
		if (instance.paths != null)
		{
			for (int j = 0; j < instance.paths.Count; j++)
			{
				PathData instance3 = instance.paths[j];
				stream.WriteByte(26);
				obj.SetLength(0L);
				PathData.Serialize(obj, instance3);
				uint num2 = (uint)obj.Length;
				ProtocolParser.WriteUInt32(stream, num2);
				stream.Write(obj.GetBuffer(), 0, (int)num2);
			}
		}
		Pool.FreeUnmanaged(ref obj);
	}

	public byte[] ToProtoBytes()
	{
		return SerializeToBytes(this);
	}

	public void ToProto(Stream stream)
	{
		Serialize(stream, this);
	}

	public static byte[] SerializeToBytes(WorldMessage instance)
	{
		using MemoryStream memoryStream = new MemoryStream();
		Serialize(memoryStream, instance);
		return memoryStream.ToArray();
	}

	public static void SerializeLengthDelimited(Stream stream, WorldMessage instance)
	{
		byte[] array = SerializeToBytes(instance);
		ProtocolParser.WriteUInt32(stream, (uint)array.Length);
		stream.Write(array, 0, array.Length);
	}

	public void InspectUids(UidInspector<ulong> action)
	{
		if (prefabs != null)
		{
			for (int i = 0; i < prefabs.Count; i++)
			{
				prefabs[i]?.InspectUids(action);
			}
		}
		if (paths != null)
		{
			for (int j = 0; j < paths.Count; j++)
			{
				paths[j]?.InspectUids(action);
			}
		}
	}
}
