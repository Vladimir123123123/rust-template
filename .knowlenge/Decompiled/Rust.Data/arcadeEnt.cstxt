using System;
using System.IO;
using Facepunch;
using SilentOrbit.ProtocolBuffers;
using UnityEngine;

public class arcadeEnt : IDisposable, Pool.IPooled, IProto
{
	[NonSerialized]
	public uint id;

	[NonSerialized]
	public string name;

	[NonSerialized]
	public uint spriteID;

	[NonSerialized]
	public uint soundID;

	[NonSerialized]
	public bool visible;

	[NonSerialized]
	public Vector3 position;

	[NonSerialized]
	public Vector3 heading;

	[NonSerialized]
	public bool enabled;

	[NonSerialized]
	public Vector3 scale;

	[NonSerialized]
	public Vector3 colliderScale;

	[NonSerialized]
	public float alpha;

	[NonSerialized]
	public uint prefabID;

	[NonSerialized]
	public uint parentID;

	public bool ShouldPool = true;

	private bool _disposed;

	public static void ResetToPool(arcadeEnt instance)
	{
		if (instance.ShouldPool)
		{
			instance.id = 0u;
			instance.name = string.Empty;
			instance.spriteID = 0u;
			instance.soundID = 0u;
			instance.visible = false;
			instance.position = default(Vector3);
			instance.heading = default(Vector3);
			instance.enabled = false;
			instance.scale = default(Vector3);
			instance.colliderScale = default(Vector3);
			instance.alpha = 0f;
			instance.prefabID = 0u;
			instance.parentID = 0u;
			Pool.Free(ref instance);
		}
	}

	public void ResetToPool()
	{
		ResetToPool(this);
	}

	public virtual void Dispose()
	{
		if (!ShouldPool)
		{
			throw new Exception("Trying to dispose arcadeEnt with ShouldPool set to false!");
		}
		if (!_disposed)
		{
			ResetToPool();
			_disposed = true;
		}
	}

	public virtual void EnterPool()
	{
		_disposed = true;
	}

	public virtual void LeavePool()
	{
		_disposed = false;
	}

	public void CopyTo(arcadeEnt instance)
	{
		instance.id = id;
		instance.name = name;
		instance.spriteID = spriteID;
		instance.soundID = soundID;
		instance.visible = visible;
		instance.position = position;
		instance.heading = heading;
		instance.enabled = enabled;
		instance.scale = scale;
		instance.colliderScale = colliderScale;
		instance.alpha = alpha;
		instance.prefabID = prefabID;
		instance.parentID = parentID;
	}

	public arcadeEnt Copy()
	{
		arcadeEnt arcadeEnt = Pool.Get<arcadeEnt>();
		CopyTo(arcadeEnt);
		return arcadeEnt;
	}

	public static arcadeEnt Deserialize(Stream stream)
	{
		arcadeEnt arcadeEnt = Pool.Get<arcadeEnt>();
		Deserialize(stream, arcadeEnt, isDelta: false);
		return arcadeEnt;
	}

	public static arcadeEnt DeserializeLengthDelimited(Stream stream)
	{
		arcadeEnt arcadeEnt = Pool.Get<arcadeEnt>();
		DeserializeLengthDelimited(stream, arcadeEnt, isDelta: false);
		return arcadeEnt;
	}

	public static arcadeEnt DeserializeLength(Stream stream, int length)
	{
		arcadeEnt arcadeEnt = Pool.Get<arcadeEnt>();
		DeserializeLength(stream, length, arcadeEnt, isDelta: false);
		return arcadeEnt;
	}

	public static arcadeEnt Deserialize(byte[] buffer)
	{
		arcadeEnt arcadeEnt = Pool.Get<arcadeEnt>();
		using MemoryStream stream = new MemoryStream(buffer);
		Deserialize(stream, arcadeEnt, isDelta: false);
		return arcadeEnt;
	}

	public void FromProto(Stream stream, bool isDelta = false)
	{
		Deserialize(stream, this, isDelta);
	}

	public virtual void WriteToStream(Stream stream)
	{
		Serialize(stream, this);
	}

	public virtual void WriteToStreamDelta(Stream stream, arcadeEnt previous)
	{
		if (previous == null)
		{
			Serialize(stream, this);
		}
		else
		{
			SerializeDelta(stream, this, previous);
		}
	}

	public virtual void ReadFromStream(Stream stream, int size, bool isDelta = false)
	{
		DeserializeLength(stream, size, this, isDelta);
	}

	public static arcadeEnt Deserialize(byte[] buffer, arcadeEnt instance, bool isDelta = false)
	{
		using MemoryStream stream = new MemoryStream(buffer);
		Deserialize(stream, instance, isDelta);
		return instance;
	}

	public static arcadeEnt Deserialize(Stream stream, arcadeEnt instance, bool isDelta)
	{
		while (true)
		{
			int num = stream.ReadByte();
			switch (num)
			{
			case 8:
				instance.id = ProtocolParser.ReadUInt32(stream);
				continue;
			case 18:
				instance.name = ProtocolParser.ReadString(stream);
				continue;
			case 24:
				instance.spriteID = ProtocolParser.ReadUInt32(stream);
				continue;
			case 32:
				instance.soundID = ProtocolParser.ReadUInt32(stream);
				continue;
			case 40:
				instance.visible = ProtocolParser.ReadBool(stream);
				continue;
			case 50:
				Vector3Serialized.DeserializeLengthDelimited(stream, ref instance.position, isDelta);
				continue;
			case 58:
				Vector3Serialized.DeserializeLengthDelimited(stream, ref instance.heading, isDelta);
				continue;
			case 64:
				instance.enabled = ProtocolParser.ReadBool(stream);
				continue;
			case 74:
				Vector3Serialized.DeserializeLengthDelimited(stream, ref instance.scale, isDelta);
				continue;
			case 82:
				Vector3Serialized.DeserializeLengthDelimited(stream, ref instance.colliderScale, isDelta);
				continue;
			case 93:
				instance.alpha = ProtocolParser.ReadSingle(stream);
				continue;
			case 96:
				instance.prefabID = ProtocolParser.ReadUInt32(stream);
				continue;
			case 104:
				instance.parentID = ProtocolParser.ReadUInt32(stream);
				continue;
			case -1:
				return instance;
			}
			Key key = ProtocolParser.ReadKey((byte)num, stream);
			if (key.Field == 0)
			{
				throw new ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
			}
			ProtocolParser.SkipKey(stream, key);
		}
	}

	public static arcadeEnt DeserializeLengthDelimited(Stream stream, arcadeEnt instance, bool isDelta)
	{
		long num = ProtocolParser.ReadUInt32(stream);
		num += stream.Position;
		while (stream.Position < num)
		{
			int num2 = stream.ReadByte();
			switch (num2)
			{
			case -1:
				throw new EndOfStreamException();
			case 8:
				instance.id = ProtocolParser.ReadUInt32(stream);
				continue;
			case 18:
				instance.name = ProtocolParser.ReadString(stream);
				continue;
			case 24:
				instance.spriteID = ProtocolParser.ReadUInt32(stream);
				continue;
			case 32:
				instance.soundID = ProtocolParser.ReadUInt32(stream);
				continue;
			case 40:
				instance.visible = ProtocolParser.ReadBool(stream);
				continue;
			case 50:
				Vector3Serialized.DeserializeLengthDelimited(stream, ref instance.position, isDelta);
				continue;
			case 58:
				Vector3Serialized.DeserializeLengthDelimited(stream, ref instance.heading, isDelta);
				continue;
			case 64:
				instance.enabled = ProtocolParser.ReadBool(stream);
				continue;
			case 74:
				Vector3Serialized.DeserializeLengthDelimited(stream, ref instance.scale, isDelta);
				continue;
			case 82:
				Vector3Serialized.DeserializeLengthDelimited(stream, ref instance.colliderScale, isDelta);
				continue;
			case 93:
				instance.alpha = ProtocolParser.ReadSingle(stream);
				continue;
			case 96:
				instance.prefabID = ProtocolParser.ReadUInt32(stream);
				continue;
			case 104:
				instance.parentID = ProtocolParser.ReadUInt32(stream);
				continue;
			}
			Key key = ProtocolParser.ReadKey((byte)num2, stream);
			if (key.Field == 0)
			{
				throw new ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
			}
			ProtocolParser.SkipKey(stream, key);
		}
		if (stream.Position != num)
		{
			throw new ProtocolBufferException("Read past max limit");
		}
		return instance;
	}

	public static arcadeEnt DeserializeLength(Stream stream, int length, arcadeEnt instance, bool isDelta)
	{
		long num = stream.Position + length;
		while (stream.Position < num)
		{
			int num2 = stream.ReadByte();
			switch (num2)
			{
			case -1:
				throw new EndOfStreamException();
			case 8:
				instance.id = ProtocolParser.ReadUInt32(stream);
				continue;
			case 18:
				instance.name = ProtocolParser.ReadString(stream);
				continue;
			case 24:
				instance.spriteID = ProtocolParser.ReadUInt32(stream);
				continue;
			case 32:
				instance.soundID = ProtocolParser.ReadUInt32(stream);
				continue;
			case 40:
				instance.visible = ProtocolParser.ReadBool(stream);
				continue;
			case 50:
				Vector3Serialized.DeserializeLengthDelimited(stream, ref instance.position, isDelta);
				continue;
			case 58:
				Vector3Serialized.DeserializeLengthDelimited(stream, ref instance.heading, isDelta);
				continue;
			case 64:
				instance.enabled = ProtocolParser.ReadBool(stream);
				continue;
			case 74:
				Vector3Serialized.DeserializeLengthDelimited(stream, ref instance.scale, isDelta);
				continue;
			case 82:
				Vector3Serialized.DeserializeLengthDelimited(stream, ref instance.colliderScale, isDelta);
				continue;
			case 93:
				instance.alpha = ProtocolParser.ReadSingle(stream);
				continue;
			case 96:
				instance.prefabID = ProtocolParser.ReadUInt32(stream);
				continue;
			case 104:
				instance.parentID = ProtocolParser.ReadUInt32(stream);
				continue;
			}
			Key key = ProtocolParser.ReadKey((byte)num2, stream);
			if (key.Field == 0)
			{
				throw new ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
			}
			ProtocolParser.SkipKey(stream, key);
		}
		if (stream.Position != num)
		{
			throw new ProtocolBufferException("Read past max limit");
		}
		return instance;
	}

	public static void SerializeDelta(Stream stream, arcadeEnt instance, arcadeEnt previous)
	{
		MemoryStream obj = Pool.Get<MemoryStream>();
		if (instance.id != previous.id)
		{
			stream.WriteByte(8);
			ProtocolParser.WriteUInt32(stream, instance.id);
		}
		if (instance.name != previous.name)
		{
			if (instance.name == null)
			{
				throw new ArgumentNullException("name", "Required by proto specification.");
			}
			stream.WriteByte(18);
			ProtocolParser.WriteString(stream, instance.name);
		}
		if (instance.spriteID != previous.spriteID)
		{
			stream.WriteByte(24);
			ProtocolParser.WriteUInt32(stream, instance.spriteID);
		}
		if (instance.soundID != previous.soundID)
		{
			stream.WriteByte(32);
			ProtocolParser.WriteUInt32(stream, instance.soundID);
		}
		stream.WriteByte(40);
		ProtocolParser.WriteBool(stream, instance.visible);
		if (instance.position != previous.position)
		{
			stream.WriteByte(50);
			obj.SetLength(0L);
			Vector3Serialized.SerializeDelta(obj, instance.position, previous.position);
			uint num = (uint)obj.Length;
			ProtocolParser.WriteUInt32(stream, num);
			stream.Write(obj.GetBuffer(), 0, (int)num);
		}
		if (instance.heading != previous.heading)
		{
			stream.WriteByte(58);
			obj.SetLength(0L);
			Vector3Serialized.SerializeDelta(obj, instance.heading, previous.heading);
			uint num2 = (uint)obj.Length;
			ProtocolParser.WriteUInt32(stream, num2);
			stream.Write(obj.GetBuffer(), 0, (int)num2);
		}
		stream.WriteByte(64);
		ProtocolParser.WriteBool(stream, instance.enabled);
		if (instance.scale != previous.scale)
		{
			stream.WriteByte(74);
			obj.SetLength(0L);
			Vector3Serialized.SerializeDelta(obj, instance.scale, previous.scale);
			uint num3 = (uint)obj.Length;
			ProtocolParser.WriteUInt32(stream, num3);
			stream.Write(obj.GetBuffer(), 0, (int)num3);
		}
		if (instance.colliderScale != previous.colliderScale)
		{
			stream.WriteByte(82);
			obj.SetLength(0L);
			Vector3Serialized.SerializeDelta(obj, instance.colliderScale, previous.colliderScale);
			uint num4 = (uint)obj.Length;
			ProtocolParser.WriteUInt32(stream, num4);
			stream.Write(obj.GetBuffer(), 0, (int)num4);
		}
		if (instance.alpha != previous.alpha)
		{
			stream.WriteByte(93);
			ProtocolParser.WriteSingle(stream, instance.alpha);
		}
		if (instance.prefabID != previous.prefabID)
		{
			stream.WriteByte(96);
			ProtocolParser.WriteUInt32(stream, instance.prefabID);
		}
		if (instance.parentID != previous.parentID)
		{
			stream.WriteByte(104);
			ProtocolParser.WriteUInt32(stream, instance.parentID);
		}
		Pool.FreeUnmanaged(ref obj);
	}

	public static void Serialize(Stream stream, arcadeEnt instance)
	{
		MemoryStream obj = Pool.Get<MemoryStream>();
		if (instance.id != 0)
		{
			stream.WriteByte(8);
			ProtocolParser.WriteUInt32(stream, instance.id);
		}
		if (instance.name == null)
		{
			throw new ArgumentNullException("name", "Required by proto specification.");
		}
		stream.WriteByte(18);
		ProtocolParser.WriteString(stream, instance.name);
		if (instance.spriteID != 0)
		{
			stream.WriteByte(24);
			ProtocolParser.WriteUInt32(stream, instance.spriteID);
		}
		if (instance.soundID != 0)
		{
			stream.WriteByte(32);
			ProtocolParser.WriteUInt32(stream, instance.soundID);
		}
		if (instance.visible)
		{
			stream.WriteByte(40);
			ProtocolParser.WriteBool(stream, instance.visible);
		}
		if (instance.position != default(Vector3))
		{
			stream.WriteByte(50);
			obj.SetLength(0L);
			Vector3Serialized.Serialize(obj, instance.position);
			uint num = (uint)obj.Length;
			ProtocolParser.WriteUInt32(stream, num);
			stream.Write(obj.GetBuffer(), 0, (int)num);
		}
		if (instance.heading != default(Vector3))
		{
			stream.WriteByte(58);
			obj.SetLength(0L);
			Vector3Serialized.Serialize(obj, instance.heading);
			uint num2 = (uint)obj.Length;
			ProtocolParser.WriteUInt32(stream, num2);
			stream.Write(obj.GetBuffer(), 0, (int)num2);
		}
		if (instance.enabled)
		{
			stream.WriteByte(64);
			ProtocolParser.WriteBool(stream, instance.enabled);
		}
		if (instance.scale != default(Vector3))
		{
			stream.WriteByte(74);
			obj.SetLength(0L);
			Vector3Serialized.Serialize(obj, instance.scale);
			uint num3 = (uint)obj.Length;
			ProtocolParser.WriteUInt32(stream, num3);
			stream.Write(obj.GetBuffer(), 0, (int)num3);
		}
		if (instance.colliderScale != default(Vector3))
		{
			stream.WriteByte(82);
			obj.SetLength(0L);
			Vector3Serialized.Serialize(obj, instance.colliderScale);
			uint num4 = (uint)obj.Length;
			ProtocolParser.WriteUInt32(stream, num4);
			stream.Write(obj.GetBuffer(), 0, (int)num4);
		}
		if (instance.alpha != 0f)
		{
			stream.WriteByte(93);
			ProtocolParser.WriteSingle(stream, instance.alpha);
		}
		if (instance.prefabID != 0)
		{
			stream.WriteByte(96);
			ProtocolParser.WriteUInt32(stream, instance.prefabID);
		}
		if (instance.parentID != 0)
		{
			stream.WriteByte(104);
			ProtocolParser.WriteUInt32(stream, instance.parentID);
		}
		Pool.FreeUnmanaged(ref obj);
	}

	public byte[] ToProtoBytes()
	{
		return SerializeToBytes(this);
	}

	public void ToProto(Stream stream)
	{
		Serialize(stream, this);
	}

	public static byte[] SerializeToBytes(arcadeEnt instance)
	{
		using MemoryStream memoryStream = new MemoryStream();
		Serialize(memoryStream, instance);
		return memoryStream.ToArray();
	}

	public static void SerializeLengthDelimited(Stream stream, arcadeEnt instance)
	{
		byte[] array = SerializeToBytes(instance);
		ProtocolParser.WriteUInt32(stream, (uint)array.Length);
		stream.Write(array, 0, array.Length);
	}

	public void InspectUids(UidInspector<ulong> action)
	{
	}
}
