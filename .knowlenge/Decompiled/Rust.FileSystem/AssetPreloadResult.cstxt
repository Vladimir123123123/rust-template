using System;
using System.Collections.Generic;
using UnityEngine;

public class AssetPreloadResult : CustomYieldInstruction
{
	private readonly FileSystemBackend _backend;

	private readonly LoadAssetsResult _load;

	private readonly List<(string, UnityEngine.Object)> _loaded;

	private readonly int _alreadyLoadedCount;

	public int TotalCount => _alreadyLoadedCount + _load.TotalCount;

	public int CompletedCount => _alreadyLoadedCount + _load.CompletedCount;

	public IReadOnlyList<(string AssetPath, UnityEngine.Object Object)> Results => _loaded;

	public override bool keepWaiting => _load.keepWaiting;

	internal AssetPreloadResult(FileSystemBackend backend, LoadAssetsResult load, List<(string, UnityEngine.Object)> loaded)
	{
		_backend = backend ?? throw new ArgumentNullException("backend");
		_load = load ?? throw new ArgumentNullException("load");
		_loaded = loaded ?? new List<(string, UnityEngine.Object)>();
		_alreadyLoadedCount = _loaded.Count;
		LoadAssetsResult load2 = _load;
		load2.OnAssetLoaded = (LoadAssetsResult.AssetLoaded)Delegate.Combine(load2.OnAssetLoaded, new LoadAssetsResult.AssetLoaded(OnAssetLoaded));
	}

	private void OnAssetLoaded(string path, UnityEngine.Object obj)
	{
		if (_backend.cache.TryGetValue(path, out var value))
		{
			if ((object)obj != value)
			{
				Debug.LogWarning("Destroying duplicate of prefab: " + path);
				UnityEngine.Object.Destroy(obj);
				obj = value;
			}
		}
		else
		{
			_backend.cache.Add(path, obj);
		}
		_loaded.Add((path, obj));
	}
}
