using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using UnityEngine;

public class AssetBundleBackend : FileSystemBackend, IDisposable
{
	private AssetBundle rootBundle;

	private AssetBundleManifest manifest;

	private Dictionary<string, AssetBundle> bundles = new Dictionary<string, AssetBundle>(StringComparer.OrdinalIgnoreCase);

	private Dictionary<string, AssetBundle> files = new Dictionary<string, AssetBundle>(StringComparer.OrdinalIgnoreCase);

	private string assetPath;

	public static bool Enabled => true;

	public float LoadProgress { get; private set; }

	public void Load(string assetRoot)
	{
		try
		{
			isError = false;
			string? directoryName = Path.GetDirectoryName(assetRoot);
			char directorySeparatorChar = Path.DirectorySeparatorChar;
			assetPath = directoryName + directorySeparatorChar;
			rootBundle = AssetBundle.LoadFromFile(assetRoot);
			if ((Object)(object)rootBundle == (Object)null)
			{
				LoadError("Couldn't load root AssetBundle - " + assetRoot);
				return;
			}
			AssetBundleManifest[] array = rootBundle.LoadAllAssets<AssetBundleManifest>();
			if (array.Length != 1)
			{
				LoadError($"Couldn't find AssetBundleManifest - {array.Length}");
				return;
			}
			manifest = array[0];
			string[] allAssetBundles = manifest.GetAllAssetBundles();
			foreach (string text in allAssetBundles)
			{
				Debug.Log((object)("Loading " + text));
				LoadBundle(text);
			}
		}
		catch (Exception ex)
		{
			Debug.LogException(ex);
		}
	}

	private AssetBundle LoadBundle(string bundleName)
	{
		if (bundles.ContainsKey(bundleName))
		{
			Debug.Log((object)("LoadBundle " + bundleName + " already loaded"));
			return null;
		}
		string text = assetPath + bundleName;
		if (!File.Exists(text))
		{
			return null;
		}
		AssetBundle val = AssetBundle.LoadFromFile(text);
		if ((Object)(object)val == (Object)null)
		{
			LoadError("Couldn't load AssetBundle - " + text);
			return null;
		}
		bundles.Add(bundleName, val);
		return val;
	}

	public void BuildFileIndex()
	{
		files.Clear();
		foreach (KeyValuePair<string, AssetBundle> bundle in bundles)
		{
			if (!bundle.Key.StartsWith("content", StringComparison.InvariantCultureIgnoreCase))
			{
				string[] allAssetNames = bundle.Value.GetAllAssetNames();
				foreach (string key in allAssetNames)
				{
					files.Add(key, bundle.Value);
				}
			}
		}
	}

	public void Dispose()
	{
		manifest = null;
		foreach (KeyValuePair<string, AssetBundle> bundle in bundles)
		{
			bundle.Value.Unload(false);
			Object.DestroyImmediate((Object)(object)bundle.Value);
		}
		bundles.Clear();
		if (Object.op_Implicit((Object)(object)rootBundle))
		{
			rootBundle.Unload(false);
			Object.DestroyImmediate((Object)(object)rootBundle);
			rootBundle = null;
		}
	}

	public override List<string> UnloadBundles(string partialName)
	{
		List<string> list = new List<string>();
		string[] array = bundles.Keys.ToArray();
		foreach (string text in array)
		{
			if (text.IndexOf(partialName, StringComparison.InvariantCultureIgnoreCase) < 0)
			{
				continue;
			}
			AssetBundle val = bundles[text];
			val.Unload(false);
			Object.DestroyImmediate((Object)(object)val);
			bundles.Remove(text);
			val = LoadBundle(text);
			string[] allAssetNames = val.GetAllAssetNames();
			foreach (string text2 in allAssetNames)
			{
				files[text2] = val;
				list.Add(text2);
				if (cache.TryGetValue(text2, out var value))
				{
					cache.Remove(text2);
					Object.DestroyImmediate(value, true);
				}
			}
		}
		return list;
	}

	protected override T LoadAsset<T>(string filePath)
	{
		AssetBundle value = null;
		if (!files.TryGetValue(filePath, out value))
		{
			return default(T);
		}
		return value.LoadAsset<T>(filePath);
	}

	protected override LoadAssetsResult LoadAssetsAsync(List<string> filePaths, int maxConcurrency, int priority)
	{
		return new CompositeLoadAssetsResult((from p in filePaths
			where files.ContainsKey(p)
			group p by files[p]).Select((Func<IGrouping<AssetBundle, string>, LoadAssetsResult>)((IGrouping<AssetBundle, string> g) => new AssetBundleLoadAssetsResult(g.Key, g.OrderBy<string, string>((string p) => p, StringComparer.OrdinalIgnoreCase).ToList(), maxConcurrency, priority))).ToList());
	}

	protected override string[] LoadAssetList(string folder, string search)
	{
		List<string> list = new List<string>();
		foreach (KeyValuePair<string, AssetBundle> item in files.Where((KeyValuePair<string, AssetBundle> x) => x.Key.StartsWith(folder, StringComparison.InvariantCultureIgnoreCase)))
		{
			if (string.IsNullOrEmpty(search) || item.Key.IndexOf(search, StringComparison.InvariantCultureIgnoreCase) != -1)
			{
				list.Add(item.Key);
			}
		}
		list.Sort(StringComparer.OrdinalIgnoreCase);
		return list.ToArray();
	}

	public override T[] LoadAllFromBundle<T>(string bundleName, string editorSearch)
	{
		foreach (KeyValuePair<string, AssetBundle> bundle in bundles)
		{
			if (bundle.Key.EndsWith(bundleName))
			{
				return bundle.Value.LoadAllAssets<T>();
			}
		}
		throw new Exception("LoadAllFromBundle found none");
	}

	public override bool HasAsset(string path)
	{
		return files.ContainsKey(path);
	}
}


using System;
using System.Collections.Generic;
using Facepunch;
using UnityEngine;

internal class AssetBundleLoadAssetsResult : LoadAssetsResult
{
	private readonly AssetBundle _bundle;

	private readonly List<string> _filePaths;

	private readonly int _maxConcurrency;

	private readonly int _priority;

	private readonly List<AssetBundleRequest> _requests;

	private readonly List<(string AssetPath, AssetBundleRequest Request)> _pendingRequests;

	private int _index;

	public override int TotalCount => _filePaths.Count;

	public override bool keepWaiting => !Update();

	internal AssetBundleLoadAssetsResult(AssetBundle bundle, List<string> filePaths, int maxConcurrency, int priority)
	{
		if ((Object)(object)bundle == (Object)null)
		{
			throw new ArgumentNullException("bundle");
		}
		if (filePaths == null)
		{
			throw new ArgumentNullException("filePaths");
		}
		foreach (string filePath in filePaths)
		{
			if (string.IsNullOrWhiteSpace(filePath))
			{
				throw new ArgumentException("Cannot load null or empty paths.", "filePaths");
			}
		}
		_bundle = bundle;
		_filePaths = filePaths;
		_maxConcurrency = Mathf.Clamp(maxConcurrency, 1, 64);
		_priority = priority;
		_requests = new List<AssetBundleRequest>(_filePaths.Count);
		_pendingRequests = new List<(string, AssetBundleRequest)>(_maxConcurrency);
		_index = 0;
	}

	private bool Update()
	{
		if (_requests.Count == _filePaths.Count && _pendingRequests.Count == 0)
		{
			return true;
		}
		if ((Object)(object)_bundle == (Object)null)
		{
			CompletedCount = TotalCount;
			return true;
		}
		List<(string, AssetBundleRequest)> list = Pool.Get<List<(string, AssetBundleRequest)>>();
		for (int i = 0; i < _pendingRequests.Count; i++)
		{
			var (item, val) = _pendingRequests[i];
			if (((AsyncOperation)val).isDone)
			{
				CompletedCount++;
				_pendingRequests.RemoveAt(i);
				i--;
				list.Add((item, val));
			}
		}
		foreach (var (path, val2) in list)
		{
			try
			{
				OnAssetLoaded?.Invoke(path, val2.asset);
			}
			catch (Exception ex)
			{
				Debug.LogException(ex);
			}
		}
		Pool.FreeUnmanaged<(string, AssetBundleRequest)>(ref list);
		while (_pendingRequests.Count < _maxConcurrency)
		{
			if (_index >= _filePaths.Count)
			{
				return false;
			}
			string text = _filePaths[_index++];
			AssetBundleRequest val3 = _bundle.LoadAssetAsync(text);
			((AsyncOperation)val3).priority = _priority;
			_requests.Add(val3);
			_pendingRequests.Add((text, val3));
		}
		return false;
	}

	public override Dictionary<string, Object> GetResult()
	{
		if (((CustomYieldInstruction)this).keepWaiting)
		{
			throw new InvalidOperationException("Cannot get results until the load is completed.");
		}
		Dictionary<string, Object> dictionary = new Dictionary<string, Object>();
		for (int i = 0; i < _filePaths.Count; i++)
		{
			dictionary.Add(_filePaths[i], _requests[i].asset);
		}
		return dictionary;
	}
}


using System;
using System.Collections.Generic;
using UnityEngine;

public class AssetPreloadResult : CustomYieldInstruction
{
	private readonly FileSystemBackend _backend;

	private readonly LoadAssetsResult _load;

	private readonly List<(string, Object)> _loaded;

	private readonly int _alreadyLoadedCount;

	public int TotalCount => _alreadyLoadedCount + _load.TotalCount;

	public int CompletedCount => _alreadyLoadedCount + _load.CompletedCount;

	public IReadOnlyList<(string AssetPath, Object Object)> Results => _loaded;

	public override bool keepWaiting => ((CustomYieldInstruction)_load).keepWaiting;

	internal AssetPreloadResult(FileSystemBackend backend, LoadAssetsResult load, List<(string, Object)> loaded)
	{
		_backend = backend ?? throw new ArgumentNullException("backend");
		_load = load ?? throw new ArgumentNullException("load");
		_loaded = loaded ?? new List<(string, Object)>();
		_alreadyLoadedCount = _loaded.Count;
		LoadAssetsResult load2 = _load;
		load2.OnAssetLoaded = (LoadAssetsResult.AssetLoaded)Delegate.Combine(load2.OnAssetLoaded, new LoadAssetsResult.AssetLoaded(OnAssetLoaded));
	}

	private void OnAssetLoaded(string path, Object obj)
	{
		if (_backend.cache.TryGetValue(path, out var value))
		{
			if (obj != value)
			{
				Debug.LogWarning((object)("Destroying duplicate of prefab: " + path));
				Object.Destroy(obj);
				obj = value;
			}
		}
		else
		{
			_backend.cache.Add(path, obj);
		}
		_loaded.Add((path, obj));
	}
}


using System;
using System.Collections.Generic;
using System.Linq;
using UnityEngine;

internal class CompositeLoadAssetsResult : LoadAssetsResult
{
	private readonly List<LoadAssetsResult> _loads;

	public override int TotalCount => _loads.Sum((LoadAssetsResult l) => l.TotalCount);

	public override int CompletedCount
	{
		get
		{
			return _loads.Sum((LoadAssetsResult l) => l.CompletedCount);
		}
		protected set
		{
		}
	}

	public override bool keepWaiting
	{
		get
		{
			if (_loads.Count != 0)
			{
				return _loads.Any((LoadAssetsResult l) => ((CustomYieldInstruction)l).keepWaiting);
			}
			return false;
		}
	}

	public CompositeLoadAssetsResult(List<LoadAssetsResult> loads)
	{
		if (loads == null)
		{
			throw new ArgumentNullException("loads");
		}
		foreach (LoadAssetsResult load in loads)
		{
			if (load == null)
			{
				throw new ArgumentException("Cannot wait for null LoadAssetsResult.", "loads");
			}
		}
		_loads = loads;
		AssetLoaded b = AssetLoadedHandler;
		foreach (LoadAssetsResult load2 in loads)
		{
			load2.OnAssetLoaded = (AssetLoaded)Delegate.Combine(load2.OnAssetLoaded, b);
		}
	}

	public override Dictionary<string, Object> GetResult()
	{
		if (((CustomYieldInstruction)this).keepWaiting)
		{
			throw new InvalidOperationException("Cannot get results until the load is completed.");
		}
		Dictionary<string, Object> dictionary = new Dictionary<string, Object>();
		foreach (LoadAssetsResult load in _loads)
		{
			foreach (KeyValuePair<string, Object> item in load.GetResult())
			{
				dictionary.Add(item.Key, item.Value);
			}
		}
		return dictionary;
	}

	private void AssetLoadedHandler(string assetPath, Object obj)
	{
		try
		{
			OnAssetLoaded?.Invoke(assetPath, obj);
		}
		catch (Exception ex)
		{
			Debug.LogException(ex);
		}
	}
}


using System.Collections.Generic;
using System.Diagnostics;
using System.IO;
using UnityEngine;

public static class FileSystem
{
	public static bool LogDebug;

	public static bool LogTime;

	public static FileSystemBackend Backend;

	public static GameObject[] LoadPrefabs(string folder)
	{
		return Backend.LoadPrefabs(folder);
	}

	public static GameObject LoadPrefab(string filePath)
	{
		return Backend.LoadPrefab(filePath);
	}

	public static string[] FindAll(string folder, string search = "")
	{
		return Backend.FindAll(folder, search);
	}

	public static T[] LoadAll<T>(string folder, string search = "") where T : Object
	{
		if (!StringEx.IsLower(folder))
		{
			folder = folder.ToLower();
		}
		return Backend.LoadAll<T>(folder, search);
	}

	public static T[] LoadAllFromBundle<T>(string bundleName, string editorSearch) where T : Object
	{
		return Backend.LoadAllFromBundle<T>(bundleName, editorSearch);
	}

	public static T Load<T>(string filePath, bool complain = true) where T : Object
	{
		if (!StringEx.IsLower(filePath))
		{
			filePath = filePath.ToLower();
		}
		Stopwatch stopwatch = Stopwatch.StartNew();
		if (LogDebug)
		{
			File.AppendAllText("filesystem_debug.csv", $"{filePath}\n");
		}
		T val = Backend.Load<T>(filePath);
		if (complain && (Object)(object)val == (Object)null)
		{
			Debug.LogWarning((object)("[FileSystem] Not Found: " + filePath + " (" + typeof(T)?.ToString() + ")"));
		}
		if (LogTime)
		{
			File.AppendAllText("filesystem.csv", $"{filePath},{stopwatch.Elapsed.TotalMilliseconds}\n");
		}
		return val;
	}

	public static AssetPreloadResult PreloadAssets(IEnumerable<string> filePaths, int maxConcurrency, int priority = 0)
	{
		return Backend.PreloadAssets(filePaths, maxConcurrency, priority);
	}
}


using System;
using System.Collections.Generic;
using UnityEngine;

public abstract class FileSystemBackend
{
	public bool isError;

	public string loadingError = "";

	public Dictionary<string, Object> cache = new Dictionary<string, Object>(StringComparer.OrdinalIgnoreCase);

	public GameObject[] LoadPrefabs(string folder)
	{
		if (!folder.EndsWith("/", StringComparison.CurrentCultureIgnoreCase))
		{
			Debug.LogWarning((object)("LoadPrefabs - folder should end in '/' - " + folder));
		}
		if (!folder.StartsWith("assets/", StringComparison.CurrentCultureIgnoreCase))
		{
			Debug.LogWarning((object)("LoadPrefabs - should start with assets/ - " + folder));
		}
		return this.LoadAll<GameObject>(folder, ".prefab");
	}

	public GameObject LoadPrefab(string filePath)
	{
		if (!filePath.StartsWith("assets/", StringComparison.CurrentCultureIgnoreCase))
		{
			Debug.LogWarning((object)("LoadPrefab - should start with assets/ - " + filePath));
		}
		return this.Load<GameObject>(filePath);
	}

	public string[] FindAll(string folder, string search = "")
	{
		return LoadAssetList(folder, search);
	}

	public T[] LoadAll<T>(string folder, string search = "") where T : Object
	{
		List<T> list = new List<T>();
		string[] array = FindAll(folder, search);
		foreach (string filePath in array)
		{
			T val = Load<T>(filePath);
			if ((Object)(object)val != (Object)null)
			{
				list.Add(val);
			}
		}
		return list.ToArray();
	}

	public T Load<T>(string filePath) where T : Object
	{
		T val = default(T);
		if (cache.ContainsKey(filePath))
		{
			Object obj = cache[filePath];
			val = (T)(object)((obj is T) ? obj : null);
		}
		else
		{
			val = LoadAsset<T>(filePath);
			if ((Object)(object)val != (Object)null)
			{
				cache.Add(filePath, (Object)(object)val);
			}
		}
		return val;
	}

	public AssetPreloadResult PreloadAssets(IEnumerable<string> filePaths, int maxConcurrency, int priority)
	{
		List<string> list = new List<string>();
		List<(string, Object)> list2 = new List<(string, Object)>();
		foreach (string filePath in filePaths)
		{
			if (cache.TryGetValue(filePath, out var value))
			{
				list2.Add((filePath, value));
			}
			else
			{
				list.Add(filePath);
			}
		}
		LoadAssetsResult load = LoadAssetsAsync(list, maxConcurrency, priority);
		return new AssetPreloadResult(this, load, list2);
	}

	protected void LoadError(string err)
	{
		Debug.LogError((object)err);
		loadingError = err;
		isError = true;
	}

	public virtual List<string> UnloadBundles(string partialName)
	{
		return new List<string>(0);
	}

	protected abstract T LoadAsset<T>(string filePath) where T : Object;

	protected abstract LoadAssetsResult LoadAssetsAsync(List<string> filePaths, int maxConcurrency, int priority);

	protected abstract string[] LoadAssetList(string folder, string search);

	public abstract T[] LoadAllFromBundle<T>(string bundleName, string editorSearch) where T : Object;

	public abstract bool HasAsset(string path);
}


using System.Collections.Generic;
using UnityEngine;

public abstract class LoadAssetsResult : CustomYieldInstruction
{
	public delegate void AssetLoaded(string path, Object obj);

	public AssetLoaded OnAssetLoaded;

	public abstract int TotalCount { get; }

	public virtual int CompletedCount { get; protected set; }

	public abstract Dictionary<string, Object> GetResult();
}


using System.CodeDom.Compiler;
using System.ComponentModel;
using System.Runtime.CompilerServices;

[CompilerGenerated]
[EditorBrowsable(EditorBrowsableState.Never)]
[GeneratedCode("Unity.MonoScriptGenerator.MonoScriptInfoGenerator", null)]
internal class UnitySourceGeneratedAssemblyMonoScriptTypes_v1
{
	private struct MonoScriptData
	{
		public byte[] FilePathsData;

		public byte[] TypesData;

		public int TotalTypes;

		public int TotalFiles;

		public bool IsEditorOnly;
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	private static MonoScriptData Get()
	{
		MonoScriptData result = default(MonoScriptData);
		result.FilePathsData = new byte[432]
		{
			0, 0, 0, 1, 0, 0, 0, 53, 92, 65,
			115, 115, 101, 116, 115, 92, 80, 108, 117, 103,
			105, 110, 115, 92, 82, 117, 115, 116, 46, 70,
			105, 108, 101, 83, 121, 115, 116, 101, 109, 92,
			65, 115, 115, 101, 116, 66, 117, 110, 100, 108,
			101, 66, 97, 99, 107, 101, 110, 100, 46, 99,
			115, 0, 0, 0, 1, 0, 0, 0, 62, 92,
			65, 115, 115, 101, 116, 115, 92, 80, 108, 117,
			103, 105, 110, 115, 92, 82, 117, 115, 116, 46,
			70, 105, 108, 101, 83, 121, 115, 116, 101, 109,
			92, 65, 115, 115, 101, 116, 66, 117, 110, 100,
			108, 101, 76, 111, 97, 100, 65, 115, 115, 101,
			116, 115, 82, 101, 115, 117, 108, 116, 46, 99,
			115, 0, 0, 0, 1, 0, 0, 0, 53, 92,
			65, 115, 115, 101, 116, 115, 92, 80, 108, 117,
			103, 105, 110, 115, 92, 82, 117, 115, 116, 46,
			70, 105, 108, 101, 83, 121, 115, 116, 101, 109,
			92, 65, 115, 115, 101, 116, 80, 114, 101, 108,
			111, 97, 100, 82, 101, 115, 117, 108, 116, 46,
			99, 115, 0, 0, 0, 1, 0, 0, 0, 60,
			92, 65, 115, 115, 101, 116, 115, 92, 80, 108,
			117, 103, 105, 110, 115, 92, 82, 117, 115, 116,
			46, 70, 105, 108, 101, 83, 121, 115, 116, 101,
			109, 92, 67, 111, 109, 112, 111, 115, 105, 116,
			101, 76, 111, 97, 100, 65, 115, 115, 101, 116,
			115, 82, 101, 115, 117, 108, 116, 46, 99, 115,
			0, 0, 0, 1, 0, 0, 0, 45, 92, 65,
			115, 115, 101, 116, 115, 92, 80, 108, 117, 103,
			105, 110, 115, 92, 82, 117, 115, 116, 46, 70,
			105, 108, 101, 83, 121, 115, 116, 101, 109, 92,
			70, 105, 108, 101, 83, 121, 115, 116, 101, 109,
			46, 99, 115, 0, 0, 0, 1, 0, 0, 0,
			52, 92, 65, 115, 115, 101, 116, 115, 92, 80,
			108, 117, 103, 105, 110, 115, 92, 82, 117, 115,
			116, 46, 70, 105, 108, 101, 83, 121, 115, 116,
			101, 109, 92, 70, 105, 108, 101, 83, 121, 115,
			116, 101, 109, 66, 97, 99, 107, 101, 110, 100,
			46, 99, 115, 0, 0, 0, 1, 0, 0, 0,
			51, 92, 65, 115, 115, 101, 116, 115, 92, 80,
			108, 117, 103, 105, 110, 115, 92, 82, 117, 115,
			116, 46, 70, 105, 108, 101, 83, 121, 115, 116,
			101, 109, 92, 76, 111, 97, 100, 65, 115, 115,
			101, 116, 115, 82, 101, 115, 117, 108, 116, 46,
			99, 115
		};
		result.TypesData = new byte[173]
		{
			0, 0, 0, 0, 19, 124, 65, 115, 115, 101,
			116, 66, 117, 110, 100, 108, 101, 66, 97, 99,
			107, 101, 110, 100, 0, 0, 0, 0, 28, 124,
			65, 115, 115, 101, 116, 66, 117, 110, 100, 108,
			101, 76, 111, 97, 100, 65, 115, 115, 101, 116,
			115, 82, 101, 115, 117, 108, 116, 0, 0, 0,
			0, 19, 124, 65, 115, 115, 101, 116, 80, 114,
			101, 108, 111, 97, 100, 82, 101, 115, 117, 108,
			116, 0, 0, 0, 0, 26, 124, 67, 111, 109,
			112, 111, 115, 105, 116, 101, 76, 111, 97, 100,
			65, 115, 115, 101, 116, 115, 82, 101, 115, 117,
			108, 116, 0, 0, 0, 0, 11, 124, 70, 105,
			108, 101, 83, 121, 115, 116, 101, 109, 0, 0,
			0, 0, 18, 124, 70, 105, 108, 101, 83, 121,
			115, 116, 101, 109, 66, 97, 99, 107, 101, 110,
			100, 0, 0, 0, 0, 17, 124, 76, 111, 97,
			100, 65, 115, 115, 101, 116, 115, 82, 101, 115,
			117, 108, 116
		};
		result.TotalFiles = 7;
		result.TotalTypes = 7;
		result.IsEditorOnly = false;
		return result;
	}
}


using UnityEngine;

public delegate void AssetLoaded(string path, Object obj);


private struct MonoScriptData
{
	public byte[] FilePathsData;

	public byte[] TypesData;

	public int TotalTypes;

	public int TotalFiles;

	public bool IsEditorOnly;
}


