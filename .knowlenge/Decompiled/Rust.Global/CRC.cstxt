using System.Text;

public class CRC
{
	private static byte[] byteBuffer = new byte[1024];

	private static readonly uint[] crc32_tab = new uint[256]
	{
		0u, 1996959894u, 3993919788u, 2567524794u, 124634137u, 1886057615u, 3915621685u, 2657392035u, 249268274u, 2044508324u,
		3772115230u, 2547177864u, 162941995u, 2125561021u, 3887607047u, 2428444049u, 498536548u, 1789927666u, 4089016648u, 2227061214u,
		450548861u, 1843258603u, 4107580753u, 2211677639u, 325883990u, 1684777152u, 4251122042u, 2321926636u, 335633487u, 1661365465u,
		4195302755u, 2366115317u, 997073096u, 1281953886u, 3579855332u, 2724688242u, 1006888145u, 1258607687u, 3524101629u, 2768942443u,
		901097722u, 1119000684u, 3686517206u, 2898065728u, 853044451u, 1172266101u, 3705015759u, 2882616665u, 651767980u, 1373503546u,
		3369554304u, 3218104598u, 565507253u, 1454621731u, 3485111705u, 3099436303u, 671266974u, 1594198024u, 3322730930u, 2970347812u,
		795835527u, 1483230225u, 3244367275u, 3060149565u, 1994146192u, 31158534u, 2563907772u, 4023717930u, 1907459465u, 112637215u,
		2680153253u, 3904427059u, 2013776290u, 251722036u, 2517215374u, 3775830040u, 2137656763u, 141376813u, 2439277719u, 3865271297u,
		1802195444u, 476864866u, 2238001368u, 4066508878u, 1812370925u, 453092731u, 2181625025u, 4111451223u, 1706088902u, 314042704u,
		2344532202u, 4240017532u, 1658658271u, 366619977u, 2362670323u, 4224994405u, 1303535960u, 984961486u, 2747007092u, 3569037538u,
		1256170817u, 1037604311u, 2765210733u, 3554079995u, 1131014506u, 879679996u, 2909243462u, 3663771856u, 1141124467u, 855842277u,
		2852801631u, 3708648649u, 1342533948u, 654459306u, 3188396048u, 3373015174u, 1466479909u, 544179635u, 3110523913u, 3462522015u,
		1591671054u, 702138776u, 2966460450u, 3352799412u, 1504918807u, 783551873u, 3082640443u, 3233442989u, 3988292384u, 2596254646u,
		62317068u, 1957810842u, 3939845945u, 2647816111u, 81470997u, 1943803523u, 3814918930u, 2489596804u, 225274430u, 2053790376u,
		3826175755u, 2466906013u, 167816743u, 2097651377u, 4027552580u, 2265490386u, 503444072u, 1762050814u, 4150417245u, 2154129355u,
		426522225u, 1852507879u, 4275313526u, 2312317920u, 282753626u, 1742555852u, 4189708143u, 2394877945u, 397917763u, 1622183637u,
		3604390888u, 2714866558u, 953729732u, 1340076626u, 3518719985u, 2797360999u, 1068828381u, 1219638859u, 3624741850u, 2936675148u,
		906185462u, 1090812512u, 3747672003u, 2825379669u, 829329135u, 1181335161u, 3412177804u, 3160834842u, 628085408u, 1382605366u,
		3423369109u, 3138078467u, 570562233u, 1426400815u, 3317316542u, 2998733608u, 733239954u, 1555261956u, 3268935591u, 3050360625u,
		752459403u, 1541320221u, 2607071920u, 3965973030u, 1969922972u, 40735498u, 2617837225u, 3943577151u, 1913087877u, 83908371u,
		2512341634u, 3803740692u, 2075208622u, 213261112u, 2463272603u, 3855990285u, 2094854071u, 198958881u, 2262029012u, 4057260610u,
		1759359992u, 534414190u, 2176718541u, 4139329115u, 1873836001u, 414664567u, 2282248934u, 4279200368u, 1711684554u, 285281116u,
		2405801727u, 4167216745u, 1634467795u, 376229701u, 2685067896u, 3608007406u, 1308918612u, 956543938u, 2808555105u, 3495958263u,
		1231636301u, 1047427035u, 2932959818u, 3654703836u, 1088359270u, 936918000u, 2847714899u, 3736837829u, 1202900863u, 817233897u,
		3183342108u, 3401237130u, 1404277552u, 615818150u, 3134207493u, 3453421203u, 1423857449u, 601450431u, 3009837614u, 3294710456u,
		1567103746u, 711928724u, 3020668471u, 3272380065u, 1510334235u, 755167117u
	};

	private static readonly ulong[] crc64_tab = new ulong[256]
	{
		0uL, 8851949072701294969uL, 17703898145402589938uL, 10333669153493130123uL, 13851072938616403599uL, 13465927519055396854uL, 3857338458010461309uL, 5715195658523061508uL, 12333367839138578037uL, 15127763206205961996uL,
		6816212484437830791uL, 2612226237385041406uL, 7714676916020922618uL, 1281407202545942915uL, 11430391317046123016uL, 16463076249205199729uL, 9009731685717012353uL, 563108230357313272uL, 9851657908567506291uL, 17465080730062222346uL,
		13632424968875661582uL, 14404880506683019383uL, 5224452474770082812uL, 3627802401766982277uL, 15429353832041845236uL, 12463821128841762957uL, 2562814405091885830uL, 6433535930597116543uL, 1592294032496338811uL, 7836410910743637506uL,
		16404387395731993993uL, 11056451039949864176uL, 18019463371434024706uL, 9280105458721969787uL, 1126216460714626544uL, 8464919223366468745uL, 4190910634541279629uL, 4679640014836523252uL, 14959263154764675967uL, 13060872525739979270uL,
		5852729821509460343uL, 3161916214005835790uL, 11856275032257016709uL, 16019730051968187132uL, 10448904949540165624uL, 16994763621833383553uL, 7255604803533964554uL, 2191395843288271987uL, 9734813498046853251uL, 18285020776702097914uL,
		8262382231073956465uL, 608425843627928328uL, 5125628810183771660uL, 4465764294926438261uL, 12867071861194233086uL, 14432195567501024647uL, 3184588064992677622uL, 6262709589572306831uL, 15672821821487275012uL, 11770576130456212861uL,
		17008134862606432377uL, 10867599606483677440uL, 1853769023980628619uL, 7161174014982448114uL, 16103423924954344815uL, 11935289383220651030uL, 3083341959784644509uL, 5769757520242456292uL, 2252432921429253088uL, 7321251034957484697uL,
		16929838446732937490uL, 10388307452745547883uL, 8381821269082559258uL, 1047727658635319907uL, 9359280029673046504uL, 18102965619612993681uL, 13000435797616977301uL, 14894146905688698092uL, 4745161141923116903uL, 4252033715651608094uL,
		11705459643018920686uL, 15612384854998895511uL, 6323832428011671580uL, 3250108949404244325uL, 7082685524280996961uL, 1770671381070249240uL, 10951102161764411027uL, 17087309740654948330uL, 674072313427442843uL, 8323419547594995170uL,
		18224423522563763817uL, 9669888565606754064uL, 14511209607067929108uL, 12950765422787986285uL, 4382791686576543974uL, 5047054248884015519uL, 2696289253709771373uL, 6895947823530343188uL, 15049839570318909599uL, 12250835051042597350uL,
		16524764462147912930uL, 11496477575961038235uL, 1216851687255856656uL, 7654800921679748969uL, 10251257620367543320uL, 17625884659327141217uL, 8931528589852876522uL, 84259039178430355uL, 5655163293556783767uL, 3792978414742418414uL,
		13532134484260726885uL, 13912670750543257884uL, 6369176129985355244uL, 2502782282785952917uL, 12525419179144613662uL, 15495561035627234919uL, 10978437246791527267uL, 16321975555527844378uL, 7920669638525335953uL, 1671873238255513832uL,
		17531166746306175897uL, 9913345878835194592uL, 503231997654823275uL, 8945175932061546514uL, 3707538047961257238uL, 5308515798192249967uL, 14322348029964896228uL, 13554501644362141341uL, 10785157014839085493uL, 17254666630495879372uL,
		6925536469308201799uL, 1928669229005230654uL, 6166683919569289018uL, 3408106242218915395uL, 11539515040484912584uL, 15779741191858611377uL, 4504865842858506176uL, 4925828954283753145uL, 14642502069914969394uL, 12820884771576065099uL,
		18355716529793696079uL, 9540007361421969462uL, 796147016248169405uL, 8202193697865996996uL, 16763642538165118516uL, 10555343349626187597uL, 2095455317270639814uL, 7479631577382337983uL, 2926364910754730171uL, 5928137516128508354uL,
		15937228569359352393uL, 12102324735718361904uL, 4867406749023426625uL, 4131191115536978232uL, 13131477498808912563uL, 14763945261529023434uL, 9490322283846233806uL, 17972763431062038455uL, 8504067431303216188uL, 926884511990314309uL,
		8051711962477172407uL, 1541670979892322254uL, 11100683476643087429uL, 16201132341218348348uL, 12647664856023343160uL, 15374718365700663617uL, 6500217898808488650uL, 2372580570961558451uL, 14165371048561993922uL, 13712881572587659707uL,
		3541342762140498480uL, 5475551080882205513uL, 337036156713721421uL, 9112211761281881908uL, 17374189211922025663uL, 10071726351451997638uL, 1348144626854885686uL, 7524919785159454799uL, 16646839095189990340uL, 11375251796044276413uL,
		15171913658969673657uL, 12129609824107054784uL, 2827581646778391883uL, 6766067242130363442uL, 13374985906044110659uL, 14070668113165684282uL, 5489218623395763633uL, 3960334819262667976uL, 8765583373153087948uL, 251615998827411637uL,
		10094108497768031038uL, 17783882574922426951uL, 5392578507419542746uL, 3462768234654100899uL, 13791895647060686376uL, 14249064643987996497uL, 10011129131143811669uL, 17309264314385947436uL, 9177858264896848039uL, 398073508124084702uL,
		16284634862666717871uL, 11179858319785628630uL, 1463182455377365085uL, 7968614284679676196uL, 2433703374511713312uL, 6565738749404456281uL, 15309601843359497938uL, 12587227855704700843uL, 4025855981238586203uL, 5550341738321543714uL,
		14010231419946703273uL, 13309869690798280912uL, 17863057179705753044uL, 10177610780853122221uL, 168518078356860710uL, 8687094605961012831uL, 11310326587113567534uL, 16586241563491499095uL, 7585956829484836828uL, 1413790823389195941uL,
		6687492953022055329uL, 2744609311697881816uL, 12213303662187237715uL, 15250927976100943914uL, 12738352259970710488uL, 14564578711588090529uL, 5005564565571905834uL, 4588929132448424019uL, 8142317431333358935uL, 731591227688682542uL,
		9606093343850471333uL, 18417404465172059868uL, 2012927990619293101uL, 7005115709973351636uL, 17176652871151048543uL, 10702745209522052646uL, 15841339277050671906uL, 11605722277885901403uL, 3343746476511027664uL, 6106651831093618857uL,
		14830152191845028953uL, 13193075276920315168uL, 4071158715666679467uL, 4803046671925235666uL, 1006463995309646550uL, 8588326435575524271uL, 17890351864123093028uL, 9412308762883553629uL, 7415076095922514476uL, 2035579357833339733uL,
		10617031596384499934uL, 16829728831969243559uL, 12024401134718426275uL, 15854695815076877786uL, 6012200567359213137uL, 3006100283679606568uL
	};

	public static uint Compute32(uint crc, int i)
	{
		Union32 union = default(Union32);
		union.i = i;
		byteBuffer[0] = union.b1;
		byteBuffer[1] = union.b2;
		byteBuffer[2] = union.b3;
		byteBuffer[3] = union.b4;
		return CRC32(crc, byteBuffer, 4uL);
	}

	public static uint Compute32(uint crc, uint u)
	{
		Union32 union = default(Union32);
		union.u = u;
		byteBuffer[0] = union.b1;
		byteBuffer[1] = union.b2;
		byteBuffer[2] = union.b3;
		byteBuffer[3] = union.b4;
		return CRC32(crc, byteBuffer, 4uL);
	}

	public static uint Compute32(uint crc, float f)
	{
		Union32 union = default(Union32);
		union.f = f;
		byteBuffer[0] = union.b1;
		byteBuffer[1] = union.b2;
		byteBuffer[2] = union.b3;
		byteBuffer[3] = union.b4;
		return CRC32(crc, byteBuffer, 4uL);
	}

	public static uint Compute32(uint crc, long i)
	{
		Union64 union = default(Union64);
		union.i = i;
		byteBuffer[0] = union.b1;
		byteBuffer[1] = union.b2;
		byteBuffer[2] = union.b3;
		byteBuffer[3] = union.b4;
		byteBuffer[4] = union.b5;
		byteBuffer[5] = union.b6;
		byteBuffer[6] = union.b7;
		byteBuffer[7] = union.b8;
		return CRC32(crc, byteBuffer, 8uL);
	}

	public static uint Compute32(uint crc, ulong u)
	{
		Union64 union = default(Union64);
		union.u = u;
		byteBuffer[0] = union.b1;
		byteBuffer[1] = union.b2;
		byteBuffer[2] = union.b3;
		byteBuffer[3] = union.b4;
		byteBuffer[4] = union.b5;
		byteBuffer[5] = union.b6;
		byteBuffer[6] = union.b7;
		byteBuffer[7] = union.b8;
		return CRC32(crc, byteBuffer, 8uL);
	}

	public static uint Compute32(uint crc, double f)
	{
		Union64 union = default(Union64);
		union.f = f;
		byteBuffer[0] = union.b1;
		byteBuffer[1] = union.b2;
		byteBuffer[2] = union.b3;
		byteBuffer[3] = union.b4;
		byteBuffer[4] = union.b5;
		byteBuffer[5] = union.b6;
		byteBuffer[6] = union.b7;
		byteBuffer[7] = union.b8;
		return CRC32(crc, byteBuffer, 8uL);
	}

	public static uint Compute32(uint crc, string str)
	{
		int num = GrowByteBuffer(Encoding.UTF8.GetByteCount(str));
		Encoding.UTF8.GetBytes(str, 0, str.Length, byteBuffer, 0);
		return CRC32(crc, byteBuffer, (ulong)num);
	}

	public static uint Compute32(string[] strs)
	{
		uint num = 0u;
		for (int i = 0; i < strs.Length; i++)
		{
			int num2 = GrowByteBuffer(Encoding.UTF8.GetByteCount(strs[i]));
			Encoding.UTF8.GetBytes(strs[i], 0, strs[i].Length, byteBuffer, 0);
			num = CRC32(num, byteBuffer, (ulong)num2);
		}
		return num;
	}

	public static ulong Compute64(ulong crc, int i)
	{
		Union32 union = default(Union32);
		union.i = i;
		byteBuffer[0] = union.b1;
		byteBuffer[1] = union.b2;
		byteBuffer[2] = union.b3;
		byteBuffer[3] = union.b4;
		return CRC64(crc, byteBuffer, 4uL);
	}

	public static ulong Compute64(ulong crc, uint u)
	{
		Union32 union = default(Union32);
		union.u = u;
		byteBuffer[0] = union.b1;
		byteBuffer[1] = union.b2;
		byteBuffer[2] = union.b3;
		byteBuffer[3] = union.b4;
		return CRC64(crc, byteBuffer, 4uL);
	}

	public static ulong Compute64(ulong crc, float f)
	{
		Union32 union = default(Union32);
		union.f = f;
		byteBuffer[0] = union.b1;
		byteBuffer[1] = union.b2;
		byteBuffer[2] = union.b3;
		byteBuffer[3] = union.b4;
		return CRC64(crc, byteBuffer, 4uL);
	}

	public static ulong Compute64(ulong crc, long i)
	{
		Union64 union = default(Union64);
		union.i = i;
		byteBuffer[0] = union.b1;
		byteBuffer[1] = union.b2;
		byteBuffer[2] = union.b3;
		byteBuffer[3] = union.b4;
		byteBuffer[4] = union.b5;
		byteBuffer[5] = union.b6;
		byteBuffer[6] = union.b7;
		byteBuffer[7] = union.b8;
		return CRC64(crc, byteBuffer, 8uL);
	}

	public static ulong Compute64(ulong crc, ulong u)
	{
		Union64 union = default(Union64);
		union.u = u;
		byteBuffer[0] = union.b1;
		byteBuffer[1] = union.b2;
		byteBuffer[2] = union.b3;
		byteBuffer[3] = union.b4;
		byteBuffer[4] = union.b5;
		byteBuffer[5] = union.b6;
		byteBuffer[6] = union.b7;
		byteBuffer[7] = union.b8;
		return CRC64(crc, byteBuffer, 8uL);
	}

	public static ulong Compute64(ulong crc, double f)
	{
		Union64 union = default(Union64);
		union.f = f;
		byteBuffer[0] = union.b1;
		byteBuffer[1] = union.b2;
		byteBuffer[2] = union.b3;
		byteBuffer[3] = union.b4;
		byteBuffer[4] = union.b5;
		byteBuffer[5] = union.b6;
		byteBuffer[6] = union.b7;
		byteBuffer[7] = union.b8;
		return CRC64(crc, byteBuffer, 8uL);
	}

	public static ulong Compute64(ulong crc, string str)
	{
		int num = GrowByteBuffer(Encoding.UTF8.GetByteCount(str));
		Encoding.UTF8.GetBytes(str, 0, str.Length, byteBuffer, 0);
		return CRC64(crc, byteBuffer, (ulong)num);
	}

	public static ulong Compute64(string[] strs)
	{
		ulong num = 0uL;
		for (int i = 0; i < strs.Length; i++)
		{
			int num2 = GrowByteBuffer(Encoding.UTF8.GetByteCount(strs[i]));
			Encoding.UTF8.GetBytes(strs[i], 0, strs[i].Length, byteBuffer, 0);
			num = CRC64(num, byteBuffer, (ulong)num2);
		}
		return num;
	}

	private static int GrowByteBuffer(int count)
	{
		if (count > byteBuffer.Length)
		{
			byteBuffer = new byte[count];
		}
		return count;
	}

	private static uint CRC32(uint value, byte[] buf, ulong size)
	{
		uint num = 0u;
		uint num2 = value ^ 0xFFFFFFFFu;
		while (size-- != 0)
		{
			num2 = crc32_tab[(num2 ^ buf[num++]) & 0xFF] ^ (num2 >> 8);
		}
		return num2 ^ 0xFFFFFFFFu;
	}

	private static ulong CRC64(ulong value, byte[] buf, ulong size)
	{
		uint num = 0u;
		ulong num2 = value ^ 0xFFFFFFFFFFFFFFFFuL;
		while (size-- != 0)
		{
			num2 = crc64_tab[(num2 ^ buf[num++]) & 0xFF] ^ (num2 >> 8);
		}
		return num2 ^ 0xFFFFFFFFFFFFFFFFuL;
	}
}
