using System;
using System.Collections.Generic;
using UnityEngine;

public struct Entry
{
	public class List : List<Entry>
	{
		public void Remove(UnityEngine.Object obj)
		{
			for (int i = 0; i < base.Count; i++)
			{
				if (base[i].TargetObject == obj || base[i].Errored)
				{
					RemoveAt(i);
					i--;
				}
			}
		}

		internal void Tick()
		{
			int i = 0;
			try
			{
				for (i = 0; i < base.Count; i++)
				{
					base[i].Function();
				}
			}
			catch (Exception exception)
			{
				Debug.LogException(exception);
				Entry value = base[i];
				value.Errored = true;
				base[i] = value;
			}
		}

		internal void TickTimed()
		{
			float time = Time.time;
			int i = 0;
			try
			{
				for (i = 0; i < base.Count; i++)
				{
					Entry value = base[i];
					if (!(value.NextCall > time))
					{
						value.Function();
						value.NextCall = time + value.MinDelay + value.RandDelay * UnityEngine.Random.Range(0f, 1f);
						base[i] = value;
					}
				}
			}
			catch (Exception exception)
			{
				Debug.LogException(exception);
				Entry value2 = base[i];
				value2.Errored = true;
				base[i] = value2;
			}
		}
	}

	public UnityEngine.Object TargetObject;

	public float MinDelay;

	public float RandDelay;

	public float NextCall;

	public Action Function;

	private bool Errored;

	public string DebugName;
}
