#define UNITY_ASSERTIONS
using System.Linq;
using Facepunch;
using Rust;
using UnityEngine;

public class GameObjectPool<T> : ObjectPool<T> where T : Component
{
	private GameObject poolRoot;

	public override void AddToPool(T t)
	{
		if (!Rust.Application.isQuitting)
		{
			if (poolRoot == null)
			{
				poolRoot = new GameObject("GameObjectPool - " + typeof(T).Name);
				poolRoot.SetActive(value: false);
				Object.DontDestroyOnLoad(poolRoot);
			}
			base.AddToPool(t);
			t.gameObject.SetActive(value: false);
			t.transform.SetParent(poolRoot.transform, worldPositionStays: false);
		}
	}

	public void AddChildrenToPool(Transform t)
	{
		T[] array = (from Transform x in t
			select x.GetComponent<T>() into x
			where x != null
			select x).ToArray();
		foreach (T val in array)
		{
			if (!val.CompareTag("persist"))
			{
				AddToPool(val);
			}
		}
	}

	public T TakeOrInstantiate(GameObject prefabSource)
	{
		T val = TakeFromPool();
		if (val != null)
		{
			val.gameObject.SetActive(value: true);
			return val;
		}
		GameObject gameObject = Instantiate.GameObject(prefabSource);
		Debug.Assert(gameObject != null, "GameObjectPool - passed prefab didn't have a valid component!");
		gameObject.transform.SetParent(null, worldPositionStays: false);
		gameObject.SetActive(value: true);
		return gameObject.GetComponent<T>();
	}
}
