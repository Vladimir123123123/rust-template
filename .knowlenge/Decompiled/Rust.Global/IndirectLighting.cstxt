using UnityEngine;
using UnityEngine.Rendering;

public static class IndirectLighting
{
	private static SphericalHarmonicsL2[] lightProbe = new SphericalHarmonicsL2[1];

	public static SphericalHarmonicsL2[] LightProbe => lightProbe;

	public static void UpdateLightProbe()
	{
		LightProbes.GetInterpolatedProbe(Vector3.zero, null, out lightProbe[0]);
	}

	public static void UpdateAmbientProbe()
	{
		SphericalHarmonicsL2 sphericalHarmonicsL = RenderSettings.ambientProbe;
		if (RenderSettings.ambientMode == AmbientMode.Flat)
		{
			sphericalHarmonicsL = default(SphericalHarmonicsL2);
			sphericalHarmonicsL.AddAmbientLight(RenderSettings.ambientSkyColor.linear * RenderSettings.ambientIntensity);
		}
		else if (RenderSettings.ambientMode == AmbientMode.Trilight)
		{
			Color color = RenderSettings.ambientSkyColor.linear * RenderSettings.ambientIntensity;
			Color color2 = RenderSettings.ambientEquatorColor.linear * RenderSettings.ambientIntensity;
			Color color3 = RenderSettings.ambientGroundColor.linear * RenderSettings.ambientIntensity;
			sphericalHarmonicsL = default(SphericalHarmonicsL2);
			sphericalHarmonicsL.AddAmbientLight(color2);
			sphericalHarmonicsL.AddDirectionalLight(Vector3.up, color - color2, 0.5f);
			sphericalHarmonicsL.AddDirectionalLight(Vector3.down, color3 - color2, 0.5f);
		}
		Shader.SetGlobalVector("ambient_SHAr", new Vector4(sphericalHarmonicsL[0, 3], sphericalHarmonicsL[0, 1], sphericalHarmonicsL[0, 2], sphericalHarmonicsL[0, 0] - sphericalHarmonicsL[0, 6]));
		Shader.SetGlobalVector("ambient_SHAg", new Vector4(sphericalHarmonicsL[1, 3], sphericalHarmonicsL[1, 1], sphericalHarmonicsL[1, 2], sphericalHarmonicsL[1, 0] - sphericalHarmonicsL[1, 6]));
		Shader.SetGlobalVector("ambient_SHAb", new Vector4(sphericalHarmonicsL[2, 3], sphericalHarmonicsL[2, 1], sphericalHarmonicsL[2, 2], sphericalHarmonicsL[2, 0] - sphericalHarmonicsL[2, 6]));
		Shader.SetGlobalVector("ambient_SHBr", new Vector4(sphericalHarmonicsL[0, 4], sphericalHarmonicsL[0, 5], sphericalHarmonicsL[0, 6] * 3f, sphericalHarmonicsL[0, 7]));
		Shader.SetGlobalVector("ambient_SHBg", new Vector4(sphericalHarmonicsL[1, 4], sphericalHarmonicsL[1, 5], sphericalHarmonicsL[1, 6] * 3f, sphericalHarmonicsL[1, 7]));
		Shader.SetGlobalVector("ambient_SHBb", new Vector4(sphericalHarmonicsL[2, 4], sphericalHarmonicsL[2, 5], sphericalHarmonicsL[2, 6] * 3f, sphericalHarmonicsL[2, 7]));
		Shader.SetGlobalVector("ambient_SHC", new Vector4(sphericalHarmonicsL[0, 8], sphericalHarmonicsL[1, 8], sphericalHarmonicsL[2, 8], 1f));
		Shader.SetGlobalFloat("global_MainLightingAtten", RenderSettings.ambientIntensity);
	}
}
