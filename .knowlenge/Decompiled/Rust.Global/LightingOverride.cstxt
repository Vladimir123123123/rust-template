using Rust;
using UnityEngine;
using UnityEngine.Rendering;

[ExecuteInEditMode]
public class LightingOverride : MonoBehaviour
{
	public bool overrideAmbientLight;

	public AmbientMode ambientMode;

	public Color ambientGroundColor;

	public Color ambientEquatorColor;

	public Color ambientLight;

	public float ambientIntensity;

	internal Color old_ambientLight;

	internal Color old_ambientGroundColor;

	internal Color old_ambientEquatorColor;

	internal float old_ambientIntensity;

	internal AmbientMode old_ambientMode;

	public float aspect;

	public bool overrideSkyReflection;

	public ReflectionProbe reflectionProbe;

	private static readonly int global_SkyReflection = Shader.PropertyToID("global_SkyReflection");

	private static readonly int global_SkyReflection_HDR = Shader.PropertyToID("global_SkyReflection_HDR");

	private void OnPreRender()
	{
		if (overrideAmbientLight)
		{
			old_ambientLight = RenderSettings.ambientLight;
			old_ambientIntensity = RenderSettings.ambientIntensity;
			old_ambientMode = RenderSettings.ambientMode;
			old_ambientGroundColor = RenderSettings.ambientGroundColor;
			old_ambientEquatorColor = RenderSettings.ambientEquatorColor;
			old_ambientGroundColor = RenderSettings.ambientGroundColor;
			RenderSettings.ambientMode = ambientMode;
			RenderSettings.ambientLight = ambientLight;
			RenderSettings.ambientIntensity = ambientIntensity;
			RenderSettings.ambientGroundColor = ambientLight;
			RenderSettings.ambientEquatorColor = ambientEquatorColor;
			RenderSettings.ambientGroundColor = ambientGroundColor;
		}
		if (aspect > 0f)
		{
			GetComponent<Camera>().aspect = aspect;
		}
		if (overrideSkyReflection)
		{
			Texture value = null;
			Vector4 value2 = new Vector4(1f, 1f, 0f, 0f);
			if (reflectionProbe != null)
			{
				value = reflectionProbe.texture;
				value2 = new Vector2(reflectionProbe.intensity, 1f);
			}
			Shader.SetGlobalTexture(global_SkyReflection, value);
			Shader.SetGlobalVector(global_SkyReflection_HDR, value2);
		}
		IndirectLighting.UpdateLightProbe();
		IndirectLighting.UpdateAmbientProbe();
	}

	private void OnPostRender()
	{
		if (overrideAmbientLight)
		{
			RenderSettings.ambientMode = ambientMode;
			RenderSettings.ambientLight = old_ambientLight;
			RenderSettings.ambientIntensity = old_ambientIntensity;
			RenderSettings.ambientMode = old_ambientMode;
			RenderSettings.ambientGroundColor = old_ambientGroundColor;
			RenderSettings.ambientEquatorColor = old_ambientEquatorColor;
			RenderSettings.ambientGroundColor = old_ambientGroundColor;
		}
	}
}
