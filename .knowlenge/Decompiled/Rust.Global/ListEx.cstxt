using System;
using System.Collections.Generic;
using System.Linq;
using UnityEngine;

public static class ListEx
{
	public static void Populate<T>(T[] arr, T value)
	{
		for (int i = 0; i < arr.Length; i++)
		{
			arr[i] = value;
		}
	}

	public static T GetRandom<T>(this List<T> list)
	{
		if (list == null || list.Count == 0)
		{
			return default(T);
		}
		return list[UnityEngine.Random.Range(0, list.Count)];
	}

	public static T GetRandom<T>(this List<T> list, uint seed)
	{
		if (list == null || list.Count == 0)
		{
			return default(T);
		}
		return list[SeedRandom.Range(ref seed, 0, list.Count)];
	}

	public static T GetRandom<T>(this List<T> list, ref uint seed)
	{
		if (list == null || list.Count == 0)
		{
			return default(T);
		}
		return list[SeedRandom.Range(ref seed, 0, list.Count)];
	}

	public static void Shuffle<T>(this List<T> list, uint seed)
	{
		list.Shuffle(ref seed);
	}

	public static void Shuffle<T>(this List<T> list, ref uint seed)
	{
		for (int i = 0; i < list.Count; i++)
		{
			int index = SeedRandom.Range(ref seed, 0, list.Count);
			int index2 = SeedRandom.Range(ref seed, 0, list.Count);
			T value = list[index];
			list[index] = list[index2];
			list[index2] = value;
		}
	}

	public static void BubbleSort<T>(this List<T> list) where T : IComparable<T>
	{
		for (int i = 1; i < list.Count; i++)
		{
			T value = list[i];
			for (int num = i - 1; num >= 0; num--)
			{
				T val = list[num];
				if (value.CompareTo(val) >= 0)
				{
					break;
				}
				list[num + 1] = val;
				list[num] = value;
			}
		}
	}

	public static void RemoveUnordered<T>(this List<T> list, int index)
	{
		list[index] = list[list.Count - 1];
		list.RemoveAt(list.Count - 1);
	}

	public static double TruncatedAverage(this List<double> list, float pct)
	{
		int num = (int)Math.Floor((float)list.Count * pct);
		return list.OrderBy((double x) => x).Skip(num).Take(list.Count - num * 2)
			.Average();
	}
}
