using System;
using System.Diagnostics;

public abstract class PersistentObjectWorkQueue<T> : PersistentObjectWorkQueue
{
	protected ListHashSet<T> workList = new ListHashSet<T>();

	private int currentIndex;

	private Stopwatch stopwatch = new Stopwatch();

	public override int ListLength => workList.Count;

	public PersistentObjectWorkQueue()
	{
		Name = GetType().FullName;
		PersistentObjectWorkQueue.All.Add(this);
	}

	public void Clear()
	{
		workList.Clear();
	}

	public void RunList(double maximumMilliseconds)
	{
		if (workList.Count == 0)
		{
			return;
		}
		using (TimeWarning.New(Name, (int)WarningThreshold.TotalMilliseconds))
		{
			stopwatch.Reset();
			stopwatch.Start();
			int count = workList.Count;
			T[] buffer = workList.Values.Buffer;
			if (currentIndex >= workList.Count)
			{
				currentIndex = 0;
			}
			int num = currentIndex;
			LastProcessedCount = 0;
			while (LastProcessedCount < count)
			{
				LastProcessedCount++;
				T val = buffer[currentIndex];
				if (val != null)
				{
					RunJob(val);
				}
				currentIndex++;
				if (currentIndex >= count)
				{
					currentIndex = 0;
				}
				if (currentIndex == num || stopwatch.Elapsed.TotalMilliseconds >= maximumMilliseconds)
				{
					break;
				}
			}
			LastExecutionTime = stopwatch.Elapsed;
			TotalExecutionTime += LastExecutionTime;
		}
	}

	public void Add(T entity)
	{
		if (!Contains(entity) && ShouldAdd(entity))
		{
			workList.Add(entity);
			OnAdded(entity);
		}
	}

	protected virtual void OnAdded(T entity)
	{
	}

	public void Remove(T entity)
	{
		workList.Remove(entity);
		OnRemoved(entity);
	}

	protected virtual void OnRemoved(T entity)
	{
	}

	public bool Contains(T entity)
	{
		return workList.Contains(entity);
	}

	protected virtual bool ShouldAdd(T entity)
	{
		return true;
	}

	protected abstract void RunJob(T entity);

	public string Info()
	{
		return $"{ListLength:n0}, lastCount: {LastProcessedCount:n0}, lastMS: {LastExecutionTime.TotalMilliseconds:R}, totMS: {TotalExecutionTime.TotalMilliseconds:n0}";
	}

	public void RunOnAll(Action<T> target)
	{
		foreach (T work in workList)
		{
			target(work);
		}
	}
}
