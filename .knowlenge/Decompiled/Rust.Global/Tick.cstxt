using System;
using System.Collections.Generic;
using Facepunch;
using UnityEngine;

public static class Tick
{
	public struct Entry
	{
		public class List : List<Entry>
		{
			public void Remove(UnityEngine.Object obj)
			{
				for (int i = 0; i < base.Count; i++)
				{
					if (base[i].TargetObject == obj || base[i].Errored)
					{
						RemoveAt(i);
						i--;
					}
				}
			}

			internal void Tick()
			{
				int i = 0;
				try
				{
					for (i = 0; i < base.Count; i++)
					{
						base[i].Function();
					}
				}
				catch (Exception exception)
				{
					Debug.LogException(exception);
					Entry value = base[i];
					value.Errored = true;
					base[i] = value;
				}
			}

			internal void TickTimed()
			{
				float time = Time.time;
				int i = 0;
				try
				{
					for (i = 0; i < base.Count; i++)
					{
						Entry value = base[i];
						if (!(value.NextCall > time))
						{
							value.Function();
							value.NextCall = time + value.MinDelay + value.RandDelay * UnityEngine.Random.Range(0f, 1f);
							base[i] = value;
						}
					}
				}
				catch (Exception exception)
				{
					Debug.LogException(exception);
					Entry value2 = base[i];
					value2.Errored = true;
					base[i] = value2;
				}
			}
		}

		public UnityEngine.Object TargetObject;

		public float MinDelay;

		public float RandDelay;

		public float NextCall;

		public Action Function;

		private bool Errored;

		public string DebugName;
	}

	private static Entry.List Timed = new Entry.List();

	private static Entry.List Update = new Entry.List();

	private static Entry.List Late = new Entry.List();

	private static List<UnityEngine.Object> RemoveList = new List<UnityEngine.Object>(32);

	public static void AddTimed(UnityEngine.Object obj, float minDelay, float maxDelay, Action action, string DebugName)
	{
		TickComponent.Init();
		Timed.Add(new Entry
		{
			TargetObject = obj,
			MinDelay = minDelay,
			RandDelay = maxDelay - minDelay,
			Function = action,
			DebugName = $"{DebugName} - {obj.name}"
		});
	}

	public static void Add(UnityEngine.Object obj, Action action, string DebugName)
	{
		TickComponent.Init();
		Update.Add(new Entry
		{
			TargetObject = obj,
			Function = action,
			DebugName = $"{DebugName} - {obj.name}"
		});
	}

	public static void AddLateUpdate(UnityEngine.Object obj, Action action, string DebugName)
	{
		TickComponent.Init();
		Late.Add(new Entry
		{
			TargetObject = obj,
			Function = action,
			DebugName = $"{DebugName} - {obj.name}"
		});
	}

	public static void RemoveAll(UnityEngine.Object obj)
	{
		RemoveList.Add(obj);
	}

	private static void Cleanup()
	{
		if (RemoveList.Count != 0)
		{
			for (int i = 0; i < RemoveList.Count; i++)
			{
				UnityEngine.Object obj = RemoveList[i];
				Timed.Remove(obj);
				Update.Remove(obj);
				Late.Remove(obj);
			}
			RemoveList.Clear();
		}
	}

	internal static void OnFrame()
	{
		Cleanup();
		Update.Tick();
		Cleanup();
		Timed.TickTimed();
	}

	internal static void OnFrameLate()
	{
		Cleanup();
		Late.Tick();
	}
}
