using System;
using UnityEngine;

public static class Vector2Ex
{
	public static Vector2 WithX(this Vector2 v, float x)
	{
		return new Vector2(x, v.y);
	}

	public static Vector2 WithY(this Vector2 v, float y)
	{
		return new Vector2(v.x, y);
	}

	public static Vector2 Parse(string p)
	{
		string[] array = p.Split(' ');
		if (array.Length == 2 && float.TryParse(array[0], out var result) && float.TryParse(array[1], out var result2))
		{
			return new Vector2(result, result2);
		}
		return Vector2.zero;
	}

	public static Vector2 Rotate(this Vector2 v, float degrees)
	{
		float f = degrees * (MathF.PI / 180f);
		float num = Mathf.Sin(f);
		float num2 = Mathf.Cos(f);
		return new Vector2(v.x * num2 - v.y * num, v.y * num2 + v.x * num);
	}

	public static float Length(float x, float y)
	{
		return Mathf.Sqrt(x * x + y * y);
	}

	public static float Length(Vector2 vec)
	{
		return Mathf.Sqrt(vec.x * vec.x + vec.y * vec.y);
	}

	public static Vector2 X(this Vector2 v, float x)
	{
		return new Vector2(x, v.y);
	}

	public static Vector2 Y(this Vector2 v, float y)
	{
		return new Vector2(v.x, y);
	}

	public static Vector2 ToCanvas(this Vector2 v, RectTransform target, Camera cam = null)
	{
		RectTransformUtility.ScreenPointToLocalPointInRectangle(target, v, cam, out var localPoint);
		return localPoint;
	}

	public static float AngleFromTo(Vector2 from, Vector2 to)
	{
		return Mathf.Atan2(to.y - from.y, to.x - from.x) * (180f / MathF.PI);
	}
}
