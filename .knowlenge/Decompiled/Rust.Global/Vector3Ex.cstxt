using UnityEngine;

public static class Vector3Ex
{
	public static Vector3 WithX(this Vector3 v, float x)
	{
		return new Vector3(x, v.y, v.z);
	}

	public static Vector3 WithY(this Vector3 v, float y)
	{
		return new Vector3(v.x, y, v.z);
	}

	public static Vector3 WithZ(this Vector3 v, float z)
	{
		return new Vector3(v.x, v.y, z);
	}

	public static Vector3 WithXY(this Vector3 v, float x, float y)
	{
		return new Vector3(x, y, v.z);
	}

	public static Vector3 WithXY(this Vector3 v, Vector2 other)
	{
		return new Vector3(other.x, other.y, v.z);
	}

	public static Vector3 WithXZ(this Vector3 v, float x, float z)
	{
		return new Vector3(x, v.y, z);
	}

	public static Vector3 WithXZ(this Vector3 v, Vector2 other)
	{
		return new Vector3(other.x, v.y, other.y);
	}

	public static Vector3 XZ(Vector3 v)
	{
		return new Vector3(v.x, 0f, v.z);
	}

	public static float Distance2D(Vector3 a, Vector3 b)
	{
		return Vector3.Distance(new Vector3(a.x, 0f, a.z), new Vector3(b.x, 0f, b.z));
	}

	public static float HeightDelta(Vector3 a, Vector3 b)
	{
		return Mathf.Abs(a.y - b.y);
	}

	public static Vector3 Direction2D(Vector3 aimAt, Vector3 aimFrom)
	{
		return (new Vector3(aimAt.x, 0f, aimAt.z) - new Vector3(aimFrom.x, 0f, aimFrom.z)).normalized;
	}

	public static Vector3 Direction(Vector3 aimAt, Vector3 aimFrom)
	{
		return (aimAt - aimFrom).normalized;
	}

	public static Vector3 Range(float x, float y)
	{
		return new Vector3(Random.Range(x, y), Random.Range(x, y), Random.Range(x, y));
	}

	public static Vector3 Scale(this Vector3 vector, float x, float y, float z)
	{
		return new Vector3(vector.x * x, vector.y * y, vector.z * z);
	}

	public static Vector3 SnapTo(this Vector3 vector, float snapValue)
	{
		return new Vector3(vector.x.SnapTo(snapValue), vector.y.SnapTo(snapValue), vector.z.SnapTo(snapValue));
	}

	public static Vector3 Inverse(this Vector3 v)
	{
		return new Vector3(1f / v.x, 1f / v.y, 1f / v.z);
	}

	public static float SignedAngle(this Vector3 v1, Vector3 v2, Vector3 n)
	{
		float num = Vector3.Angle(v1, v2);
		float num2 = Mathf.Sign(Vector3.Dot(n, Vector3.Cross(v1, v2)));
		return num * num2;
	}

	public static void FastRenormalize(this Vector3 n, float scale = 1f)
	{
		float num = n.x * n.x + n.y * n.y + n.z * n.z;
		float num2 = (1.875f + -1.25f * num + 0.375f * num * num) * scale;
		n.x *= num2;
		n.y *= num2;
		n.z *= num2;
	}

	public static void ToDirectionAndMagnitude(this Vector3 value, out Vector3 direction, out float magnitude)
	{
		magnitude = value.magnitude;
		direction = (((double)magnitude > 0.0001) ? (value / magnitude) : Vector3.zero);
	}

	public static Vector3 BlendNormals(Vector3 n1, Vector3 n2)
	{
		return Vector3.Normalize(new Vector3(n1.x + n2.x, n1.y * n2.y, n1.z + n2.z));
	}

	public static bool IsNaNOrInfinity(this Vector3 v)
	{
		if (float.IsNaN(v.x))
		{
			return true;
		}
		if (float.IsNaN(v.y))
		{
			return true;
		}
		if (float.IsNaN(v.z))
		{
			return true;
		}
		if (float.IsInfinity(v.x))
		{
			return true;
		}
		if (float.IsInfinity(v.y))
		{
			return true;
		}
		if (float.IsInfinity(v.z))
		{
			return true;
		}
		return false;
	}

	public static float DotRadians(this Vector3 a, Vector3 b)
	{
		float num = Vector3.Dot(a.normalized, b.normalized);
		if (float.IsNaN(num))
		{
			Vector3 vector = a;
			string text = vector.ToString();
			vector = b;
			Debug.LogWarning("DotRadians NAN: " + text + " -> " + vector.ToString());
		}
		return Mathf.Acos(Mathf.Clamp(num, -1f, 1f));
	}

	public static float DotDegrees(this Vector3 a, Vector3 b)
	{
		return a.DotRadians(b) * 57.29578f;
	}

	public static float Magnitude2D(this Vector3 v)
	{
		return v.MagnitudeXZ();
	}

	public static float SqrMagnitude2D(this Vector3 v)
	{
		return v.SqrMagnitudeXZ();
	}

	public static float MagnitudeXY(this Vector3 v)
	{
		return Mathf.Sqrt(v.x * v.x + v.y * v.y);
	}

	public static float SqrMagnitudeXY(this Vector3 v)
	{
		return v.x * v.x + v.y * v.y;
	}

	public static float MagnitudeXZ(this Vector3 v)
	{
		return Mathf.Sqrt(v.x * v.x + v.z * v.z);
	}

	public static float SqrMagnitudeXZ(this Vector3 v)
	{
		return v.x * v.x + v.z * v.z;
	}

	public static float MagnitudeYZ(this Vector3 v)
	{
		return Mathf.Sqrt(v.y * v.y + v.z * v.z);
	}

	public static float MagnitudeXPositiveYZ(this Vector3 v)
	{
		return Mathf.Sqrt(v.x * v.x + ((v.y > 0f) ? (v.y * v.y) : 0f) + v.z * v.z);
	}

	public static float SqrMagnitudeYZ(this Vector3 v)
	{
		return v.y * v.y + v.z * v.z;
	}

	public static Vector3 XY3D(this Vector3 v)
	{
		return new Vector3(v.x, v.y, 0f);
	}

	public static Vector3 XZ3D(this Vector3 v)
	{
		return new Vector3(v.x, 0f, v.z);
	}

	public static Vector3 YZ3D(this Vector3 v)
	{
		return new Vector3(0f, v.y, v.z);
	}

	public static Vector2 XY2D(this Vector3 v)
	{
		return new Vector2(v.x, v.y);
	}

	public static Vector2 XZ2D(this Vector3 v)
	{
		return new Vector2(v.x, v.z);
	}

	public static Vector2 YZ2D(this Vector3 v)
	{
		return new Vector2(v.y, v.z);
	}

	public static Vector2 YX2D(this Vector3 v)
	{
		return new Vector2(v.y, v.x);
	}

	public static Vector2 ZX2D(this Vector3 v)
	{
		return new Vector2(v.z, v.x);
	}

	public static Vector2 ZY2D(this Vector3 v)
	{
		return new Vector2(v.z, v.y);
	}

	public static Vector3 XZ3D(this Vector2 v)
	{
		return new Vector3(v.x, 0f, v.y);
	}

	public static float Max(this Vector4 v)
	{
		return Mathf.Max(Mathf.Max(v.x, v.y), Mathf.Max(v.z, v.w));
	}

	public static float Max(this Vector3 v)
	{
		return Mathf.Max(Mathf.Max(v.x, v.y), v.z);
	}

	public static float Max(this Vector2 v)
	{
		return Mathf.Max(v.x, v.y);
	}

	public static Vector4 Abs(this Vector4 v)
	{
		return new Vector4(Mathf.Abs(v.x), Mathf.Abs(v.y), Mathf.Abs(v.z), Mathf.Abs(v.w));
	}

	public static Vector3 Abs(this Vector3 v)
	{
		return new Vector3(Mathf.Abs(v.x), Mathf.Abs(v.y), Mathf.Abs(v.z));
	}

	public static Vector2 Abs(this Vector2 v)
	{
		return new Vector2(Mathf.Abs(v.x), Mathf.Abs(v.y));
	}

	public static Vector3 Parse(string p)
	{
		string[] array = p.Split(' ');
		if (array.Length == 3)
		{
			return new Vector3(float.Parse(array[0]), float.Parse(array[1]), float.Parse(array[2]));
		}
		return Vector3.zero;
	}

	public static Vector3 GetWithInaccuracy(this Vector3 o, float maxAngle)
	{
		return Quaternion.AngleAxis(Random.Range(0f - maxAngle, maxAngle), Vector3.up) * o;
	}

	public static Vector3 NormalizeXZ(this Vector3 v)
	{
		return new Vector2(v.x, v.z).normalized.XZ3D();
	}
}
