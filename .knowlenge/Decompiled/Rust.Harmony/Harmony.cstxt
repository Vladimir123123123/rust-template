using System;
using System.Reflection;

private class Harmony
{
	private object harmonyObject;

	public static bool DEBUG
	{
		get
		{
			return (bool)ReflectionFields.Instance.field_DEBUG.GetValue(null);
		}
		set
		{
			ReflectionFields.Instance.field_DEBUG.SetValue(null, value);
		}
	}

	public Harmony(string id)
	{
		harmonyObject = Activator.CreateInstance(ReflectionFields.Instance.type_Harmony, id);
	}

	public void PatchAll(Assembly assembly)
	{
		ReflectionFields.Instance.Harmony_PatchAll.Invoke(harmonyObject, new object[1] { assembly });
	}

	public void UnpatchAll(string harmonyId)
	{
		ReflectionFields.Instance.Harmony_UnpatchAll.Invoke(harmonyObject, new object[1] { harmonyId });
	}
}
