using System;
using System.Reflection;

private class ReflectionFields
{
	public static ReflectionFields Instance;

	public readonly Type type_Harmony;

	public readonly Type type_FileLog;

	public readonly FieldInfo field_DEBUG;

	public readonly MethodInfo Harmony_PatchAll;

	public readonly MethodInfo Harmony_UnpatchAll;

	public readonly MethodInfo FileLog_Reset;

	public readonly MethodInfo FileLog_FlushBuffer;

	public ReflectionFields()
	{
		type_FileLog = Type.GetType("HarmonyLib.FileLog, 0Harmony", throwOnError: true);
		type_Harmony = Type.GetType("HarmonyLib.Harmony, 0Harmony", throwOnError: true);
		field_DEBUG = type_Harmony.GetField("DEBUG", BindingFlags.Static | BindingFlags.Public);
		Harmony_PatchAll = type_Harmony.GetMethod("PatchAll", BindingFlags.Instance | BindingFlags.Public, null, new Type[1] { typeof(Assembly) }, null);
		Harmony_UnpatchAll = type_Harmony.GetMethod("UnpatchAll", BindingFlags.Instance | BindingFlags.Public, null, new Type[1] { typeof(string) }, null);
		FileLog_Reset = type_FileLog.GetMethod("Reset", BindingFlags.Static | BindingFlags.Public);
		FileLog_FlushBuffer = type_FileLog.GetMethod("FlushBuffer", BindingFlags.Static | BindingFlags.Public);
	}
}
