using System;
using UnityEngine;

[Serializable]
public class Phrase
{
	public string token;

	[TextArea]
	public string english;

	private static readonly Memoized<Phrase, string> ImplicitPhraseCache = new Memoized<Phrase, string>((string s) => new Phrase("", s));

	public virtual string translated
	{
		get
		{
			if (string.IsNullOrEmpty(token))
			{
				return english;
			}
			return Get(token, english);
		}
	}

	public bool IsValid()
	{
		return !string.IsNullOrEmpty(token);
	}

	public Phrase(string t = "", string eng = "")
	{
		token = t;
		english = eng;
	}

	public static implicit operator Phrase(string b)
	{
		return ImplicitPhraseCache.Get(b);
	}
}
