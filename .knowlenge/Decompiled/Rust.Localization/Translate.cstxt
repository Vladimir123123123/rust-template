using System;
using System.Globalization;
using UnityEngine;

public static class Translate
{
	[Serializable]
	public class Phrase
	{
		public string token;

		[TextArea]
		public string english;

		private static readonly Memoized<Phrase, string> ImplicitPhraseCache = new Memoized<Phrase, string>((string s) => new Phrase("", s));

		public virtual string translated
		{
			get
			{
				if (string.IsNullOrEmpty(token))
				{
					return english;
				}
				return Get(token, english);
			}
		}

		public bool IsValid()
		{
			return !string.IsNullOrEmpty(token);
		}

		public Phrase(string t = "", string eng = "")
		{
			token = t;
			english = eng;
		}

		public static implicit operator Phrase(string b)
		{
			return ImplicitPhraseCache.Get(b);
		}
	}

	private static string language = CultureInfo.InstalledUICulture.TwoLetterISOLanguageName;

	public static string Get(string key, string def = null)
	{
		return def ?? ("#" + key);
	}

	public static string GetLanguage()
	{
		return language;
	}

	public static bool CurrentLanguageIsRTL()
	{
		if (!(GetLanguage() == "ar"))
		{
			return GetLanguage() == "he";
		}
		return true;
	}

	public static CultureInfo GetCurrentCulture()
	{
		return CultureInfo.GetCultureInfo(GetLanguage());
	}
}
