using System.Collections.Generic;
using System.Linq;
using System.Text;
using UnityEngine;

public static class ServerTagCompressor
{
	private static readonly IReadOnlyDictionary<char, string> charToTag;

	private static readonly IReadOnlyDictionary<string, char> tagToChar;

	public static readonly char TagPrefixCharacter;

	private static readonly StringBuilder normalTags;

	static ServerTagCompressor()
	{
		charToTag = new Dictionary<char, string>
		{
			{ 'b', "biweekly" },
			{ 'c', "creative" },
			{ 'd', "training" },
			{ 'e', "minigame" },
			{ 'g', "gamemode" },
			{ 'h', "hardcore" },
			{ 'i', "battlefield" },
			{ 'j', "broyale" },
			{ 'k', "builds" },
			{ 'm', "monthly" },
			{ 'o', "oxide" },
			{ 'p', "pve" },
			{ 'q', "premium" },
			{ 'r', "roleplay" },
			{ 's', "softcore" },
			{ 't', "tut" },
			{ 'u', "primitive" },
			{ 'v', "vanilla" },
			{ 'w', "weekly" },
			{ 'y', "carbon" },
			{ 'z', "modded" }
		};
		TagPrefixCharacter = '^';
		normalTags = new StringBuilder();
		tagToChar = charToTag.ToDictionary((KeyValuePair<char, string> x) => x.Value, (KeyValuePair<char, string> x) => x.Key);
	}

	public static string ShortenTag(string tag)
	{
		if (tagToChar.TryGetValue(tag, out var value))
		{
			return $"{TagPrefixCharacter}{value}";
		}
		return tag;
	}

	public static string CompressTags(string input)
	{
		if (input.Contains(TagPrefixCharacter))
		{
			Debug.LogError($"Server tags '{input}' already contain unique compressed character '{TagPrefixCharacter}'");
		}
		string[] array = input.Split(',');
		for (int i = 0; i < array.Length; i++)
		{
			array[i] = ShortenTag(array[i]);
		}
		return string.Join(',', array);
	}

	public static void DecompressTags(HashSet<string> tags, string compactTag)
	{
		for (int i = 1; i < compactTag.Length; i += 2)
		{
			char key = compactTag[i];
			if (charToTag.TryGetValue(key, out var value))
			{
				tags.Add(value);
			}
		}
	}
}
