using System;
using System.Collections.Generic;
using System.Linq;
using Rust.Platform.Steam;
using Steamworks;

public class SteamItemDefinition : IPlayerItemDefinition, IEquatable<IPlayerItemDefinition>
{
	public InventoryDef Value { get; }

	public int DefinitionId => Value.Id;

	public string Name => Value.Name;

	public string Description => Value.Description;

	public string Type => Value.Type;

	public string IconUrl => Value.IconUrlLarge;

	public int LocalPrice => Value.LocalPrice;

	public string LocalPriceFormatted => Value.LocalPriceFormatted;

	public string PriceCategory => Value.PriceCategory;

	public bool IsGenerator => Value.IsGenerator;

	public bool IsTradable => Value.Tradable;

	public bool IsMarketable => Value.Marketable;

	public string StoreTags => Value.GetProperty<string>("store_tags");

	public DateTime Created => Value.Created;

	public DateTime Modified => Value.Modified;

	public string ItemShortName => Value.GetProperty<string>("itemshortname");

	public ulong WorkshopId => Value.GetProperty<ulong>("workshopid");

	public ulong WorkshopDownload => Value.GetProperty<ulong>("workshopdownload");

	internal SteamItemDefinition(InventoryDef value)
	{
		Value = value;
	}

	public IEnumerable<PlayerItemRecipe> GetRecipesContainingThis()
	{
		return Value.GetRecipesContainingThis().Select(SteamToPlatformRecipe);
	}

	private static PlayerItemRecipe SteamToPlatformRecipe(InventoryRecipe recipe)
	{
		return new PlayerItemRecipe(recipe.Ingredients.Select((InventoryRecipe.Ingredient i) => new PlayerItemRecipe.Ingredient(i.DefinitionId, i.Count)).ToList(), new SteamItemDefinition(recipe.Result));
	}

	public bool Equals(IPlayerItemDefinition other)
	{
		return Equals((object)other);
	}

	public override bool Equals(object obj)
	{
		if (obj == null)
		{
			return false;
		}
		if (this == obj)
		{
			return true;
		}
		if (obj.GetType() != GetType())
		{
			return false;
		}
		return Value.Equals(((SteamItemDefinition)obj).Value);
	}

	public override int GetHashCode()
	{
		if (!(Value != null))
		{
			return 0;
		}
		return Value.GetHashCode();
	}
}
