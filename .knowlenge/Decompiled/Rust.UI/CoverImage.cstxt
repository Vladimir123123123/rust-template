using UnityEngine;
using UnityEngine.UI;

public class CoverImage : MaskableGraphic
{
	[SerializeField]
	private Texture _texture;

	public Texture texture
	{
		get
		{
			return _texture;
		}
		set
		{
			if (!(value == texture))
			{
				_texture = value;
				SetVerticesDirty();
				SetMaterialDirty();
			}
		}
	}

	public override Texture mainTexture
	{
		get
		{
			if (!(_texture != null))
			{
				return Graphic.s_WhiteTexture;
			}
			return _texture;
		}
	}

	public CoverImage()
	{
		base.useLegacyMeshGeneration = false;
	}

	protected override void OnPopulateMesh(VertexHelper vh)
	{
		if (_texture == null)
		{
			base.OnPopulateMesh(vh);
			return;
		}
		Rect dst = GetPixelAdjustedRect();
		Vector4 vector = new Vector4(dst.x, dst.y, dst.x + dst.width, dst.y + dst.height);
		float num = (float)_texture.width * _texture.texelSize.x;
		float num2 = (float)_texture.height * _texture.texelSize.y;
		Color32 color = this.color;
		Rect coverRect = GetCoverRect(in dst, _texture);
		vh.Clear();
		vh.AddVert(new Vector3(vector.x, vector.y), color, new Vector2(coverRect.xMin * num, coverRect.yMin * num2));
		vh.AddVert(new Vector3(vector.x, vector.w), color, new Vector2(coverRect.xMin * num, coverRect.yMax * num2));
		vh.AddVert(new Vector3(vector.z, vector.w), color, new Vector2(coverRect.xMax * num, coverRect.yMax * num2));
		vh.AddVert(new Vector3(vector.z, vector.y), color, new Vector2(coverRect.xMax * num, coverRect.yMin * num2));
		vh.AddTriangle(0, 1, 2);
		vh.AddTriangle(2, 3, 0);
	}

	private Rect GetCoverRect(in Rect dst, Texture texture)
	{
		Vector2 size = dst.size;
		Vector2 vector = new Vector2(texture.width, texture.height);
		float num = size.x / size.y;
		float num2 = vector.x / vector.y;
		float num3 = ((num >= num2) ? (size.x / vector.x) : (size.y / vector.y));
		float num4 = vector.x * num3;
		float num5 = vector.y * num3;
		Rect result = default(Rect);
		result.x = (num4 - size.x) / 2f / num4;
		result.y = (num5 - size.y) / 2f / num5;
		result.width = size.x / num4;
		result.height = size.y / num5;
		return result;
	}

	protected override void OnDidApplyAnimationProperties()
	{
		SetMaterialDirty();
		SetVerticesDirty();
	}

	protected override void OnRectTransformDimensionsChange()
	{
		SetVerticesDirty();
	}
}
