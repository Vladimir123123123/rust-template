using System;
using Facepunch;
using UnityEngine;
using UnityEngine.UI;
using UnityEngine.Video;

[RequireComponent(typeof(CoverImage), typeof(VideoPlayer))]
public class CoverVideo : MonoBehaviour
{
	public string Url;

	[Min(0f)]
	public float FadeIn = 0.5f;

	public Graphic Fallback;

	private CoverImage _cover;

	private VideoPlayer _player;

	private CanvasRenderer _fallbackGraphic;

	public void OnEnable()
	{
		_cover = GetComponent<CoverImage>();
		_player = GetComponent<VideoPlayer>();
		if (Fallback != null && Fallback.TryGetComponent<CanvasRenderer>(out var component))
		{
			component.SetAlpha(1f);
		}
		if (TryGetComponent<CanvasRenderer>(out var component2))
		{
			component2.SetAlpha(0f);
		}
		if (_cover != null && _player != null && !string.IsNullOrWhiteSpace(Url))
		{
			_cover.color = Color.white;
			_player.renderMode = VideoRenderMode.APIOnly;
			_player.prepareCompleted += PlayerPrepareCompleted;
			Play(Url);
		}
	}

	public void OnDisable()
	{
		if (_cover != null)
		{
			_cover.texture = null;
		}
		if (_player != null)
		{
			_player.prepareCompleted -= PlayerPrepareCompleted;
			_player.Stop();
		}
	}

	private async void Play(string url)
	{
		try
		{
			string text = await WebUtil.DownloadFileTemp(url, keepextension: true);
			if (!string.IsNullOrEmpty(text))
			{
				_player.Stop();
				_player.url = text;
				_player.Play();
			}
		}
		catch (Exception message)
		{
			Debug.LogWarning(message);
		}
	}

	private void PlayerPrepareCompleted(VideoPlayer source)
	{
		if (!(_cover == null) && !(_player == null))
		{
			_cover.texture = _player.texture;
			_cover.CrossFadeAlpha(1f, FadeIn, ignoreTimeScale: false);
			if (Fallback != null)
			{
				Fallback.CrossFadeAlpha(0f, FadeIn, ignoreTimeScale: false);
			}
		}
	}
}
