using System;
using System.Collections;
using System.IO;
using System.Linq;
using System.Threading.Tasks;
using Rust;
using Rust.UI;
using UnityEngine;
using UnityEngine.UI;

public class FileDialog : MonoBehaviour
{
	public enum FileDialogMode
	{
		Open,
		Save
	}

	[HideInInspector]
	public string result;

	[HideInInspector]
	private FileDialogMode mode;

	[HideInInspector]
	public bool finished;

	[Header("References")]
	public Image windowIcon;

	public Text windowName;

	public InputField currentPath;

	public InputField fileName;

	public Button up;

	public Button commit;

	public Button cancel;

	public GameObject filesScrollRectContent;

	public GameObject drivesScrollRectContent;

	[Header("Lists Prefabs")]
	public GameObject filesScrollRectElement;

	public GameObject drivesScrollRectElement;

	[Header("Lists Icons")]
	public Sprite folderIcon;

	public Sprite fileIcon;

	private string workingPath;

	private string workingFile;

	private string[] allowedExtensions;

	private long maxSize = -1L;

	private bool saveLastPath = true;

	public IEnumerator Open(string path = null, string allowedExtensions = null, string windowName = "OPEN FILE", Sprite windowIcon = null, long maxSize = -1L, bool saveLastPath = true)
	{
		mode = FileDialogMode.Open;
		commit.GetComponentInChildren<Text>().text = "OPEN";
		fileName.text = "";
		workingPath = "";
		workingFile = "";
		result = null;
		finished = false;
		this.maxSize = maxSize;
		this.saveLastPath = saveLastPath;
		if (!string.IsNullOrEmpty(allowedExtensions))
		{
			allowedExtensions = allowedExtensions.ToLower();
			this.allowedExtensions = allowedExtensions.Split('|');
		}
		if (string.IsNullOrEmpty(path))
		{
			path = ((!saveLastPath) ? (Rust.Application.dataPath + "/../") : (string.IsNullOrEmpty(PlayerPrefs.GetString("OxOD.lastPath", null)) ? (Rust.Application.dataPath + "/../") : PlayerPrefs.GetString("OxOD.lastPath", null)));
		}
		this.windowName.text = windowName;
		if ((bool)windowIcon)
		{
			this.windowIcon.sprite = windowIcon;
		}
		GoTo(path);
		base.gameObject.SetActive(value: true);
		while (!finished)
		{
			yield return new WaitForSeconds(0.1f);
		}
	}

	public IEnumerator Save(string path = null, string allowedExtensions = null, string windowName = "SAVE FILE", Sprite windowIcon = null, bool saveLastPath = true)
	{
		mode = FileDialogMode.Save;
		commit.GetComponentInChildren<Text>().text = "SAVE";
		fileName.text = "";
		workingPath = "";
		workingFile = "";
		result = null;
		finished = false;
		maxSize = -1L;
		this.saveLastPath = saveLastPath;
		if (!string.IsNullOrEmpty(allowedExtensions))
		{
			allowedExtensions = allowedExtensions.ToLower();
			this.allowedExtensions = allowedExtensions.Split('|');
		}
		else
		{
			this.allowedExtensions = null;
		}
		if (string.IsNullOrEmpty(path))
		{
			path = ((!saveLastPath) ? (Rust.Application.dataPath + "/../") : (string.IsNullOrEmpty(PlayerPrefs.GetString("OxOD.lastPath", null)) ? (Rust.Application.dataPath + "/../") : PlayerPrefs.GetString("OxOD.lastPath", null)));
		}
		this.windowName.text = windowName;
		if ((bool)windowIcon)
		{
			this.windowIcon.sprite = windowIcon;
		}
		GoTo(path);
		base.gameObject.SetActive(value: true);
		while (!finished)
		{
			yield return new WaitForSeconds(0.1f);
		}
	}

	public async Task<string> SaveAsync(string path = null, string allowedExtensions = null, string windowName = "SAVE FILE", Sprite windowIcon = null, bool saveLastPath = true)
	{
		mode = FileDialogMode.Save;
		commit.GetComponentInChildren<Text>().text = "SAVE";
		fileName.text = "";
		workingPath = "";
		workingFile = "";
		result = null;
		finished = false;
		maxSize = -1L;
		this.saveLastPath = saveLastPath;
		if (!string.IsNullOrEmpty(allowedExtensions))
		{
			allowedExtensions = allowedExtensions.ToLower();
			this.allowedExtensions = allowedExtensions.Split('|');
		}
		else
		{
			this.allowedExtensions = null;
		}
		if (string.IsNullOrEmpty(path))
		{
			path = ((!saveLastPath) ? (Rust.Application.dataPath + "/../") : (string.IsNullOrEmpty(PlayerPrefs.GetString("OxOD.lastPath", null)) ? (Rust.Application.dataPath + "/../") : PlayerPrefs.GetString("OxOD.lastPath", null)));
		}
		this.windowName.text = windowName;
		if ((bool)windowIcon)
		{
			this.windowIcon.sprite = windowIcon;
		}
		GoTo(path);
		base.gameObject.SetActive(value: true);
		while (!finished)
		{
			await Task.Delay(100);
		}
		return result;
	}

	private void Hide()
	{
		base.gameObject.SetActive(value: false);
	}

	public void GoUp()
	{
		OpenDir(workingPath + "/../");
	}

	public void GoTo(string newPath)
	{
		if (new DirectoryInfo(newPath).Exists)
		{
			OpenDir(newPath + "/");
		}
		else if (mode == FileDialogMode.Open)
		{
			if (new FileInfo(newPath).Exists)
			{
				OpenDir(new FileInfo(newPath).Directory.FullName + "/");
				SelectFile(newPath);
			}
			else
			{
				OpenDir(Rust.Application.dataPath + "/../");
			}
		}
		else if (new DirectoryInfo(new FileInfo(newPath).Directory.FullName + "/").Exists)
		{
			OpenDir(new FileInfo(newPath).Directory.FullName + "/");
			SelectFile(newPath);
		}
		else
		{
			OpenDir(Rust.Application.dataPath + "/../");
		}
	}

	public void SelectFile(string file)
	{
		if (mode == FileDialogMode.Open)
		{
			workingFile = Path.GetFullPath(file);
		}
		else
		{
			workingFile = new FileInfo(Path.GetFullPath(file)).Name;
		}
		UpdateFileInfo();
	}

	public void OnCommitClick()
	{
		if (mode == FileDialogMode.Open)
		{
			result = Path.GetFullPath(workingFile);
		}
		else
		{
			result = Path.GetFullPath(workingPath + "/" + workingFile);
		}
		finished = true;
		if (saveLastPath)
		{
			PlayerPrefs.SetString("OxOD.lastPath", workingPath);
		}
		Hide();
	}

	public void OnCancelClick()
	{
		result = null;
		finished = true;
		Hide();
	}

	public void ClearSelection()
	{
		if (mode == FileDialogMode.Open)
		{
			workingFile = "";
			UpdateFileInfo();
		}
	}

	public void OnTypedFilename(string newName)
	{
		if (mode == FileDialogMode.Open)
		{
			workingFile = workingPath + "/" + newName;
		}
		else
		{
			workingFile = newName;
		}
		UpdateFileInfo();
	}

	public void OnTypedEnd(string newName)
	{
		if (string.IsNullOrEmpty(newName))
		{
			return;
		}
		if (mode == FileDialogMode.Save)
		{
			if (allowedExtensions != null)
			{
				if (allowedExtensions.Contains(new FileInfo(newName).Extension.ToLower()))
				{
					workingFile = newName;
				}
				else
				{
					workingFile = newName + allowedExtensions[0];
				}
			}
			else
			{
				workingFile = newName;
			}
		}
		UpdateFileInfo();
	}

	public void UpdateFileInfo()
	{
		if (mode == FileDialogMode.Open)
		{
			try
			{
				fileName.text = new FileInfo(workingFile).Name;
				commit.interactable = File.Exists(workingFile);
				return;
			}
			catch (Exception)
			{
				fileName.text = "";
				commit.interactable = false;
				return;
			}
		}
		if (workingFile.Length > 0)
		{
			fileName.text = new FileInfo(workingFile).Name;
		}
		commit.interactable = workingFile.Length > 0;
	}

	public void OpenDir(string path)
	{
		ClearSelection();
		workingPath = Path.GetFullPath(path);
		UpdateElements();
		UpdateDrivesList();
		UpdateFilesList();
	}

	private void UpdateElements()
	{
		currentPath.text = workingPath;
	}

	private void UpdateDrivesList()
	{
		GameObject gameObject = drivesScrollRectContent;
		for (int i = 0; i < gameObject.transform.childCount; i++)
		{
			UnityEngine.Object.Destroy(gameObject.transform.GetChild(i).gameObject);
		}
		string[] logicalDrives = Directory.GetLogicalDrives();
		for (int j = 0; j < logicalDrives.Length; j++)
		{
			GameObject obj = UnityEngine.Object.Instantiate(drivesScrollRectElement, Vector3.zero, Quaternion.identity);
			obj.transform.SetParent(gameObject.transform, worldPositionStays: true);
			obj.transform.localScale = new Vector3(1f, 1f, 1f);
			FileListElement component = obj.GetComponent<FileListElement>();
			component.instance = this;
			component.data = logicalDrives[j];
			component.elementName.text = logicalDrives[j];
			component.isFile = false;
		}
	}

	private string GetFileSizeText(long size)
	{
		string text = "#.##";
		if ((float)size / 1024f < 1f)
		{
			return "1 Kb";
		}
		if ((float)size / 1024f < 1024f)
		{
			return ((float)size / 1024f).ToString(text) + " Kb";
		}
		if ((float)size / 1024f / 1024f < 1024f)
		{
			return ((float)size / 1024f / 1024f).ToString(text) + " Mb";
		}
		return ((float)size / 1024f / 1024f / 1024f).ToString(text) + " Gb";
	}

	private void UpdateFilesList()
	{
		GameObject gameObject = filesScrollRectContent;
		for (int i = 0; i < gameObject.transform.childCount; i++)
		{
			UnityEngine.Object.Destroy(gameObject.transform.GetChild(i).gameObject);
		}
		DirectoryInfo directoryInfo = new DirectoryInfo(workingPath);
		try
		{
			DirectoryInfo[] directories = directoryInfo.GetDirectories();
			for (int j = 0; j < directories.Length; j++)
			{
				if (directories[j].Name[0] != '@' && directories[j].Name[0] != '.' && (directories[j].Attributes & FileAttributes.Hidden) != FileAttributes.Hidden)
				{
					GameObject obj = UnityEngine.Object.Instantiate(filesScrollRectElement, Vector3.zero, Quaternion.identity);
					obj.transform.SetParent(gameObject.transform, worldPositionStays: true);
					obj.transform.localScale = new Vector3(1f, 1f, 1f);
					FileListElement component = obj.GetComponent<FileListElement>();
					component.instance = this;
					component.data = directories[j].FullName + "/";
					component.elementName.text = directories[j].Name;
					component.size.text = "";
					component.icon.sprite = folderIcon;
					component.isFile = false;
				}
			}
			if (allowedExtensions != null)
			{
				FileInfo[] array = (from f in directoryInfo.GetFiles()
					where allowedExtensions.Contains(f.Extension.ToLower())
					select f).ToArray();
				for (int k = 0; k < array.Length; k++)
				{
					if (maxSize > 0)
					{
						if (array[k].Length < maxSize)
						{
							GameObject obj2 = UnityEngine.Object.Instantiate(filesScrollRectElement, Vector3.zero, Quaternion.identity);
							obj2.transform.SetParent(gameObject.transform, worldPositionStays: true);
							obj2.transform.localScale = new Vector3(1f, 1f, 1f);
							FileListElement component2 = obj2.GetComponent<FileListElement>();
							component2.instance = this;
							component2.data = array[k].FullName;
							component2.size.text = GetFileSizeText(array[k].Length);
							component2.elementName.text = array[k].Name;
							component2.icon.sprite = fileIcon;
							component2.isFile = true;
						}
					}
					else
					{
						GameObject obj3 = UnityEngine.Object.Instantiate(filesScrollRectElement, Vector3.zero, Quaternion.identity);
						obj3.transform.SetParent(gameObject.transform, worldPositionStays: true);
						obj3.transform.localScale = new Vector3(1f, 1f, 1f);
						FileListElement component3 = obj3.GetComponent<FileListElement>();
						component3.instance = this;
						component3.data = array[k].FullName;
						component3.size.text = GetFileSizeText(array[k].Length);
						component3.elementName.text = array[k].Name;
						component3.icon.sprite = fileIcon;
						component3.isFile = true;
					}
				}
				return;
			}
			FileInfo[] files = directoryInfo.GetFiles();
			for (int l = 0; l < files.Length; l++)
			{
				if (maxSize > 0)
				{
					if (files[l].Length < maxSize)
					{
						GameObject obj4 = UnityEngine.Object.Instantiate(filesScrollRectElement, Vector3.zero, Quaternion.identity);
						obj4.transform.SetParent(gameObject.transform, worldPositionStays: true);
						obj4.transform.localScale = new Vector3(1f, 1f, 1f);
						FileListElement component4 = obj4.GetComponent<FileListElement>();
						component4.instance = this;
						component4.data = files[l].FullName;
						component4.size.text = GetFileSizeText(files[l].Length);
						component4.elementName.text = files[l].Name;
						component4.icon.sprite = fileIcon;
						component4.isFile = true;
					}
				}
				else
				{
					GameObject obj5 = UnityEngine.Object.Instantiate(filesScrollRectElement, Vector3.zero, Quaternion.identity);
					obj5.transform.SetParent(gameObject.transform, worldPositionStays: true);
					obj5.transform.localScale = new Vector3(1f, 1f, 1f);
					FileListElement component5 = obj5.GetComponent<FileListElement>();
					component5.instance = this;
					component5.data = files[l].FullName;
					component5.size.text = GetFileSizeText(files[l].Length);
					component5.elementName.text = files[l].Name;
					component5.icon.sprite = fileIcon;
					component5.isFile = true;
				}
			}
		}
		catch (Exception)
		{
		}
	}
}
