using Rust.UI;
using UnityEngine.EventSystems;
using UnityEngine.UI;

public static class Make
{
	public static class Container
	{
		public static RustWrapper Toolbar(string style = "Normal")
		{
			return Manager.Create<RustWrapper>(PrefabRoot + "Container.Toolbar." + style + ".prefab");
		}

		public static RustWrapper Popup(string style = "Normal")
		{
			return Manager.Create<RustWrapper>(PrefabRoot + "Container.Popup." + style + ".prefab");
		}

		public static RustWrapper Indent(string style = "Normal")
		{
			return Manager.Create<RustWrapper>(PrefabRoot + "Container.Indent." + style + ".prefab");
		}

		public static TabControl TabControl(string style = "Normal")
		{
			return Manager.Create<TabControl>(PrefabRoot + "TabControl." + style + ".prefab");
		}

		public static RustLayout Vertical(string style = "Normal")
		{
			return Manager.Create<RustLayout>(PrefabRoot + "Vertical." + style + ".prefab");
		}
	}

	public static class Form
	{
		public static RustWrapper Toolbar(string style = "Normal")
		{
			return Manager.Create<RustWrapper>(PrefabRoot + "Container.Toolbar." + style + ".prefab");
		}

		public static RustWrapper Popup(string style = "Normal")
		{
			return Manager.Create<RustWrapper>(PrefabRoot + "Container.Popup." + style + ".prefab");
		}

		public static RustWrapper Vertical(Translate.Phrase phrase, UIBehaviour control = null, string style = "Normal")
		{
			RustWrapper rustWrapper = Manager.Create<RustWrapper>(PrefabRoot + "Form.Vertical." + style + ".prefab");
			rustWrapper.Text.SetPhrase(phrase);
			if (control != null)
			{
				rustWrapper.Add(control);
			}
			return rustWrapper;
		}

		public static RustWrapper Horizontal(Translate.Phrase phrase, UIBehaviour control = null, string style = "Normal")
		{
			RustWrapper rustWrapper = Manager.Create<RustWrapper>(PrefabRoot + "Form.Horizontal." + style + ".prefab");
			rustWrapper.Text.SetPhrase(phrase);
			if (control != null)
			{
				rustWrapper.Add(control);
			}
			return rustWrapper;
		}
	}

	public static class Label
	{
		public static RustText Normal(Translate.Phrase text)
		{
			RustText rustText = Manager.Create<RustText>(PrefabRoot + "Label.Normal.prefab");
			rustText.SetPhrase(text);
			return rustText;
		}

		public static RustText Small(Translate.Phrase text)
		{
			RustText rustText = Manager.Create<RustText>(PrefabRoot + "Label.Small.prefab");
			rustText.SetPhrase(text);
			return rustText;
		}

		public static RustText Large(Translate.Phrase text)
		{
			RustText rustText = Manager.Create<RustText>(PrefabRoot + "Label.Large.prefab");
			rustText.SetPhrase(text);
			return rustText;
		}
	}

	public static string PrefabRoot = "Assets/Plugins/Rust.UI/Controls/";

	public static Translate.Phrase phrase_on = new Translate.Phrase("toggle.on", "On");

	public static Translate.Phrase phrase_off = new Translate.Phrase("toggle.off", "Off");

	public static Translate.Phrase phrase_enabled = new Translate.Phrase("toggle.enabled", "Enabled");

	public static Translate.Phrase phrase_disabled = new Translate.Phrase("toggle.disabled", "Disabled");

	public static LayoutElement Flex()
	{
		return Manager.Create<LayoutElement>(PrefabRoot + "Flex.prefab");
	}

	public static RustButton Button(Translate.Phrase label, Icons icon = Icons.InfoCircle, bool toggle = false, string style = "Normal", bool autoSize = false)
	{
		RustButton rustButton = Manager.Create<RustButton>(PrefabRoot + "RustButton." + style + ".prefab");
		rustButton.IsToggle = toggle;
		rustButton.AutoSize = autoSize;
		rustButton.Text.SetPhrase(label);
		rustButton.Icon.Icon = icon;
		return rustButton;
	}

	public static RustButton MenuOption(Translate.Phrase label, Icons icon = Icons.None, string style = "Normal")
	{
		RustButton rustButton = Manager.Create<RustButton>(PrefabRoot + "MenuOption." + style + ".prefab");
		if (rustButton.Icon != null && rustButton.Icon.Icon != icon)
		{
			rustButton.Icon.Icon = icon;
		}
		if (rustButton.Icon.Icon == Icons.None)
		{
			rustButton.ApplyStyles();
		}
		rustButton.Text.SetPhrase(label);
		return rustButton;
	}

	public static Menu Menu(Option[] options, Option? selectedOption = null, bool AllowFiltering = false, string style = "Normal")
	{
		Menu menu = Manager.Create<Menu>(PrefabRoot + "Menu." + style + ".prefab");
		menu.AllowFiltering = AllowFiltering;
		menu.Options = options;
		if (selectedOption.HasValue)
		{
			menu.SelectedOption = selectedOption.Value;
		}
		return menu;
	}

	public static Video Video(string style = "Normal")
	{
		return Manager.Create<Video>(PrefabRoot + "Video." + style + ".prefab");
	}

	public static RustButton HeaderButton(Translate.Phrase label, Translate.Phrase subtitle, string style = "Header")
	{
		RustButton rustButton = Manager.Create<RustButton>(PrefabRoot + "RustButton." + style + ".prefab");
		rustButton.Text.SetPhrase(label);
		rustButton.SubText.SetPhrase(subtitle);
		return rustButton;
	}

	public static RustOption Option(Option[] enumOptions, string style = "Normal")
	{
		RustOption rustOption = Manager.Create<RustOption>(PrefabRoot + "RustOption." + style + ".prefab");
		rustOption.Options = enumOptions;
		rustOption.SetOptionDefault();
		return rustOption;
	}

	public static RustButtonGroup ButtonGroup(Option[] enumOptions, string style = "Normal")
	{
		RustButtonGroup rustButtonGroup = Manager.Create<RustButtonGroup>(PrefabRoot + "ButtonGroup." + style + ".prefab");
		rustButtonGroup.Options = enumOptions;
		rustButtonGroup.BuildContents();
		rustButtonGroup.SetOptionDefault();
		return rustButtonGroup;
	}

	public static Rust.UI.Dropdown Dropdown(Option[] enumOptions, string style = "Normal")
	{
		Rust.UI.Dropdown dropdown = Manager.Create<Rust.UI.Dropdown>(PrefabRoot + "Dropdown." + style + ".prefab");
		dropdown.Options = enumOptions;
		dropdown.SetOptionDefault();
		return dropdown;
	}

	public static RustInput Input(Translate.Phrase placeholder = null, string style = "Normal")
	{
		RustInput rustInput = Manager.Create<RustInput>(PrefabRoot + "RustInput." + style + ".prefab");
		if (placeholder != null)
		{
			rustInput.Placeholder.SetPhrase(placeholder);
		}
		return rustInput;
	}

	public static RustIcon Icon(Icons icon = Icons.Radiation, string style = "Normal")
	{
		RustIcon rustIcon = Manager.Create<RustIcon>(PrefabRoot + "RustIcon." + style + ".prefab");
		rustIcon.Icon = icon;
		return rustIcon;
	}

	public static RustSlider Slider(float minValue, float maxValue, float currentValue, bool integer = false, string style = "Normal")
	{
		RustSlider rustSlider = Manager.Create<RustSlider>(PrefabRoot + "RustSlider." + style + ".prefab");
		rustSlider.Integer = integer;
		rustSlider.MinValue = minValue;
		rustSlider.MaxValue = maxValue;
		rustSlider.Value = currentValue;
		return rustSlider;
	}

	public static RustToggle Toggle(Translate.Phrase on, Translate.Phrase off, string style = "Normal")
	{
		RustToggle rustToggle = Manager.Create<RustToggle>(PrefabRoot + "RustToggle." + style + ".prefab");
		rustToggle.TextOn.SetPhrase(on);
		rustToggle.TextOff.SetPhrase(off);
		return rustToggle;
	}

	public static Blocker Blocker(string style = "Normal")
	{
		return Manager.Create<Blocker>(PrefabRoot + "Blocker." + style + ".prefab");
	}

	public static RustToggle ToggleOnOff(string style = "Normal")
	{
		return Toggle(phrase_on, phrase_off, style);
	}

	public static RustToggle ToggleEnabledDisabled(string style = "Normal")
	{
		return Toggle(phrase_enabled, phrase_disabled, style);
	}
}
