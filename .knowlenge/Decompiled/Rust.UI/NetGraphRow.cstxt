using System.Collections.Generic;
using System.Linq;
using Facepunch.Extend;
using Network;
using Rust.UI.Debugging;
using UnityEngine;
using UnityEngine.UI;

public class NetGraphRow : MonoBehaviour
{
	public CanvasGroup group;

	public Text countTotal;

	public Text countUnique;

	public Text label;

	public Text bytes;

	public GameObject RowContainer;

	public NetGraphItem[] Items;

	public GameObject RowSpacer;

	private void Awake()
	{
		Items = GetComponentsInChildren<NetGraphItem>();
	}

	internal void Hide()
	{
		group.alpha = 0f;
	}

	internal void UpdateFrom(KeyValuePair<string, Stats.Node> node)
	{
		group.alpha = 1f;
		label.text = node.Key;
		bytes.text = node.Value.Bytes.FormatBytes();
		countTotal.text = node.Value.Count.ToString("N0");
		countUnique.text = ((node.Value.Children == null) ? "0" : node.Value.Children.Count.ToString("N0"));
		NetGraphItem[] items = Items;
		for (int i = 0; i < items.Length; i++)
		{
			items[i].Hide();
		}
		if (node.Value.Children == null)
		{
			return;
		}
		int num = 0;
		foreach (KeyValuePair<string, Stats.Node> item in node.Value.Children.OrderByDescending((KeyValuePair<string, Stats.Node> y) => y.Value.Bytes))
		{
			if (num >= Items.Length)
			{
				break;
			}
			Items[num].UpdateFrom(item);
			num++;
		}
	}
}
