using UnityEngine;

public static class RectTransformEx
{
	public static void AnchorToCorners(this RectTransform transform)
	{
		if (!(transform.parent == null))
		{
			RectTransform rectTransform = transform.parent as RectTransform;
			Vector2 anchorMin = new Vector2(transform.anchorMin.x + transform.offsetMin.x / rectTransform.rect.width, transform.anchorMin.y + transform.offsetMin.y / rectTransform.rect.height);
			Vector2 anchorMax = new Vector2(transform.anchorMax.x + transform.offsetMax.x / rectTransform.rect.width, transform.anchorMax.y + transform.offsetMax.y / rectTransform.rect.height);
			transform.anchorMin = anchorMin;
			transform.anchorMax = anchorMax;
			Vector2 offsetMin = (transform.offsetMax = new Vector2(0f, 0f));
			transform.offsetMin = offsetMin;
		}
	}

	public static void Fill(this RectTransform tx, float l = 0f, float t = 0f, float r = 0f, float b = 0f)
	{
		tx.anchorMin = Vector2.zero;
		tx.anchorMax = Vector2.one;
		tx.anchoredPosition = Vector2.zero;
		tx.pivot = Vector2.one * 0.5f;
		tx.offsetMin = new Vector2(l, b);
		tx.offsetMax = new Vector2(0f - t, 0f - r);
	}

	public static void AnchorTopRight(this RectTransform tx)
	{
		tx.SetPivotAndAnchors(new Vector2(1f, 1f));
	}

	public static RectTransform AlignRight(this RectTransform tx, float offset = 0f)
	{
		tx.pivot = tx.pivot.WithX(1f);
		tx.anchorMin = tx.anchorMin.WithX(1f);
		tx.anchorMax = tx.anchorMax.WithX(1f);
		tx.anchoredPosition = tx.anchoredPosition.WithX(offset);
		return tx;
	}

	public static RectTransform AlignLeft(this RectTransform tx, float offset = 0f)
	{
		tx.pivot = tx.pivot.WithX(0f);
		tx.anchorMin = tx.anchorMin.WithX(0f);
		tx.anchorMax = tx.anchorMax.WithX(0f);
		tx.anchoredPosition = tx.anchoredPosition.WithX(offset);
		return tx;
	}

	public static RectTransform AlignTop(this RectTransform tx, float offset = 0f)
	{
		tx.pivot = tx.pivot.WithY(1f);
		tx.anchorMin = tx.anchorMin.WithY(1f);
		tx.anchorMax = tx.anchorMax.WithY(1f);
		tx.anchoredPosition = tx.anchoredPosition.WithY(0f - offset);
		return tx;
	}

	public static Rect GetScreenRect(this RectTransform transform)
	{
		return RectTransformUtility.PixelAdjustRect(transform, transform.GetComponentInParent<Canvas>());
	}

	public static void SetPivotAndAnchors(this RectTransform trans, Vector2 aVec)
	{
		trans.pivot = aVec;
		trans.anchorMin = aVec;
		trans.anchorMax = aVec;
	}

	public static Vector2 GetSize(this RectTransform trans)
	{
		return trans.rect.size;
	}

	public static float GetWidth(this RectTransform trans)
	{
		return trans.rect.width;
	}

	public static float GetHeight(this RectTransform trans)
	{
		return trans.rect.height;
	}

	public static bool SetSize(this RectTransform trans, Vector2 newSize)
	{
		Vector2 size = trans.rect.size;
		Vector2 vector = newSize - size;
		Vector2 vector2 = trans.offsetMin - new Vector2(vector.x * trans.pivot.x, vector.y * trans.pivot.y);
		Vector2 vector3 = trans.offsetMax + new Vector2(vector.x * (1f - trans.pivot.x), vector.y * (1f - trans.pivot.y));
		if (vector3 == trans.offsetMax && vector2 == trans.offsetMin)
		{
			return false;
		}
		trans.offsetMin = vector2;
		trans.offsetMax = vector3;
		return true;
	}

	public static bool SetWidth(this RectTransform trans, float newSize)
	{
		return trans.SetSize(new Vector2(newSize, trans.rect.size.y));
	}

	public static void MoveY(this RectTransform trans, float amount)
	{
		trans.Move(new Vector2(0f, amount));
	}

	public static void Move(this RectTransform trans, Vector2 move)
	{
		trans.offsetMin += move;
		trans.offsetMax += move;
	}

	public static bool SetHeight(this RectTransform trans, float newSize)
	{
		return trans.SetSize(new Vector2(trans.rect.size.x, newSize));
	}

	public static void SetBottomLeftPosition(this RectTransform trans, Vector2 newPos)
	{
		trans.localPosition = new Vector3(newPos.x + trans.pivot.x * trans.rect.width, newPos.y + trans.pivot.y * trans.rect.height, trans.localPosition.z);
	}

	public static void SetTopLeftPosition(this RectTransform trans, Vector2 newPos)
	{
		trans.localPosition = new Vector3(newPos.x + trans.pivot.x * trans.rect.width, newPos.y - (1f - trans.pivot.y) * trans.rect.height, trans.localPosition.z);
	}

	public static void SetBottomRightPosition(this RectTransform trans, Vector2 newPos)
	{
		trans.localPosition = new Vector3(newPos.x - (1f - trans.pivot.x) * trans.rect.width, newPos.y + trans.pivot.y * trans.rect.height, trans.localPosition.z);
	}

	public static void SetRightTopPosition(this RectTransform trans, Vector2 newPos)
	{
		trans.localPosition = new Vector3(newPos.x - (1f - trans.pivot.x) * trans.rect.width, newPos.y - (1f - trans.pivot.y) * trans.rect.height, trans.localPosition.z);
	}

	public static void DoAutoLayout(this RectTransform trans)
	{
		while (trans != null)
		{
			if (trans.TryGetComponent<IAutoLayout>(out var component))
			{
				component.DoLayout();
			}
			trans = trans.parent as RectTransform;
		}
	}
}
