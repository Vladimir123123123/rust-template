using System;
using Rust.UI;
using UnityEngine;
using UnityEngine.Events;

public class RustButtonGroup : RustControl
{
	[Serializable]
	public class ChangedEvent : UnityEvent<Option>
	{
	}

	public Option[] Options;

	public string ButtonStyle = "ButtonGroup.Normal";

	private int CurrentOption;

	public ChangedEvent OnChanged;

	public Option Value => Options[CurrentOption];

	protected override void Awake()
	{
		base.Awake();
		BuildContents();
	}

	public void SetOption(int i)
	{
		while (i < 0)
		{
			i += Options.Length;
		}
		i %= Options.Length;
		CurrentOption = i;
		base.transform.GetChild(i).GetComponent<RustButton>().Toggle(v: true);
	}

	public void SetOption(string value)
	{
		for (int i = 0; i < Options.Length; i++)
		{
			if (Options[i].Value == value)
			{
				SetOption(i);
				break;
			}
		}
	}

	private void ButtonPressed(int i)
	{
		if (CurrentOption != i)
		{
			SetOption(i);
			OnChanged.Invoke(Value);
		}
	}

	public void SetOptionDefault()
	{
		for (int i = 0; i < Options.Length; i++)
		{
			if (Options[i].Default)
			{
				SetOption(i);
				return;
			}
		}
		SetOption(0);
	}

	public void BuildContents()
	{
		for (int num = base.transform.childCount - 1; num >= 0; num--)
		{
			UnityEngine.Object.DestroyImmediate(base.transform.GetChild(num).gameObject);
		}
		if (Options == null)
		{
			return;
		}
		int num2 = 0;
		Option[] options = Options;
		for (int i = 0; i < options.Length; i++)
		{
			Option option = options[i];
			int buttonNumber = num2;
			RustButton rustButton = Make.Button(option.Label, option.Icon, toggle: true, ButtonStyle, autoSize: true);
			rustButton.gameObject.hideFlags = HideFlags.HideInHierarchy;
			rustButton.UnpressSiblings = true;
			rustButton.PreventToggleOff = true;
			rustButton.OnPressed.AddListener(delegate
			{
				ButtonPressed(buttonNumber);
			});
			rustButton.SetParent(base.transform);
			rustButton.ApplyStyles();
			num2++;
		}
		SetOptionDefault();
	}
}
