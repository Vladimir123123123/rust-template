using System;
using Rust.UI;
using UnityEngine;
using UnityEngine.EventSystems;

public class RustControl : UIBehaviour, IPointerEnterHandler, IEventSystemHandler, IPointerExitHandler
{
	[Flags]
	public enum State
	{
		Normal = 1,
		Hovered = 2,
		Pressed = 4,
		Active = 8,
		Disabled = 0x10
	}

	protected static bool IsDragging;

	[SerializeField]
	protected StyleAsset _styles;

	[NonSerialized]
	public RustWrapper FormField;

	[InspectorFlags]
	public State CurrentState;

	public virtual StyleAsset Styles
	{
		get
		{
			return _styles;
		}
		set
		{
			_styles = value;
			ApplyStyles();
		}
	}

	public RectTransform rectTransform => base.transform as RectTransform;

	public virtual bool IsDisabled => (CurrentState & State.Disabled) != 0;

	public virtual bool IsPressed => (CurrentState & State.Pressed) != 0;

	public virtual bool IsHovered => (CurrentState & State.Hovered) != 0;

	public virtual StyleColorSet CurrentStyleCollection
	{
		get
		{
			StyleColorSet result = new StyleColorSet(Styles.Normal);
			if (IsHovered && !IsDragging)
			{
				result.Apply(Styles.Hovered);
			}
			if (IsPressed)
			{
				result.Apply(Styles.Pressed);
			}
			if (IsDisabled)
			{
				result.Apply(Styles.Disabled);
			}
			return result;
		}
	}

	protected override void OnEnable()
	{
		base.OnEnable();
		ApplyStyles();
	}

	public virtual void OnPointerEnter(PointerEventData eventData)
	{
		CurrentState |= State.Hovered;
		ApplyStyles();
	}

	public virtual void OnPointerExit(PointerEventData eventData)
	{
		CurrentState &= ~State.Hovered;
		ApplyStyles();
	}

	public virtual void SetDisabled(bool value)
	{
		if (IsDisabled != value)
		{
			if (!value)
			{
				CurrentState &= ~State.Disabled;
			}
			else
			{
				CurrentState |= State.Disabled;
			}
			ApplyStyles();
		}
	}

	public virtual void SetPressed(bool value)
	{
		if (IsPressed != value)
		{
			if (!value)
			{
				CurrentState &= ~State.Pressed;
			}
			else
			{
				CurrentState |= State.Pressed;
			}
			ApplyStyles();
		}
	}

	public virtual void ApplyStyles()
	{
		if (!(Styles == null))
		{
			ApplyStyle(CurrentStyleCollection);
		}
	}

	protected virtual void ApplyStyle(StyleColorSet s)
	{
	}
}
