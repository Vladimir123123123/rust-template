using Facepunch.Flexbox;
using Rust.UI;
using UnityEngine;

[AddComponentMenu("Rust/UI/RustFlexText")]
public class RustFlexText : RustText, IFlexNode
{
	[Tooltip("Controls the initial size of the element before factoring in grow/shrink.")]
	public FlexLength Basis;

	[Min(0f)]
	[Tooltip("How much this flex element should grow relative to its siblings.")]
	public int Grow = 1;

	[Min(0f)]
	[Tooltip("How much this flex element should shrink relative to its siblings.")]
	public int Shrink = 1;

	[Tooltip("Optionally override the parent's cross axis alignment for this element.")]
	public FlexAlignSelf AlignSelf;

	[Tooltip("The minimum allowed dimensions of this flex element.")]
	public FlexLength FlexMinWidth;

	[Tooltip("The minimum allowed dimensions of this flex element.")]
	public FlexLength FlexMaxWidth;

	[Tooltip("The maximum allowed dimensions of this flex element.")]
	public FlexLength FlexMinHeight;

	[Tooltip("The maximum allowed dimensions of this flex element.")]
	public FlexLength FlexMaxHeight;

	private bool _isDirty;

	private float _preferredWidth;

	private float _preferredHeight;

	RectTransform IFlexNode.Transform => (RectTransform)base.transform;

	bool IFlexNode.IsActive => base.isActiveAndEnabled;

	bool IFlexNode.IsAbsolute => false;

	bool IFlexNode.IsDirty => _isDirty;

	FlexLength IFlexNode.MinWidth => FlexMinWidth;

	FlexLength IFlexNode.MaxWidth => FlexMaxWidth;

	FlexLength IFlexNode.MinHeight => FlexMinHeight;

	FlexLength IFlexNode.MaxHeight => FlexMaxHeight;

	FlexLength IFlexNode.Basis => Basis;

	int IFlexNode.Grow => Grow;

	int IFlexNode.Shrink => Shrink;

	FlexAlignSelf IFlexNode.AlignSelf => AlignSelf;

	protected override void OnEnable()
	{
		base.OnEnable();
		SetLayoutDirty();
	}

	protected override void OnDisable()
	{
		base.OnDisable();
	}

	public override void SetLayoutDirty()
	{
		_isDirty = true;
		base.SetLayoutDirty();
		Transform parent = base.transform.parent;
		if (parent != null && parent.TryGetComponent<IFlexNode>(out var component) && component.IsActive)
		{
			component.SetLayoutDirty();
		}
	}

	public override void DoAutoSize()
	{
	}

	void IFlexNode.SetupTransform()
	{
		RectTransform obj = (RectTransform)base.transform;
		obj.localRotation = Quaternion.identity;
		obj.pivot = new Vector2(0f, 1f);
		obj.anchorMin = new Vector2(0f, 1f);
		obj.anchorMax = new Vector2(0f, 1f);
	}

	void IFlexNode.SetLayoutDirty(bool force)
	{
		if (force || IsActive())
		{
			SetLayoutDirty();
		}
	}

	void IFlexNode.MeasureHorizontal()
	{
		float valueOrDefault = FlexMaxWidth.GetValueOrDefault(float.PositiveInfinity);
		float valueOrDefault2 = FlexMaxHeight.GetValueOrDefault(float.PositiveInfinity);
		Vector2 preferredValues = GetPreferredValues(valueOrDefault, valueOrDefault2);
		_preferredWidth = Mathf.Max(Mathf.Min(preferredValues.x, valueOrDefault), FlexMinWidth.GetValueOrDefault(0f));
		_preferredHeight = Mathf.Max(Mathf.Min(preferredValues.y, valueOrDefault2), FlexMinHeight.GetValueOrDefault(0f));
	}

	void IFlexNode.LayoutHorizontal(float maxWidth, float maxHeight)
	{
	}

	void IFlexNode.MeasureVertical()
	{
		Vector2 sizeDelta = ((RectTransform)base.transform).sizeDelta;
		float valueOrDefault = FlexMaxWidth.GetValueOrDefault(float.PositiveInfinity);
		float valueOrDefault2 = FlexMaxHeight.GetValueOrDefault(float.PositiveInfinity);
		Vector2 preferredValues = GetPreferredValues(sizeDelta.x, valueOrDefault2);
		_preferredWidth = Mathf.Max(Mathf.Min(preferredValues.x, valueOrDefault), FlexMinWidth.GetValueOrDefault(0f));
		_preferredHeight = Mathf.Max(Mathf.Min(preferredValues.y, valueOrDefault2), FlexMinHeight.GetValueOrDefault(0f));
	}

	void IFlexNode.LayoutVertical(float maxWidth, float maxHeight)
	{
		_isDirty = false;
	}

	void IFlexNode.GetScale(out float scaleX, out float scaleY)
	{
		Vector3 localScale = ((RectTransform)base.transform).localScale;
		scaleX = localScale.x;
		scaleY = localScale.y;
	}

	void IFlexNode.GetPreferredSize(out float preferredWidth, out float preferredHeight)
	{
		preferredWidth = _preferredWidth;
		preferredHeight = _preferredHeight;
	}
}
