using Rust.UI;
using UnityEngine;
using UnityEngine.UI;

public class RustStyler : MonoBehaviour
{
	[SerializeField]
	protected StyleAsset _styles;

	[SerializeField]
	protected StyleGroup _group;

	public Graphic[] Foreground;

	public Graphic[] Background;

	public Graphic[] Icon;

	public StyleAsset Styles
	{
		get
		{
			return _styles;
		}
		set
		{
			_styles = value;
			ApplyStyles();
		}
	}

	public StyleGroup Group
	{
		get
		{
			return _group;
		}
		set
		{
			_group = value;
			ApplyStyles();
		}
	}

	private void ApplyStyles()
	{
		StyleAsset.Group styleGroup = GetStyleGroup();
		if (styleGroup == null)
		{
			return;
		}
		Graphic[] foreground = Foreground;
		foreach (Graphic graphic in foreground)
		{
			if (!(graphic == null))
			{
				graphic.color = styleGroup.Fg;
			}
		}
		foreground = Background;
		foreach (Graphic graphic2 in foreground)
		{
			if (!(graphic2 == null))
			{
				graphic2.color = styleGroup.Bg;
			}
		}
		foreground = Icon;
		foreach (Graphic graphic3 in foreground)
		{
			if (!(graphic3 == null))
			{
				graphic3.color = styleGroup.Icon;
			}
		}
	}

	private StyleAsset.Group GetStyleGroup()
	{
		if (Styles == null)
		{
			return null;
		}
		return Group switch
		{
			StyleGroup.Hovered => Styles.Hovered, 
			StyleGroup.Presed => Styles.Pressed, 
			StyleGroup.Disabled => Styles.Disabled, 
			_ => Styles.Normal, 
		};
	}
}
