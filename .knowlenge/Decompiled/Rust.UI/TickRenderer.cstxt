using System.Collections.Generic;
using Rust.UI.Renderer;
using UnityEngine;
using UnityEngine.UI;

public class TickRenderer : MaskableGraphic
{
	public struct Tick
	{
		public float Pos;

		public Color Color;

		public float Height;
	}

	public List<Tick> Ticks = new List<Tick>();

	private static UIVertex[] quad = new UIVertex[4];

	protected override void OnPopulateMesh(VertexHelper vh)
	{
		vh.Clear();
		float height = (base.transform as RectTransform).GetHeight();
		foreach (Tick tick in Ticks)
		{
			UIVertex uIVertex = default(UIVertex);
			uIVertex.color = tick.Color * color;
			uIVertex.position = new Vector3(tick.Pos, 0f);
			UIVertex uIVertex2 = uIVertex;
			quad[0] = uIVertex2;
			uIVertex2.position = new Vector3(tick.Pos + 1f, 0f);
			quad[1] = uIVertex2;
			uIVertex2.position = new Vector3(tick.Pos + 1f, height * tick.Height);
			quad[2] = uIVertex2;
			uIVertex2.position = new Vector3(tick.Pos, height * tick.Height);
			quad[3] = uIVertex2;
			vh.AddUIVertexQuad(quad);
		}
	}
}
