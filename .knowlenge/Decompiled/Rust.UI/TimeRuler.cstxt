using Facepunch;
using Rust.UI;
using Rust.UI.Renderer;
using UnityEngine;

[AddComponentMenu("Rust/UI/TimeRuler")]
public class TimeRuler : RustControl
{
	public int StartTime;

	public int EndTime = 1000;

	public RustText TextPrefab;

	public TickRenderer TickRenderer;

	public void Rebuild()
	{
		for (int num = base.transform.childCount; num > 0; num--)
		{
			Transform child = base.transform.GetChild(num - 1);
			if (child.gameObject.hideFlags == HideFlags.HideAndDontSave)
			{
				Object.DestroyImmediate(child.gameObject);
			}
		}
		int num2 = EndTime - StartTime;
		int num3 = 100;
		if (num2 > 1500)
		{
			num3 = 1000;
		}
		if (num2 > 10000)
		{
			num3 = 10000;
		}
		if (num2 > 100000)
		{
			num3 = 100000;
		}
		if (num2 < 1000)
		{
			num3 = 100;
		}
		if (num2 < 150)
		{
			num3 = 10;
		}
		if (TextPrefab == null)
		{
			return;
		}
		int num4 = Mathf.FloorToInt(StartTime / num3 - 1) * num3;
		int num5 = Mathf.CeilToInt(EndTime / num3 + 2) * num3;
		TickRenderer.Ticks.Clear();
		_ = base.rectTransform.GetWidth() / (float)num2;
		for (int i = num4; i < num5; i += num3)
		{
			float num6 = TimeToPos(i);
			RustText rustText = TextPrefab.Duplicate();
			rustText.text = $"{i}";
			rustText.gameObject.hideFlags = HideFlags.HideAndDontSave;
			rustText.rectTransform.offsetMin = new Vector2(num6, -1f);
			rustText.rectTransform.offsetMax = new Vector2(num6 + 1f, 0f);
			rustText.SetParent(base.transform);
			TickRenderer.Ticks.Add(new TickRenderer.Tick
			{
				Pos = num6,
				Color = Color.white,
				Height = 1f
			});
			for (int j = 1; j < 10; j++)
			{
				num6 = TimeToPos(i + j * (int)((float)num3 / 10f));
				TickRenderer.Ticks.Add(new TickRenderer.Tick
				{
					Pos = num6,
					Color = new Color(1f, 1f, 1f, 0.2f),
					Height = 0.8f
				});
			}
		}
		TickRenderer.SetVerticesDirty();
	}

	public float TimeToPos(int time)
	{
		return (float)(time - StartTime) / (float)(EndTime - StartTime) * base.rectTransform.GetWidth();
	}
}
