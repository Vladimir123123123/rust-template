using System;
using System.Collections.Generic;
using Rust.UI;
using UnityEngine;
using UnityEngine.Events;
using UnityEngine.EventSystems;

[AddComponentMenu("Rust/UI/Timeline")]
public class Timeline : RustControl, IPointerDownHandler, IEventSystemHandler, IPointerUpHandler, IDragHandler
{
	[Serializable]
	public class ScrubEvent : UnityEvent<float>
	{
	}

	public int StartTime;

	public int EndTime;

	public int CurrentPosition;

	public TimeRuler TimeRuler;

	public RectTransform IndicatorCurrent;

	public UnityEvent OnStartScrub;

	public UnityEvent OnEndScrub;

	public ScrubEvent OnScrubToTime;

	public List<TimelineMarker> Markers = new List<TimelineMarker>();

	public TimelineMarker SelectedMarker { get; set; }

	internal void SelectMarker(TimelineMarker marker)
	{
		if (SelectedMarker == marker)
		{
			return;
		}
		SelectedMarker = marker;
		foreach (TimelineMarker marker2 in Markers)
		{
			marker2.ApplyStyles();
		}
		SelectedMarker?.transform?.SetAsLastSibling();
		IndicatorCurrent?.SetAsLastSibling();
	}

	internal void DragMarker(TimelineMarker marker, PointerEventData eventData)
	{
		if (RectTransformUtility.ScreenPointToLocalPointInRectangle(base.rectTransform, eventData.position, eventData.pressEventCamera, out var localPoint))
		{
			int time = GetTime((localPoint + base.rectTransform.rect.size * base.rectTransform.pivot).x);
			marker.SetTime(time);
			marker.Position(this);
			if (marker == SelectedMarker)
			{
				Scrubbed(marker.CurrentPosition);
			}
		}
	}

	internal void DeleteMarker(TimelineMarker timelineMarker)
	{
		Markers.Remove(timelineMarker);
		UnityEngine.Object.Destroy(timelineMarker.gameObject);
	}

	protected override void Awake()
	{
		Markers.Clear();
		Markers.AddRange(GetComponentsInChildren<TimelineMarker>());
		Rebuild();
	}

	public void Rebuild()
	{
		TimeRuler.StartTime = StartTime;
		TimeRuler.EndTime = EndTime;
		TimeRuler.Rebuild();
		foreach (TimelineMarker marker in Markers)
		{
			marker.Position(this);
		}
	}

	public void AddMarker(TimelineMarker marker)
	{
		Markers.Add(marker);
		marker.SetParent(this);
		marker.Position(this);
	}

	public void SetCurrentPosition(int pos)
	{
		CurrentPosition = pos;
		float x = GetX(pos);
		IndicatorCurrent.offsetMin = IndicatorCurrent.offsetMin.WithX(x);
		IndicatorCurrent.offsetMax = IndicatorCurrent.offsetMax.WithX(x + 1f);
	}

	public float GetX(int time)
	{
		return (float)time / (float)EndTime * base.rectTransform.GetWidth();
	}

	public int GetTime(float x)
	{
		return Mathf.Clamp(Mathf.RoundToInt(x / base.rectTransform.GetWidth() * (float)EndTime), StartTime, EndTime);
	}

	public void OnPointerDown(PointerEventData eventData)
	{
		OnDrag(eventData);
		OnStartScrub.Invoke();
	}

	public void OnPointerUp(PointerEventData eventData)
	{
		OnDrag(eventData);
		OnEndScrub.Invoke();
	}

	public void Scrubbed(int time)
	{
		time = Mathf.Clamp(time, StartTime, EndTime);
		OnScrubToTime.Invoke(time);
	}

	public void OnDrag(PointerEventData eventData)
	{
		SelectMarker(null);
		if (RectTransformUtility.ScreenPointToLocalPointInRectangle(base.rectTransform, eventData.position, eventData.pressEventCamera, out var localPoint))
		{
			Scrubbed(GetTime((localPoint + base.rectTransform.rect.size * base.rectTransform.pivot).x));
		}
	}
}
