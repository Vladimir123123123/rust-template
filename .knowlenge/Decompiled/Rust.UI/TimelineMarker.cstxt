using Rust.UI;
using UnityEngine;
using UnityEngine.EventSystems;
using UnityEngine.UI;

public class TimelineMarker : RustControl, IPointerDownHandler, IEventSystemHandler, IPointerUpHandler, IDragHandler
{
	public int CurrentPosition;

	public Image Background;

	private Timeline Parent;

	private bool hasDragged;

	public override bool IsPressed
	{
		get
		{
			if (!base.IsPressed)
			{
				if (Parent != null)
				{
					return Parent.SelectedMarker == this;
				}
				return false;
			}
			return true;
		}
	}

	public void OnPointerDown(PointerEventData eventData)
	{
		hasDragged = false;
	}

	public void OnPointerUp(PointerEventData eventData)
	{
		if (!hasDragged)
		{
			SelectMarker();
		}
	}

	public virtual void SelectMarker()
	{
		Parent?.SelectMarker(this);
	}

	public void OnDrag(PointerEventData eventData)
	{
		hasDragged = true;
		Parent?.DragMarker(this, eventData);
	}

	internal void Position(Timeline timeline)
	{
		float x = timeline.GetX(CurrentPosition);
		base.rectTransform.anchoredPosition = base.rectTransform.anchoredPosition.WithX(x);
		Parent = timeline;
	}

	protected override void ApplyStyle(StyleColorSet s)
	{
		base.ApplyStyle(s);
		Background.color = s.Bg;
	}

	public virtual void SetTime(int time)
	{
		CurrentPosition = time;
	}

	public void Delete()
	{
		Parent.DeleteMarker(this);
	}
}
