using System;
using System.IO;
using System.Linq;
using Ionic.Crc;
using Rust.Workshop;

public class ApprovedSkinInfo
{
	public ulong InventoryId { get; private set; }

	public string Desc { get; private set; }

	public string Name { get; private set; }

	public ulong WorkshopdId { get; private set; }

	internal Price Price { get; private set; }

	public bool Tradable { get; private set; }

	public DropChance DropChance { get; private set; }

	public bool Marketable { get; private set; }

	public Skinnable Skinnable { get; private set; }

	public bool AllowInCrates { get; private set; } = true;

	public bool IsLimitedTimeOffer { get; private set; } = true;

	public bool IsTwitchDrop { get; private set; }

	public ApprovedSkinInfo(ulong WorkshopdId, string Name, string Desc, string ItemName)
	{
		this.WorkshopdId = WorkshopdId;
		InventoryId = WorkshopdId;
		this.Name = Name;
		this.Desc = Desc;
		Skinnable = Skinnable.All.FirstOrDefault((Skinnable x) => string.Compare(x.Name, ItemName, StringComparison.OrdinalIgnoreCase) == 0);
		if (Skinnable == null)
		{
			throw new Exception("Unknown Item Type: " + ItemName);
		}
	}

	public ApprovedSkinInfo Store(Price Price, bool CanBeTraded, bool CanBeSold)
	{
		this.Price = Price;
		Tradable = CanBeTraded;
		Marketable = CanBeSold;
		return this;
	}

	public ApprovedSkinInfo TimeLimited()
	{
		IsLimitedTimeOffer = true;
		return this;
	}

	public ApprovedSkinInfo Unlimited()
	{
		IsLimitedTimeOffer = false;
		return this;
	}

	public ApprovedSkinInfo NoCrate()
	{
		AllowInCrates = false;
		return this;
	}

	public ApprovedSkinInfo Drops(DropChance DropChance)
	{
		this.DropChance = DropChance;
		return this;
	}

	public ApprovedSkinInfo ItemId(ulong InventoryId)
	{
		this.InventoryId = InventoryId;
		return this;
	}

	public ApprovedSkinInfo TwitchDrop()
	{
		if (Price != 0 || Tradable || Marketable || AllowInCrates)
		{
			throw new Exception("");
		}
		IsTwitchDrop = true;
		return this;
	}

	public static implicit operator ItemSchema.Item(ApprovedSkinInfo o)
	{
		ItemSchema.Item item = new ItemSchema.Item();
		Category category = o.Skinnable.Category;
		string text = "cat.none;";
		if (o.Marketable)
		{
			if (o.Skinnable.Category == Category.Pants || o.Skinnable.Category == Category.Shirt || o.Skinnable.Category == Category.Jacket || o.Skinnable.Category == Category.Hat || o.Skinnable.Category == Category.Mask || o.Skinnable.Category == Category.Footwear || o.Skinnable.Category == Category.Gloves)
			{
				text = "cat.clothing;breakdown.cloth;";
			}
			if (o.Skinnable.Category == Category.Weapon)
			{
				text = "cat.weapon;breakdown.metal;";
			}
			if (o.Skinnable.Category == Category.Misc || o.Skinnable.Category == Category.Deployable)
			{
				text = "cat.deployable;breakdown.wood;";
			}
		}
		if (category == Category.Deployable)
		{
			category = Category.Misc;
		}
		if (!o.AllowInCrates)
		{
			text += "nocrate;";
		}
		string text2 = (string.IsNullOrEmpty(o.Skinnable.ItemName) ? "item.none;" : ("item." + o.Skinnable.ItemName.ToLower() + ";"));
		string text3 = (o.IsLimitedTimeOffer ? "time.limited;" : "time.general;");
		string text4 = (o.IsTwitchDrop ? "twitchdrop;" : "");
		if (string.IsNullOrEmpty(o.Skinnable.ItemName))
		{
			throw new Exception("Item Type Has No ItemName: " + o.Skinnable.Name);
		}
		string text5 = "5";
		if (File.Exists("Prerequisites/SteamInventory/Icons/" + o.InventoryId + ".png"))
		{
			byte[] array = File.ReadAllBytes("Prerequisites/SteamInventory/Icons/" + o.InventoryId + ".png");
			CRC32 cRC = new CRC32();
			cRC.SlurpBlock(array, 0, array.Length);
			text5 = ((uint)cRC.Crc32Result).ToString();
		}
		string text6 = category.ToString().ToLower();
		item.itemdefid = (uint)o.InventoryId;
		item.name = o.Name;
		item.type = o.Skinnable.Category.ToString();
		item.icon_url = "https://files.facepunch.com/rust/icons/inventory/rust/" + o.InventoryId + "_small.png?" + text5;
		item.icon_url_large = "https://files.facepunch.com/rust/icons/inventory/rust/" + o.InventoryId + "_large.png?" + text5;
		item.marketable = o.Marketable;
		item.tradable = o.Tradable;
		item.commodity = true;
		item.market_hash_name = o.Name;
		item.market_name = o.Name;
		item.description = o.Desc;
		item.price_category = ((o.Price == Price.NotForSale) ? null : ("1;VLV" + (int)o.Price));
		item.dropChance = o.DropChance;
		item.priceCategory = o.Price;
		item.itemshortname = o.Skinnable.ItemName;
		item.workshopdownload = ((o.WorkshopdId != 0) ? o.WorkshopdId.ToString() : null);
		item.workshopid = item.workshopdownload;
		item.store_tags = (text + text3 + "subcat." + text6 + ";" + text2 + text4).TrimEnd(';');
		return item;
	}
}
