using System;
using System.Collections;
using System.IO;
using System.Threading;
using Facepunch.Extend;
using Facepunch.Utility;
using Rust;
using Rust.Workshop.Editor;
using UnityEngine;
using UnityEngine.UI;

public class TextureRow : MaterialRow
{
	private string Filename;

	public bool IsNormalMap;

	public RawImage TargetImage;

	public Text FilenameLabel;

	public Button Reset;

	public Button Clear;

	public bool HasChanges;

	private UnityEngine.Texture Default;

	private FileSystemWatcher watcher;

	public bool IsDefault => Default == TargetImage.texture;

	public bool IsClear => TargetImage.texture == null;

	public void Update()
	{
		Reset.gameObject.SetActive(!IsDefault);
		Clear.gameObject.SetActive(!IsClear);
		lock (this)
		{
			if (HasChanges)
			{
				try
				{
					Load(Filename);
					HasChanges = false;
					return;
				}
				catch
				{
					Thread.Sleep(10);
					return;
				}
			}
		}
	}

	public void SetFilenameText(string filename)
	{
		FilenameLabel.text = filename.TruncateFilename(48);
	}

	public void OnDisable()
	{
		if (!Rust.Application.isQuitting)
		{
			StopWatching();
		}
	}

	public void OpenFileBrowser()
	{
		StartCoroutine(BrowseForTexture());
	}

	public IEnumerator BrowseForTexture()
	{
		yield return StartCoroutine(base.Editor.FileDialog.Open(null, ".png|.jpg", "OPEN FILE", null, -1L));
		if (base.Editor.FileDialog.result == null)
		{
			yield break;
		}
		FileInfo fileInfo = new FileInfo(base.Editor.FileDialog.result);
		try
		{
			Load(fileInfo.FullName);
		}
		catch (Exception ex)
		{
			Debug.LogWarning("Couldn't load texture: " + ex.Message);
		}
	}

	public void Load(string fullname)
	{
		StopWatching();
		FileInfo fileInfo = new FileInfo(fullname);
		if (fileInfo.Exists)
		{
			Texture2D texture2D = base.Editor.SetTexture(ParamName, fileInfo.FullName, IsNormalMap);
			if ((bool)texture2D)
			{
				SetTexture(texture2D);
				StartWatching();
			}
		}
	}

	public void SetTexture(UnityEngine.Texture tex)
	{
		TargetImage.texture = tex;
		if (tex != null)
		{
			Filename = tex.name;
			SetFilenameText(Filename);
		}
		if (IsDefault)
		{
			Filename = "Default";
			SetFilenameText(Filename);
		}
		if (tex == null)
		{
			Filename = "None";
			SetFilenameText(Filename);
		}
	}

	public override void Read(Material source, Material def)
	{
		StopWatching();
		UnityEngine.Texture texture = source.GetTexture(ParamName);
		Default = def.GetTexture(ParamName);
		SetTexture(texture);
	}

	public void OpenFileLocation()
	{
		if (!IsDefault)
		{
			Os.OpenFolder(Filename);
		}
	}

	public void SaveFile()
	{
		if (!(TargetImage.texture == null))
		{
			StartCoroutine(DoSaveFile());
		}
	}

	private IEnumerator DoSaveFile()
	{
		yield return StartCoroutine(base.Editor.FileDialog.Save(null, ".png"));
		if (!string.IsNullOrEmpty(base.Editor.FileDialog.result))
		{
			Debug.Log("Save Png to " + base.Editor.FileDialog.result);
			UnityEngine.Texture texture = TargetImage.texture;
			if (IsNormalMap)
			{
				texture = Facepunch.Utility.Texture.CreateReadableCopy(texture as Texture2D);
				(texture as Texture2D).DecompressNormals();
			}
			texture.SaveAsPng(base.Editor.FileDialog.result);
			if (IsNormalMap)
			{
				UnityEngine.Object.Destroy(texture);
			}
		}
	}

	public void ResetToDefault()
	{
		StopWatching();
		SetTexture(Default);
		base.Editor.SetTexture(ParamName, Default);
	}

	public void ResetToClear()
	{
		StopWatching();
		SetTexture(null);
		base.Editor.SetTexture(ParamName, null);
	}

	public void StartWatching()
	{
		StopWatching();
		FileInfo fileInfo = new FileInfo(Filename);
		if (fileInfo.Exists)
		{
			watcher = new FileSystemWatcher();
			watcher.Path = fileInfo.Directory.FullName;
			watcher.Filter = fileInfo.Name;
			watcher.NotifyFilter = NotifyFilters.LastWrite | NotifyFilters.Size;
			watcher.Changed += delegate(object a, FileSystemEventArgs e)
			{
				FileChanged(e.FullPath);
			};
			watcher.EnableRaisingEvents = true;
		}
	}

	public void FileChanged(string name)
	{
		lock (this)
		{
			HasChanges = true;
		}
	}

	public void StopWatching()
	{
		if (watcher != null)
		{
			watcher.Dispose();
			watcher = null;
		}
	}
}
