using System.IO;
using Facepunch.Utility;
using Rust;
using Rust.Workshop;
using UnityEngine;

public class WorkshopInterface : SingletonComponent<WorkshopInterface>
{
	internal WorkshopItemEditor Editor => SingletonComponent<WorkshopItemEditor>.Instance;

	public void Exit()
	{
		Object.Destroy(base.gameObject);
		Global.OpenMainMenu();
	}

	public void RenderAllIcons()
	{
		Editor.gameObject.SetActive(value: true);
		if (!Directory.Exists("c:/test/icons"))
		{
			Directory.CreateDirectory("c:/test/icons");
		}
		Skinnable[] all = Skinnable.All;
		foreach (Skinnable skinnable in all)
		{
			Editor.StartNewItem(skinnable.Name);
			PropRenderer.RenderScreenshot(Editor.Prefab, "c:/test/icons/" + skinnable.Name + ".png", 512, 512, 4);
			int num = 0;
			UnityEngine.Mesh[] meshDownloads = skinnable.MeshDownloads;
			foreach (UnityEngine.Mesh mesh in meshDownloads)
			{
				if (mesh != null && mesh.isReadable)
				{
					mesh.Export($"c:/test/icons/{skinnable.Name}{num}.obj");
					num++;
				}
			}
		}
		Editor.gameObject.SetActive(value: false);
	}
}
