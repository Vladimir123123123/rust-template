using System.Linq;
using Rust.UI;
using TMPro;
using UnityEngine;

internal class WorkshopItemButton : MonoBehaviour
{
	public TextMeshProUGUI Name;

	public TextMeshProUGUI Description;

	public HttpImage Icon;

	public GameObject OldIndicator;

	public GameObject Incompatible;

	public GameObject ItemDownloaded;

	public GameObject ItemDownloadPending;

	public GameObject ItemDownloading;

	private IWorkshopContent Item;

	private bool pending;

	private bool downloading;

	private bool installed;

	internal void Init(IWorkshopContent item)
	{
		Item = item;
		if ((bool)Name)
		{
			Name.text = Item?.Title;
		}
		if ((bool)Description)
		{
			Description.text = Item?.Description;
		}
		if (OldIndicator != null)
		{
			OldIndicator.SetActive(item.Tags.Contains("version2"));
		}
		if (Incompatible != null)
		{
			bool active = !item.Tags.Contains("version3") && !item.Tags.Contains("version2");
			Incompatible.SetActive(active);
		}
		if (Icon != null)
		{
			Icon.Load(Item?.PreviewImageUrl);
		}
		pending = Item != null && Item.IsDownloadPending;
		downloading = Item != null && Item.IsDownloading;
		installed = Item != null && Item.IsInstalled;
		UpdateIcons();
	}

	public void Update()
	{
		UpdateIcons();
	}

	private void UpdateIcons()
	{
		if (Item == null)
		{
			return;
		}
		bool flag = Icon != null && Icon.rawImage != null && Icon.rawImage.enabled;
		if (ItemDownloaded != null)
		{
			ItemDownloaded.SetActive(installed && flag);
		}
		if (ItemDownloadPending != null)
		{
			if (pending && flag)
			{
				ItemDownloadPending.SetActive(value: true);
				pending = Item.IsDownloadPending;
				if (!pending)
				{
					downloading = Item.IsDownloading;
				}
			}
			else
			{
				ItemDownloadPending.SetActive(value: false);
			}
		}
		if (!(ItemDownloading != null))
		{
			return;
		}
		if (downloading && flag)
		{
			ItemDownloading.SetActive(value: true);
			downloading = Item.IsDownloading;
			if (!downloading)
			{
				installed = Item.IsInstalled;
			}
			pending = false;
		}
		else
		{
			ItemDownloading.SetActive(value: false);
		}
	}

	public void OpenWebpage()
	{
		if (Item != null)
		{
			Application.OpenURL(Item.Url);
		}
	}

	public void StartEditing()
	{
		if (Item != null)
		{
			SendMessageUpwards("StartEditingItem", Item, SendMessageOptions.RequireReceiver);
		}
	}

	public void StartViewing()
	{
		if (Item != null)
		{
			SendMessageUpwards("StartViewingItem", Item, SendMessageOptions.RequireReceiver);
		}
	}
}
