using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using Rust.Platform.Steam;
using Rust.Workshop;
using Steamworks.Ugc;
using UnityEngine;
using UnityEngine.UI;

internal class WorkshopItemList : MonoBehaviour
{
	private static int StaticRefresh = 10;

	public WorkshopItemButton ButtonPrefab;

	public GameObject Container;

	public ListType ListType;

	private const int PerPage = 50;

	public int Page = 1;

	public Button PreviousPage;

	public Button NextPage;

	public Text PageInfo;

	public string ItemFilter;

	public Dropdown ItemTypeSelector;

	private int ForcedRefresh;

	private int TotalResults;

	private bool Refreshing;

	private int NumPages => Mathf.FloorToInt(TotalResults / 50) + 1;

	public static void RefreshAll()
	{
		StaticRefresh++;
	}

	private void Awake()
	{
		if ((bool)PreviousPage)
		{
			PreviousPage.onClick.AddListener(PagePrev);
		}
		if ((bool)NextPage)
		{
			NextPage.onClick.AddListener(PageNext);
		}
		if (!ItemTypeSelector)
		{
			return;
		}
		ItemTypeSelector.ClearOptions();
		ItemTypeSelector.AddOptions(new List<string> { "All" });
		if (Skinnable.All != null)
		{
			ItemTypeSelector.AddOptions((from x in Skinnable.All
				where !x.HideInWorkshopUpload
				select x.Name into x
				orderby x
				select x).ToList());
		}
	}

	private void PageNext()
	{
		if (!Refreshing)
		{
			Page++;
			Refresh();
		}
	}

	private void PagePrev()
	{
		if (!Refreshing)
		{
			Page--;
			Refresh();
		}
	}

	public void OnChangedItemType(int type)
	{
		Dropdown.OptionData optionData = ItemTypeSelector.options[type];
		if (optionData.text == "All")
		{
			ItemFilter = null;
		}
		else
		{
			ItemFilter = optionData.text;
		}
		ForcedRefresh++;
	}

	private void Update()
	{
		if (!Refreshing && ForcedRefresh != StaticRefresh)
		{
			ForcedRefresh = StaticRefresh;
			Refresh();
		}
	}

	public void SwitchToLatest()
	{
		if (ListType != ListType.MostRecent)
		{
			ListType = ListType.MostRecent;
			Page = 1;
			ForcedRefresh++;
		}
	}

	public void SwitchToTrending()
	{
		if (ListType != ListType.Trending)
		{
			ListType = ListType.Trending;
			Page = 1;
			ForcedRefresh++;
		}
	}

	public void SwitchToPopular()
	{
		if (ListType != ListType.MostPopular)
		{
			ListType = ListType.MostPopular;
			Page = 1;
			ForcedRefresh++;
		}
	}

	public void SwitchToAccepted()
	{
		if (ListType != ListType.Accepted)
		{
			ListType = ListType.Accepted;
			Page = 1;
			ForcedRefresh++;
		}
	}

	public async Task Refresh()
	{
		if (Refreshing)
		{
			return;
		}
		Refreshing = true;
		Page = Mathf.Clamp(Page, 1, NumPages);
		while (Container.transform.childCount > 0)
		{
			Object.DestroyImmediate(Container.transform.GetChild(0).gameObject);
		}
		Query query = Query.All.MatchAllTags();
		if (!string.IsNullOrEmpty(ItemFilter))
		{
			query = query.WithTag(ItemFilter);
		}
		switch (ListType)
		{
		case ListType.MyItems:
			query = query.WhereUserPublished();
			break;
		case ListType.MostRecent:
			query = query.RankedByPublicationDate().WithTag("Version3");
			break;
		case ListType.MostPopular:
			query = query.RankedByTrend().WithTrendDays(30).WithTag("Version3");
			break;
		case ListType.Trending:
			query = query.RankedByTrend().WithTrendDays(7).WithTag("Version3");
			break;
		case ListType.Accepted:
			query = query.RankedByAcceptanceDate().WithTag("Version3");
			break;
		}
		if (PageInfo != null)
		{
			PageInfo.text = "UPDATING";
		}
		ResultPage? resultPage = await query.GetPageAsync(Page);
		if (resultPage.HasValue)
		{
			TotalResults = resultPage.Value.TotalCount;
			Item[] array = resultPage.Value.Entries.ToArray();
			if (ListType == ListType.MyItems)
			{
				array = array.OrderByDescending((Item x) => x.Updated).ToArray();
			}
			Item[] array2 = array;
			foreach (Item item in array2)
			{
				GameObject obj = Object.Instantiate(ButtonPrefab.gameObject);
				obj.transform.SetParent(Container.transform, worldPositionStays: false);
				obj.GetComponent<WorkshopItemButton>().Init(new SteamWorkshopContent(item));
			}
			if (PageInfo != null)
			{
				PageInfo.text = $"Page {Page} of {NumPages}";
			}
		}
		Refreshing = false;
	}
}
